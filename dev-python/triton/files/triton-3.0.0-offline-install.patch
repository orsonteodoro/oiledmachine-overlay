diff '--color=auto' -urp triton-764d4432cf422ea24f5e2942fa480270568be9bc.orig/python/setup.py triton-764d4432cf422ea24f5e2942fa480270568be9bc/python/setup.py
--- triton-764d4432cf422ea24f5e2942fa480270568be9bc.orig/python/setup.py	2024-08-07 15:55:44.037245001 -0700
+++ triton-764d4432cf422ea24f5e2942fa480270568be9bc/python/setup.py	2024-08-07 15:56:54.864048040 -0700
@@ -276,7 +276,8 @@ class CMakeBuild(build_ext):
             raise RuntimeError("Could not find user home directory")
         triton_cache_path = os.path.join(user_home, ".triton")
         # lit is used by the test suite
-        thirdparty_cmake_args = get_thirdparty_packages(triton_cache_path)
+        if not os.environ['OFFLINE_INSTALL']:
+            thirdparty_cmake_args = get_thirdparty_packages(triton_cache_path)
         extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.path)))
         # create build directories
         if not os.path.exists(self.build_temp):
@@ -334,8 +335,18 @@ class CMakeBuild(build_ext):
         
         if lit_dir is not None:
             cmake_args.append("-DLLVM_EXTERNAL_LIT=" + lit_dir)
-        cmake_args.extend(thirdparty_cmake_args)
 
+        if os.environ['OFFLINE_INSTALL']:
+            cmake_args += [
+                "-DPYBIND11_INCLUDE_DIR=" + os.environ['PYBIND11_INCLUDE_DIR'],
+                "-DPYBIND11_SYSPATH=" + os.environ['PYBIND11_SYSPATH'],
+                "-DLLVM_INCLUDE_DIRS=" + os.environ['LLVM_INCLUDE_DIRS'],
+                "-DLLVM_LIBRARY_DIR=" + os.environ['LLVM_LIBRARY_DIR'],
+                "-DLLVM_SYSPATH=" + os.environ['LLVM_SYSPATH'],
+            ]
+        else:
+            cmake_args.extend(thirdparty_cmake_args)
+        
         # configuration
         cfg = get_build_type()
         build_args = ["--config", cfg]
@@ -392,27 +403,28 @@ class CMakeBuild(build_ext):
         subprocess.check_call(["cmake", "--build", ".", "--target", "mlir-doc"], cwd=cmake_dir)
 
 
-download_and_copy(
-    src_path="bin/ptxas",
-    variable="TRITON_PTXAS_PATH",
-    version="12.3.52",
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-nvcc/12.3.52/download/linux-{arch}/cuda-nvcc-{version}-0.tar.bz2",
-)
-download_and_copy(
-    src_path="bin/cuobjdump",
-    variable="TRITON_CUOBJDUMP_PATH",
-    version="12.3.52",
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-cuobjdump/12.3.52/download/linux-{arch}/cuda-cuobjdump-{version}-0.tar.bz2",
-)
-download_and_copy(
-    src_path="bin/nvdisasm",
-    variable="TRITON_NVDISASM_PATH",
-    version="12.3.52",
-    url_func=lambda arch, version:
-    f"https://anaconda.org/nvidia/cuda-nvdisasm/12.3.52/download/linux-{arch}/cuda-nvdisasm-{version}-0.tar.bz2",
-)
+if not os.environ['OFFLINE_INSTALL']:
+    download_and_copy(
+        src_path="bin/ptxas",
+        variable="TRITON_PTXAS_PATH",
+        version="12.3.52",
+        url_func=lambda arch, version:
+        f"https://anaconda.org/nvidia/cuda-nvcc/12.3.52/download/linux-{arch}/cuda-nvcc-{version}-0.tar.bz2",
+    )
+    download_and_copy(
+        src_path="bin/cuobjdump",
+        variable="TRITON_CUOBJDUMP_PATH",
+        version="12.3.52",
+        url_func=lambda arch, version:
+        f"https://anaconda.org/nvidia/cuda-cuobjdump/12.3.52/download/linux-{arch}/cuda-cuobjdump-{version}-0.tar.bz2",
+    )
+    download_and_copy(
+        src_path="bin/nvdisasm",
+        variable="TRITON_NVDISASM_PATH",
+        version="12.3.52",
+        url_func=lambda arch, version:
+        f"https://anaconda.org/nvidia/cuda-nvdisasm/12.3.52/download/linux-{arch}/cuda-nvdisasm-{version}-0.tar.bz2",
+    )
 backends = _copy_backends(["nvidia", "amd"])
 
 package_data = dict()
Only in triton-764d4432cf422ea24f5e2942fa480270568be9bc/python: setup.py.orig
Only in triton-764d4432cf422ea24f5e2942fa480270568be9bc/python: setup.py.rej
