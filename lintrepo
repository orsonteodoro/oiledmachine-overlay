# This is this repository's linter script.  All it does it check for errors and potential risky
# habits.  It's for pre-emerge quality control purposes.  It will not guarantee that a ebuild
# will install or work without problems.

CI=${CI:=0}
VERBOSE=${VERBOSE:=0}
GREP_ARGS=-q
if [[ ${@} =~ (-v|--verbose) ]]; then
	VERBOSE=1
	GREP_ARGS=
fi

einfo() {
#	echo "${1}" | fold -s -80
	echo "${1}"
#	echo ""
}

if grep --help | grep -Fq -e "--perl-regexp" ; then
	:;
else
	einfo "You need grep compiled with Perl regular expressions."
	return 1
fi

if ! which shellcheck 2>/dev/null 1>/dev/null ; then
	einfo "You need to install shellcheck to check ebuilds as bash scripts."
	return 1
fi

if ! which xmllint 2>/dev/null 1>/dev/null ; then
	einfo "You need to install xmllint to check metadata.xml."
	return 1
fi

if ! which pcregrep 2>/dev/null 1>/dev/null ; then
	einfo "You need to install libpcre"
fi

einfo "Checking ebuilds for security risks.  (This can yield false positives.)"
for f in $(find $(pwd) -name "*.ebuild") ; do
	if grep ${GREP_ARGS} -r -e "SLOT=\"0\"" "${f}" 2>/dev/null 1>/dev/null ; then
		if [[ ${f} =~ ("-libs/"|"-gfx/"|dev-cpp|dev-qt|dev-db) ]] ;then
			# It happens when copy pasting ebuild templates from apps to libs.  Apps can use SLOT=0, but libraries should have a variable in subslot.
			# USE="static-libs" PackageA:0 # insecure
			# USE="static-libs" PackageB:0/${PV} # precautiously-secure for dependent because subslot changes trigger updates
			einfo "Security risk:  ${f} does not trigger update for dependent with static-libs security updates.  SR1"
		fi
	fi

	# It happens when = slot operator is not explicitly used.  The dependent using the package as a static-libs will not receive a security update.
	# PackageA[static-libs] -> PackageB  ## insecure pattern
	# PackageA:=[static-libs] -> PackageB ## secure pattern
	if grep ${GREP_ARGS} -P -r -e '(?<!=)\[static-libs' "${f}" 2>/dev/null 1>/dev/null ; then
		einfo "Security risk:  ${f} ignores security update for subslot.  SR2"
	fi
	if grep ${GREP_ARGS} -P -r -e '(?<!=)\[.*static-libs,' "${f}" 2>/dev/null 1>/dev/null ; then
		einfo "Security risk:  ${f} ignores security update for subslot.  SR3"
	fi
	if grep ${GREP_ARGS} -P -r -e '(?<!=)\[.*static-libs\]' "${f}" 2>/dev/null 1>/dev/null ; then
		einfo "Security risk:  ${f} ignores security update for subslot.  SR4"
	fi
	if grep ${GREP_ARGS} -F -r -e '(fperms|chmod)' "${f}" 2>/dev/null 1>/dev/null \
		&& grep ${GREP_ARGS} -P -r -e '[0]?77[0-7]' "${f}" 2>/dev/null 1>/dev/null ; then
		einfo \
"Security risk:  ${f} may use insecure permissions.  Users may inject \
malicious scripts or exfiltrate data in multiuser environment when file uses \
777 or 77x.  When file permission is 777, it is dangerous.  For 77x it is \
only dangerous if the group is \`user\` or similar.  SR5"
	fi
	if grep ${GREP_ARGS} -P -r -e 'cp.*(-a|-r|-R|--recursive|--archive)' "${f}" 2>/dev/null 1>/dev/null ; then
		einfo \
"Security risk:  ${f} files possibly bypass sanitation to reset ownership and \
file permissions.  An upstream developer may inadvertantly elevate \
permissions or forget to reset it.  Use ebuild install functions only or special \
wrapper install function.  SR6"
	fi
done

# SC2076: Don't quote right-hand side of =~
# SC2148 -- shebang
# SC2068: Double quote array expansions to avoid re-splitting elements.

einfo "Checking ebuilds for syntax errors.  (This can yield false positives.)"
for f in $(find $(pwd) -name "*.ebuild") ; do
	if [[ "${CI}" == "1" ]] ; then
		shellcheck -e SC2148,SC2076,SC2068 -S error "${f}" 2>/dev/null 1>/dev/null
	elif [[ "${VERBOSE}" == "1" ]] ; then
		shellcheck -e SC2148,SC2076,SC2068 -S error "${f}" || einfo "Syntax problems in ${f}"
	else
		shellcheck -e SC2148,SC2076,SC2068 -S error "${f}" 2>/dev/null 1>/dev/null || einfo "Syntax problems in ${f}"
	fi

	if grep ${GREP_ARGS} -F -e '$(use ' "${f}" ; then
		einfo "Possible USE flag error \`use\` might need to be changed to \`usex\` in src_configure or when used as inline if-else.  See ${f}"
	fi
done

einfo "Checking repo for missing metadata.xml"
for f in $(find $(pwd) -name "*.ebuild") ; do
	d=$(dirname ${f})
	if [[ ! -f ${d}/metadata.xml ]] ; then
		einfo "Missing metadata.xml in ${d}"
		if [[ "${CI}" == "1" ]] ; then
			return 1
		fi
	fi
done

einfo "Checking repo for missing/incomplete LICENSE in ebuild"
for f in $(find $(pwd) -name "*.ebuild") ; do
	d=$(dirname ${f})
	if ! grep ${GREP_ARGS} -F -e "LICENSE=" "${f}" ; then
		einfo "Missing LICENSE= in ${f}"
		if [[ "${CI}" == "1" ]] ; then
			return 1
		fi
	fi
	if grep ${GREP_ARGS} -F -e "LICENSE=\"\"" "${f}" ; then
		einfo "Empty LICENSE=\"\" in ${f}"
		if [[ "${CI}" == "1" ]] ; then
			return 1
		fi
	fi
done

einfo "Checking repo for deprecated/EOL python use"
for f in $(find $(pwd) -name "*.ebuild") ; do
	if grep ${GREP_ARGS} -P -e "PYTHON_COMPAT=.*(python2|python2_|python\{.*2_.*\}).*" "${f}" ; then
		einfo "Please edit ${f} and remove python2_x from PYTHON_COMPAT"
		if [[ "${CI}" == "1" ]] ; then
			return 1
		fi
	fi
	if grep ${GREP_ARGS} -P -e "PYTHON_COMPAT=.*(python3_4|python\{.*3_4.*\}|python3\{.*_4.*\}).*" "${f}" ; then
		einfo "Please edit ${f} and remove python3_4 from PYTHON_COMPAT"
		if [[ "${CI}" == "1" ]] ; then
			return 1
		fi
	fi
	if grep ${GREP_ARGS} -P -e "PYTHON_COMPAT=.*(python3_5|python\{.*3_5.*\}|python3\{.*_5.*\}).*" "${f}" ; then
		einfo "Please edit ${f} and remove python3_5 from PYTHON_COMPAT"
		if [[ "${CI}" == "1" ]] ; then
			return 1
		fi
	fi
done

einfo "Checking metadata.xml for syntax errors."
for f in $(find $(pwd) -name "metadata.xml") ; do
	if [[ "${CI}" == "1" ]] ; then
		xmllint "${f}" 2>/dev/null 1>/dev/null
	elif [[ "${VERBOSE}" == "1" ]] ; then
		xmllint "${f}" || einfo "Syntax problems in ${f}"
	else
		xmllint "${f}" 2>/dev/null 1>/dev/null || einfo "Syntax problems in ${f}"
	fi
done

if [[ "${VERBOSE}" == "1" ]] ; then
einfo "Checking repo for trash directories"
for d in $(find $(pwd) -name ".trash*" -type d) ; do
	einfo "Found ${d}"
done
fi

einfo "Checking files with > 80 characters for GitHub code reviewers or for packagers"
for f in $(find $(pwd) -name "*.ebuild" -o -name "metadata.xml") ; do
	if pcregrep -q -r -M '^.{80}.+\n' "${f}" ; then
		einfo "Found ${f}"
	fi
done

einfo "Checking repo for newicon .ico use ebuild"
for f in $(find $(pwd) -name "*.ebuild") ; do
	if grep -qP -i -e "newicon.*\.(png|svg|xpm)" "${f}" ; then
		:;
	elif grep -qP -e "newicon" "${f}" ; then
		einfo "${f} uses wrong format for icon.  Not one of the official XDG icon formats for Linux desktop interoperability.  Use either png, svg, or xpm only."
	fi
done
