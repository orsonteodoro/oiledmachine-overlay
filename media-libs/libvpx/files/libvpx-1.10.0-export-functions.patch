Export headers for plain CFI with static linking vpx with ffmpeg.

License header for
vpx/vp8cx.h:
vpx/vp8dx.h:
vpx/vpx_codec.h:
vpx/vpx_decoder.h:
vpx/vpx_encoder.h:
vpx/vpx_image.h:

/*
 *  Copyright (c) 2010 The WebM project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 */

diff -urp libvpx-1.10.0.orig/vpx/vp8cx.h libvpx-1.10.0/vpx/vp8cx.h
--- libvpx-1.10.0.orig/vpx/vp8cx.h	2021-03-18 12:59:46.000000000 -0700
+++ libvpx-1.10.0/vpx/vp8cx.h	2021-10-11 13:05:20.752603919 -0700
@@ -28,12 +28,16 @@
 extern "C" {
 #endif
 
+#define VPX_EXPORT __attribute__ ((visibility ("default")))
+
 /*!\name Algorithm interface for VP8
  *
  * This interface provides the capability to encode raw VP8 streams.
  * @{
  */
+VPX_EXPORT
 extern vpx_codec_iface_t vpx_codec_vp8_cx_algo;
+VPX_EXPORT
 extern vpx_codec_iface_t *vpx_codec_vp8_cx(void);
 /*!@} - end algorithm interface member group*/
 
@@ -42,7 +46,9 @@ extern vpx_codec_iface_t *vpx_codec_vp8_
  * This interface provides the capability to encode raw VP9 streams.
  * @{
  */
+VPX_EXPORT
 extern vpx_codec_iface_t vpx_codec_vp9_cx_algo;
+VPX_EXPORT
 extern vpx_codec_iface_t *vpx_codec_vp9_cx(void);
 /*!@} - end algorithm interface member group*/
 
diff -urp libvpx-1.10.0.orig/vpx/vp8dx.h libvpx-1.10.0/vpx/vp8dx.h
--- libvpx-1.10.0.orig/vpx/vp8dx.h	2021-03-18 12:59:46.000000000 -0700
+++ libvpx-1.10.0/vpx/vp8dx.h	2021-10-11 13:05:18.368603841 -0700
@@ -27,12 +27,16 @@ extern "C" {
 /* Include controls common to both the encoder and decoder */
 #include "./vp8.h"
 
+#define VPX_EXPORT __attribute__ ((visibility ("default")))
+
 /*!\name Algorithm interface for VP8
  *
  * This interface provides the capability to decode VP8 streams.
  * @{
  */
+VPX_EXPORT
 extern vpx_codec_iface_t vpx_codec_vp8_dx_algo;
+VPX_EXPORT
 extern vpx_codec_iface_t *vpx_codec_vp8_dx(void);
 /*!@} - end algorithm interface member group*/
 
@@ -41,7 +45,9 @@ extern vpx_codec_iface_t *vpx_codec_vp8_
  * This interface provides the capability to decode VP9 streams.
  * @{
  */
+VPX_EXPORT
 extern vpx_codec_iface_t vpx_codec_vp9_dx_algo;
+VPX_EXPORT
 extern vpx_codec_iface_t *vpx_codec_vp9_dx(void);
 /*!@} - end algorithm interface member group*/
 
diff -urp libvpx-1.10.0.orig/vpx/vpx_codec.h libvpx-1.10.0/vpx/vpx_codec.h
--- libvpx-1.10.0.orig/vpx/vpx_codec.h	2021-03-18 12:59:46.000000000 -0700
+++ libvpx-1.10.0/vpx/vpx_codec.h	2021-10-11 12:57:41.240588777 -0700
@@ -48,6 +48,8 @@ extern "C" {
 #include "./vpx_image.h"
 #include "./vpx_integer.h"
 
+#define VPX_EXPORT __attribute__ ((visibility ("default")))
+
 /*!\brief Decorator indicating a function is deprecated */
 #ifndef VPX_DEPRECATED
 #if defined(__GNUC__) && __GNUC__
@@ -242,6 +244,7 @@ typedef enum vpx_bit_depth {
  * in the future.
  *
  */
+VPX_EXPORT
 int vpx_codec_version(void);
 #define VPX_VERSION_MAJOR(v) \
   (((v) >> 16) & 0xff) /**< extract major from packed version */
@@ -268,6 +271,7 @@ int vpx_codec_version(void);
  * release candidates, prerelease versions, etc.
  *
  */
+VPX_EXPORT
 const char *vpx_codec_version_str(void);
 
 /*!\brief Return the version information (as a string)
@@ -277,6 +281,7 @@ const char *vpx_codec_version_str(void);
  * by vpx_codec_version_str() following the three digit version number.
  *
  */
+VPX_EXPORT
 const char *vpx_codec_version_extra_str(void);
 
 /*!\brief Return the build configuration
@@ -285,6 +290,7 @@ const char *vpx_codec_version_extra_str(
  * configuration. This may be useful to vpx support.
  *
  */
+VPX_EXPORT
 const char *vpx_codec_build_config(void);
 
 /*!\brief Return the name for a given interface
@@ -294,6 +300,7 @@ const char *vpx_codec_build_config(void)
  * \param[in]    iface     Interface pointer
  *
  */
+VPX_EXPORT
 const char *vpx_codec_iface_name(vpx_codec_iface_t *iface);
 
 /*!\brief Convert error number to printable string
@@ -306,6 +313,7 @@ const char *vpx_codec_iface_name(vpx_cod
  * \param[in]    err     Error number.
  *
  */
+VPX_EXPORT
 const char *vpx_codec_err_to_string(vpx_codec_err_t err);
 
 /*!\brief Retrieve error synopsis for codec context
@@ -318,6 +326,7 @@ const char *vpx_codec_err_to_string(vpx_
  * \param[in]    ctx     Pointer to this instance's context.
  *
  */
+VPX_EXPORT
 const char *vpx_codec_error(vpx_codec_ctx_t *ctx);
 
 /*!\brief Retrieve detailed error information for codec context
@@ -330,6 +339,7 @@ const char *vpx_codec_error(vpx_codec_ct
  * \retval NULL
  *     No detailed information is available.
  */
+VPX_EXPORT
 const char *vpx_codec_error_detail(vpx_codec_ctx_t *ctx);
 
 /* REQUIRED FUNCTIONS
@@ -349,6 +359,7 @@ const char *vpx_codec_error_detail(vpx_c
  * \retval #VPX_CODEC_MEM_ERROR
  *     Memory allocation failed.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_destroy(vpx_codec_ctx_t *ctx);
 
 /*!\brief Get the capabilities of an algorithm.
@@ -358,6 +369,7 @@ vpx_codec_err_t vpx_codec_destroy(vpx_co
  * \param[in] iface   Pointer to the algorithm interface
  *
  */
+VPX_EXPORT
 vpx_codec_caps_t vpx_codec_get_caps(vpx_codec_iface_t *iface);
 
 /*!\brief Control algorithm
@@ -384,6 +396,7 @@ vpx_codec_caps_t vpx_codec_get_caps(vpx_
  * \retval #VPX_CODEC_INVALID_PARAM
  *     The data was not valid.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_control_(vpx_codec_ctx_t *ctx, int ctrl_id, ...);
 #if defined(VPX_DISABLE_CTRL_TYPECHECKS) && VPX_DISABLE_CTRL_TYPECHECKS
 #define vpx_codec_control(ctx, id, data) vpx_codec_control_(ctx, id, data)
diff -urp libvpx-1.10.0.orig/vpx/vpx_decoder.h libvpx-1.10.0/vpx/vpx_decoder.h
--- libvpx-1.10.0.orig/vpx/vpx_decoder.h	2021-03-18 12:59:46.000000000 -0700
+++ libvpx-1.10.0/vpx/vpx_decoder.h	2021-10-11 12:57:39.656588725 -0700
@@ -131,6 +131,7 @@ typedef struct vpx_codec_dec_cfg {
  * \retval #VPX_CODEC_MEM_ERROR
  *     Memory allocation failed.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_dec_init_ver(vpx_codec_ctx_t *ctx,
                                        vpx_codec_iface_t *iface,
                                        const vpx_codec_dec_cfg_t *cfg,
@@ -160,6 +161,7 @@ vpx_codec_err_t vpx_codec_dec_init_ver(v
  * \retval #VPX_CODEC_OK
  *     Bitstream is parsable and stream information updated
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_peek_stream_info(vpx_codec_iface_t *iface,
                                            const uint8_t *data,
                                            unsigned int data_sz,
@@ -178,6 +180,7 @@ vpx_codec_err_t vpx_codec_peek_stream_in
  * \retval #VPX_CODEC_OK
  *     Bitstream is parsable and stream information updated
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_get_stream_info(vpx_codec_ctx_t *ctx,
                                           vpx_codec_stream_info_t *si);
 
@@ -211,6 +214,7 @@ vpx_codec_err_t vpx_codec_get_stream_inf
  *         see the descriptions of the other error codes in ::vpx_codec_err_t
  *         for recoverability capabilities.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_decode(vpx_codec_ctx_t *ctx, const uint8_t *data,
                                  unsigned int data_sz, void *user_priv,
                                  long deadline);
@@ -231,6 +235,7 @@ vpx_codec_err_t vpx_codec_decode(vpx_cod
  * \return Returns a pointer to an image, if one is ready for display. Frames
  *         produced will always be in PTS (presentation time stamp) order.
  */
+VPX_EXPORT
 vpx_image_t *vpx_codec_get_frame(vpx_codec_ctx_t *ctx, vpx_codec_iter_t *iter);
 
 /*!\defgroup cap_put_frame Frame-Based Decoding Functions
@@ -266,6 +271,7 @@ typedef void (*vpx_codec_put_frame_cb_fn
  * \retval #VPX_CODEC_INCAPABLE
  *     Algorithm not capable of posting frame completion.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_register_put_frame_cb(vpx_codec_ctx_t *ctx,
                                                 vpx_codec_put_frame_cb_fn_t cb,
                                                 void *user_priv);
@@ -307,6 +313,7 @@ typedef void (*vpx_codec_put_slice_cb_fn
  * \retval #VPX_CODEC_INCAPABLE
  *     Algorithm not capable of posting slice completion.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_register_put_slice_cb(vpx_codec_ctx_t *ctx,
                                                 vpx_codec_put_slice_cb_fn_t cb,
                                                 void *user_priv);
@@ -352,6 +359,7 @@ vpx_codec_err_t vpx_codec_register_put_s
  * #VP9_MAXIMUM_REF_BUFFERS + #VPX_MAXIMUM_WORK_BUFFERS external frame
  * buffers.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_set_frame_buffer_functions(
     vpx_codec_ctx_t *ctx, vpx_get_frame_buffer_cb_fn_t cb_get,
     vpx_release_frame_buffer_cb_fn_t cb_release, void *cb_priv);
diff -urp libvpx-1.10.0.orig/vpx/vpx_encoder.h libvpx-1.10.0/vpx/vpx_encoder.h
--- libvpx-1.10.0.orig/vpx/vpx_encoder.h	2021-03-18 12:59:46.000000000 -0700
+++ libvpx-1.10.0/vpx/vpx_encoder.h	2021-10-11 12:57:40.409588750 -0700
@@ -732,6 +732,7 @@ typedef struct vpx_svc_parameters {
  * \retval #VPX_CODEC_MEM_ERROR
  *     Memory allocation failed.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_enc_init_ver(vpx_codec_ctx_t *ctx,
                                        vpx_codec_iface_t *iface,
                                        const vpx_codec_enc_cfg_t *cfg,
@@ -764,6 +765,7 @@ vpx_codec_err_t vpx_codec_enc_init_ver(v
  * \retval #VPX_CODEC_MEM_ERROR
  *     Memory allocation failed.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_enc_init_multi_ver(
     vpx_codec_ctx_t *ctx, vpx_codec_iface_t *iface, vpx_codec_enc_cfg_t *cfg,
     int num_enc, vpx_codec_flags_t flags, vpx_rational_t *dsf, int ver);
@@ -795,6 +797,7 @@ vpx_codec_err_t vpx_codec_enc_init_multi
  * \retval #VPX_CODEC_INVALID_PARAM
  *     A parameter was NULL, or the usage value was not recognized.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_enc_config_default(vpx_codec_iface_t *iface,
                                              vpx_codec_enc_cfg_t *cfg,
                                              unsigned int usage);
@@ -813,6 +816,7 @@ vpx_codec_err_t vpx_codec_enc_config_def
  * \retval #VPX_CODEC_INVALID_PARAM
  *     A parameter was NULL, or the usage value was not recognized.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_enc_config_set(vpx_codec_ctx_t *ctx,
                                          const vpx_codec_enc_cfg_t *cfg);
 
@@ -827,6 +831,7 @@ vpx_codec_err_t vpx_codec_enc_config_set
  * \retval Non-NULL
  *     Pointer to buffer containing global header packet
  */
+VPX_EXPORT
 vpx_fixed_buf_t *vpx_codec_get_global_headers(vpx_codec_ctx_t *ctx);
 
 /*!\brief deadline parameter analogous to VPx REALTIME mode. */
@@ -871,6 +876,7 @@ vpx_fixed_buf_t *vpx_codec_get_global_he
  * \retval #VPX_CODEC_INVALID_PARAM
  *     A parameter was NULL, the image format is unsupported, etc.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_encode(vpx_codec_ctx_t *ctx, const vpx_image_t *img,
                                  vpx_codec_pts_t pts, unsigned long duration,
                                  vpx_enc_frame_flags_t flags,
@@ -919,6 +925,7 @@ vpx_codec_err_t vpx_codec_encode(vpx_cod
  * \retval #VPX_CODEC_INVALID_PARAM
  *     A parameter was NULL, the image format is unsupported, etc.
  */
+VPX_EXPORT
 vpx_codec_err_t vpx_codec_set_cx_data_buf(vpx_codec_ctx_t *ctx,
                                           const vpx_fixed_buf_t *buf,
                                           unsigned int pad_before,
@@ -947,6 +954,7 @@ vpx_codec_err_t vpx_codec_set_cx_data_bu
  *         two-pass statistics, etc.) or NULL to signal end-of-list.
  *
  */
+VPX_EXPORT
 const vpx_codec_cx_pkt_t *vpx_codec_get_cx_data(vpx_codec_ctx_t *ctx,
                                                 vpx_codec_iter_t *iter);
 
@@ -962,6 +970,7 @@ const vpx_codec_cx_pkt_t *vpx_codec_get_
  *         available.
  *
  */
+VPX_EXPORT
 const vpx_image_t *vpx_codec_get_preview_frame(vpx_codec_ctx_t *ctx);
 
 /*!@} - end defgroup encoder*/
diff -urp libvpx-1.10.0.orig/vpx/vpx_image.h libvpx-1.10.0/vpx/vpx_image.h
--- libvpx-1.10.0.orig/vpx/vpx_image.h	2021-03-18 12:59:46.000000000 -0700
+++ libvpx-1.10.0/vpx/vpx_image.h	2021-10-11 12:59:14.355591846 -0700
@@ -19,6 +19,8 @@
 extern "C" {
 #endif
 
+#define VPX_EXPORT __attribute__ ((visibility ("default")))
+
 /*!\brief Current ABI version number
  *
  * \internal
@@ -141,6 +143,7 @@ typedef struct vpx_image_rect {
  *         parameter is non-null, the value of the img parameter will be
  *         returned.
  */
+VPX_EXPORT
 vpx_image_t *vpx_img_alloc(vpx_image_t *img, vpx_img_fmt_t fmt,
                            unsigned int d_w, unsigned int d_h,
                            unsigned int align);
@@ -164,6 +167,7 @@ vpx_image_t *vpx_img_alloc(vpx_image_t *
  *         parameter is non-null, the value of the img parameter will be
  *         returned.
  */
+VPX_EXPORT
 vpx_image_t *vpx_img_wrap(vpx_image_t *img, vpx_img_fmt_t fmt, unsigned int d_w,
                           unsigned int d_h, unsigned int stride_align,
                           unsigned char *img_data);
@@ -181,6 +185,7 @@ vpx_image_t *vpx_img_wrap(vpx_image_t *i
  *
  * \return 0 if the requested rectangle is valid, nonzero otherwise.
  */
+VPX_EXPORT
 int vpx_img_set_rect(vpx_image_t *img, unsigned int x, unsigned int y,
                      unsigned int w, unsigned int h);
 
@@ -191,6 +196,7 @@ int vpx_img_set_rect(vpx_image_t *img, u
  *
  * \param[in]    img       Image descriptor
  */
+VPX_EXPORT
 void vpx_img_flip(vpx_image_t *img);
 
 /*!\brief Close an image descriptor
@@ -199,6 +205,7 @@ void vpx_img_flip(vpx_image_t *img);
  *
  * \param[in]    img       Image descriptor
  */
+VPX_EXPORT
 void vpx_img_free(vpx_image_t *img);
 
 #ifdef __cplusplus
