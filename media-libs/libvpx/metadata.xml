<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="project">
    <!-- only for this ebuild fork on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originators -->
    <email>media-video@gentoo.org</email>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originators -->
    <email>chromium@gentoo.org</email>
    <name>Chromium in Gentoo Project</name>
  </maintainer>
  <longdescription>
    This ebuild fork will allow use of PGO for this library.
    Currently it only optimizes the default settings, but may be PGO
    optimized for multithreaded through the custom trainer or changing
    the LIBVPX_VP8_TRAINING_ARGS or LIBVPX_VP9_TRAINING_ARGS
    explained at the end of this description.  To do 32-bit PGO training,
    you need the modified FFmpeg ebuild from the oiledmachine overlay or
    your own forked ebuild that will not clobber the 32-bit installation
    with just the native.  The expected names of the binary should be
    ffmpeg-x86 or ffmpeg-${ABI}.  The trainer will generate PGO data for
    both encoding and decoding that will be fed back into the optimized
    version.

    PGOing this package requires the following packages before running
    the trainer:

      media-video/ffmpeg[encode,vpx]

    So the following steps must be taken.
    (1) Build this library first.
    (2) Build the trainer toolchain depending on this library corresponding
        to the package and USE flags above.
    (3) Acquire a video that is either CC0-1.0, public domain, or your own
        personal video asset is at least 3 seconds long.
    (4a) Set LIBVPX_TRAINING_VIDEO_i, replacing i with an unpadded number, as
        a per-package environment variable with the absolute path to the
        asset.
    (4b) Set LIBVPX_VP8_TRAINING_ARGS,
	LIBVPX_VP9_TRAINING_ARGS,
	LIBVPX_VP8_TRAINING_ARGS_LOSSLESS,
	LIBVPX_VP9_TRAINING_ARGS_LOSSLESS,
         see below for details.
    (5) Re-emerge this package with the pgo USE flag enabled.

    The LIBVPX_ASSET_LIMIT can be use to lift the asset limits for PGO
    training.  Currently it is set at 100.

    A user may supply a custom.sh via a per-package patch to set up multiple
    encoding settings which may include threading or tiling configurations
    or favorite quality setting.  See the ebuild for the FFmpeg template
    in the ebuild which could be extended with different args and placed
    in your custom.sh file.  Consider adding more generation rules that
    include the desired the pixel format that follows your typical use
    pattern.  Consider also extending it with your live streaming settings.

    You may supply a LIBVPX_VP8_TRAINING_ARGS and/or
    LIBVPX_VP9_TRAINING_ARGS as a per package environment variable to tell
    ffmpeg which multicore, multithreading, tiling settings to use as the default.
    It must be a string.  Example

      LIBVPX_VP8_TRAINING_ARGS=" -threads 8"
      LIBVPX_VP9_TRAINING_ARGS=" -tile-columns 2 -tile-rows 2 -threads 8"

    For a full list see `ffmpeg -h full | less`

    The LIBVPX_VP8_TRAINING_ARGS_LOSSLESS and
    LIBVPX_VP9_TRAINING_ARGS_LOSSLESS are only allowed to adjust
    performance options but not any changes in quality.  Also, these
    settings are not allowed to modify the dimensions or drop frames.

    It is only recommended to use trainers that reflect your own personal
    typical use.  Using trainers with non-typical use patterns may degrade
    performance.

    Additional environment variables

    LIBVPX_TRAINING_BPP_MAX - The maximum bits per pixel corresponding to motion.
			 The typical is 0.15, but the default is 0.10
    LIBVPX_TRAINING_BPP_MAX - The minimum bits per pixel corresponding to stationary.
			 The defualt is 0.05.

    For custom training details, see README.md of this overlay.

  </longdescription>
  <use>
    <flag name="chromium">
      Prevent symbol conflicts in the browser(testing)
    </flag>
    <flag name="highbitdepth">
      Enable 10 and 12 bit support for VP9.
    </flag>
    <flag name="pgo">
      Use profile guided optimization.
    </flag>
    <flag name="trainer-2-pass-constrained-quality">
      Performs an addtional 2 pass training.  Two pass improves quality
      and rate control.  This step can be skipped for live streamers.
    </flag>
    <flag name="trainer-constrained-quality">
      Use the 1 pass constrained quality trainer.  (ebuild
      maintainer recommended)
    </flag>
    <flag name="trainer-lossless">
      Use the lossless trainer.
    </flag>
    <flag name="postproc">
      Enable additional post processing filters
    </flag>
    <flag name="svc">Enable spatial-svc support (experimental)</flag>
  </use>
  <upstream>
    <remote-id type="cpe">cpe:/a:john_koleszar:libvpx</remote-id>
  </upstream>
</pkgmetadata>
