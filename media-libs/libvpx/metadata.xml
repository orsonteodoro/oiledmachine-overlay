<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="project">
    <!-- only for this ebuild fork on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originators -->
    <email>media-video@gentoo.org</email>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originators -->
    <email>chromium@gentoo.org</email>
    <name>Chromium in Gentoo Project</name>
  </maintainer>
  <longdescription>
    This ebuild fork will allow use of PGO for this library.  Currently it only
    optimizes the default settings, but may be PGO optimized for multithreaded
    through the custom trainer or changing the LIBVPX_TRAINING_VP8_ARGS or
    LIBVPX_TRAINING_VP9_ARGS explained at the end of this description.  To do
    32-bit PGO training, you need the modified FFmpeg ebuild from the
    oiledmachine overlay or your own forked ebuild that will not clobber the
    32-bit installation with just the native.  The expected names of the binary
    should be ffmpeg-x86 or ffmpeg-${ABI}.  The trainer will generate PGO data
    for both encoding and decoding that will be fed back into the optimized
    version.

    PGOing this package requires the following packages before running the
    trainer:

      media-video/ffmpeg[encode,vpx]


    The following steps must be taken...

    (1) Build this library first.

    (2) Build the trainer toolchain depending on this library corresponding
        to the package and USE flags above.

    (3) Acquire a video that is either CC0-1.0, public domain, or your own
        personal video asset is at least 5 seconds long.  The choice of
        the asset will decide whether or not a particular chroma subsample
        code paths will be trained.

    (4) Place the video in one of these groups

          LIBVPX_TRAINING_VIDEO_CGI_i        # Computer Generated Imagery
          LIBVPX_TRAINING_VIDEO_GENERAL_i
          LIBVPX_TRAINING_VIDEO_GAMING_i
          LIBVPX_TRAINING_VIDEO_GRAINY_i
          LIBVPX_TRAINING_VIDEO_SCREENCAST_i

        replacing i with an unpadded number, as a per-package environment
        variable with the absolute path to the asset.

    (5) Set...

          LIBVPX_TRAINING_VP8_ARGS,
          LIBVPX_TRAINING_VP9_ARGS,
          LIBVPX_TRAINING_VP8_ARGS_LOSSLESS,
          LIBVPX_TRAINING_VP9_ARGS_LOSSLESS,

        See below for details on how to properly set these values.

    (6) Re-emerge this package with the pgo USE flag enabled.

    The LIBVPX_TRAINING_MAX_ASSETS_PER_TYPE can be use to lift the asset limits
    for PGO training.  Currently it is set at 100.

    A user may supply a custom.sh via a per-package patch to set up multiple
    encoding settings which may include threading or tiling configurations
    or favorite quality setting.  See the ebuild for the FFmpeg template
    in the ebuild which could be extended with different args and placed
    in your custom.sh file.  Consider adding more generation rules that
    include the desired the pixel format that follows your typical use
    pattern.  Consider also extending it with your live streaming settings.

    You may supply a LIBVPX_TRAINING_VP8_ARGS and/or LIBVPX_TRAINING_VP9_ARGS as
    a per package environment variable to tell ffmpeg which multicore,
    multithreading, tiling settings to use as the default.  It must be a string.

    Examples

      LIBVPX_TRAINING_VP8_ARGS=" -threads 8"
      LIBVPX_TRAINING_VP9_ARGS=" -tile-columns 2 -tile-rows 2 -threads 8"

    For a full list see `ffmpeg -h full | less`

    The LIBVPX_TRAINING_VP8_ARGS_LOSSLESS and LIBVPX_TRAINING_VP9_ARGS_LOSSLESS
    are only allowed to adjust performance options but not any changes in
    quality.  Also, these settings are not allowed to modify the dimensions or
    drop frames.

    It is only recommended to use trainers that reflect your own personal
    typical use.  Using trainers with non-typical use patterns may degrade
    performance.


    Custom training resolutions

    Set LIBVPX_TRAINING_CUSTOM_VOD_RESOLUTIONS as a space separated list of
    sublists.  Use LIBVPX_TRAINING_CUSTOM_VOD_RESOLUTIONS_QUICK for the
    quick trainers.

    Sublist format:

      fps;width;height;dynamic_range

    dynamic range - sdr or hdr only
    fps - 30 or 60 only

    Examples

      LIBVPX_TRAINING_CUSTOM_VOD_RESOLUTIONS="30;1280;720;sdr 60;1280;720;sdr"
      LIBVPX_TRAINING_CUSTOM_VOD_RESOLUTIONS_QUICK="30;1280;720;sdr 60;1280;720;sdr"
      LIBVPX_TRAINING_CUSTOM_VOD_RESOLUTIONS_QUICK="30;1920;1080;hdr 60;1920;1080;hdr"

    Setting this will override the defaults which trains all.


    For custom training details, see README.md of this overlay.

  </longdescription>
  <use>
    <flag name="chromium">
      Prevent symbol conflicts in the browser(testing)
    </flag>
    <flag name="highbitdepth">
      Enable 10 and 12 bit support for VP9.
    </flag>
    <flag name="pgo">
      Use profile guided optimization.
    </flag>
    <flag name="trainer-2-pass-constrained-quality">
      Performs an addtional 2 pass training.  Two pass improves quality
      and rate control.  This step can be skipped for live streamers.

      3 second with multiple resolutions.
    </flag>
    <flag name="trainer-2-pass-constrained-quality-quick">
      Performs an addtional 2 pass training.  Two pass improves quality
      and rate control.  This step can be skipped for live streamers.

      1 second with lowest resolution only.

      (Ebuild maintainer recommended for encoding)
    </flag>
    <flag name="trainer-constrained-quality">
      Use the 1 pass constrained quality trainer.  (ebuild
      maintainer recommended)

      3 second with multiple resolutions.
    </flag>
    <flag name="trainer-constrained-quality-quick">
      Use the 1 pass constrained quality trainer.

      1 second with lowest resolution only.

      (Ebuild maintainer recommended for decoding)
    </flag>
    <flag name="trainer-lossless">
      Use the lossless trainer.

      3 second with multiple resolutions.
    </flag>
    <flag name="trainer-lossless-quick">
      Use the lossless trainer.

      1 second with lowest resolutions only.
    </flag>
    <flag name="postproc">
      Enable additional post processing filters
    </flag>
    <flag name="svc">
      Enable spatial-svc support (experimental)
    </flag>
  </use>
</pkgmetadata>
