<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="project">
    <!-- only for this ebuild fork on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originators -->
    <email>media-video@gentoo.org</email>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originators -->
    <email>chromium@gentoo.org</email>
    <name>Chromium in Gentoo Project</name>
  </maintainer>
  <longdescription>
    This ebuild fork will allow use of LTO and PGO for this library.
    Currently it only optimizes the default settings, but may be PGO
    optimized for multithreaded through pgo-custom USE flag or changing
    the LIBVPX_VP8_PGO_TRAINING_ARGS or LIBVPX_VP9_PGO_TRAINING_ARGS
    explained at the end of this description.  Currently only native ABI
    is supported due to lack of 32 bit encoder frontend package.  The
    trainer will generate PGO data for both encoding and decoding that
    will be fed back into the optimized version.

    PGOing this package requires the following packages before running
    the trainer:

      media-video/mpv[cli]
      media-video/ffmpeg[encode,vpx]

    So the following steps must be taken.
    (1) Build this library first.
    (2) Build the trainer toolchain depending on this library corresponding
        to the package and USE flags above.
    (3) Acquire a video that is either CC0-1.0, public domain, or your own
        personal video asset that is 4k, 60 fps, 5 seconds long.
    (4a) Set LIBVPX_PGO_VIDEO as a per-package envvar with the abspath to
        the asset.
    (4b) Set LIBVPX_VP8_PGO_TRAINING_ARGS,
	LIBVPX_VP9_PGO_TRAINING_ARGS,
	LIBVPX_VP8_PGO_TRAINING_ARGS_LOSSLESS,
	LIBVPX_VP9_PGO_TRAINING_ARGS_LOSSLESS,
         see below for details.
    (5) Re-emerge this package with the pgo USE flag enabled.

    For 32-bit PGO, both mpv and ffmpeg should have 32-bit binaries.  The
    paths to those binaries are described in the ebuild.

    A user may supply a custom.sh via a per-package patch to set up multiple
    encoding settings which may include threading or tiling configurations
    or favorite quality setting.  See the ebuild for the FFmpeg template
    in the ebuild which could be extended with different args and placed
    in your custom.sh file.  Consider adding more generation rules that
    include the desired the pixel format that follows your typical use
    pattern.  Consider also extending it with your live streaming settings.

    You may supply a LIBVPX_VP8_PGO_TRAINING_ARGS and/or
    LIBVPX_VP9_PGO_TRAINING_ARGS as a per package envvar to tell ffmpeg
    which multicore, multithreading, tiling settings to use as the default.
    It must be a string.  Example

      LIBVPX_VP8_PGO_TRAINING_ARGS=" -threads 8"
      LIBVPX_VP9_PGO_TRAINING_ARGS=" -tile-columns 2 -tile-rows 2 -threads 8"

    For a full list see `ffmpeg -h full | less`

    The LIBVPX_VP8_PGO_TRAINING_ARGS_LOSSLESS and
    LIBVPX_VP9_PGO_TRAINING_ARGS_LOSSLESS are only allowed to adjust
    performance options but not any changes in quality.  Also, these
    settings are not allowed to modify the dimensions or drop frames.

    It is only recommended to use trainers that reflect your own personal
    typical use.  Using trainers with non-typical use patterns may degrade
    performance.
  </longdescription>
  <use>
    <flag name="cfi">Build with full CFI with all schemes</flag>
    <flag name="cfi-icall">Build with cfi-icall</flag>
    <flag name="cfi-vcall">Build with cfi-vcall</flag>
    <flag name="cfi-cast">Build with cfi-cast</flag>
    <flag name="full-relro">Build with Full RELRO</flag>
    <flag name="highbitdepth">Enable 10 and 12 bit support for VP9.</flag>
    <flag name="libcxx">Link against the more secured libcxx package.</flag>
    <flag name="lto">Use link time optimization.</flag>
    <flag name="noexecstack">Build with noexecstack</flag>
    <flag name="pgo">Use profile guided optimization.</flag>
    <flag name="pgo-custom">Use a custom profile guided optimization script to
      train with.</flag>
    <flag name="pgo-trainer-2-pass-constrained-quality">Performs an addtional
      2 pass training.  Two pass improves quality and rate control.  This step
      can be skipped for live streamers.</flag>
    <flag name="pgo-trainer-constrained-quality">Use the 1 pass constrained
      quality PGO trainer.  (ebuild maintainer recommended)</flag>
    <flag name="pgo-trainer-lossless">Use the lossless PGO trainer.</flag>
    <flag name="postproc">Enable additional post processing filters</flag>
    <flag name="ssp">Build with stack smashing protection</flag>
    <flag name="svc">Enable spatial-svc support (experimental)</flag>
  </use>
  <upstream>
    <remote-id type="cpe">cpe:/a:john_koleszar:libvpx</remote-id>
  </upstream>
</pkgmetadata>
