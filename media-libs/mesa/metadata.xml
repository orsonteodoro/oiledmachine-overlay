<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild fork on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- Ebuild originators -->
    <email>x11@gentoo.org</email>
    <name>X11</name>
  </maintainer>
  <!--

  oiledmachine-overlay notes:

  This is maybe the 3rd time I had to fork this.

  This fork ensures deterministic build against a specific version of llvm
  for the dri driver portion.  It is intended for compatibility with the
  blender ebuild.


  Discussion about PGO (Profile Guided Optimization)

  Q:  How do you PGO this?
  A:
  # Add/change the UOPTS_GROUP permissions.  For details see
  # See https://github.com/orsonteodoro/oiledmachine-overlay?tab=readme-ov-file#epgoebolt-profile-permissions
  # Relog into non-root user (ex. johndoe)
  USE="-epgo -ebolt" emerge -1ovuDN mesa # Update dependencies
  UOPTS_BOLT_FORCE_INST=1 UOPTS_PGO_FORCE_PGI=1 USE="epgo -ebolt" emerge -1vO mesa # PGO instrumentation
  # Restart X or wayland
  # Run your favorite games, apps, video websites
  USE="epgo -ebolt" emerge -1vO mesa # PGO optimize build
  # Save the epgo USE flag in /etc/portage/package.use/mesa.conf:
  # media-libs/mesa epgo -ebolt

  Q:  How do you PGO+BOLT this?
  A:
  # Add/change the UOPTS_GROUP permissions.  For details see
  # See https://github.com/orsonteodoro/oiledmachine-overlay?tab=readme-ov-file#epgoebolt-profile-permissions
  # Relog into non-root user (ex. johndoe)
  USE="-epgo -ebolt" emerge -1ovuDN mesa # Update dependencies
  UOPTS_BOLT_FORCE_INST=1 UOPTS_PGO_FORCE_PGI=1 USE="epgo -ebolt" emerge -1vO mesa # PGO instrumentation only
  # Restart X or wayland
  # Run your favorite games, apps, video websites
  UOPTS_BOLT_FORCE_INST=1 USE="epgo ebolt" emerge -1vO mesa # PGO optimize build and BOLT instrument
  # Restart X or wayland
  # Run your favorite games, apps, video websites
  USE="epgo ebolt" emerge -1vO mesa # PGO optimize build and BOLT optimize
  # Save the epgo and ebolt USE flags in /etc/portage/package.use/mesa.conf:
  # media-libs/mesa epgo ebolt

  When you do training, be sure to run the apps that represent typical use,
  OpenGL and EGL versions used, etc.  Use the same training steps for both
  PGO training and BOLT training to ensure code coverage is consistent for
  the PGO/BOLT profiles.

  While Mesa is known as an OpenGL library, it may have portions for other
  APIs like Vulkan, OpenCL, VA-API or those connected to USE flags.  Those
  should be considered maybe added to PGO/BOLT training routine before
  transitioning from the training phase to optimization phase.

  You can decide to do proactively training or passive training.  In active
  training you are forcing yourself to run programs out of your daily
  routine.  In passive training, your routine does not change.  There are
  always tradeoffs in either case.
  - Active training:  more time investment.  more wasted memory pages for
    edge cases.  more ressurance of optimized build for edge cases or
    less frequent routines.
  - Passive training:  always doubt that is undertrained.  less burnout.
    More optimized for routine.  It results in a reactive benefit.

  The cutoff on training...
  When training, the boundary of when to stop training or begin optimization
  may not be obvious for beginners of EPGO/EBOLT.  The guideline is easy.
  Follow the Utilitarian rule - whatever makes you happy or results in the
  most happiness for you personally.  Proactive training may be beneficial
  when the trajectory in life is going that direction.  Passive training is
  a good choice when the routine(s) is daily.
  - Active training:  Do training for finite set of programs (3-5 or whatever
    you feel is satisfactory).  When the list is complete, optimize.
  - Passive training:  Either 1 day of routine then next day optimize;
    or 1-4 hours of routine and immediate optimization.

  Q:  Why do you not run unattended PGO?
  A:  There are different versions of OpenGL and each version needs to be
      trained independently.  It is more efficient to train off the actively
      used versions of OpenGL.

  Q:  When should you PGO?
  A:  - The beginning of the point release cycle to avoid short benefit
        periods or immediate bumps.

  Q:  What is EPGO?
  A:  Event based Profile Guided Optimization, using a Finite State Machine
      (FSM) to deploy a PGO build in the least annoying way.

  Q:  What is the benefit(s) of EPGO?
  A:  - EPGO allows for custom training instead of preselected trainer(s).
        (Preselected trainer or unatteneded PGO is similar to as premature
        optimization.)
      - EPGO code coverage is the same as the users.
      - EPGO does the heavy lifting or makes it less complicated to perform
        PGO for ebuild developers.
      - EPGO can reuse PGO profiles between patch versions for semver based
        packages.
      - EPGO can know when a PGO profile is incompatible based on toolchain
        fingerprint or PGO profile versioning and reset the process based
        on incompatibility.

  Q:  Is it necessary to optimize EPGO/EBOLT?
  A:  No.  Even during instrumentation, the package is still manages to
      do 60 FPS for web tests and light games still perform well as the
      arcade.

  -->
  <upstream>
    <remote-id type="cpe">cpe:/a:mesa3d:mesa</remote-id>
    <remote-id type="freedesktop-gitlab">mesa/mesa</remote-id>
  </upstream>
  <use>
    <flag name="d3d9">
      Enable Direct 3D9 API through Nine state tracker. Can be used together
      with patched wine.
    </flag>
    <flag name="ebolt">
      Use BOLT (post link optimization) [TESTING, EXPERIMENTAL]
    </flag>
    <flag name="epgo">
      Use Event based PGO (Profile Guided Optimization) [TESTING, EXPERIMENTAL]
    </flag>
    <flag name="gles1">
      Enable GLESv1 support.
    </flag>
    <flag name="gles2">
      Enable GLESv2 support.
    </flag>
    <flag name="llvm">
      Enable LLVM backend for Gallium3D.
    </flag>
    <flag name="lm-sensors">
      Enable Gallium HUD lm-sensors support.
    </flag>
    <flag name="opencl">
      Enable the Rusticl Gallium OpenCL state tracker.
    </flag>
    <flag name="osmesa">
      Build the Mesa library for off-screen rendering.
    </flag>
    <flag name="patent_status_nonfree">
      Allow unexpired nonfree patents.
    </flag>
    <flag name="vdpau">
      Enable the VDPAU acceleration interface for the Gallium3D Video Layer.
    </flag>
    <flag name="vulkan-overlay">
      Build vulkan-overlay-layer which displays Frames Per Second and other
      statistics
    </flag>
    <flag name="wayland">
      Enable support for <pkg>dev-libs/wayland</pkg>
    </flag>
    <flag name="xa">
      Enable the XA (X Acceleration) API for Gallium3D.
    </flag>
    <flag name="zink">
      Enable the Zink OpenGL-over-Vulkan Gallium driver
    </flag>
    <flag name="rN">
      Ebuild fork revision
    </flag>
  </use>
</pkgmetadata>
