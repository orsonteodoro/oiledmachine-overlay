<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="project">
    <!-- Ebuild fork on the oiledmachine overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- Ebuild originators -->
    <email>codec@gentoo.org</email>
    <name>Gentoo Codec Project</name>
  </maintainer>
  <slots>
    <subslots>Reflect ABI of libturbojpeg.so.</subslots>
  </slots>
  <!--
    This ebuild fork will focus on PGO optimization and hardened flags.

    Assets for training are not provided.  You may provide
    your own by adding assets to the
    ${PORTAGE_DIR}/distfiles/trainer/assets/jpeg folder.  It is recommend
    to use your own images or public domain images for training.

    One may extend the training by providing a per-package
    userpatch with custom.sh placed in ${S}.  You should consider
    this option if you work with alternative input image formats for conversion
    or use color management profiles.

    Multiple libjpeg_turbo_trainers_*_pct_quality_baseline or
    libjpeg_turbo_trainers_*_pct_quality-progressive has been provided for flexibility
    on typical use but used typically for content creators.  75% is the
    default without quality setting.  Using trainers that don't reflect
    typical use may result in a performance regression.

    For custom trainer support see the README.md in the overlay.
  -->
  <upstream>
    <remote-id type="cpe">cpe:/a:libjpeg-turbo:libjpeg-turbo</remote-id>
    <remote-id type="github">libjpeg-turbo/libjpeg-turbo</remote-id>
    <remote-id type="sourceforge">libjpeg-turbo</remote-id>
  </upstream>
  <use>
    <!-- added to ebuild by oiledmachine-overlay -->
    <flag name="asm">Build with SIMD acceleration</flag>
    <flag name="libjpeg_turbo_trainers_70_pct_quality_baseline">
      Trains with 70% quality baseline for encode and decode for offline
    </flag>
    <flag name="libjpeg_turbo_trainers_75_pct_quality_baseline">
      Trains with 75% quality baseline for encode and decode for offline
    </flag>
    <flag name="libjpeg_turbo_trainers_80_pct_quality_baseline">
      Trains with 80% quality baseline for encode and decode for offline
    </flag>
    <flag name="libjpeg_turbo_trainers_90_pct_quality_baseline">
      Trains with 90% quality baseline for encode and decode for offline
    </flag>
    <flag name="libjpeg_turbo_trainers_95_pct_quality_baseline">
      Trains with 95% quality baseline for encode and decode for offline
    </flag>
    <flag name="libjpeg_turbo_trainers_98_pct_quality_baseline">
      Trains with 98% quality baseline for encode and decode for offline
    </flag>
    <flag name="libjpeg_turbo_trainers_99_pct_quality_baseline">
      Trains with 99% quality baseline for encode and decode for offline
    </flag>
    <flag name="libjpeg_turbo_trainers_100_pct_quality_baseline">
      Trains with 100% quality baseline for encode and decode for offline
    </flag>
    <flag name="libjpeg_turbo_trainers_70_pct_quality-progressive">
      Trains with 70% quality progressive for encode and decode for web
    </flag>
    <flag name="libjpeg_turbo_trainers_75_pct_quality-progressive">
      Trains with 75% quality progressive rendering for encode and decode for
      web
    </flag>
    <flag name="libjpeg_turbo_trainers_80_pct_quality-progressive">
      Trains with 80% quality progressive rendering for encode and decode for
      web
    </flag>
    <flag name="libjpeg_turbo_trainers_90_pct_quality-progressive">
      Trains with 90% quality progressive rendering for encode and decode for
      web
    </flag>
    <flag name="libjpeg_turbo_trainers_95_pct_quality-progressive">
      Trains with 95% quality progressive rendering for encode and decode for
      web
    </flag>
    <flag name="libjpeg_turbo_trainers_98_pct_quality-progressive">
      Trains with 98% quality progressive rendering for encode and decode for
      web
    </flag>
    <flag name="libjpeg_turbo_trainers_99_pct_quality-progressive">
      Trains with 99% quality progressive rendering for encode and decode for
      web
    </flag>
    <flag name="libjpeg_turbo_trainers_100_pct_quality-progressive">
      Train with 100% quality progressive for encode and decode for web
    </flag>
    <flag name="libjpeg_turbo_trainers_decode">
      Runs training to simply batch decode assets from the pgo jpeg folder.  You
      may just provide this and skip the other trainers, but apps may use
      transformations as well so consider libjpeg_turbo_trainers_crop and
      libjpeg_turbo_trainers_transformations USE flags.
    </flag>
    <flag name="libjpeg_turbo_trainers_crop">
      Train for slicing images
    </flag>
    <flag name="libjpeg_turbo_trainers_grayscale">
      Train for black and white photos
    </flag>
    <flag name="libjpeg_turbo_trainers_transformations">
      Train for rotations
    </flag>
  </use>
</pkgmetadata>
