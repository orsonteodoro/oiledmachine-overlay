--- a/build/lin.sh.orig	2025-07-08 13:58:42.146019348 -0700
+++ b/build/lin.sh	2025-07-08 14:15:42.207997108 -0700
@@ -14,28 +14,46 @@ without_prerelease() {
 case ${PLATFORM} in
   linux*)
     LINUX=true
-    DEPS=/deps
-    TARGET=/target
-    PACKAGE=/packaging
-    ROOT=/root
+    DEPS="${WORKDIR}/deps"
+    TARGET="${WORKDIR}/target"
+    PACKAGE="${WORKDIR}/packaging"
+    ROOT="${HOME}"
     VIPS_CPP_DEP=libvips-cpp.so.$(without_prerelease $VERSION_VIPS)
     ;;
   darwin*)
     DARWIN=true
-    DEPS=$PWD/deps
-    TARGET=$PWD/target
-    PACKAGE=$PWD
-    ROOT=$PWD/platforms/$PLATFORM
+    DEPS="$PWD/deps"
+    TARGET="$PWD/target"
+    PACKAGE="$PWD"
+    ROOT="$PWD/platforms/$PLATFORM"
     VIPS_CPP_DEP=libvips-cpp.$(without_prerelease $VERSION_VIPS).dylib
     ;;
 esac
 
-mkdir ${DEPS}
-mkdir ${TARGET}
+mkdir "${DEPS}"
+mkdir "${TARGET}"
 
-# Default optimisation level is for binary size (-Os)
-# Overriden to performance (-O3) for select dependencies that benefit
-export FLAGS+=" -Os -fPIC"
+if [[ "${VANILLA}" == "1" ]] ; then
+	# For performance-criticial builds.
+	# Default optimisation level is for binary size (-Os)
+	# Overriden to performance (-O3) for select dependencies that benefit
+	# O3 will reduce _FORTIFY_SOURCE integrity.
+	export FLAGS+=" -Os -fPIC"
+	export FLAGS_OPTIMIZED="-O3"
+	export LIBSPNG_SSE4_FLAG="-DSPNG_SSE=4"
+else
+	# For security-criticial builds.
+	# Removed -Os and -O3 for security-critical and to maintain _FORTIFY_SOURCE integrity assumptions.
+	export FLAGS+=" -fPIC"
+	export FLAGS_OPTIMIZED=""
+
+	# Control portability
+	if [[ "${USE_SSE4}" == "1" ]] ; then
+		export LIBSPNG_SSE4_FLAG="-DSPNG_SSE=4"
+	else
+		export LIBSPNG_SSE4_FLAG=""
+	fi
+fi
 
 # Force "new" C++11 ABI compliance
 # Remove async exception unwind/backtrace tables
@@ -45,20 +63,37 @@ if [ "$LINUX" = true ]; then
 fi
 
 # Common build paths and flags
-export PKG_CONFIG_LIBDIR="${TARGET}/lib/pkgconfig"
-export PATH="${PATH}:${TARGET}/bin"
-export LD_LIBRARY_PATH="${TARGET}/lib"
-export CFLAGS="${FLAGS}"
-export CXXFLAGS="${FLAGS}"
-export OBJCFLAGS="${FLAGS}"
-export OBJCXXFLAGS="${FLAGS}"
-export CPPFLAGS="-I${TARGET}/include"
-export LDFLAGS="-L${TARGET}/lib"
+if [[ "${VANILLA}" == "1" ]] ; then
+	export PKG_CONFIG_LIBDIR="${TARGET}/lib/pkgconfig:${TARGET}/lib64/pkgconfig"
+	export PATH="${PATH}:${TARGET}/bin"
+	export LD_LIBRARY_PATH="${TARGET}/lib"
+	export CFLAGS="${FLAGS}"
+	export CXXFLAGS="${FLAGS}"
+	export OBJCFLAGS="${FLAGS}"
+	export OBJCXXFLAGS="${FLAGS}"
+	export CPPFLAGS="-I${TARGET}/include"
+	export LDFLAGS="-L${TARGET}/lib"
+else
+	export PKG_CONFIG_LIBDIR="${PKG_CONFIG_LIBDIR}:${TARGET}/lib/pkgconfig:${TARGET}/lib64/pkgconfig"
+	export PATH="${PATH}:${TARGET}/bin"
+	export LD_LIBRARY_PATH="${TARGET}/lib"
+	export CFLAGS="${CFLAGS} ${FLAGS}"
+	export CXXFLAGS="${CXXFLAGS} ${FLAGS}"
+	export OBJCFLAGS="${OBJCFLAGS} ${FLAGS}"
+	export OBJCXXFLAGS="${OBJCXXFLAGS} ${FLAGS}"
+	export CPPFLAGS="${CPPFLAGS} -I${TARGET}/include"
+	export LDFLAGS="${LDFLAGS} -L${TARGET}/lib"
+fi
 
 # On Linux, we need to create a relocatable library
 # Note: this is handled for macOS using the `install_name_tool` (see below)
 if [ "$LINUX" = true ]; then
   export LDFLAGS+=" -Wl,--gc-sections -Wl,-rpath=\$ORIGIN/"
+  export CARGO_HOME="${WORKDIR}/cargo_home"
+  export RUSTUP_HOME="${WORKDIR}/rustup_home"
+  mkdir -p "${CARGO_HOME}"
+  mkdir -p "${RUSTUP_HOME}"
+  export PATH="${CARGO_HOME}/bin:${PATH}"
 fi
 
 if [ "$DARWIN" = true ]; then
@@ -67,8 +102,8 @@ if [ "$DARWIN" = true ]; then
   # Local rust installation
   export CARGO_HOME="${DEPS}/cargo"
   export RUSTUP_HOME="${DEPS}/rustup"
-  mkdir -p $CARGO_HOME
-  mkdir -p $RUSTUP_HOME
+  mkdir -p "${CARGO_HOME}"
+  mkdir -p "${RUSTUP_HOME}"
   export PATH="${CARGO_HOME}/bin:${PATH}"
   if [ "$PLATFORM" == "darwin-arm64v8" ]; then
     export DARWIN_ARM=true
@@ -98,7 +133,8 @@ export RUSTFLAGS+=" --remap-path-prefix=
 unset PKG_CONFIG_PATH
 
 # Common options for curl
-CURL="curl --silent --location --retry 3 --retry-max-time 30"
+#CURL="curl --silent --location --retry 3 --retry-max-time 30"
+CURL="/bin/true"
 
 # Dependency version numbers
 VERSION_ZLIB_NG=2.2.4
@@ -129,10 +165,39 @@ VERSION_AOM=3.12.0
 VERSION_HEIF=1.19.7
 VERSION_CGIF=0.5.0
 
+echo "VERSION_ZLIB_NG: ${VERSION_ZLIB_NG}"
+echo "VERSION_FFI: ${VERSION_FFI}"
+echo "VERSION_GLIB: ${VERSION_GLIB}"
+echo "VERSION_XML2: ${VERSION_XML2}"
+echo "VERSION_EXIF: ${VERSION_EXIF}"
+echo "VERSION_LCMS2: ${VERSION_LCMS2}"
+echo "VERSION_MOZJPEG: ${VERSION_MOZJPEG}"
+echo "VERSION_PNG16: ${VERSION_PNG16}"
+echo "VERSION_SPNG: ${VERSION_SPNG}"
+echo "VERSION_IMAGEQUANT: ${VERSION_IMAGEQUANT}"
+echo "VERSION_WEBP: ${VERSION_WEBP}"
+echo "VERSION_TIFF: ${VERSION_TIFF}"
+echo "VERSION_HWY: ${VERSION_HWY}"
+echo "VERSION_PROXY_LIBINTL: ${VERSION_PROXY_LIBINTL}"
+echo "VERSION_FREETYPE: ${VERSION_FREETYPE}"
+echo "VERSION_EXPAT: ${VERSION_EXPAT}"
+echo "VERSION_ARCHIVE: ${VERSION_ARCHIVE}"
+echo "VERSION_FONTCONFIG: ${VERSION_FONTCONFIG}"
+echo "VERSION_HARFBUZZ: ${VERSION_HARFBUZZ}"
+echo "VERSION_PIXMAN: ${VERSION_PIXMAN}"
+echo "VERSION_CAIRO: ${VERSION_CAIRO}"
+echo "VERSION_FRIBIDI: ${VERSION_FRIBIDI}"
+echo "VERSION_PANGO: ${VERSION_PANGO}"
+echo "VERSION_RSVG: ${VERSION_RSVG}"
+echo "VERSION_AOM: ${VERSION_AOM}"
+echo "VERSION_HEIF: ${VERSION_HEIF}"
+echo "VERSION_CGIF: ${VERSION_CGIF}"
+
 # Check for newer versions
 # Skip by setting the VERSION_LATEST_REQUIRED environment variable to "false"
 ALL_AT_VERSION_LATEST=true
 version_latest() {
+  return
   if [ "$VERSION_LATEST_REQUIRED" == "false" ]; then
     echo "Skipping latest version check for $1"
     return
@@ -190,182 +255,220 @@ if [ "$DARWIN" = true ]; then
   CFLAGS= cargo install cargo-c --locked
 fi
 
+echo "PLATFORM:  ${PLATFORM}"
+echo "PKG_CONFIG_LIBDIR:  ${PKG_CONFIG_LIBDIR}"
+echo "PATH:  ${PATH}"
+echo "LD_LIBRARY_PATH:  ${LD_LIBRARY_PATH}"
+echo "CFLAGS:  ${CFLAGS}"
+echo "CXXFLAGS:  ${CXXFLAGS}"
+echo "OBJCFLAGS:  ${OBJCFLAGS}"
+echo "OBJCXXFLAGS:  ${OBJCXXFLAGS}"
+echo "CPPFLAGS:  ${CPPFLAGS}"
+echo "LDFLAGS:  ${LDFLAGS}"
+echo "CARGO_HOME:  ${CARGO_HOME}"
+echo "RUSTUP_HOME:  ${RUSTUP_HOME}"
+echo "MAKEFLAGS:  ${MAKEFLAGS}"
+echo "RUSTFLAGS:  ${RUSTFLAGS}"
+
 if [ "${PLATFORM%-*}" == "linuxmusl" ] || [ "$DARWIN" = true ]; then
+  echo "DEBUG:  Building proxy-libintl ${VERSION_PROXY_LIBINTL}"
   # musl and macOS requires the standalone intl support library of gettext, since it's not provided by libc (like GNU).
   # We use a stub version of gettext instead, since we don't need any of the i18n features.
-  mkdir ${DEPS}/proxy-libintl
-  $CURL https://github.com/frida/proxy-libintl/archive/${VERSION_PROXY_LIBINTL}.tar.gz | tar xzC ${DEPS}/proxy-libintl --strip-components=1
-  cd ${DEPS}/proxy-libintl
-  meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON}
+  #mkdir ${DEPS}/proxy-libintl
+  #$CURL https://github.com/frida/proxy-libintl/archive/${VERSION_PROXY_LIBINTL}.tar.gz | tar xzC ${DEPS}/proxy-libintl --strip-components=1
+  cd "${WORKDIR}/proxy-libintl-${VERSION_PROXY_LIBINTL}"
+  meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON}
   meson install -C _build --tag devel
 fi
 
-mkdir ${DEPS}/zlib-ng
-$CURL https://github.com/zlib-ng/zlib-ng/archive/${VERSION_ZLIB_NG}.tar.gz | tar xzC ${DEPS}/zlib-ng --strip-components=1
-cd ${DEPS}/zlib-ng
-CFLAGS="${CFLAGS} -O3" cmake -G"Unix Makefiles" \
-  -DCMAKE_TOOLCHAIN_FILE=${ROOT}/Toolchain.cmake -DCMAKE_INSTALL_PREFIX=${TARGET} -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Release \
+echo "DEBUG:  Building zlib-ng ${VERSION_ZLIB_NG}"
+#mkdir ${DEPS}/zlib-ng
+#$CURL https://github.com/zlib-ng/zlib-ng/archive/${VERSION_ZLIB_NG}.tar.gz | tar xzC ${DEPS}/zlib-ng --strip-components=1
+cd "${WORKDIR}/zlib-ng-${VERSION_ZLIB_NG}"
+CFLAGS="${CFLAGS} ${FLAGS_OPTIMIZED}" cmake -G"Unix Makefiles" \
+  -DCMAKE_TOOLCHAIN_FILE="${ROOT}/Toolchain.cmake" -DCMAKE_INSTALL_PREFIX="${TARGET}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Release \
   -DBUILD_SHARED_LIBS=FALSE -DZLIB_COMPAT=TRUE -DWITH_ARMV6=FALSE
 make install/strip
 
-mkdir ${DEPS}/ffi
-$CURL https://github.com/libffi/libffi/releases/download/v${VERSION_FFI}/libffi-${VERSION_FFI}.tar.gz | tar xzC ${DEPS}/ffi --strip-components=1
-cd ${DEPS}/ffi
-./configure --host=${CHOST} --prefix=${TARGET} --enable-static --disable-shared --disable-dependency-tracking \
+echo "DEBUG:  Building libffi ${VERSION_FFI}"
+#mkdir ${DEPS}/ffi
+#$CURL https://github.com/libffi/libffi/releases/download/v${VERSION_FFI}/libffi-${VERSION_FFI}.tar.gz | tar xzC ${DEPS}/ffi --strip-components=1
+cd "${WORKDIR}/libffi-${VERSION_FFI}"
+./configure --host=${CHOST} --prefix="${TARGET}" --enable-static --disable-shared --disable-dependency-tracking \
   --disable-builddir --disable-multi-os-directory --disable-raw-api --disable-structs --disable-docs
 make install-strip
 
-mkdir ${DEPS}/glib
-$CURL https://download.gnome.org/sources/glib/$(without_patch $VERSION_GLIB)/glib-${VERSION_GLIB}.tar.xz | tar xJC ${DEPS}/glib --strip-components=1
-cd ${DEPS}/glib
-$CURL https://gist.github.com/kleisauke/284d685efa00908da99ea6afbaaf39ae/raw/936a6b8013d07d358c6944cc5b5f0e27db707ace/glib-without-gregex.patch | patch -p1
-meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+echo "DEBUG:  Building glib ${VERSION_GLIB}"
+#mkdir ${DEPS}/glib
+#$CURL https://download.gnome.org/sources/glib/$(without_patch $VERSION_GLIB)/glib-${VERSION_GLIB}.tar.xz | tar xJC ${DEPS}/glib --strip-components=1
+cd "${WORKDIR}/glib-${VERSION_GLIB}"
+#$CURL https://gist.github.com/kleisauke/284d685efa00908da99ea6afbaaf39ae/raw/936a6b8013d07d358c6944cc5b5f0e27db707ace/glib-without-gregex.patch | patch -p1
+cat "${DISTDIR}/${P}-glib-without-gregex.patch" | patch -p1
+meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   --force-fallback-for=gvdb -Dintrospection=disabled -Dnls=disabled -Dlibmount=disabled -Dsysprof=disabled -Dlibelf=disabled \
   -Dtests=false -Dglib_assert=false -Dglib_checks=false -Dglib_debug=disabled ${DARWIN:+-Dbsymbolic_functions=false}
 # bin-devel is needed for glib-compile-resources
 meson install -C _build --tag bin-devel,devel
 
-mkdir ${DEPS}/xml2
-$CURL https://download.gnome.org/sources/libxml2/$(without_patch $VERSION_XML2)/libxml2-${VERSION_XML2}.tar.xz | tar xJC ${DEPS}/xml2 --strip-components=1
-cd ${DEPS}/xml2
+echo "DEBUG:  Building libxml2 ${VERSION_XML2}"
+#mkdir ${DEPS}/xml2
+#$CURL https://download.gnome.org/sources/libxml2/$(without_patch $VERSION_XML2)/libxml2-${VERSION_XML2}.tar.xz | tar xJC ${DEPS}/xml2 --strip-components=1
+cd "${WORKDIR}/libxml2-${VERSION_XML2}"
 # https://gitlab.gnome.org/GNOME/libxml2/-/merge_requests/306
-$CURL https://gitlab.gnome.org/GNOME/libxml2/-/commit/88732cae7d6031b2fa216faa3dd542681b385117.patch | patch -p1
-meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+#$CURL https://gitlab.gnome.org/GNOME/libxml2/-/commit/88732cae7d6031b2fa216faa3dd542681b385117.patch | patch -p1
+cat "${DISTDIR}/${P}-88732cae7d6031b2fa216faa3dd542681b385117.patch" | patch -p1
+meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Dminimum=true
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/exif
-$CURL https://github.com/libexif/libexif/releases/download/v${VERSION_EXIF}/libexif-${VERSION_EXIF}.tar.xz | tar xJC ${DEPS}/exif --strip-components=1
-cd ${DEPS}/exif
-./configure --host=${CHOST} --prefix=${TARGET} --enable-static --disable-shared --disable-dependency-tracking \
+echo "DEBUG:  Building libexif ${VERSION_EXIF}"
+#mkdir ${DEPS}/exif
+#$CURL https://github.com/libexif/libexif/releases/download/v${VERSION_EXIF}/libexif-${VERSION_EXIF}.tar.xz | tar xJC ${DEPS}/exif --strip-components=1
+cd "${WORKDIR}/libexif-${VERSION_EXIF}"
+./configure --host=${CHOST} --prefix="${TARGET}" --enable-static --disable-shared --disable-dependency-tracking \
   --disable-nls --without-libiconv-prefix --without-libintl-prefix \
   CPPFLAGS="${CPPFLAGS} -DNO_VERBOSE_TAG_DATA"
 make install-strip doc_DATA=
 
-mkdir ${DEPS}/lcms2
-$CURL https://github.com/mm2/Little-CMS/releases/download/lcms${VERSION_LCMS2}/lcms2-${VERSION_LCMS2}.tar.gz | tar xzC ${DEPS}/lcms2 --strip-components=1
-cd ${DEPS}/lcms2
-CFLAGS="${CFLAGS} -O3" meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+echo "DEBUG:  Building lcms ${VERSION_LCMS2}"
+#mkdir ${DEPS}/lcms2
+#$CURL https://github.com/mm2/Little-CMS/releases/download/lcms${VERSION_LCMS2}/lcms2-${VERSION_LCMS2}.tar.gz | tar xzC ${DEPS}/lcms2 --strip-components=1
+cd "${WORKDIR}/lcms2-${VERSION_LCMS2}"
+CFLAGS="${CFLAGS} ${FLAGS_OPTIMIZED}" meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Dtests=disabled 
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/aom
-$CURL https://storage.googleapis.com/aom-releases/libaom-${VERSION_AOM}.tar.gz | tar xzC ${DEPS}/aom --strip-components=1
-cd ${DEPS}/aom
+echo "DEBUG:  Building libaom ${VERSION_AOM}"
+#mkdir ${DEPS}/aom
+#$CURL https://storage.googleapis.com/aom-releases/libaom-${VERSION_AOM}.tar.gz | tar xzC ${DEPS}/aom --strip-components=1
+cd "${WORKDIR}/libaom-${VERSION_AOM}"
 mkdir aom_build
 cd aom_build
 AOM_AS_FLAGS="${FLAGS}" cmake -G"Unix Makefiles" \
-  -DCMAKE_TOOLCHAIN_FILE=${ROOT}/Toolchain.cmake -DCMAKE_INSTALL_PREFIX=${TARGET} -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=MinSizeRel \
+  -DCMAKE_TOOLCHAIN_FILE="${ROOT}/Toolchain.cmake" -DCMAKE_INSTALL_PREFIX="${TARGET}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=MinSizeRel \
   -DBUILD_SHARED_LIBS=FALSE -DENABLE_DOCS=0 -DENABLE_TESTS=0 -DENABLE_TESTDATA=0 -DENABLE_TOOLS=0 -DENABLE_EXAMPLES=0 \
   -DCONFIG_PIC=1 -DENABLE_NASM=1 ${WITHOUT_NEON:+-DENABLE_NEON=0} ${DARWIN_ARM:+-DCONFIG_RUNTIME_CPU_DETECT=0} \
   -DCONFIG_AV1_HIGHBITDEPTH=0 -DCONFIG_WEBM_IO=0 \
   ..
 make install/strip
 
-mkdir ${DEPS}/heif
-$CURL https://github.com/strukturag/libheif/releases/download/v${VERSION_HEIF}/libheif-${VERSION_HEIF}.tar.gz | tar xzC ${DEPS}/heif --strip-components=1
-cd ${DEPS}/heif
+echo "DEBUG:  Building libheif ${VERSION_HEIF}"
+#mkdir ${DEPS}/heif
+#$CURL https://github.com/strukturag/libheif/releases/download/v${VERSION_HEIF}/libheif-${VERSION_HEIF}.tar.gz | tar xzC ${DEPS}/heif --strip-components=1
+cd "${WORKDIR}/libheif-${VERSION_HEIF}"
 # Downgrade minimum required CMake version to 3.12 - https://github.com/strukturag/libheif/issues/975
 sed -i'.bak' "/^cmake_minimum_required/s/3.16.3/3.12/" CMakeLists.txt
-CFLAGS="${CFLAGS} -O3" CXXFLAGS="${CXXFLAGS} -O3" cmake -G"Unix Makefiles" \
-  -DCMAKE_TOOLCHAIN_FILE=${ROOT}/Toolchain.cmake -DCMAKE_INSTALL_PREFIX=${TARGET} -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Release \
+CFLAGS="${CFLAGS} ${FLAGS_OPTIMIZED}" CXXFLAGS="${CXXFLAGS} ${FLAGS_OPTIMIZED}" cmake -G"Unix Makefiles" \
+  -DCMAKE_TOOLCHAIN_FILE="${ROOT}/Toolchain.cmake" -DCMAKE_INSTALL_PREFIX="${TARGET}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Release \
   -DBUILD_SHARED_LIBS=FALSE -DBUILD_TESTING=0 -DENABLE_PLUGIN_LOADING=0 -DWITH_EXAMPLES=0 -DWITH_LIBDE265=0 -DWITH_X265=0
 make install/strip
 
-mkdir ${DEPS}/jpeg
-$CURL https://github.com/mozilla/mozjpeg/archive/v${VERSION_MOZJPEG}.tar.gz | tar xzC ${DEPS}/jpeg --strip-components=1
-cd ${DEPS}/jpeg
+echo "DEBUG:  Building mozjpeg ${VERSION_MOZJPEG}"
+#mkdir ${DEPS}/jpeg
+#$CURL https://github.com/mozilla/mozjpeg/archive/v${VERSION_MOZJPEG}.tar.gz | tar xzC ${DEPS}/jpeg --strip-components=1
+cd "${WORKDIR}/mozjpeg-${VERSION_MOZJPEG}"
 cmake -G"Unix Makefiles" \
-  -DCMAKE_TOOLCHAIN_FILE=${ROOT}/Toolchain.cmake -DCMAKE_INSTALL_PREFIX=${TARGET} -DCMAKE_INSTALL_LIBDIR:PATH=lib -DCMAKE_BUILD_TYPE=MinSizeRel \
+  -DCMAKE_TOOLCHAIN_FILE="${ROOT}/Toolchain.cmake" -DCMAKE_INSTALL_PREFIX="${TARGET}" -DCMAKE_INSTALL_LIBDIR:PATH=lib -DCMAKE_BUILD_TYPE=MinSizeRel \
   -DENABLE_STATIC=TRUE -DENABLE_SHARED=FALSE -DWITH_JPEG8=1 -DWITH_TURBOJPEG=FALSE -DPNG_SUPPORTED=FALSE
 make install/strip
 
-mkdir ${DEPS}/png16
-$CURL https://downloads.sourceforge.net/project/libpng/libpng16/${VERSION_PNG16}/libpng-${VERSION_PNG16}.tar.xz | tar xJC ${DEPS}/png16 --strip-components=1
-cd ${DEPS}/png16
-./configure --host=${CHOST} --prefix=${TARGET} --enable-static --disable-shared --disable-dependency-tracking \
+echo "DEBUG:  Building libpng16 ${VERSION_PNG16}"
+#mkdir ${DEPS}/png16
+#$CURL https://downloads.sourceforge.net/project/libpng/libpng16/${VERSION_PNG16}/libpng-${VERSION_PNG16}.tar.xz | tar xJC ${DEPS}/png16 --strip-components=1
+cd "${WORKDIR}/libpng-${VERSION_PNG16}"
+./configure --host=${CHOST} --prefix="${TARGET}" --enable-static --disable-shared --disable-dependency-tracking \
   --disable-tools --without-binconfigs --disable-unversioned-libpng-config
 make install-strip dist_man_MANS=
 
-mkdir ${DEPS}/spng
-$CURL https://github.com/randy408/libspng/archive/v${VERSION_SPNG}.tar.gz | tar xzC ${DEPS}/spng --strip-components=1
-cd ${DEPS}/spng
-CFLAGS="${CFLAGS} -O3 -DSPNG_SSE=4" meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+echo "DEBUG:  Building libspng ${VERSION_SPNG}"
+#mkdir ${DEPS}/spng
+#$CURL https://github.com/randy408/libspng/archive/v${VERSION_SPNG}.tar.gz | tar xzC ${DEPS}/spng --strip-components=1
+cd "${WORKDIR}/libspng-${VERSION_SPNG}"
+CFLAGS="${CFLAGS} ${FLAGS_OPTIMIZED} ${LIBSPNG_SSE4_FLAG}" meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Dstatic_zlib=true -Dbuild_examples=false
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/imagequant
-$CURL https://github.com/lovell/libimagequant/archive/v${VERSION_IMAGEQUANT}.tar.gz | tar xzC ${DEPS}/imagequant --strip-components=1
-cd ${DEPS}/imagequant
-CFLAGS="${CFLAGS} -O3" meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON}
+echo "DEBUG:  Building libimagequant ${VERSION_IMAGEQUANT}"
+#mkdir ${DEPS}/imagequant
+#$CURL https://github.com/lovell/libimagequant/archive/v${VERSION_IMAGEQUANT}.tar.gz | tar xzC ${DEPS}/imagequant --strip-components=1
+cd "${WORKDIR}/libimagequant-${VERSION_IMAGEQUANT}"
+CFLAGS="${CFLAGS} ${FLAGS_OPTIMIZED}" meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON}
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/webp
-$CURL https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${VERSION_WEBP}.tar.gz | tar xzC ${DEPS}/webp --strip-components=1
-cd ${DEPS}/webp
-./configure --host=${CHOST} --prefix=${TARGET} --enable-static --disable-shared --disable-dependency-tracking \
+echo "DEBUG:  Building libwebp ${VERSION_WEBP}"
+#mkdir ${DEPS}/webp
+#$CURL https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-${VERSION_WEBP}.tar.gz | tar xzC ${DEPS}/webp --strip-components=1
+cd "${WORKDIR}/libwebp-${VERSION_WEBP}"
+./configure --host=${CHOST} --prefix="${TARGET}" --enable-static --disable-shared --disable-dependency-tracking \
   --enable-libwebpmux --enable-libwebpdemux ${WITHOUT_NEON:+--disable-neon}
 make install-strip bin_PROGRAMS= noinst_PROGRAMS= man_MANS=
 
-mkdir ${DEPS}/tiff
-$CURL https://download.osgeo.org/libtiff/tiff-${VERSION_TIFF}.tar.gz | tar xzC ${DEPS}/tiff --strip-components=1
-cd ${DEPS}/tiff
+echo "DEBUG:  Building tiff ${VERSION_TIFF}"
+#mkdir ${DEPS}/tiff
+#$CURL https://download.osgeo.org/libtiff/tiff-${VERSION_TIFF}.tar.gz | tar xzC ${DEPS}/tiff --strip-components=1
+cd "${WORKDIR}/tiff-${VERSION_TIFF}"
 # Propagate -pthread into CFLAGS to ensure WebP support
-CFLAGS="${CFLAGS} -pthread" ./configure --host=${CHOST} --prefix=${TARGET} --enable-static --disable-shared --disable-dependency-tracking \
+CFLAGS="${CFLAGS} -pthread" ./configure --host=${CHOST} --prefix="${TARGET}" --enable-static --disable-shared --disable-dependency-tracking \
   --disable-tools --disable-tests --disable-contrib --disable-docs --disable-mdi --disable-pixarlog --disable-old-jpeg --disable-cxx --disable-lzma --disable-zstd --disable-libdeflate
 make install-strip noinst_PROGRAMS= dist_doc_DATA=
 
 if [ -z "$WITHOUT_HIGHWAY" ]; then
-  mkdir ${DEPS}/hwy
-  $CURL https://github.com/google/highway/archive/${VERSION_HWY}.tar.gz | tar xzC ${DEPS}/hwy --strip-components=1
-  cd ${DEPS}/hwy
-  CFLAGS="${CFLAGS} -O3" CXXFLAGS="${CXXFLAGS} -O3" cmake -G"Unix Makefiles" \
-    -DCMAKE_TOOLCHAIN_FILE=${ROOT}/Toolchain.cmake -DCMAKE_INSTALL_PREFIX=${TARGET} -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Release \
+  echo "DEBUG:  Building highway ${VERSION_HWY}"
+  #mkdir ${DEPS}/hwy
+  #$CURL https://github.com/google/highway/archive/${VERSION_HWY}.tar.gz | tar xzC ${DEPS}/hwy --strip-components=1
+  cd "${WORKDIR}/highway-${VERSION_HWY}"
+  CFLAGS="${CFLAGS} ${FLAGS_OPTIMIZED}" CXXFLAGS="${CXXFLAGS} ${FLAGS_OPTIMIZED}" cmake -G"Unix Makefiles" \
+    -DCMAKE_TOOLCHAIN_FILE="${ROOT}/Toolchain.cmake" -DCMAKE_INSTALL_PREFIX="${TARGET}" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_BUILD_TYPE=Release \
     -DBUILD_SHARED_LIBS=FALSE -DBUILD_TESTING=0 -DHWY_ENABLE_CONTRIB=0 -DHWY_ENABLE_EXAMPLES=0 -DHWY_ENABLE_TESTS=0
   make install/strip
 fi
 
 build_freetype() {
-  rm -rf ${DEPS}/freetype
-  mkdir ${DEPS}/freetype
-  $CURL https://github.com/freetype/freetype/archive/VER-${VERSION_FREETYPE//./-}.tar.gz | tar xzC ${DEPS}/freetype --strip-components=1
-  cd ${DEPS}/freetype
-  meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+  echo "DEBUG:  Building freetype ${VERSION_FREETYPE}"
+  #rm -rf ${DEPS}/freetype
+  #mkdir ${DEPS}/freetype
+  #$CURL https://github.com/freetype/freetype/archive/VER-${VERSION_FREETYPE//./-}.tar.gz | tar xzC ${DEPS}/freetype --strip-components=1
+  cd "${WORKDIR}/freetype-VER-${VERSION_FREETYPE//./-}"
+  meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
     -Dzlib=enabled -Dpng=enabled -Dbrotli=disabled -Dbzip2=disabled "$@"
   meson install -C _build --tag devel
 }
 build_freetype -Dharfbuzz=disabled
 
-mkdir ${DEPS}/expat
-$CURL https://github.com/libexpat/libexpat/releases/download/R_${VERSION_EXPAT//./_}/expat-${VERSION_EXPAT}.tar.xz | tar xJC ${DEPS}/expat --strip-components=1
-cd ${DEPS}/expat
-./configure --host=${CHOST} --prefix=${TARGET} --enable-static --disable-shared \
+echo "DEBUG:  Building expat ${VERSION_EXPAT}"
+#mkdir ${DEPS}/expat
+#$CURL https://github.com/libexpat/libexpat/releases/download/R_${VERSION_EXPAT//./_}/expat-${VERSION_EXPAT}.tar.xz | tar xJC ${DEPS}/expat --strip-components=1
+cd "${WORKDIR}/expat-${VERSION_EXPAT}"
+./configure --host=${CHOST} --prefix="${TARGET}" --enable-static --disable-shared \
   --disable-dependency-tracking --without-xmlwf --without-docbook --without-getrandom --without-sys-getrandom \
   --without-libbsd --without-examples --without-tests
 make install-strip dist_cmake_DATA= nodist_cmake_DATA=
 
-mkdir ${DEPS}/archive
-$CURL https://github.com/libarchive/libarchive/releases/download/v${VERSION_ARCHIVE}/libarchive-${VERSION_ARCHIVE}.tar.xz | tar xJC ${DEPS}/archive --strip-components=1
-cd ${DEPS}/archive
-./configure --host=${CHOST} --prefix=${TARGET} --enable-static --disable-shared --disable-dependency-tracking \
+echo "DEBUG:  Building libarchive ${VERSION_ARCHIVE}"
+#mkdir ${DEPS}/archive
+#$CURL https://github.com/libarchive/libarchive/releases/download/v${VERSION_ARCHIVE}/libarchive-${VERSION_ARCHIVE}.tar.xz | tar xJC ${DEPS}/archive --strip-components=1
+cd "${WORKDIR}/libarchive-${VERSION_ARCHIVE}"
+./configure --host=${CHOST} --prefix="${TARGET}" --enable-static --disable-shared --disable-dependency-tracking \
   --disable-bsdtar --disable-bsdcat --disable-bsdcpio --disable-bsdunzip --disable-posix-regex-lib --disable-xattr --disable-acl \
   --without-bz2lib --without-libb2 --without-iconv --without-lz4 --without-zstd --without-lzma \
   --without-lzo2 --without-cng --without-openssl --without-xml2 --without-expat
 make install-strip libarchive_man_MANS=
 
-mkdir ${DEPS}/fontconfig
-$CURL https://gitlab.freedesktop.org/fontconfig/fontconfig/-/archive/${VERSION_FONTCONFIG}/fontconfig-${VERSION_FONTCONFIG}.tar.gz | tar xzC ${DEPS}/fontconfig --strip-components=1
-cd ${DEPS}/fontconfig
-meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+echo "DEBUG:  Building fontconfig ${VERSION_FONTCONFIG}"
+#mkdir ${DEPS}/fontconfig
+#$CURL https://gitlab.freedesktop.org/fontconfig/fontconfig/-/archive/${VERSION_FONTCONFIG}/fontconfig-${VERSION_FONTCONFIG}.tar.gz | tar xzC ${DEPS}/fontconfig --strip-components=1
+cd "${WORKDIR}/fontconfig-${VERSION_FONTCONFIG}"
+meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Dcache-build=disabled -Ddoc=disabled -Dnls=disabled -Dtests=disabled -Dtools=disabled
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/harfbuzz
-$CURL https://github.com/harfbuzz/harfbuzz/archive/${VERSION_HARFBUZZ}.tar.gz | tar xzC ${DEPS}/harfbuzz --strip-components=1
-cd ${DEPS}/harfbuzz
+echo "DEBUG:  Building harfbuzz ${VERSION_HARFBUZZ}"
+#mkdir ${DEPS}/harfbuzz
+#$CURL https://github.com/harfbuzz/harfbuzz/archive/${VERSION_HARFBUZZ}.tar.gz | tar xzC ${DEPS}/harfbuzz --strip-components=1
+cd "${WORKDIR}/harfbuzz-${VERSION_HARFBUZZ}"
 # Disable utils
 sed -i'.bak' "/subdir('util')/d" meson.build
-meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Dgobject=disabled -Dicu=disabled -Dtests=disabled -Dintrospection=disabled -Ddocs=disabled -Dbenchmark=disabled ${DARWIN:+-Dcoretext=enabled}
 meson install -C _build --tag devel
 
@@ -373,46 +476,57 @@ meson install -C _build --tag devel
 # https://bugs.freedesktop.org/show_bug.cgi?id=7331
 # https://gitlab.freedesktop.org/pkg-config/pkg-config/-/commit/6d6dd43e75e2bc82cfe6544f8631b1bef6e1cf45
 # TODO(kleisauke): Remove when Amazon Linux 2 reaches EOL.
-sed -i'.bak' "/^Requires:/s/ freetype2.*,//" ${TARGET}/lib/pkgconfig/harfbuzz.pc
-sed -i'.bak' "/^Libs:/s/$/ -lfreetype/" ${TARGET}/lib/pkgconfig/harfbuzz.pc
+libdir=""
+if [[ -e "${TARGET}/lib64/pkgconfig/harfbuzz.pc" ]] ; then
+  libdir="lib64"
+else
+  libdir="lib"
+fi
+sed -i'.bak' "/^Requires:/s/ freetype2.*,//" "${TARGET}/${libdir}/pkgconfig/harfbuzz.pc"
+sed -i'.bak' "/^Libs:/s/$/ -lfreetype/" "${TARGET}/${libdir}/pkgconfig/harfbuzz.pc"
 
 build_freetype -Dharfbuzz=enabled
 
-mkdir ${DEPS}/pixman
-$CURL https://cairographics.org/releases/pixman-${VERSION_PIXMAN}.tar.gz | tar xzC ${DEPS}/pixman --strip-components=1
-cd ${DEPS}/pixman
-meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+echo "DEBUG:  Building pixman ${VERSION_PIXMAN}"
+#mkdir ${DEPS}/pixman
+#$CURL https://cairographics.org/releases/pixman-${VERSION_PIXMAN}.tar.gz | tar xzC ${DEPS}/pixman --strip-components=1
+cd "${WORKDIR}/pixman-${VERSION_PIXMAN}"
+meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Dlibpng=disabled -Dgtk=disabled -Dopenmp=disabled -Dtests=disabled -Ddemos=disabled \
   ${WITHOUT_NEON:+-Da64-neon=disabled}
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/cairo
-$CURL https://cairographics.org/releases/cairo-${VERSION_CAIRO}.tar.xz | tar xJC ${DEPS}/cairo --strip-components=1
-cd ${DEPS}/cairo
-meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+echo "DEBUG:  Building cairo ${VERSION_CAIRO}"
+#mkdir ${DEPS}/cairo
+#$CURL https://cairographics.org/releases/cairo-${VERSION_CAIRO}.tar.xz | tar xJC ${DEPS}/cairo --strip-components=1
+cd "${WORKDIR}/cairo-${VERSION_CAIRO}"
+meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   ${LINUX:+-Dquartz=disabled} ${DARWIN:+-Dquartz=enabled} -Dfreetype=enabled -Dfontconfig=enabled -Dtee=disabled -Dxcb=disabled -Dxlib=disabled -Dzlib=disabled \
   -Dtests=disabled -Dspectre=disabled -Dsymbol-lookup=disabled
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/fribidi
-$CURL https://github.com/fribidi/fribidi/releases/download/v${VERSION_FRIBIDI}/fribidi-${VERSION_FRIBIDI}.tar.xz | tar xJC ${DEPS}/fribidi --strip-components=1
-cd ${DEPS}/fribidi
-meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+echo "DEBUG:  Building fribidi ${VERSION_FRIBIDI}"
+#mkdir ${DEPS}/fribidi
+#$CURL https://github.com/fribidi/fribidi/releases/download/v${VERSION_FRIBIDI}/fribidi-${VERSION_FRIBIDI}.tar.xz | tar xJC ${DEPS}/fribidi --strip-components=1
+cd "${WORKDIR}/fribidi-${VERSION_FRIBIDI}"
+meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Ddocs=false -Dbin=false -Dtests=false
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/pango
-$CURL https://download.gnome.org/sources/pango/$(without_patch $VERSION_PANGO)/pango-${VERSION_PANGO}.tar.xz | tar xJC ${DEPS}/pango --strip-components=1
-cd ${DEPS}/pango
+echo "DEBUG:  Building pango ${VERSION_PANGO}"
+#mkdir ${DEPS}/pango
+#$CURL https://download.gnome.org/sources/pango/$(without_patch $VERSION_PANGO)/pango-${VERSION_PANGO}.tar.xz | tar xJC ${DEPS}/pango --strip-components=1
+cd "${WORKDIR}/pango-${VERSION_PANGO}"
 # Disable utils and tools
 sed -i'.bak' "/subdir('utils')/{N;d;}" meson.build
-meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Ddocumentation=false -Dbuild-testsuite=false -Dbuild-examples=false -Dintrospection=disabled -Dfontconfig=enabled
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/rsvg
-$CURL https://download.gnome.org/sources/librsvg/$(without_patch $VERSION_RSVG)/librsvg-${VERSION_RSVG}.tar.xz | tar xJC ${DEPS}/rsvg --strip-components=1
-cd ${DEPS}/rsvg
+echo "DEBUG:  Building librsvg ${VERSION_RSVG}"
+#mkdir ${DEPS}/rsvg
+#$CURL https://download.gnome.org/sources/librsvg/$(without_patch $VERSION_RSVG)/librsvg-${VERSION_RSVG}.tar.xz | tar xJC ${DEPS}/rsvg --strip-components=1
+cd "${WORKDIR}/librsvg-${VERSION_RSVG}"
 # Disallow GIF and WebP embedded in SVG images
 sed -i'.bak' "/image = /s/, \"gif\", \"webp\"//" rsvg/Cargo.toml
 # We build Cairo with `-Dzlib=disabled`, which implicitly disables the PDF/PostScript surface backends
@@ -422,28 +536,32 @@ sed -i'.bak' "/subdir('rsvg_convert')/d"
 # https://gitlab.gnome.org/GNOME/librsvg/-/merge_requests/1066#note_2356762
 sed -i'.bak' "/^if host_system in \['windows'/s/, 'linux'//" meson.build
 # Regenerate the lockfile after making the above changes
-cargo update --workspace
+#cargo update --workspace
 # Remove the --static flag from the PKG_CONFIG env since Rust does not
 # parse that correctly.
-PKG_CONFIG=${PKG_CONFIG/ --static/} meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+PKG_CONFIG=${PKG_CONFIG/ --static/} meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Dintrospection=disabled -Dpixbuf{,-loader}=disabled -Ddocs=disabled -Dvala=disabled -Dtests=false \
-  ${RUST_TARGET:+-Dtriplet=$RUST_TARGET}
+  ${RUST_TARGET:+-Dtriplet=$RUST_TARGET} -Dcargo-options=['--offline']
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/cgif
-$CURL https://github.com/dloebl/cgif/archive/v${VERSION_CGIF}.tar.gz | tar xzC ${DEPS}/cgif --strip-components=1
-cd ${DEPS}/cgif
-CFLAGS="${CFLAGS} -O3" meson setup _build --default-library=static --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+echo "DEBUG:  Building cgif ${VERSION_CGIF}"
+#mkdir ${DEPS}/cgif
+#$CURL https://github.com/dloebl/cgif/archive/v${VERSION_CGIF}.tar.gz | tar xzC ${DEPS}/cgif --strip-components=1
+cd "${WORKDIR}/cgif-${VERSION_CGIF}"
+CFLAGS="${CFLAGS} ${FLAGS_OPTIMIZED}" meson setup _build --default-library=static --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Dexamples=false -Dtests=false
 meson install -C _build --tag devel
 
-mkdir ${DEPS}/vips
-$CURL https://github.com/libvips/libvips/releases/download/v${VERSION_VIPS}/vips-${VERSION_VIPS}.tar.xz | tar xJC ${DEPS}/vips --strip-components=1
-cd ${DEPS}/vips
+echo "DEBUG:  Building vips ${VERSION_VIPS}"
+#mkdir ${DEPS}/vips
+#$CURL https://github.com/libvips/libvips/releases/download/v${VERSION_VIPS}/vips-${VERSION_VIPS}.tar.xz | tar xJC ${DEPS}/vips --strip-components=1
+cd "${WORKDIR}/vips-${VERSION_VIPS}"
 # Use version number in SONAME
-$CURL https://gist.githubusercontent.com/lovell/313a6901e9db1bf285f2a1f1180499e4/raw/3988223c7dfa4d22745d9392034b0117abef1446/libvips-cpp-soversion.patch | patch -p1
+#$CURL https://gist.githubusercontent.com/lovell/313a6901e9db1bf285f2a1f1180499e4/raw/3988223c7dfa4d22745d9392034b0117abef1446/libvips-cpp-soversion.patch | patch -p1
+cat "${DISTDIR}/${P}-libvips-cpp-soversion.patch" | patch -p1
 # Disable HBR support in heifsave
-$CURL https://github.com/libvips/build-win64-mxe/raw/v${VERSION_VIPS}/build/patches/vips-8-heifsave-disable-hbr-support.patch | patch -p1
+#$CURL https://github.com/libvips/build-win64-mxe/raw/v${VERSION_VIPS}/build/patches/vips-8-heifsave-disable-hbr-support.patch | patch -p1
+cat "${DISTDIR}/${P}-vips-8-heifsave-disable-hbr-support.patch" | patch -p1
 # Link libvips.so statically into libvips-cpp.so
 sed -i'.bak' "s/library('vips'/static_&/" libvips/meson.build
 sed -i'.bak' "/version: library_version/{N;d;}" libvips/meson.build
@@ -451,7 +569,7 @@ if [ "$LINUX" = true ]; then
   # Ensure libvips-cpp.so is linked with -z nodelete
   sed -i'.bak' "/gnu_symbol_visibility: 'hidden',/a link_args: nodelete_link_args," cplusplus/meson.build
   # Ensure symbols from external libs (except for libglib-2.0.a and libgobject-2.0.a) are not exposed
-  EXCLUDE_LIBS=$(find ${TARGET}/lib -maxdepth 1 -name '*.a' ! -name 'libglib-2.0.a' ! -name 'libgobject-2.0.a' -printf "-Wl,--exclude-libs=%f ")
+  EXCLUDE_LIBS=$(find "${TARGET}/lib" -maxdepth 1 -name '*.a' ! -name 'libglib-2.0.a' ! -name 'libgobject-2.0.a' -printf "-Wl,--exclude-libs=%f ")
   EXCLUDE_LIBS=${EXCLUDE_LIBS%?}
   # Localize the g_param_spec_types symbol to avoid collisions with shared libraries
   # See: https://github.com/lovell/sharp/issues/2535#issuecomment-766400693
@@ -459,64 +577,66 @@ if [ "$LINUX" = true ]; then
 fi
 # Disable building man pages, gettext po files, tools, and (fuzz-)tests
 sed -i'.bak' "/subdir('man')/{N;N;N;N;d;}" meson.build
-CFLAGS="${CFLAGS} -O3" CXXFLAGS="${CXXFLAGS} -O3" meson setup _build --default-library=shared --buildtype=release --strip --prefix=${TARGET} ${MESON} \
+CFLAGS="${CFLAGS} ${FLAGS_OPTIMIZED}" CXXFLAGS="${CXXFLAGS} ${FLAGS_OPTIMIZED}" meson setup _build --default-library=shared --buildtype=release --strip --prefix="${TARGET}" ${MESON} \
   -Ddeprecated=false -Dexamples=false -Dintrospection=disabled -Dmodules=disabled -Dcfitsio=disabled -Dfftw=disabled -Djpeg-xl=disabled \
   ${WITHOUT_HIGHWAY:+-Dhighway=disabled} -Dorc=disabled -Dmagick=disabled -Dmatio=disabled -Dnifti=disabled -Dopenexr=disabled \
   -Dopenjpeg=disabled -Dopenslide=disabled -Dpdfium=disabled -Dpoppler=disabled -Dquantizr=disabled \
   -Dppm=false -Danalyze=false -Dradiance=false \
-  ${LINUX:+-Dcpp_link_args="$LDFLAGS -Wl,-Bsymbolic-functions -Wl,--version-script=$DEPS/vips/vips.map $EXCLUDE_LIBS"}
+  ${LINUX:+-Dcpp_link_args="$LDFLAGS -Wl,-Bsymbolic-functions -Wl,--version-script='$DEPS/vips/vips.map' $EXCLUDE_LIBS"}
 meson install -C _build --tag runtime,devel
 
 # Cleanup
-rm -rf ${TARGET}/lib/{pkgconfig,.libs,*.la,cmake}
+echo "DEBUG:  Performing clean-up"
+rm -rf "${TARGET}/lib"*"/"{"pkgconfig",".libs",*".la","cmake"}
 
-mkdir ${TARGET}/lib-filtered
-mv ${TARGET}/lib/glib-2.0 ${TARGET}/lib-filtered
+#mkdir ${TARGET}/lib-filtered
+mv "${TARGET}/lib/glib-2.0" "${TARGET}/lib-filtered"
 
 # Pack only the relevant libraries
 # Note: we can't use ldd on Linux, since that can only be executed on the target machine
 # Note 2: we modify all dylib dependencies to use relative paths on macOS
 function copydeps {
-  local base=$1
-  local dest_dir=$2
+  local base="$1"
+  local dest_dir="$2"
 
-  cp -L $base $dest_dir/$base
-  chmod 644 $dest_dir/$base
+  echo "DEBUG:  copydeps() called"
+  cp -L "$base" "$dest_dir/$base"
+  chmod 644 "$dest_dir/$base"
 
   if [ "$LINUX" = true ]; then
-    local dependencies=$(readelf -d $base | grep NEEDED | awk '{ print $5 }' | tr -d '[]')
+    local dependencies=$(readelf -d "$base" | grep NEEDED | awk '{ print $5 }' | tr -d '[]')
   elif [ "$DARWIN" = true ]; then
-    local dependencies=$(otool -LX $base | awk '{print $1}' | grep $TARGET)
+    local dependencies=$(otool -LX "$base" | awk '{print $1}' | grep "$TARGET")
 
-    install_name_tool -id @rpath/$base $dest_dir/$base
+    install_name_tool -id "@rpath/$base" "$dest_dir/$base"
   fi
 
   for dep in $dependencies; do
-    base_dep=$(basename $dep)
+    base_dep=$(basename "$dep")
 
     [ ! -f "$PWD/$base_dep" ] && echo "$base_dep does not exist in $PWD" && continue
     echo "$base depends on $base_dep"
 
     if [ ! -f "$dest_dir/$base_dep" ]; then
       if [ "$DARWIN" = true ]; then
-        install_name_tool -change $dep @rpath/$base_dep $dest_dir/$base
+        install_name_tool -change "$dep" "@rpath/$base_dep" "$dest_dir/$base"
       fi
 
       # Call this function (recursive) on each dependency of this library
-      copydeps $base_dep $dest_dir
+      copydeps "$base_dep" "$dest_dir"
     fi
   done;
 }
 
-cd ${TARGET}/lib
+cd "${TARGET}/lib"
 if [ "$LINUX" = true ]; then
   # Check that we really linked with -z nodelete
   readelf -Wd ${VIPS_CPP_DEP} | grep -qF NODELETE || (echo "$VIPS_CPP_DEP was not linked with -z nodelete" && exit 1)
 fi
-copydeps ${VIPS_CPP_DEP} ${TARGET}/lib-filtered
+copydeps ${VIPS_CPP_DEP} "${TARGET}/lib-filtered"
 
 # Create JSON file of version numbers
-cd ${TARGET}
+cd "${TARGET}"
 printf "{\n\
   \"aom\": \"${VERSION_AOM}\",\n\
   \"archive\": \"${VERSION_ARCHIVE}\",\n\
@@ -551,17 +671,21 @@ printf "{\n\
 printf "\"${PLATFORM}\"" >platform.json
 
 # Add third-party notices
-$CURL -O https://raw.githubusercontent.com/lovell/sharp-libvips/main/THIRD-PARTY-NOTICES.md
+echo "DEBUG:  Adding THIRD-PARTY-NOTICES.md"
+#$CURL -O https://raw.githubusercontent.com/lovell/sharp-libvips/main/THIRD-PARTY-NOTICES.md
+cat "${DISTDIR}/${P}-THIRD-PARTY-NOTICES.md" > "THIRD-PARTY-NOTICES.md"
 
 # Create the tarball
+echo "DEBUG:  Creating tarball"
 ls -al lib
 rm -rf lib
 mv lib-filtered lib
-tar chzf ${PACKAGE}/libvips-${VERSION_VIPS}-${PLATFORM}.tar.gz \
+tar chzf "${PACKAGE}/libvips-${VERSION_VIPS}-${PLATFORM}.tar.gz" \
   include \
   lib \
   *.json \
   THIRD-PARTY-NOTICES.md
 
 # Allow tarballs to be read outside container
-chmod 644 ${PACKAGE}/libvips-${VERSION_VIPS}-${PLATFORM}.tar.*
+chmod 644 "${PACKAGE}/libvips-${VERSION_VIPS}-${PLATFORM}.tar."*
+echo "DEBUG:  DONE"
