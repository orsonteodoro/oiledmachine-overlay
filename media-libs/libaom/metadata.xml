<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="project">
    <!-- ebuild fork only on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>media-video@gentoo.org</email>
  </maintainer>
  <longdescription>
    This ebuild fork will allow use of PGO for this library.  Currently it only
    optimizes the default settings, but may be PGO optimized for multithreaded a
    custom trainer script or changing the LIBAOM_TRAINING_ARGS explained at the 
    end of this description.  For 32-bit PGO training, you may install the
    ffmpeg fork from the oiledmachine-overlay or fork your own ffmpeg ebuild
    with modifications to installation so that the 32-bit binary does not get
    clobbered by the native install.  The expected paths are ffmpeg-x86 or in
    general ffmpeg-${ABI}.  The trainer will generate PGO data for both
    encoding and decoding that will be fed back into the optimized version.

    PGOing this package requires the following packages before running
    the trainer:

      media-video/ffmpeg[encode,libaom]


    The following steps must be taken...

    (1) Build this library first.

    (2) Build the trainer toolchain depending on this library corresponding
        to the package and USE flags above.

    (3) Acquire a video that is either CC0-1.0, public domain, or your own
        personal video asset that is at least 5 seconds long.  The asset
	will determine whether or not that chroma subsample will be trained.

    (4) Set assets in one of the 3 categories:

          LIBAOM_TRAINING_VIDEO_CGI_i          # Computer Generated Imagery
          LIBAOM_TRAINING_VIDEO_GAMING_i
          LIBAOM_TRAINING_VIDEO_GENERAL_i
          LIBAOM_TRAINING_VIDEO_GRAINY_i
          LIBAOM_TRAINING_VIDEO_SCREENCAST_i

        replacing i with an unpadded number, as a per-package environment
        varable with the absolute path to the asset.

    (5) Set LIBAOM_TRAINING_ARGS and/or
	LIBAOM_TRAINING_ARGS_LOSSLESS, see below for details.

    (6) Re-emerge this package with the pgo USE flag enabled.

    LIBAOM_TRAINING_MAX_ASSETS_PER_TYPE can be used to change the max number of
    assets to train with.  Currently it is set to 100.

    A user may supply a custom.sh via a per-package patch to set up multiple
    encoding settings which may include threading or tiling configurations or
    favorite quality setting.  See the ebuild for the FFmpeg template in the
    ebuild which could be extended with different args and placed in your
    custom.sh file.  Consider adding more generation rules that include the
    desired the pixel format like 10 bit yuv420p10le if that follows your
    typical use pattern.

    You may supply a LIBAOM_TRAINING_ARGS as a per package environment variable
    to tell ffmpeg which multicore, multithreading, tiling settings to use as
    the default.  It must be a string.

    Example

      LIBAOM_TRAINING_ARGS=" -cpu-used 8 -tile-columns 2 -tile-rows 2 -threads 8"

    Adding -cpu-used N, with N in the range of 0-8 with 0 being the slowest
    and 8 being the fastest should be set.  The quality difference is around
    ~3% but my personal test notice no recognizable differences resulting in
    discoloration or rendering distortions when 8 is used in a 2 second clip.
    Using 0 or 1 may result in hours of rendering for a few seconds of video
    and not recommended by ebuild fork maintainer.

    For a full list see `ffmpeg -h full | less`

    LIBAOM_TRAINING_ARGS_LOSSLESS can only be adjusted for performance
    and not quality.  You may not change the quality, dimensions, or drop
    frames.

    You should only pick PGO trainers that reflect typical use or it may
    result in performance degration.


    Custom training resolutions

    Set LIBAOM_TRAINING_CUSTOM_VOD_RESOLUTIONS as a space separated list of
    sublists.  Use LIBAOM_TRAINING_CUSTOM_VOD_RESOLUTIONS_QUICK for the
    quick trainers.

    Sublist format:

      fps;width;height;dynamic_range

    dynamic range - sdr or hdr only
    fps - 30 or 60 only

    Examples

      LIBAOM_TRAINING_CUSTOM_VOD_RESOLUTIONS="30;1280;720;sdr 60;1280;720;sdr"
      LIBAOM_TRAINING_CUSTOM_VOD_RESOLUTIONS_QUICK="30;426;240;sdr 60;426;240;sdr"
      LIBAOM_TRAINING_CUSTOM_VOD_RESOLUTIONS_QUICK="30;1280;720;hdr 60;1280;720;hdr"

    Setting this will override the defaults which trains all.


    For custom training details, see README.md of this overlay.

  </longdescription>
  <use>
    <flag name="asm">
      Use the optimized assembly based code paths
    </flag>
    <flag name="chromium">
      Prevent symbol conflicts in the browser (testing)
    </flag>
    <flag name="pgo">
      Use profile guided optimization.
    </flag>
    <flag name="trainer-2-pass-constrained-quality">
      Performs an addtional 2 pass training.  Two pass improves quality and rate
      control.  This step can be skipped for live streamers.

      3 seconds with many resolutions.
    </flag>
    <flag name="trainer-2-pass-constrained-quality-quick">
      Performs an addtional 2 pass training.  Two pass improves quality and rate
      control.  This step can be skipped for live streamers.

      1 second and lowest resolutions only.

      (Ebuild maintainer recommended)
    </flag>
    <flag name="trainer-constrained-quality">
      Use the 1 pass constrained quality trainer.

      3 seconds with many resolutions.
    </flag>
    <flag name="trainer-constrained-quality-quick">
      Use the 1 pass constrained quality trainer.

      1 second and lowest resolutions only.

      (Ebuild maintainer recommended)
    </flag>
    <flag name="trainer-lossless">
      Use the lossless trainer.

      3 second only.
    </flag>
    <flag name="trainer-lossless-quick">
      Use the lossless trainer.

      1 second only.
    </flag>
  </use>
</pkgmetadata>
