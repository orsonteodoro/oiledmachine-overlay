diff -urp libaom-3.1.2.orig/build/cmake/sanitizers.cmake libaom-3.1.2/build/cmake/sanitizers.cmake
--- libaom-3.1.2.orig/build/cmake/sanitizers.cmake	2021-07-22 15:41:34.000000000 -0700
+++ libaom-3.1.2/build/cmake/sanitizers.cmake	2021-10-09 19:12:41.638636041 -0700
@@ -21,13 +21,56 @@ include("${AOM_ROOT}/build/cmake/compile
 
 string(TOLOWER ${SANITIZE} SANITIZE)
 
+option(CFI "CFI with all modes" OFF)
+option(CFI_ICALL "-cfi-cast enabled" OFF)
+option(CFI_ICALL "-cfi-icall enabled" OFF)
+option(CFI_VCALL "-cfi-vcall enabled" OFF)
+option(CLANG_LINKER_NAME "Clang linker to use for CFI? (gold/lld)" "lld")
+option(CROSS_DSO_CFI "Build shared libs with Cross-DSO CFI" OFF)
+
 # Require the sanitizer requested. cfi sanitizer requires all the flags in order
 # for the compiler to accept it.
 if("${SANITIZE}" MATCHES "cfi" AND CMAKE_C_COMPILER_ID MATCHES "Clang")
-  require_linker_flag("-fsanitize=${SANITIZE} -flto -fno-sanitize-trap=cfi \
-    -fuse-ld=gold" YES)
-  require_compiler_flag("-fsanitize=${SANITIZE} -flto -fvisibility=hidden \
-    -fno-sanitize-trap=cfi" YES)
+  set(CFI_CFLAGS "")
+  set(CFI_LDFLAGS "")
+  if(CFI)
+    set(CFI_CFLAGS "${CFI_CFLAGS} -fsanitize=cfi")
+    set(CFI_LDFLAGS "${CFI_LDFLAGS} -fsanitize=cfi")
+  else()
+    if(CFI_CAST)
+      set(CFI_CFLAGS "${CFI_CFLAGS} -fsanitize=cfi-derived-cast -fsanitize=cfi-unrelated-cast")
+      set(CFI_LDFLAGS "${CFI_LDFLAGS} -fsanitize=cfi-derived-cast -fsanitize=cfi-unrelated-cast")
+    endif()
+    if(CFI_ICALL)
+      set(CFI_CFLAGS "${CFI_CFLAGS} -fsanitize=cfi-icall")
+      set(CFI_LDFLAGS "${CFI_LDFLAGS} -fsanitize=cfi-icall")
+    endif()
+    if(CFI_VCALL)
+      set(CFI_CFLAGS "${CFI_CFLAGS} -fsanitize=cfi-vcall")
+      set(CFI_LDFLAGS "${CFI_LDFLAGS} -fsanitize=cfi-vcall")
+    endif()
+  endif()
+  if(CFI OR CFI_CAST OR CFI_ICALL OR CFI_VCALL)
+    set(CFI_LDFLAGS "${CFI_LDFLAGS} -Wl,-lubsan")
+  endif()
+  set(CFI_CFLAGS "${CFI_CFLAGS} ${CFI_EXCEPTIONS}")
+  set(CFI_LDFLAGS "${CFI_LDFLAGS} ${CFI_EXCEPTIONS}")
+  if(NOT BUILD_SHARED_LIBS AND (CFI OR CFI_CAST OR CFI_ICALL OR CFI_VCALL))
+    set(CFI_CFLAGS "${CFI_CFLAGS} -fvisibility=hidden")
+    set(CFI_LDFLAGS "${CFI_LDFLAGS} -fvisibility=hidden")
+  elseif(CROSS_DSO_CFI AND BUILD_SHARED_LIBS AND (CFI OR CFI_CAST OR CFI_ICALL OR CFI_VCALL))
+    set(CFI_CFLAGS "${CFI_CFLAGS} -fvisibility=default -fsanitize-cfi-cross-dso")
+    set(CFI_LDFLAGS "${CFI_LDFLAGS} -fvisibility=default -fsanitize-cfi-cross-dso")
+  endif()
+  if(CLANG_LINKER_NAME STREQUAL "lld")
+    set(CFI_CFLAGS "${CFI_CFLAGS} -flto=thin")
+    set(CFI_LDFLAGS "${CFI_LDFLAGS} -flto=thin -fuse-ld=lld")
+  else()
+    set(CFI_CFLAGS "${CFI_CFLAGS} -flto")
+    set(CFI_LDFLAGS "${CFI_LDFLAGS} -flto")
+  endif()
+  require_linker_flag("${CFI_CFLAGS}" YES)
+  require_compiler_flag("${CFI_LDFLAGS}" YES)
 else()
   require_linker_flag("-fsanitize=${SANITIZE}")
   require_compiler_flag("-fsanitize=${SANITIZE}" YES)
