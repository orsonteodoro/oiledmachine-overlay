diff -urp work.orig/aom/aom_codec.h work/aom/aom_codec.h
--- work.orig/aom/aom_codec.h	2021-01-19 02:51:27.000000000 -0800
+++ work/aom/aom_codec.h	2021-09-01 23:16:21.678634948 -0700
@@ -273,6 +273,7 @@ typedef enum aom_superblock_size {
  * in the future.
  *
  */
+__attribute__ ((visibility ("default")))
 int aom_codec_version(void);
 
 /*!\brief Return the version major number */
@@ -293,6 +294,7 @@ int aom_codec_version(void);
  * release candidates, prerelease versions, etc.
  *
  */
+__attribute__ ((visibility ("default")))
 const char *aom_codec_version_str(void);
 
 /*!\brief Return the version information (as a string)
@@ -310,6 +312,7 @@ const char *aom_codec_version_extra_str(
  * configuration. This may be useful to aom support.
  *
  */
+__attribute__ ((visibility ("default")))
 const char *aom_codec_build_config(void);
 
 /*!\brief Return the name for a given interface
@@ -331,6 +334,7 @@ const char *aom_codec_iface_name(aom_cod
  * \param[in]    err     Error number.
  *
  */
+__attribute__ ((visibility ("default")))
 const char *aom_codec_err_to_string(aom_codec_err_t err);
 
 /*!\brief Retrieve error synopsis for codec context
@@ -343,6 +347,7 @@ const char *aom_codec_err_to_string(aom_
  * \param[in]    ctx     Pointer to this instance's context.
  *
  */
+__attribute__ ((visibility ("default")))
 const char *aom_codec_error(aom_codec_ctx_t *ctx);
 
 /*!\brief Retrieve detailed error information for codec context
@@ -355,6 +360,7 @@ const char *aom_codec_error(aom_codec_ct
  * \retval NULL
  *     No detailed information is available.
  */
+__attribute__ ((visibility ("default")))
 const char *aom_codec_error_detail(aom_codec_ctx_t *ctx);
 
 /* REQUIRED FUNCTIONS
@@ -374,6 +380,7 @@ const char *aom_codec_error_detail(aom_c
  * \retval #AOM_CODEC_MEM_ERROR
  *     Memory allocation failed.
  */
+__attribute__ ((visibility ("default")))
 aom_codec_err_t aom_codec_destroy(aom_codec_ctx_t *ctx);
 
 /*!\brief Get the capabilities of an algorithm.
@@ -383,6 +390,7 @@ aom_codec_err_t aom_codec_destroy(aom_co
  * \param[in] iface   Pointer to the algorithm interface
  *
  */
+__attribute__ ((visibility ("default")))
 aom_codec_caps_t aom_codec_get_caps(aom_codec_iface_t *iface);
 
 /*!\name Codec Control
@@ -414,6 +422,7 @@ aom_codec_caps_t aom_codec_get_caps(aom_
  * \retval #AOM_CODEC_INVALID_PARAM
  *     The data was not valid.
  */
+__attribute__ ((visibility ("default")))
 aom_codec_err_t aom_codec_control(aom_codec_ctx_t *ctx, int ctrl_id, ...);
 
 /*!\brief aom_codec_control wrapper macro (adds type-checking, less flexible)
@@ -469,6 +478,7 @@ typedef enum {
  *
  * \param[in]     type            The OBU_TYPE to convert to string.
  */
+__attribute__ ((visibility ("default")))
 const char *aom_obu_type_to_string(OBU_TYPE type);
 
 /*!@} - end defgroup codec*/
diff -urp work.orig/aom/aomcx.h work/aom/aomcx.h
--- work.orig/aom/aomcx.h	2021-01-19 02:51:27.000000000 -0800
+++ work/aom/aomcx.h	2021-09-01 23:16:21.678634948 -0700
@@ -34,6 +34,7 @@ extern "C" {
  * @{
  */
 extern aom_codec_iface_t aom_codec_av1_cx_algo;
+__attribute__ ((visibility ("default")))
 extern aom_codec_iface_t *aom_codec_av1_cx(void);
 /*!@} - end algorithm interface member group*/
 
diff -urp work.orig/aom/aom_decoder.h work/aom/aom_decoder.h
--- work.orig/aom/aom_decoder.h	2021-01-19 02:33:33.000000000 -0800
+++ work/aom/aom_decoder.h	2021-09-01 23:16:54.929927191 -0700
@@ -117,6 +117,7 @@ typedef struct aom_codec_dec_cfg {
  * \retval #AOM_CODEC_MEM_ERROR
  *     Memory allocation failed.
  */
+__attribute__ ((visibility ("default")))
 aom_codec_err_t aom_codec_dec_init_ver(aom_codec_ctx_t *ctx,
                                        aom_codec_iface_t *iface,
                                        const aom_codec_dec_cfg_t *cfg,
@@ -188,6 +189,7 @@ aom_codec_err_t aom_codec_get_stream_inf
  *         see the descriptions of the other error codes in ::aom_codec_err_t
  *         for recoverability capabilities.
  */
+__attribute__ ((visibility ("default")))
 aom_codec_err_t aom_codec_decode(aom_codec_ctx_t *ctx, const uint8_t *data,
                                  size_t data_sz, void *user_priv);
 
@@ -207,6 +209,7 @@ aom_codec_err_t aom_codec_decode(aom_cod
  * \return Returns a pointer to an image, if one is ready for display. Frames
  *         produced will always be in PTS (presentation time stamp) order.
  */
+__attribute__ ((visibility ("default")))
 aom_image_t *aom_codec_get_frame(aom_codec_ctx_t *ctx, aom_codec_iter_t *iter);
 
 /*!\defgroup cap_external_frame_buffer External Frame Buffer Functions
diff -urp work.orig/aom/aomdx.h work/aom/aomdx.h
--- work.orig/aom/aomdx.h	2021-01-19 02:51:27.000000000 -0800
+++ work/aom/aomdx.h	2021-09-01 23:16:21.679634986 -0700
@@ -34,6 +34,7 @@ extern "C" {
  * @{
  */
 extern aom_codec_iface_t aom_codec_av1_dx_algo;
+__attribute__ ((visibility ("default")))
 extern aom_codec_iface_t *aom_codec_av1_dx(void);
 /*!@} - end algorithm interface member group*/
 
diff -urp work.orig/aom/aom_encoder.h work/aom/aom_encoder.h
--- work.orig/aom/aom_encoder.h	2021-01-19 02:51:27.000000000 -0800
+++ work/aom/aom_encoder.h	2021-09-01 23:17:51.106070594 -0700
@@ -929,6 +929,7 @@ typedef struct aom_codec_enc_cfg {
  * \retval #AOM_CODEC_MEM_ERROR
  *     Memory allocation failed.
  */
+__attribute__ ((visibility ("default")))
 aom_codec_err_t aom_codec_enc_init_ver(aom_codec_ctx_t *ctx,
                                        aom_codec_iface_t *iface,
                                        const aom_codec_enc_cfg_t *cfg,
@@ -962,6 +963,7 @@ aom_codec_err_t aom_codec_enc_init_ver(a
  * \retval #AOM_CODEC_INVALID_PARAM
  *     A parameter was NULL, or the usage value was not recognized.
  */
+__attribute__ ((visibility ("default")))
 aom_codec_err_t aom_codec_enc_config_default(aom_codec_iface_t *iface,
                                              aom_codec_enc_cfg_t *cfg,
                                              unsigned int usage);
@@ -1037,6 +1039,7 @@ aom_fixed_buf_t *aom_codec_get_global_he
  * \retval #AOM_CODEC_INVALID_PARAM
  *     A parameter was NULL, the image format is unsupported, etc.
  */
+__attribute__ ((visibility ("default")))
 aom_codec_err_t aom_codec_encode(aom_codec_ctx_t *ctx, const aom_image_t *img,
                                  aom_codec_pts_t pts, unsigned long duration,
                                  aom_enc_frame_flags_t flags);
@@ -1112,6 +1115,7 @@ aom_codec_err_t aom_codec_set_cx_data_bu
  *         two-pass statistics, etc.) or NULL to signal end-of-list.
  *
  */
+__attribute__ ((visibility ("default")))
 const aom_codec_cx_pkt_t *aom_codec_get_cx_data(aom_codec_ctx_t *ctx,
                                                 aom_codec_iter_t *iter);
 
diff -urp work.orig/aom/aom_image.h work/aom/aom_image.h
--- work.orig/aom/aom_image.h	2021-01-19 02:51:27.000000000 -0800
+++ work/aom/aom_image.h	2021-09-01 23:16:21.679634986 -0700
@@ -266,6 +266,7 @@ aom_image_t *aom_img_alloc(aom_image_t *
  *         parameter is non-null, the value of the img parameter will be
  *         returned.
  */
+__attribute__ ((visibility ("default")))
 aom_image_t *aom_img_wrap(aom_image_t *img, aom_img_fmt_t fmt, unsigned int d_w,
                           unsigned int d_h, unsigned int align,
                           unsigned char *img_data);
diff -urp work.orig/aom/aom_integer.h work/aom/aom_integer.h
--- work.orig/aom/aom_integer.h	2021-01-19 02:51:27.000000000 -0800
+++ work/aom/aom_integer.h	2021-09-01 23:16:21.680635025 -0700
@@ -81,6 +81,7 @@ size_t aom_uleb_size_in_bytes(uint64_t v
 // Returns 0 on success, -1 on decode failure.
 // On success, 'value' stores the decoded LEB128 value and 'length' stores
 // the number of bytes decoded.
+__attribute__ ((visibility ("default")))
 int aom_uleb_decode(const uint8_t *buffer, size_t available, uint64_t *value,
                     size_t *length);
 
diff -urp work.orig/av1/common/obu_util.h work/av1/common/obu_util.h
--- work.orig/av1/common/obu_util.h	2021-01-19 02:51:27.000000000 -0800
+++ work/av1/common/obu_util.h	2021-09-01 23:16:21.680635025 -0700
@@ -29,6 +29,7 @@ typedef struct {
   int spatial_layer_id;
 } ObuHeader;
 
+__attribute__ ((visibility ("default")))
 aom_codec_err_t aom_read_obu_header(uint8_t *buffer, size_t buffer_length,
                                     size_t *consumed, ObuHeader *header,
                                     int is_annexb);
