Subject:       Add compatibility for oneTBB
Patch author:  Orson Teodoro <orsonteodoro@hotmail.com>
Patsh status:  In development
Date:          Thu Jul  1 06:57:30 PM PDT 2021 (Unix time: 1625191050)

Copyright notice for
pxr/base/work/detachedTask.h:
pxr/base/work/dispatcher.cpp:
pxr/base/work/dispatcher.h:
pxr/base/work/threadLimits.cpp:
pxr/base/work/threadGlobals.h:

//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

diff -Nurp USD-21.05.orig/pxr/base/work/CMakeLists.txt USD-21.05/pxr/base/work/CMakeLists.txt
--- USD-21.05.orig/pxr/base/work/CMakeLists.txt	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/base/work/CMakeLists.txt	2021-07-02 00:41:36.249437619 -0700
@@ -17,6 +17,7 @@ pxr_library(work
         loops
         reduce
         singularTask
+        threadGlobals									# oteodoro added line
         threadLimits
         utils
 
diff -Nurp USD-21.05.orig/pxr/base/work/detachedTask.h USD-21.05/pxr/base/work/detachedTask.h
--- USD-21.05.orig/pxr/base/work/detachedTask.h	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/base/work/detachedTask.h	2021-07-02 00:41:36.249437619 -0700
@@ -21,6 +21,9 @@
 // KIND, either express or implied. See the Apache License for the specific
 // language governing permissions and limitations under the Apache License.
 //
+
+// oteodoro - changes for oneTBB compatibility
+
 #ifndef PXR_BASE_WORK_DETACHED_TASK_H
 #define PXR_BASE_WORK_DETACHED_TASK_H
 
@@ -30,7 +33,13 @@
 #include "pxr/base/tf/errorMark.h"
 #include "pxr/base/work/api.h"
 
-#include <tbb/task.h>
+#ifdef USE_ONETBB									// oteodoro - added line
+  #include "pxr/base/work/threadGlobals.h"
+  #include <oneapi/tbb/task_group.h>							// oteodoro - added line
+  #include <tbb/task_arena.h>								// oteodoro - added line
+#else											// oteodoro - added line
+  #include <tbb/task.h>									// oteodoro - indent
+#endif											// oteodoro - added line
 
 #include <type_traits>
 #include <utility>
@@ -38,6 +47,20 @@
 PXR_NAMESPACE_OPEN_SCOPE
 
 template <class Fn>
+#ifdef USE_ONETBB									// oteodoro - added line
+struct Work_DetachedInvoker {								// oteodoro - copied line
+    explicit Work_DetachedInvoker(Fn &&fn) : _fn(std::move(fn)) {}			// oteodoro - copied line
+    explicit Work_DetachedInvoker(Fn const &fn) : _fn(fn) {}				// oteodoro - copied line
+    void execute() {									// oteodoro - copied and modified line
+        TfErrorMark m;									// oteodoro - copied line
+        _fn();										// oteodoro - copied line
+        m.Clear();									// oteodoro - copied line
+        										// oteodoro - deleted line
+    }											// oteodoro - copied line
+private:										// oteodoro - copied line
+    Fn _fn;										// oteodoro - copied line
+};											// oteodoro - copied line
+#else
 struct Work_DetachedInvoker : public tbb::task {
     explicit Work_DetachedInvoker(Fn &&fn) : _fn(std::move(fn)) {}
     explicit Work_DetachedInvoker(Fn const &fn) : _fn(fn) {}
@@ -50,6 +73,7 @@ struct Work_DetachedInvoker : public tbb
 private:
     Fn _fn;
 };
+#endif
 
 WORK_API tbb::task_group_context &Work_GetDetachedTaskGroupContext();
 
@@ -59,9 +83,13 @@ template <class Fn>
 void WorkRunDetachedTask(Fn &&fn)
 {
     using FnType = typename std::remove_reference<Fn>::type;
+#ifdef USE_ONETBB									// oteodoro - added line
+//    _task_arena.enqueue(Work_DetachedInvoker<FnType>(std::forward<Fn>(fn)));		// oteodoro - added line
+#else											// oteodoro - added line
     tbb::task::enqueue(
         *new (tbb::task::allocate_root(Work_GetDetachedTaskGroupContext()))
         Work_DetachedInvoker<FnType>(std::forward<Fn>(fn)));
+#endif											// oteodoro - added line
 }
 
 PXR_NAMESPACE_CLOSE_SCOPE
diff -Nurp USD-21.05.orig/pxr/base/work/dispatcher.cpp USD-21.05/pxr/base/work/dispatcher.cpp
--- USD-21.05.orig/pxr/base/work/dispatcher.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/base/work/dispatcher.cpp	2021-07-02 00:41:36.249437619 -0700
@@ -22,34 +22,61 @@
 // language governing permissions and limitations under the Apache License.
 //
 
+// oteodoro - added compatibility for oneTBB
+
 #include "pxr/pxr.h"
 #include "pxr/base/work/dispatcher.h"
 
+#ifdef USE_ONETBB										// oteodoro - added line
+  #include <oneapi/tbb/task_group.h>								// oteodoro - added line
+  #include <tbb/task_group.h>									// oteodoro - added line
+#endif												// oteodoro - added line
+
 PXR_NAMESPACE_OPEN_SCOPE
 
+#ifdef USE_ONETBB										// oteodoro - added line
+WorkDispatcher::WorkDispatcher()								// oteodoro - copied
+    : _context(											// oteodoro - copied
+        tbb::task_group_context::isolated,							// oteodoro - copied
+        tbb::task_group_context::concurrent_wait | 						// oteodoro - copied
+        tbb::task_group_context::default_traits)						// oteodoro - copied
+#else												// oteodoro - added line
 WorkDispatcher::WorkDispatcher()
     : _context(
         tbb::task_group_context::isolated,
         tbb::task_group_context::concurrent_wait | 
         tbb::task_group_context::default_traits)
+#endif
 {
     // The concurrent_wait flag used with the task_group_context ensures
     // the ref count will remain at 1 after all predecessor tasks are
     // completed, so we don't need to keep resetting it in Wait().
+#ifdef USE_ONETBB										// oteodoro - added line
+    //
+#else												// oteodoro - added line
     _rootTask = new(tbb::task::allocate_root(_context)) tbb::empty_task;
     _rootTask->set_ref_count(1);
+#endif												// oteodoro - added line
 }
 
 WorkDispatcher::~WorkDispatcher()
 {
     Wait();
+#ifdef USE_ONETBB										// oteodoro - added line
+    //												// oteodoro - added line
+#else												// oteodoro - added line
     tbb::task::destroy(*_rootTask);
+#endif												// oteodoro - added line
 }
 
 void
 WorkDispatcher::Wait()
 {
+#ifdef USE_ONETBB										// oteodoro - added line
+    _task_group.wait();										// oteodoro - added line
+#else												// oteodoro - added line
     _rootTask->wait_for_all();
+#endif												// oteodoro - added line
 
     if (_context.is_group_execution_cancelled()) {
         _context.reset();
diff -Nurp USD-21.05.orig/pxr/base/work/dispatcher.h USD-21.05/pxr/base/work/dispatcher.h
--- USD-21.05.orig/pxr/base/work/dispatcher.h	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/base/work/dispatcher.h	2021-07-02 00:41:36.249437619 -0700
@@ -21,6 +21,9 @@
 // KIND, either express or implied. See the Apache License for the specific
 // language governing permissions and limitations under the Apache License.
 //
+
+// oteodoro - added compatibility for oneTBB
+
 #ifndef PXR_BASE_WORK_DISPATCHER_H
 #define PXR_BASE_WORK_DISPATCHER_H
 
@@ -34,7 +37,12 @@
 #include "pxr/base/tf/errorTransport.h"
 
 #include <tbb/concurrent_vector.h>
-#include <tbb/task.h>
+#ifdef USE_ONETBB									// oteodoro - added line
+  #include "pxr/base/work/threadGlobals.h"						// oteodoro - added line
+  #include <tbb/task_arena.h>								// oteodoro - added line
+#else											// oteodoro - added line
+  #include <tbb/task.h>									// oteodoro - indent
+#endif											// oteodoro - added line
 
 #include <functional>
 #include <type_traits>
@@ -99,7 +107,15 @@ public:
 
     template <class Callable>
     inline void Run(Callable &&c) {
+#ifdef USE_ONETBB									// oteodoro - added line
+//        _task_arena.execute([&c] {							// oteodoro - added line
+//            _task_group.run([&c] {							// oteodoro - added line
+//                _MakeInvokerTask(std::forward<Callable>(c));				// oteodoro - copied line
+//            });										// oteodoro - added line
+//        });										// oteodoro - added line
+#else
         _rootTask->spawn(_MakeInvokerTask(std::forward<Callable>(c)));
+#endif											// oteodoro - added line
     }
 
     template <class Callable, class A0, class ... Args>
@@ -132,6 +148,35 @@ private:
     // Function invoker helper that wraps the invocation with an ErrorMark so we
     // can transmit errors that occur back to the thread that Wait() s for tasks
     // to complete.
+#ifdef USE_ONETBB									// < oteodoro - added line
+    template <class Fn>										//
+    struct _InvokerTask {									// oteodoro - removed inherit
+        explicit _InvokerTask(Fn &&fn, _ErrorTransports *err) 					//
+            : _fn(std::move(fn)), _errors(err) {}						//
+												//
+        explicit _InvokerTask(Fn const &fn, _ErrorTransports *err) 				//
+            : _fn(fn), _errors(err) {}								//
+												//
+        virtual void execute() {								// oteodoro - removed return type
+            TfErrorMark m;									//				 oteodoro - copied block and modifed for oneTBB
+            _fn();										//
+            if (!m.IsClean())									//
+                WorkDispatcher::_TransportErrors(m, _errors);					//
+            											// oteodoro - removed line
+        }											//
+    private:											//
+        Fn _fn;											//
+        _ErrorTransports *_errors;								//
+    };												//
+												//
+    // Make an _InvokerTask instance, letting the function template deduce Fn.			//
+    template <class Fn>										//
+    _InvokerTask<typename std::remove_reference<Fn>::type>&					//
+    _MakeInvokerTask(Fn &&fn) { 								//
+        return *new _InvokerTask<typename std::remove_reference<Fn>::type>(			// oteodoro - changed and combined lines
+                std::forward<Fn>(fn), &_errors);						//
+    }												//
+#else											// < oteodoro - added line
     template <class Fn>
     struct _InvokerTask : public tbb::task {
         explicit _InvokerTask(Fn &&fn, _ErrorTransports *err) 
@@ -160,6 +205,7 @@ private:
             _InvokerTask<typename std::remove_reference<Fn>::type>(
                 std::forward<Fn>(fn), &_errors);
     }
+#endif												// oteodoro - added line
 
     // Helper function that removes errors from \p m and stores them in a new
     // entry in \p errors.
@@ -169,7 +215,11 @@ private:
     // Task group context and associated root task that allows us to cancel
     // tasks invoked directly by this dispatcher.
     tbb::task_group_context _context;
+#ifdef USE_ONETBB										// oteodoro - added line
+    //												// oteodoro - added line
+#else												// oteodoro - added line
     tbb::empty_task* _rootTask;
+#endif												// oteodoro - added line
 
     // The error transports we use to transmit errors in other threads back to
     // this thread.
diff -Nurp USD-21.05.orig/pxr/base/work/threadGlobals.cpp USD-21.05/pxr/base/work/threadGlobals.cpp
--- USD-21.05.orig/pxr/base/work/threadGlobals.cpp	1969-12-31 16:00:00.000000000 -0800
+++ USD-21.05/pxr/base/work/threadGlobals.cpp	2021-07-02 00:41:36.249437619 -0700
@@ -0,0 +1 @@
+// placeholder											# oteodoro - added line
diff -Nurp USD-21.05.orig/pxr/base/work/threadGlobals.h USD-21.05/pxr/base/work/threadGlobals.h
--- USD-21.05.orig/pxr/base/work/threadGlobals.h	1969-12-31 16:00:00.000000000 -0800
+++ USD-21.05/pxr/base/work/threadGlobals.h	2021-07-02 00:41:36.249437619 -0700
@@ -0,0 +1,47 @@
+//
+// Copyright 2016 Pixar
+//
+// Licensed under the Apache License, Version 2.0 (the "Apache License")
+// with the following modification; you may not use this file except in
+// compliance with the Apache License and the following modification to it:
+// Section 6. Trademarks. is deleted and replaced with:
+//
+// 6. Trademarks. This License does not grant permission to use the trade
+//    names, trademarks, service marks, or product names of the Licensor
+//    and its affiliates, except as required to comply with Section 4(c) of
+//    the License and to reproduce the content of the NOTICE file.
+//
+// You may obtain a copy of the Apache License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the Apache License with the above modification is
+// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, either express or implied. See the Apache License for the specific
+// language governing permissions and limitations under the Apache License.
+//
+
+#ifndef PXR_BASE_WORK_THREADGLOBALS_H							// oteodoro - added line
+#define PXR_BASE_WORK_THREADGLOBALS_H							// oteodoro - added line
+											// oteodoro - added line
+#ifdef USE_ONETBB									// oteodoro - added line
+/// \file work/threadGlobals.h								// oteodoro - added line
+											// oteodoro - added line
+#include "pxr/pxr.h"									// oteodoro - added line
+											// oteodoro - added line
+#include <oneapi/tbb/task_arena.h>							// oteodoro - added line
+#include <oneapi/tbb/task_group.h>							// oteodoro - added line
+											// oteodoro - added line
+PXR_NAMESPACE_OPEN_SCOPE								// oteodoro - added line
+											// oteodoro - added line
+#ifdef USE_ONETBB									// oteodoro - added line
+static tbb::task_arena _task_arena;							// oteodoro - added line
+static tbb::task_group _task_group;							// oteodoro - added line
+#endif											// oteodoro - added line
+											// oteodoro - added line
+PXR_NAMESPACE_CLOSE_SCOPE								// oteodoro - added line
+											// oteodoro - added line
+#endif											// oteodoro - added line
+											// oteodoro - added line
+#endif											// oteodoro - added line
diff -Nurp USD-21.05.orig/pxr/base/work/threadLimits.cpp USD-21.05/pxr/base/work/threadLimits.cpp
--- USD-21.05.orig/pxr/base/work/threadLimits.cpp	2021-07-02 00:41:16.296658249 -0700
+++ USD-21.05/pxr/base/work/threadLimits.cpp	2021-07-02 01:35:43.764148165 -0700
@@ -32,7 +32,12 @@
 #include "pxr/base/tf/envSetting.h"
 
 						// oteodoro - removed line
-#include <tbb/task_scheduler_init.h>
+#ifdef USE_ONETBB				// oteodoro - added line
+  #include "pxr/base/work/threadGlobals.h"	// oteodoro - added line
+  #include <oneapi/tbb/task_arena.h>		// oteodoro - added line
+#else						// oteodoro - added line
+  #include <tbb/task_scheduler_init.h>		// oteodoro - indent
+#endif						// oteodoro - added line
 
 #include <algorithm>
 #include <atomic>				// oteodoro - added line
@@ -68,16 +73,24 @@ PXR_NAMESPACE_OPEN_SCOPE
 // WorkSetConcurrencyLimit(n) will actually limit Work to n threads.
 static std::atomic<unsigned> _threadLimit;							// oteodoro - changed tbb::atomic -> std::atomic
 
+#ifdef USE_ONETBB										// oteodoro - added line
+//												// oteodoro - added line
+#else												// oteodoro - added line
 // We create a task_scheduler_init instance at static initialization time if
 // PXR_WORK_THREAD_LIMIT is set to a nonzero value.  Otherwise this stays NULL.
 static tbb::task_scheduler_init *_tbbTaskSchedInit;
+#endif												// oteodoro - added line
 
 unsigned
 WorkGetPhysicalConcurrencyLimit()
 {
     // Use TBB here, since it pays attention to the affinity mask on Linux and
     // Windows.
+#ifdef USE_ONETBB										// oteodoro - added line
+    return _task_arena.max_concurrency();							// oteodoro - added line
+#else												// oteodoro - added line
     return tbb::task_scheduler_init::default_num_threads();
+#endif												// oteodoro - added line
 }
 
 // This function always returns an actual thread count >= 1.
@@ -126,6 +139,11 @@ Work_InitializeThreading()
     // "no change".
     _threadLimit = Work_OverrideConcurrencyLimit(physicalLimit, settingVal);
 
+#ifdef USE_ONETBB										// oteodoro - added line
+//												// oteodoro - added line
+    if (settingVal)
+        _task_arena.initialize(_threadLimit);
+#else												// oteodoro - added line
     // Only eagerly grab TBB if the PXR_WORK_THREAD_LIMIT setting was set to
     // some non-zero value. Otherwise, the scheduler will be default initialized
     // with maximum physical concurrency, or will be left untouched if
@@ -133,6 +151,7 @@ Work_InitializeThreading()
     // as a plugin to another application.)
     if (settingVal)
         _tbbTaskSchedInit = new tbb::task_scheduler_init(_threadLimit);
+#endif												// oteodoro - added line
 }
 static int _forceInitialization = (Work_InitializeThreading(), 0);
 
@@ -165,12 +184,22 @@ WorkSetConcurrencyLimit(unsigned n)
     // According to the documentation that should be the case, but we should
     // make sure.  If we do decide to delete it, we have to make sure to 
     // note that it has already been initialized.
+#ifdef USE_ONETBB										// oteodoro - added line
+//												// oteodoro - added line
+    if (_task_arena.is_active()) {								// oteodoro - added line
+        _task_arena.terminate();								// oteodoro - added line
+        _task_arena.initialize(_threadLimit);							// oteodoro - added line
+    } else {											// oteodoro - added line
+        _task_arena.initialize(_threadLimit);							// oteodoro - added line
+    }
+#else												// oteodoro - added line
     if (_tbbTaskSchedInit) {
         _tbbTaskSchedInit->terminate();
         _tbbTaskSchedInit->initialize(_threadLimit);
     } else {
         _tbbTaskSchedInit = new tbb::task_scheduler_init(_threadLimit);
     }
+#endif												// oteodoro - added line
 }
 
 void 
