Subject:       Changed tbb::atomic to std::atomic for compatibility with 2021.2.0
Author:        Orson Teodoro <orsonteodoro@hotmail.com>
Patch status:  Testing
Date:          Mon Jun 28 04:39:56 AM PDT 2021 (Unix timestamp: 1624880396)


Copyright notice for
pxr/base/tf/diagnosticMgr.cpp:
pxr/base/tf/diagnosticMgr.h:
pxr/base/tf/error.cpp:
pxr/base/work/threadLimits.cpp:
pxr/usd/pcp/cache.cpp:
pxr/usd/pcp/mapExpression.h:
pxr/base/work/threadLimits.cpp:
pxr/usd/sdf/changeManager.cpp:
pxr/usd/sdf/pathNode.cpp:
pxr/usd/sdf/pathNode.h:
pxr/usd/usdGeom/bboxCache.cpp:
pxr/usdImaging/usdImaging/resolvedAttributeCache.h:

//
// Copyright 2016 Pixar
//
// Licensed under the Apache License, Version 2.0 (the "Apache License")
// with the following modification; you may not use this file except in
// compliance with the Apache License and the following modification to it:
// Section 6. Trademarks. is deleted and replaced with:
//
// 6. Trademarks. This License does not grant permission to use the trade
//    names, trademarks, service marks, or product names of the Licensor
//    and its affiliates, except as required to comply with Section 4(c) of
//    the License and to reproduce the content of the NOTICE file.
//
// You may obtain a copy of the Apache License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the Apache License with the above modification is
// distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the Apache License for the specific
// language governing permissions and limitations under the Apache License.
//

diff -urp USD-21.05.orig/pxr/base/tf/diagnosticMgr.cpp USD-21.05/pxr/base/tf/diagnosticMgr.cpp
--- USD-21.05.orig/pxr/base/tf/diagnosticMgr.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/base/tf/diagnosticMgr.cpp	2021-11-09 19:18:18.872184539 -0800
@@ -22,6 +22,8 @@
 // language governing permissions and limitations under the Apache License.
 //
 
+// oteodoro - changes made for compatibilty with tbb 2021.2.0
+
 #include "pxr/pxr.h"
 #include "pxr/base/tf/diagnosticMgr.h"
 
@@ -47,6 +49,7 @@
 #include <signal.h>
 #include <stdlib.h>
 
+#include <atomic>				// oteodoro - added line
 #include <thread>
 #include <memory>
 
@@ -188,7 +191,7 @@ TfDiagnosticMgr::AppendError(TfError con
     } else {
         ErrorList &errorList = _errorList.local();
         errorList.push_back(e);
-        errorList.back()._serial = _nextSerial.fetch_and_increment();
+        errorList.back()._serial = _nextSerial.fetch_add(1, std::memory_order_seq_cst);				// oteodoro - changed to use std::atomics function with sequential-consistent ordering
         _AppendErrorsToLogText(std::prev(errorList.end())); 
     }
 }
@@ -203,7 +206,7 @@ TfDiagnosticMgr::_SpliceErrors(ErrorList
         }
     } else {
         // Reassign new serial numbers to the errors.
-        size_t serial = _nextSerial.fetch_and_add(src.size());
+        size_t serial = _nextSerial.fetch_add(src.size(), std::memory_order_seq_cst);				// oteodoro - changed to use std::atomics function with sequential-consistent ordering
         for (auto& error : src) {
             error._serial = serial++;
         }
diff -urp USD-21.05.orig/pxr/base/tf/diagnosticMgr.h USD-21.05/pxr/base/tf/diagnosticMgr.h
--- USD-21.05.orig/pxr/base/tf/diagnosticMgr.h	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/base/tf/diagnosticMgr.h	2021-11-09 19:18:18.873184538 -0800
@@ -21,6 +21,9 @@
 // KIND, either express or implied. See the Apache License for the specific
 // language governing permissions and limitations under the Apache License.
 //
+
+// oteodoro - changes made for tbb 2021.2.0 compatibility
+
 #ifndef PXR_BASE_TF_DIAGNOSTIC_MGR_H
 #define PXR_BASE_TF_DIAGNOSTIC_MGR_H
 
@@ -45,8 +48,9 @@
 
 #include <tbb/enumerable_thread_specific.h>
 #include <tbb/spin_rw_mutex.h>
-#include <tbb/atomic.h>
+								// oteodoro - removed tbb line
 
+#include <atomic>						// oteodoro - added line
 #include <cstdarg>
 #include <list>
 #include <string>
@@ -434,7 +438,7 @@ private:
     mutable tbb::spin_rw_mutex _delegatesMutex;
 
     // Global serial number for sorting.
-    tbb::atomic<size_t> _nextSerial;
+    std::atomic<size_t> _nextSerial;							// oteodoro - changed tbb::atomic -> std::atomic
 
     // Thread-specific error list.
     tbb::enumerable_thread_specific<ErrorList> _errorList;
diff -urp USD-21.05.orig/pxr/base/tf/error.cpp USD-21.05/pxr/base/tf/error.cpp
--- USD-21.05.orig/pxr/base/tf/error.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/base/tf/error.cpp	2021-11-09 19:18:18.874184538 -0800
@@ -22,11 +22,14 @@
 // language governing permissions and limitations under the Apache License.
 //
 
+// oteodoro - changed for compatibility with tbb 2021.2.0
+
 #include "pxr/pxr.h"
 #include "pxr/base/tf/error.h"
 
 #include "pxr/base/tf/diagnosticMgr.h"
 
+#include <atomic>				// oteodoro - added line
 #include <string>
 
 using std::string;
@@ -39,7 +42,7 @@ TfError::TfError(TfEnum errorCode, const
     : TfDiagnosticBase(errorCode, errorCodeString, context, commentary, info,
                        quiet)
 {
-    _serial = TfDiagnosticMgr::GetInstance()._nextSerial.fetch_and_increment();
+    _serial = TfDiagnosticMgr::GetInstance()._nextSerial.fetch_add(1, std::memory_order_seq_cst);		// oteodoro - changed to use std::atomic function with sequential-consistent ordering
 }
 
 PXR_NAMESPACE_CLOSE_SCOPE
diff -urp USD-21.05.orig/pxr/base/work/threadLimits.cpp USD-21.05/pxr/base/work/threadLimits.cpp
--- USD-21.05.orig/pxr/base/work/threadLimits.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/base/work/threadLimits.cpp	2021-11-09 19:18:18.875184538 -0800
@@ -24,15 +24,18 @@
 // threadLimits.cpp
 //
 
+// oteodoro - changes made for 2021.2.0 compatibility
+
 #include "pxr/pxr.h"
 #include "pxr/base/work/threadLimits.h"
 
 #include "pxr/base/tf/envSetting.h"
 
-#include <tbb/atomic.h>
+						// oteodoro - removed line
 #include <tbb/task_scheduler_init.h>
 
 #include <algorithm>
+#include <atomic>				// oteodoro - added line
 
 PXR_NAMESPACE_USING_DIRECTIVE
 
@@ -63,7 +66,7 @@ PXR_NAMESPACE_OPEN_SCOPE
 // if PXR_WORK_THREAD_LIMIT is set to some nonzero value, otherwise we leave it
 // up to others.  So there's no guarantee that calling
 // WorkSetConcurrencyLimit(n) will actually limit Work to n threads.
-static tbb::atomic<unsigned> _threadLimit;
+static std::atomic<unsigned> _threadLimit;							// oteodoro - changed tbb::atomic -> std::atomic
 
 // We create a task_scheduler_init instance at static initialization time if
 // PXR_WORK_THREAD_LIMIT is set to a nonzero value.  Otherwise this stays NULL.
diff -urp USD-21.05.orig/pxr/usd/pcp/cache.cpp USD-21.05/pxr/usd/pcp/cache.cpp
--- USD-21.05.orig/pxr/usd/pcp/cache.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/usd/pcp/cache.cpp	2021-11-09 19:18:18.876184538 -0800
@@ -22,6 +22,8 @@
 // language governing permissions and limitations under the Apache License.
 //
 
+// oteodoro - changes made for tbb 2021.2.0 compatibility
+
 #include "pxr/pxr.h"
 #include "pxr/usd/pcp/cache.h"
 #include "pxr/usd/pcp/arc.h"
@@ -52,12 +54,13 @@
 #include "pxr/base/tf/envSetting.h"
 #include "pxr/base/tf/registryManager.h"
 
-#include <tbb/atomic.h>
+						// oteodoro - removed line
 #include <tbb/concurrent_queue.h>
 #include <tbb/concurrent_vector.h>
 #include <tbb/spin_rw_mutex.h>
 
 #include <algorithm>
+#include <atomic>				// oteodoro - added line
 #include <iostream>
 #include <utility>
 #include <vector>
diff -urp USD-21.05.orig/pxr/usd/pcp/mapExpression.cpp USD-21.05/pxr/usd/pcp/mapExpression.cpp
--- USD-21.05.orig/pxr/usd/pcp/mapExpression.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/usd/pcp/mapExpression.cpp	2021-11-09 19:26:11.913153806 -0800
@@ -22,6 +22,8 @@
 // language governing permissions and limitations under the Apache License.
 //
 
+// oteodoro - changed for compatibility with tbb 2021.2.0
+
 #include "pxr/pxr.h"
 #include "pxr/usd/pcp/mapExpression.h"
 #include "pxr/usd/pcp/mapFunction.h"
@@ -29,6 +31,7 @@
 
 #include "pxr/base/trace/trace.h"
 
+#include <atomic>				// oteodoro - added line
 #include <tbb/concurrent_hash_map.h>
 
 PXR_NAMESPACE_OPEN_SCOPE
@@ -254,7 +257,7 @@ PcpMapExpression::_Node::New( _Op op_,
         // Check for existing instance to re-use
         _NodeMap::accessor accessor;
         if (_nodeRegistry->map.insert(accessor, key) ||
-            accessor->second->_refCount.fetch_and_increment() == 0) {
+            accessor->second->_refCount.fetch_add(1, std::memory_order_seq_cst) == 0) {			// oteodoro - changed to use std::atomic function with sequential-consistent ordering
             // Either there was no node in the table, or there was but it had
             // begun dying (another client dropped its refcount to 0).  We have
             // to create a new node in the table.  When the client that is
@@ -403,7 +406,7 @@ intrusive_ptr_add_ref(PcpMapExpression::
 void
 intrusive_ptr_release(PcpMapExpression::_Node* p)
 {
-    if (p->_refCount.fetch_and_decrement() == 1)
+    if (p->_refCount.fetch_sub(1, std::memory_order_seq_cst) == 1)					// oteodoro: used std::atomic<T>::fetch_sub()
         delete p;
 }
 
diff -urp USD-21.05.orig/pxr/usd/pcp/mapExpression.h USD-21.05/pxr/usd/pcp/mapExpression.h
--- USD-21.05.orig/pxr/usd/pcp/mapExpression.h	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/usd/pcp/mapExpression.h	2021-11-09 19:18:18.879184538 -0800
@@ -21,6 +21,9 @@
 // KIND, either express or implied. See the Apache License for the specific
 // language governing permissions and limitations under the Apache License.
 //
+
+// oteodoro - changes made for tbb 2021.2.0 compatibility
+
 #ifndef PXR_USD_PCP_MAP_EXPRESSION_H
 #define PXR_USD_PCP_MAP_EXPRESSION_H
 
@@ -30,7 +33,7 @@
 
 #include <boost/intrusive_ptr.hpp>
 
-#include <tbb/atomic.h>
+					// oteodoro - removed line
 #include <tbb/spin_mutex.h>
 
 #include <atomic>
@@ -264,7 +267,7 @@ private: // data
         struct _NodeMap;
         static TfStaticData<_NodeMap> _nodeRegistry;
 
-        mutable tbb::atomic<int> _refCount;
+        mutable std::atomic<int> _refCount;					// oteodoro - changed tbb::atomic -> std::atomic
         mutable Value _cachedValue;
         mutable std::set<_Node*> _dependentExpressions;
         Value _valueForVariable;
diff -urp USD-21.05.orig/pxr/usd/sdf/changeManager.cpp USD-21.05/pxr/usd/sdf/changeManager.cpp
--- USD-21.05.orig/pxr/usd/sdf/changeManager.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/usd/sdf/changeManager.cpp	2021-11-09 19:18:18.880184538 -0800
@@ -22,6 +22,8 @@
 // language governing permissions and limitations under the Apache License.
 //
 
+// otoeodoro - changes made for tbb 2021.2.0 compatibility
+
 #include "pxr/pxr.h"
 #include "pxr/usd/sdf/changeManager.h"
 #include "pxr/usd/sdf/debugCodes.h"
@@ -32,11 +34,13 @@
 #include "pxr/base/trace/trace.h"
 #include "pxr/base/tf/instantiateSingleton.h"
 #include "pxr/base/tf/stackTrace.h"
+#include <atomic>		// oteodoro - added line
 
-#include <tbb/atomic.h>
+				// oteodoro - removed line
 
 using std::string;
 using std::vector;
+using std::atomic;		// oteodoro - added line
 
 PXR_NAMESPACE_OPEN_SCOPE
 
@@ -147,9 +151,9 @@ Sdf_ChangeManager::_ProcessRemoveIfInert
     TF_VERIFY(data.changeBlockDepth == 1);
 }
 
-static tbb::atomic<size_t> &
+static std::atomic<size_t> &			// oteodoro - changed tbb::atomic -> std::atomic
 _InitChangeSerialNumber() {
-    static tbb::atomic<size_t> value;
+    static std::atomic<size_t> value;		// oteodoro - changed tbb::atomic -> std::atomic
     value = 1;
     return value;
 }
@@ -186,8 +190,8 @@ Sdf_ChangeManager::_SendNotices()
     }
 
     // Obtain a serial number for this round of change processing.
-    static tbb::atomic<size_t> &changeSerialNumber = _InitChangeSerialNumber();
-    size_t serialNumber = changeSerialNumber.fetch_and_increment();
+    static std::atomic<size_t> &changeSerialNumber = _InitChangeSerialNumber();		// oteodoro - changed tbb::atomic -> std::atomic
+    size_t serialNumber = changeSerialNumber.fetch_add(1, std::memory_order_seq_cst);	// oteodoro - changed to use std::atomic function with sequential-consistent ordering
 
     // Send global notice.
     SdfNotice::LayersDidChange(changes, serialNumber).Send();
diff -urp USD-21.05.orig/pxr/usd/sdf/pathNode.cpp USD-21.05/pxr/usd/sdf/pathNode.cpp
--- USD-21.05.orig/pxr/usd/sdf/pathNode.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/usd/sdf/pathNode.cpp	2021-11-09 19:18:18.881184538 -0800
@@ -22,6 +22,8 @@
 // language governing permissions and limitations under the Apache License.
 //
 
+// oteodoro - changes made for tbb 2021 compatibility
+
 #include "pxr/pxr.h"
 #include "pxr/usd/sdf/path.h"
 #include "pxr/usd/sdf/tokens.h"
@@ -47,6 +49,7 @@
 
 using std::string;
 using std::vector;
+using std::atomic;									// oteodoro - added line
 
 PXR_NAMESPACE_OPEN_SCOPE
 
@@ -61,7 +64,7 @@ static_assert(sizeof(Sdf_PrimPropertyPat
 struct Sdf_PathNodePrivateAccess
 {
     template <class Handle>
-    static inline tbb::atomic<unsigned int> &
+    static inline std::atomic<unsigned int> &						// oteodoro - changed tbb::atomic -> std::atomic
     GetRefCount(Handle h) {
         Sdf_PathNode const *p =
             reinterpret_cast<Sdf_PathNode const *>(h.GetPtr());
@@ -174,7 +177,7 @@ _FindOrCreate(Table &table,
 {
     typename Table::Type::accessor accessor;
     if (table.map.insert(accessor, _MakeParentAnd(parent, args...)) ||
-        Access::GetRefCount(accessor->second).fetch_and_increment() == 0) {
+        Access::GetRefCount(accessor->second).fetch_add(1, std::memory_order_seq_cst) == 0) {		// oteodoro - changed to use std::atomic function with sequential-consistent ordering
         // Either there was no entry in the table, or there was but it had begun
         // dying (another client dropped its refcount to 0).  We have to create
         // a new entry in the table.  When the client that is killing the other
diff -urp USD-21.05.orig/pxr/usd/sdf/pathNode.h USD-21.05/pxr/usd/sdf/pathNode.h
--- USD-21.05.orig/pxr/usd/sdf/pathNode.h	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/usd/sdf/pathNode.h	2021-11-09 19:26:07.443154096 -0800
@@ -21,6 +21,9 @@
 // KIND, either express or implied. See the Apache License for the specific
 // language governing permissions and limitations under the Apache License.
 //
+
+// oteodoro - changes made for tbb 2021.2.0 compatibility
+
 #ifndef PXR_USD_SDF_PATH_NODE_H
 #define PXR_USD_SDF_PATH_NODE_H
 
@@ -29,10 +32,11 @@
 #include "pxr/base/tf/token.h"
 #include "pxr/base/tf/mallocTag.h"
 
+#include <atomic>				// oteodoro - added line
 #include <boost/noncopyable.hpp>
 #include <boost/intrusive_ptr.hpp>
 
-#include <tbb/atomic.h>
+						// oteodoro - removed tbb line
 
 PXR_NAMESPACE_OPEN_SCOPE
 
@@ -287,7 +291,7 @@ private:
     // Instance variables.  PathNode's size is important to keep small.  Please
     // be mindful of that when making any changes here.
     const Sdf_PathNodeConstRefPtr _parent;
-    mutable tbb::atomic<unsigned int> _refCount;
+    mutable std::atomic<unsigned int> _refCount;					// oteodoro - changed tbb::atomic -> std::atomic
 
     const short _elementCount;
     const unsigned char _nodeType;
@@ -723,7 +727,7 @@ inline void intrusive_ptr_add_ref(const
     ++p->_refCount;
 }
 inline void intrusive_ptr_release(const PXR_NS::Sdf_PathNode* p) {
-    if (p->_refCount.fetch_and_decrement() == 1)
+    if (p->_refCount.fetch_sub(1, std::memory_order_seq_cst) == 1)					// oteodoro: used std::atomic<T>::fetch_sub()
         p->_Destroy();
 }
 
diff -urp USD-21.05.orig/pxr/usd/usdGeom/bboxCache.cpp USD-21.05/pxr/usd/usdGeom/bboxCache.cpp
--- USD-21.05.orig/pxr/usd/usdGeom/bboxCache.cpp	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/usd/usdGeom/bboxCache.cpp	2021-11-09 19:26:13.262153718 -0800
@@ -21,6 +21,9 @@
 // KIND, either express or implied. See the Apache License for the specific
 // language governing permissions and limitations under the Apache License.
 //
+
+// oteodoro - changes made for 2021.2.0 compatibility
+
 #include "pxr/pxr.h"
 #include "pxr/usd/usdGeom/bboxCache.h"
 
@@ -42,6 +45,7 @@
 
 #include <tbb/enumerable_thread_specific.h>
 #include <algorithm>
+#include <atomic>								// oteodoro - added line
 
 PXR_NAMESPACE_OPEN_SCOPE
 
@@ -101,7 +105,7 @@ private:
 
         // Number of dependencies -- prototype prims that must be resolved
         // before this prototype can be resolved.
-        tbb::atomic<size_t> numDependencies;
+        std::atomic<size_t> numDependencies;						// oteodoro - changed tbb::atomic -> std::atomic
 
         // List of prototype prims that depend on this prototype.
         std::vector<_PrimContext> dependentPrototypes;
@@ -193,7 +197,7 @@ private:
             _PrototypeTask& dependentPrototypeData =
                 prototypeTasks->find(dependentPrototype)->second;
             if (dependentPrototypeData.numDependencies
-                .fetch_and_decrement() == 1){
+                .fetch_sub(1, std::memory_order_seq_cst) == 1){						// oteodoro: used std::atomic<T>::fetch_sub()
                 dispatcher->Run(
                     &_PrototypeBBoxResolver::_ExecuteTaskForPrototype,
                     this, dependentPrototype, prototypeTasks, xfCaches,
diff -urp USD-21.05.orig/pxr/usdImaging/usdImaging/resolvedAttributeCache.h USD-21.05/pxr/usdImaging/usdImaging/resolvedAttributeCache.h
--- USD-21.05.orig/pxr/usdImaging/usdImaging/resolvedAttributeCache.h	2021-04-12 15:09:41.000000000 -0700
+++ USD-21.05/pxr/usdImaging/usdImaging/resolvedAttributeCache.h	2021-11-09 19:18:18.883184538 -0800
@@ -21,6 +21,9 @@
 // KIND, either express or implied. See the Apache License for the specific
 // language governing permissions and limitations under the Apache License.
 //
+
+// oteodoro - changes made for 2021.2.0 compatibility
+
 #ifndef PXR_USD_IMAGING_USD_IMAGING_INHERITED_CACHE_H
 #define PXR_USD_IMAGING_USD_IMAGING_INHERITED_CACHE_H
 
@@ -38,6 +41,7 @@
 #include <boost/functional/hash.hpp>
 #include <tbb/concurrent_unordered_map.h>
 #include <functional>
+#include <atomic>								// oteodoro - added line
 
 PXR_NAMESPACE_OPEN_SCOPE
 
@@ -303,7 +307,7 @@ private:
 
         query_type query;
         value_type value;
-        tbb::atomic<unsigned> version;
+        std::atomic<unsigned> version;							// oteodoro - changed tbb::atomic -> std::atomic
     };
 
     // Returns the version number for a valid cache entry
@@ -343,7 +347,7 @@ private:
 
     // A serial number indicating the valid state of entries in the cache. When
     // an entry has an equal or greater value, the entry is valid.
-    tbb::atomic<unsigned> _cacheVersion;
+    std::atomic<unsigned> _cacheVersion;							// oteodoro - changed tbb::atomic -> std::atomic
 
     // Value overrides for a set of descendents.
     ValueOverridesMap _valueOverrides;
