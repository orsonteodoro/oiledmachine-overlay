Subject:  Add static-libs support
Author:   Orson Teodoro <orsonteodoro@hotmail.com
Date:     Sun Jun 27 08:43:11 PM PDT 2021 (Unix timestamp: 1624851791)


Copyright notice for cmake/templates/TBBConfig.cmake.in:

# Copyright (c) 2017-2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


Copyright notice for CMakeLists.txt:

# Copyright (c) 2020-2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


Copyright notice for src/tbb/CMakeLists.txt:

# Copyright (c) 2020-2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


Copyright notice for src/tbbbind/CMakeLists.txt:

# Copyright (c) 2020-2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


Copyright notice for src/tbbmalloc/CMakeLists.txt:

# Copyright (c) 2020-2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


Copyright notice for src/tbbmalloc_proxy/CMakeLists.txt:

# Copyright (c) 2020-2021 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


Copyright notice for src/tbbmalloc_proxy/proxy.h:

/*
    Copyright (c) 2005-2021 Intel Corporation
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

diff -urp oneTBB-2021.2.0.orig/cmake/templates/TBBConfig.cmake.in oneTBB-2021.2.0/cmake/templates/TBBConfig.cmake.in
--- oneTBB-2021.2.0.orig/cmake/templates/TBBConfig.cmake.in	2021-01-27 12:03:49.000000000 -0800
+++ oneTBB-2021.2.0/cmake/templates/TBBConfig.cmake.in	2021-06-27 17:36:40.850157139 -0700
@@ -12,6 +12,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+# oteodoro - changes for static-libs support
+
 # It defines the following variables:
 #     TBB_<component>_FOUND
 #     TBB_IMPORTED_TARGETS
@@ -22,9 +24,15 @@
 if (NOT TBB_IMPORTED_TARGETS)
     set(TBB_IMPORTED_TARGETS "")
 endif()
+												# oteodoro - added line
+option(TBB_USE_STATIC_LIBS "Build for static libs" OFF)						# oteodoro - added line
 
 if (NOT TBB_FIND_COMPONENTS)
-    set(TBB_FIND_COMPONENTS "tbb;tbbmalloc;tbbmalloc_proxy")
+    if (TBB_USE_STATIC_LIBS)									# oteodoro - added line
+        set(TBB_FIND_COMPONENTS "tbb_static;tbbmalloc_static;tbbmalloc_proxy_static")		# oteodoro - added line
+    else()											# oteodoro - added line
+        set(TBB_FIND_COMPONENTS "tbb;tbbmalloc;tbbmalloc_proxy")				# oteodoro - indent
+    endif()											# oteodoro - added line
     foreach (_tbb_component ${TBB_FIND_COMPONENTS})
         set(TBB_FIND_REQUIRED_${_tbb_component} 1)
     endforeach()
@@ -47,11 +55,24 @@ unset(_tbbmalloc_proxy_ix)
 foreach (_tbb_component ${TBB_FIND_COMPONENTS})
     set(TBB_${_tbb_component}_FOUND 0)
     @TBB_HANDLE_BIN_VERSION@
-    get_filename_component(_tbb_release_lib "${_tbb_root}/@TBB_LIB_REL_PATH@/${_tbb_subdir}/@TBB_LIB_PREFIX@${_tbb_component}${_bin_version}.@TBB_LIB_EXT@" ABSOLUTE)
-
-    if (NOT TBB_FIND_RELEASE_ONLY)
-        get_filename_component(_tbb_debug_lib "${_tbb_root}/@TBB_LIB_REL_PATH@/${_tbb_subdir}/@TBB_LIB_PREFIX@${_tbb_component}${_bin_version}_debug.@TBB_LIB_EXT@" ABSOLUTE)
-    endif()
+    if (${_tbb_component} MATCHES .+_static$)																		# oteodoro - added line
+        set(TBB_USE_STATIC_LIBS 1)																			# oteodoro - added line
+    else																						# oteodoro - added line
+        set(TBB_USE_STATIC_LIBS 0)																			# oteodoro - added line
+    endif()																						# oteodoro - added line
+    if (TBB_USE_STATIC_LIBS)																				# oteodoro - added line
+        get_filename_component(_tbb_release_lib "${_tbb_root}/@TBB_LIB_REL_PATH@/${_tbb_subdir}/@TBB_LIB_PREFIX@${_tbb_component}${_bin_version}.a" ABSOLUTE)				# oteodoro - added line
+																							# oteodoro - added line
+        if (NOT TBB_FIND_RELEASE_ONLY)																			# oteodoro - added line
+            get_filename_component(_tbb_debug_lib "${_tbb_root}/@TBB_LIB_REL_PATH@/${_tbb_subdir}/@TBB_LIB_PREFIX@${_tbb_component}${_bin_version}_debug.a" ABSOLUTE)			# oteodoro - added line
+        endif()																						# oteodoro - added line
+    else ()																						# oteodoro - added line
+        get_filename_component(_tbb_release_lib "${_tbb_root}/@TBB_LIB_REL_PATH@/${_tbb_subdir}/@TBB_LIB_PREFIX@${_tbb_component}${_bin_version}.@TBB_LIB_EXT@" ABSOLUTE)		# oteodoro - indented
+
+        if (NOT TBB_FIND_RELEASE_ONLY)																			# oteodoro - indented
+            get_filename_component(_tbb_debug_lib "${_tbb_root}/@TBB_LIB_REL_PATH@/${_tbb_subdir}/@TBB_LIB_PREFIX@${_tbb_component}${_bin_version}_debug.@TBB_LIB_EXT@" ABSOLUTE)	# oteodoro - indented
+        endif()																						# oteodoro - indented
+    endif()																						# oteodoro - added line
 
     if (EXISTS "${_tbb_release_lib}" OR EXISTS "${_tbb_debug_lib}")
         if (NOT TARGET TBB::${_tbb_component})
diff -urp oneTBB-2021.2.0.orig/CMakeLists.txt oneTBB-2021.2.0/CMakeLists.txt
--- oneTBB-2021.2.0.orig/CMakeLists.txt	2021-01-27 12:03:49.000000000 -0800
+++ oneTBB-2021.2.0/CMakeLists.txt	2021-06-27 17:36:40.850157139 -0700
@@ -12,6 +12,8 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+# oteodoro - added static-libs support
+
 cmake_minimum_required(VERSION 3.1)
 
 # Enable CMake policies
@@ -100,12 +102,13 @@ option(TBB_NO_APPCONTAINER "Apply /APPCO
 option(TBB4PY_BUILD "Enable tbb4py build" OFF)
 option(TBB_CPF "Enable preview features of the library" OFF)
 option(TBB_FIND_PACKAGE "Enable search for external oneTBB using find_package instead of build from sources" OFF)
+option(BUILD_STATIC_LIBS "Enable building static libs" OFF)									# oteodoro - added
 
 if (NOT DEFINED BUILD_SHARED_LIBS)
     set(BUILD_SHARED_LIBS ON)
 endif()
 
-if (NOT BUILD_SHARED_LIBS)
+if (BUILD_STATIC_LIBS)														# oteodoro - changed  NOT BUILD_SHARED_LIBS -> BUILD_SHARED_LIBS
     message(WARNING "You are building oneTBB as a static library. This is highly discouraged and such configuration is not supported. Consider building a dynamic library to avoid unforeseen issues.")
 endif()
 
diff -urp oneTBB-2021.2.0.orig/src/tbb/CMakeLists.txt oneTBB-2021.2.0/src/tbb/CMakeLists.txt
--- oneTBB-2021.2.0.orig/src/tbb/CMakeLists.txt	2021-01-27 12:03:49.000000000 -0800
+++ oneTBB-2021.2.0/src/tbb/CMakeLists.txt	2021-06-27 17:50:11.477506036 -0700
@@ -12,7 +12,9 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-add_library(tbb 
+# oteodoro - changes for static-libs
+
+set(tbb_srcs 					# oteodoro - changed line
     allocator.cpp
     arena.cpp
     arena_slot.cpp
@@ -41,97 +43,114 @@ add_library(tbb
     version.cpp
     queuing_rw_mutex.cpp)
 
-add_library(TBB::tbb ALIAS tbb)
-
-if (WIN32)
-    set_target_properties(tbb PROPERTIES OUTPUT_NAME "tbb${TBB_BINARY_VERSION}")
-endif()
-
-# TODO: Add statistics.cpp
-
-target_compile_definitions(tbb
-                           PUBLIC
-                           $<$<CONFIG:DEBUG>:TBB_USE_DEBUG>
-                           PRIVATE
-                           __TBB_BUILD)
-
-if (NOT ("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "(armv7-a|aarch64|mips|arm64)" OR
-         "${CMAKE_OSX_ARCHITECTURES}" MATCHES "arm64" OR
-         WINDOWS_STORE OR
-         TBB_WINDOWS_DRIVER))
-    target_compile_definitions(tbb PRIVATE __TBB_USE_ITT_NOTIFY)
-endif()
-
-target_include_directories(tbb
-    PUBLIC
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>
-    $<INSTALL_INTERFACE:include>)
-
-target_compile_options(tbb
-    PRIVATE
-    ${TBB_CXX_STD_FLAG} # TODO: consider making it PUBLIC.
-    ${TBB_MMD_FLAG}
-    ${TBB_DSE_FLAG}
-    ${TBB_WARNING_LEVEL}
-    ${TBB_WARNING_SUPPRESS}
-    ${TBB_LIB_COMPILE_FLAGS}
-    ${TBB_COMMON_COMPILE_FLAGS}
-)
-
-# Avoid use of target_link_libraries here as it changes /DEF option to \DEF on Windows.
-set_target_properties(tbb PROPERTIES
-    DEFINE_SYMBOL ""
-    VERSION ${TBB_BINARY_VERSION}.${TBB_BINARY_MINOR_VERSION}
-    SOVERSION ${TBB_BINARY_VERSION}
-    LINK_FLAGS ${TBB_LINK_DEF_FILE_FLAG}${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-tbb.def
-    LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-tbb.def
-)
-
-# Prefer using target_link_options instead of target_link_libraries to specify link options because
-# target_link_libraries may incorrectly handle some options (on Windows, for example).
-if (COMMAND target_link_options)
-    target_link_options(tbb
-        PRIVATE
-        ${TBB_LIB_LINK_FLAGS}
-        ${TBB_COMMON_LINK_FLAGS}
-    )
-else()
-    target_link_libraries(tbb
-        PRIVATE
-        ${TBB_LIB_LINK_FLAGS}
-        ${TBB_COMMON_LINK_FLAGS}
-    )
-endif()
-
-target_link_libraries(tbb
-    PRIVATE
-    Threads::Threads
-    ${TBB_LIB_LINK_LIBS}
-    ${TBB_COMMON_LINK_LIBS}
-)
-
-tbb_install_target(tbb)
-
-if (WIN32)
-    # Create a copy of target linker file (tbb<ver>[_debug].lib) with legacy name (tbb[_debug].lib)
-    # to support previous user experience for linkage.
-    install(FILES
-            $<TARGET_LINKER_FILE:tbb>
-            DESTINATION lib
-            CONFIGURATIONS RelWithDebInfo Release MinSizeRel
-            RENAME tbb.lib
-            COMPONENT devel
-    )
+add_library(tbb SHARED ${tbb_srcs})								# oteodoro - added line
+if (BUILD_STATIC_LIBS)										# oteodoro - added line
+    add_library(tbb_static STATIC ${tbb_srcs})							# oteodoro - added line
+    set_property(TARGET tbb_static								# oteodoro - added line
+        APPEND PROPERTY COMPILE_FLAGS -fPIC)							# oteodoro - added line
+    target_compile_definitions(tbb_static PUBLIC __TBB_DYNAMIC_LOAD_ENABLED=0)			# oteodoro - added line
+endif()												# oteodoro - added line
 
-    install(FILES
-            $<TARGET_LINKER_FILE:tbb>
-            DESTINATION lib
-            CONFIGURATIONS Debug
-            RENAME tbb_debug.lib
-            COMPONENT devel
+add_library(TBB::tbb ALIAS tbb)
+if (BUILD_STATIC_LIBS)										# oteodoro - added line
+    add_library(TBB::tbb_static ALIAS tbb_static)						# oteodoro - added line
+    set(tbb_static_ "tbb_static")								# oteodoro - added line
+endif()												# oteodoro - added line
+
+# oteodoro - [1] = indented
+
+foreach(impl tbb ${tbb_static_})								# oteodoro - added line
+
+    if (WIN32)													# oteodoro - [1]
+        set_target_properties(${impl} PROPERTIES OUTPUT_NAME "tbb${TBB_BINARY_VERSION}")			# oteodoro - [1], tbb -> ${impl}
+    endif()													# oteodoro - [1]
+
+    # TODO: Add statistics.cpp											# oteodoro - [1]
+
+    target_compile_definitions(${impl}										# oteodoro - [1], tbb -> ${impl}
+                               PUBLIC										# oteodoro - [1]
+                               $<$<CONFIG:DEBUG>:TBB_USE_DEBUG>							# oteodoro - [1]
+                               PRIVATE										# oteodoro - [1]
+                               __TBB_BUILD)									# oteodoro - [1]
+
+    if (NOT ("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "(armv7-a|aarch64|mips|arm64)" OR				# oteodoro - [1]
+             "${CMAKE_OSX_ARCHITECTURES}" MATCHES "arm64" OR							# oteodoro - [1]
+             WINDOWS_STORE OR											# oteodoro - [1]
+             TBB_WINDOWS_DRIVER))										# oteodoro - [1]
+        target_compile_definitions(${impl} PRIVATE __TBB_USE_ITT_NOTIFY)					# oteodoro - [1], tbb -> ${impl}
+    endif()													# oteodoro - [1]
+
+    target_include_directories(${impl}										# oteodoro - [1], tbb -> ${impl}
+        PUBLIC													# oteodoro - [1]
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>						# oteodoro - [1]
+        $<INSTALL_INTERFACE:include>)										# oteodoro - [1]
+
+    target_compile_options(${impl}										# oteodoro - [1], tbb -> ${impl}
+        PRIVATE													# oteodoro - [1]
+        ${TBB_CXX_STD_FLAG} # TODO: consider making it PUBLIC.							# oteodoro - [1]
+        ${TBB_MMD_FLAG}												# oteodoro - [1]
+        ${TBB_DSE_FLAG}												# oteodoro - [1]
+        ${TBB_WARNING_LEVEL}											# oteodoro - [1]
+        ${TBB_WARNING_SUPPRESS}											# oteodoro - [1]
+        ${TBB_LIB_COMPILE_FLAGS}										# oteodoro - [1]
+        ${TBB_COMMON_COMPILE_FLAGS}										# oteodoro - [1]
     )
-endif()
 
-if (COMMAND tbb_gen_vars)
-    tbb_gen_vars(tbb)
-endif()
+    # Avoid use of target_link_libraries here as it changes /DEF option to \DEF on Windows.			# oteodoro - [1]
+    set_target_properties(${impl} PROPERTIES									# oteodoro - [1], tbb -> ${impl}
+        DEFINE_SYMBOL ""											# oteodoro - [1]
+        VERSION ${TBB_BINARY_VERSION}.${TBB_BINARY_MINOR_VERSION}						# oteodoro - [1]
+        SOVERSION ${TBB_BINARY_VERSION}										# oteodoro - [1]
+        LINK_FLAGS ${TBB_LINK_DEF_FILE_FLAG}${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-tbb.def	# oteodoro - [1]
+        LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-tbb.def				# oteodoro - [1]
+    )														# oteodoro - [1]
+
+    # Prefer using target_link_options instead of target_link_libraries to specify link options because		# oteodoro - [1]
+    # target_link_libraries may incorrectly handle some options (on Windows, for example).			# oteodoro - [1]
+    if (COMMAND target_link_options)										# oteodoro - [1]
+        target_link_options(${impl}										# oteodoro - [1], tbb -> ${impl}
+            PRIVATE												# oteodoro - [1]
+            ${TBB_LIB_LINK_FLAGS}										# oteodoro - [1]
+            ${TBB_COMMON_LINK_FLAGS}										# oteodoro - [1]
+        )													# oteodoro - [1]
+    else()													# oteodoro - [1]
+        target_link_libraries(${impl}										# oteodoro - [1], tbb -> ${impl}
+            PRIVATE												# oteodoro - [1]
+            ${TBB_LIB_LINK_FLAGS}										# oteodoro - [1]
+            ${TBB_COMMON_LINK_FLAGS}										# oteodoro - [1]
+        )													# oteodoro - [1]
+    endif()													# oteodoro - [1]
+
+    target_link_libraries(${impl}										# oteodoro - [1]
+        PRIVATE													# oteodoro - [1]
+        Threads::Threads											# oteodoro - [1]
+        ${TBB_LIB_LINK_LIBS}											# oteodoro - [1]
+        ${TBB_COMMON_LINK_LIBS}											# oteodoro - [1]
+    )														# oteodoro - [1]
+
+    tbb_install_target(${impl})											# oteodoro - [1], tbb -> ${impl}
+
+    if (WIN32)													# oteodoro - [1]
+        # Create a copy of target linker file (tbb<ver>[_debug].lib) with legacy name (tbb[_debug].lib)		# oteodoro - [1]
+        # to support previous user experience for linkage.							# oteodoro - [1]
+        install(FILES												# oteodoro - [1]
+                $<TARGET_LINKER_FILE:${impl}>									# oteodoro - [1], tbb -> ${impl}
+                DESTINATION lib											# oteodoro - [1]
+                CONFIGURATIONS RelWithDebInfo Release MinSizeRel						# oteodoro - [1]
+                RENAME ${impl}.lib										# oteodoro - [1], tbb -> ${impl}
+                COMPONENT devel											# oteodoro - [1]
+        )													# oteodoro - [1]
+
+        install(FILES												# oteodoro - [1]
+                $<TARGET_LINKER_FILE:${impl}>									# oteodoro - [1], tbb -> ${impl}
+                DESTINATION lib											# oteodoro - [1]
+                CONFIGURATIONS Debug										# oteodoro - [1]
+                RENAME ${impl}_debug.lib									# oteodoro - [1], tbb -> ${impl}
+                COMPONENT devel											# oteodoro - [1]
+        )													# oteodoro - [1]
+    endif()													# oteodoro - [1]
+
+    if (COMMAND tbb_gen_vars)											# oteodoro - [1]
+        tbb_gen_vars(${impl})											# oteodoro - [1], tbb -> ${impl}
+    endif()													# oteodoro - [1]
+endforeach()													# oteodoro - [1]
diff -urp oneTBB-2021.2.0.orig/src/tbbbind/CMakeLists.txt oneTBB-2021.2.0/src/tbbbind/CMakeLists.txt
--- oneTBB-2021.2.0.orig/src/tbbbind/CMakeLists.txt	2021-01-27 12:03:49.000000000 -0800
+++ oneTBB-2021.2.0/src/tbbbind/CMakeLists.txt	2021-06-27 17:36:40.850157139 -0700
@@ -12,20 +12,26 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+# oteodoro - changes for static-libs
+
 if (DEFINED CMAKE_SKIP_BUILD_RPATH)
     set(CMAKE_SKIP_BUILD_RPATH_OLD_VALUE ${CMAKE_SKIP_BUILD_RPATH})
 endif()
 set(CMAKE_SKIP_BUILD_RPATH TRUE)
 
-macro(tbbbind_build TBBBIND_NAME REQUIRED_HWLOC_TARGET)
+macro(tbbbind_build TBBBIND_NAME REQUIRED_HWLOC_TARGET TBBBIND_LIB_TYPE)					# oteodoro - changes
     if (NOT TARGET ${REQUIRED_HWLOC_TARGET})
         message(STATUS
             "HWLOC target ${REQUIRED_HWLOC_TARGET} doesn't exist."
             " The ${TBBBIND_NAME} target cannot be created"
         )
     else()
-        add_library(${TBBBIND_NAME} tbb_bind.cpp)
+        add_library(${TBBBIND_NAME} ${TBBBIND_LIB_TYPE} tbb_bind.cpp)
         add_library(TBB::${TBBBIND_NAME} ALIAS ${TBBBIND_NAME})
+        if (TBBBIND_LIB_TYPE STRING STATIC)									# oteodoro - added line
+            set_property(TARGET ${TBBBIND_NAME}									# oteodoro - added line
+                APPEND PROPERTY COMPILE_FLAGS -fPIC)								# oteodoro - added line
+        endif()													# oteodoro - added line
 
         target_compile_definitions(${TBBBIND_NAME}
                                    PUBLIC
@@ -88,9 +94,16 @@ macro(tbbbind_build TBBBIND_NAME REQUIRE
     endif()
 endmacro()
 
-tbbbind_build(tbbbind     HWLOC::hwloc_1_11)
-tbbbind_build(tbbbind_2_0 HWLOC::hwloc_2   )
-tbbbind_build(tbbbind_2_4 HWLOC::hwloc_2_4 )
+tbbbind_build(tbbbind     HWLOC::hwloc_1_11 SHARED)			# oteodoro - changed with SHARED
+tbbbind_build(tbbbind_2_0 HWLOC::hwloc_2    SHARED)			# oteodoro - changed with SHARED
+tbbbind_build(tbbbind_2_4 HWLOC::hwloc_2_4  SHARED)			# oteodoro - changed with SHARED
+
+if (BUILD_STATIC_LIBS)							# oteodoro - added
+    message(STATUS "Building static tbbbind")				# oteodoro - added
+    tbbbind_build(tbbbind_static     HWLOC::hwloc_1_11 STATIC)		# oteodoro - added
+    tbbbind_build(tbbbind_static_2_0 HWLOC::hwloc_2    STATIC)		# oteodoro - added
+    tbbbind_build(tbbbind_static_2_4 HWLOC::hwloc_2_4  STATIC)		# oteodoro - added
+endif()									# oteodoro - added
 
 if (DEFINED CMAKE_SKIP_BUILD_RPATH_OLD_VALUE)
     set(CMAKE_SKIP_BUILD_RPATH ${CMAKE_SKIP_BUILD_RPATH_OLD_VALUE})
diff -urp oneTBB-2021.2.0.orig/src/tbbmalloc/CMakeLists.txt oneTBB-2021.2.0/src/tbbmalloc/CMakeLists.txt
--- oneTBB-2021.2.0.orig/src/tbbmalloc/CMakeLists.txt	2021-01-27 12:03:49.000000000 -0800
+++ oneTBB-2021.2.0/src/tbbmalloc/CMakeLists.txt	2021-06-27 17:36:40.850157139 -0700
@@ -12,7 +12,9 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-add_library(tbbmalloc 
+# oteodoro - changes to build static-libs
+
+set(tbbmalloc_srcs											# oteodoro - changed
     backend.cpp
     backref.cpp
     frontend.cpp
@@ -20,75 +22,92 @@ add_library(tbbmalloc
     tbbmalloc.cpp
     ../tbb/itt_notify.cpp)
 
-add_library(TBB::tbbmalloc ALIAS tbbmalloc)
-
-target_compile_definitions(tbbmalloc
-                           PUBLIC
-                           $<$<CONFIG:DEBUG>:TBB_USE_DEBUG>
-                           PRIVATE
-                           __TBBMALLOC_BUILD)
-
-if (NOT ("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "(armv7-a|aarch64|mips|arm64)" OR
-         "${CMAKE_OSX_ARCHITECTURES}" MATCHES "arm64" OR
-         WINDOWS_STORE OR
-         TBB_WINDOWS_DRIVER))
-    target_compile_definitions(tbbmalloc PRIVATE __TBB_USE_ITT_NOTIFY)
-endif()
-
-target_include_directories(tbbmalloc
-    PUBLIC
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>
-    $<INSTALL_INTERFACE:include>)
-
-# TODO: fix warnings
-if (MSVC)
-    # signed unsigned mismatch, declaration hides class member
-    set(TBB_WARNING_SUPPRESS ${TBB_WARNING_SUPPRESS} /wd4267 /wd4244 /wd4245 /wd4018 /wd4458)
-endif()
-
-# TODO: add ${TBB_WARNING_LEVEL} and fix problems
-target_compile_options(tbbmalloc
-    PRIVATE
-    ${TBB_CXX_STD_FLAG} # TODO: consider making it PUBLIC.
-    ${TBB_MMD_FLAG}
-    ${TBB_DSE_FLAG}
-    ${TBB_WARNING_SUPPRESS}
-    ${TBB_LIB_COMPILE_FLAGS}
-    ${TBBMALLOC_LIB_COMPILE_FLAGS}
-    ${TBB_COMMON_COMPILE_FLAGS}
-)
-
-# Avoid use of target_link_libraries here as it changes /DEF option to \DEF on Windows.
-set_target_properties(tbbmalloc PROPERTIES
-    DEFINE_SYMBOL ""
-    VERSION ${TBBMALLOC_BINARY_VERSION}.${TBB_BINARY_MINOR_VERSION}
-    SOVERSION ${TBBMALLOC_BINARY_VERSION}
-    LINK_FLAGS ${TBB_LINK_DEF_FILE_FLAG}${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-tbbmalloc.def
-    LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-tbbmalloc.def
-)
-
-# Prefer using target_link_options instead of target_link_libraries to specify link options because
-# target_link_libraries may incorrectly handle some options (on Windows, for example).
-if (COMMAND target_link_options)
-    target_link_options(tbbmalloc
-        PRIVATE
-        ${TBB_LIB_LINK_FLAGS}
-        ${TBB_COMMON_LINK_FLAGS}
-    )
-else()
-    target_link_libraries(tbbmalloc
-        PRIVATE
-        ${TBB_LIB_LINK_FLAGS}
-        ${TBB_COMMON_LINK_FLAGS}
-    )
+add_library(tbbmalloc SHARED ${tbbmalloc_srcs})								# oteodoro - added line
+if (BUILD_STATIC_LIBS)											# oteodoro - added line
+    add_library(tbbmalloc_static STATIC ${tbbmalloc_srcs})						# oteodoro - added line
+    set_property(TARGET tbbmalloc_static								# oteodoro - added line
+        APPEND PROPERTY COMPILE_FLAGS -fPIC)								# oteodoro - added line
 endif()
 
-target_link_libraries(tbbmalloc
-    PRIVATE
-    Threads::Threads
-    ${TBB_LIB_LINK_LIBS}
-    ${TBB_COMMON_LINK_LIBS}
-)
+add_library(TBB::tbbmalloc ALIAS tbbmalloc)
+if (BUILD_STATIC_LIBS)											# oteodoro - added line
+    add_library(TBB::tbbmalloc_static ALIAS tbbmalloc_static)						# oteodoro - added line
+    set(tbbmalloc_static_ "tbbmalloc_static")								# oteodoro - added line
+endif()													# oteodoro - added line
+													# oteodoro - added line
+
+													# oteodoro - added line
+# oteodoro - [1] = indented
+foreach(impl tbbmalloc ${tbbmalloc_static_})								# oteodoro - added line
+
+    target_compile_definitions(${impl}												# oteodoro - [1], tbbmalloc -> ${impl}
+                               PUBLIC												# oteodoro - [1]
+                               $<$<CONFIG:DEBUG>:TBB_USE_DEBUG>									# oteodoro - [1]
+                               PRIVATE												# oteodoro - [1]
+                               __TBBMALLOC_BUILD)										# oteodoro - [1]
+
+    if (NOT ("${CMAKE_SYSTEM_PROCESSOR}" MATCHES "(armv7-a|aarch64|mips|arm64)" OR						# oteodoro - [1]
+             "${CMAKE_OSX_ARCHITECTURES}" MATCHES "arm64" OR									# oteodoro - [1]
+             WINDOWS_STORE OR													# oteodoro - [1]
+             TBB_WINDOWS_DRIVER))												# oteodoro - [1]
+        target_compile_definitions(${impl} PRIVATE __TBB_USE_ITT_NOTIFY)							# oteodoro - [1], tbbmalloc -> ${impl}
+    endif()															# oteodoro - [1]
+
+    target_include_directories(${impl}												# oteodoro - [1], tbbmalloc -> ${impl}
+        PUBLIC															# oteodoro - [1]
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>								# oteodoro - [1]
+        $<INSTALL_INTERFACE:include>)												# oteodoro - [1]
+
+    # TODO: fix warnings													# oteodoro - [1]
+    if (MSVC)															# oteodoro - [1]
+        # signed unsigned mismatch, declaration hides class member								# oteodoro - [1]
+        set(TBB_WARNING_SUPPRESS ${TBB_WARNING_SUPPRESS} /wd4267 /wd4244 /wd4245 /wd4018 /wd4458)				# oteodoro - [1]
+    endif()															# oteodoro - [1]
+
+    # TODO: add ${TBB_WARNING_LEVEL} and fix problems										# oteodoro - [1]
+    target_compile_options(${impl}												# oteodoro - [1], tbbmalloc -> ${impl}
+        PRIVATE															# oteodoro - [1]
+        ${TBB_CXX_STD_FLAG} # TODO: consider making it PUBLIC.									# oteodoro - [1]
+        ${TBB_MMD_FLAG}														# oteodoro - [1]
+        ${TBB_DSE_FLAG}														# oteodoro - [1]
+        ${TBB_WARNING_SUPPRESS}													# oteodoro - [1]
+        ${TBB_LIB_COMPILE_FLAGS}												# oteodoro - [1]
+        ${TBBMALLOC_LIB_COMPILE_FLAGS}												# oteodoro - [1]
+        ${TBB_COMMON_COMPILE_FLAGS}												# oteodoro - [1]
+    )																# oteodoro - [1]
+
+    # Avoid use of target_link_libraries here as it changes /DEF option to \DEF on Windows.					# oteodoro - [1]
+    set_target_properties(${impl} PROPERTIES											# oteodoro - [1], tbbmalloc -> ${impl}
+        DEFINE_SYMBOL ""													# oteodoro - [1]
+        VERSION ${TBBMALLOC_BINARY_VERSION}.${TBB_BINARY_MINOR_VERSION}								# oteodoro - [1]
+        SOVERSION ${TBBMALLOC_BINARY_VERSION}											# oteodoro - [1]
+        LINK_FLAGS ${TBB_LINK_DEF_FILE_FLAG}${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-tbbmalloc.def		# oteodoro - [1]
+        LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-tbbmalloc.def					# oteodoro - [1]
+    )																# oteodoro - [1]
+
+    # Prefer using target_link_options instead of target_link_libraries to specify link options because				# oteodoro - [1]
+    # target_link_libraries may incorrectly handle some options (on Windows, for example).					# oteodoro - [1]
+    if (COMMAND target_link_options)												# oteodoro - [1]
+        target_link_options(${impl}												# oteodoro - [1], tbbmalloc -> ${impl}
+            PRIVATE														# oteodoro - [1]
+            ${TBB_LIB_LINK_FLAGS}												# oteodoro - [1]
+            ${TBB_COMMON_LINK_FLAGS}												# oteodoro - [1]
+        )															# oteodoro - [1]
+    else()															# oteodoro - [1]
+        target_link_libraries(${impl}												# oteodoro - [1], tbbmalloc -> ${impl}
+            PRIVATE														# oteodoro - [1]
+            ${TBB_LIB_LINK_FLAGS}												# oteodoro - [1]
+            ${TBB_COMMON_LINK_FLAGS}												# oteodoro - [1]
+        )															# oteodoro - [1]
+    endif()															# oteodoro - [1]
+
+    target_link_libraries(${impl}												# oteodoro - [1], tbbmalloc -> ${impl}
+        PRIVATE															# oteodoro - [1]
+        Threads::Threads													# oteodoro - [1]
+        ${TBB_LIB_LINK_LIBS}													# oteodoro - [1]
+        ${TBB_COMMON_LINK_LIBS}													# oteodoro - [1]
+    )																# oteodoro - [1]
 
-tbb_install_target(tbbmalloc)
+    tbb_install_target(${impl})													# oteodoro - [1], tbbmalloc -> ${impl}
 
+endforeach()															# oteodoro - added line
diff -urp oneTBB-2021.2.0.orig/src/tbbmalloc_proxy/CMakeLists.txt oneTBB-2021.2.0/src/tbbmalloc_proxy/CMakeLists.txt
--- oneTBB-2021.2.0.orig/src/tbbmalloc_proxy/CMakeLists.txt	2021-01-27 12:03:49.000000000 -0800
+++ oneTBB-2021.2.0/src/tbbmalloc_proxy/CMakeLists.txt	2021-06-27 17:50:13.429581521 -0700
@@ -12,74 +12,104 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-add_library(tbbmalloc_proxy 
+# oteodoro - changes to build static-libs
+
+set(tbbmalloc_proxy_srcs 							# oteodoro - changed
     function_replacement.cpp
     proxy.cpp)
 
-add_library(TBB::tbbmalloc_proxy ALIAS tbbmalloc_proxy)
+add_library(tbbmalloc_proxy SHARED ${tbbmalloc_proxy_srcs})						# oteodoro - added line
+if (BUILD_STATIC_LIBS)											# oteodoro - added line
+    add_library(tbbmalloc_proxy_static STATIC ${tbbmalloc_proxy_srcs})					# oteodoro - added line
+    set_property(TARGET tbbmalloc_proxy_static								# oteodoro - added line
+        APPEND PROPERTY COMPILE_FLAGS -fPIC)								# oteodoro - added line
+    target_compile_definitions(tbbmalloc_proxy_static PUBLIC __TBB_DYNAMIC_LOAD_ENABLED=0)		# oteodoro - added line
+endif()													# oteodoro - added line
 
-target_compile_definitions(tbbmalloc_proxy
-                           PUBLIC
-                           $<$<CONFIG:DEBUG>:TBB_USE_DEBUG>
-                           PRIVATE
-                           __TBBMALLOCPROXY_BUILD)
-
-target_include_directories(tbbmalloc_proxy
-    PUBLIC
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>
-    $<INSTALL_INTERFACE:include>)
-
-if (NOT APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
-    # gcc 5.0 and later have -Wno-sized-deallocation options
-    set(TBB_WARNING_SUPPRESS ${TBB_WARNING_SUPPRESS}
-                             $<$<NOT:$<VERSION_LESS:${CMAKE_CXX_COMPILER_VERSION},5.0>>:-Wno-sized-deallocation>)
-endif()
-
-target_compile_options(tbbmalloc_proxy
-    PRIVATE
-    ${TBB_CXX_STD_FLAG} # TODO: consider making it PUBLIC.
-    ${TBB_MMD_FLAG}
-    ${TBB_DSE_FLAG}
-    ${TBB_WARNING_LEVEL}
-    ${TBB_WARNING_SUPPRESS}
-    ${TBB_LIB_COMPILE_FLAGS}
-    ${TBB_COMMON_COMPILE_FLAGS}
-)
-
-set_target_properties(tbbmalloc_proxy PROPERTIES
-    VERSION ${TBBMALLOC_BINARY_VERSION}.${TBB_BINARY_MINOR_VERSION}
-    SOVERSION ${TBBMALLOC_BINARY_VERSION})
-
-if (UNIX AND NOT APPLE)
-    # Avoid use of target_link_libraries here as it changes /DEF option to \DEF on Windows.
-    set_target_properties(tbbmalloc_proxy PROPERTIES
-        LINK_FLAGS ${TBB_LINK_DEF_FILE_FLAG}${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-proxy.def
-        LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-proxy.def
-        DEFINE_SYMBOL "")
-endif()
-
-# Prefer using target_link_options instead of target_link_libraries to specify link options because
-# target_link_libraries may incorrectly handle some options (on Windows, for example).
-if (COMMAND target_link_options)
-    target_link_options(tbbmalloc_proxy
-        PRIVATE
-        ${TBB_LIB_LINK_FLAGS}
-        ${TBB_COMMON_LINK_FLAGS}
-    )
-else()
-    target_link_libraries(tbbmalloc_proxy
-        PRIVATE
-        ${TBB_LIB_LINK_FLAGS}
-        ${TBB_COMMON_LINK_FLAGS}
-    )
-endif()
-
-target_link_libraries(tbbmalloc_proxy
-    PRIVATE
-    TBB::tbbmalloc
-    Threads::Threads
-    ${TBB_LIB_LINK_LIBS}
-    ${TBB_COMMON_LINK_LIBS}
-)
+add_library(TBB::tbbmalloc_proxy ALIAS tbbmalloc_proxy)
+if (BUILD_STATIC_LIBS)											# oteodoro - added line
+    add_library(TBB::tbbmalloc_proxy_static ALIAS tbbmalloc_proxy_static)				# oteodoro - added line
+    set(tbbmalloc_proxy_static_ "tbbmalloc_proxy_static")
+endif()													# oteodoro - added line
+													# oteodoro - added line
+
+# oteodoro - [1] = indented
+													# oteodoro - added line
+foreach(impl tbbmalloc_proxy ${tbbmalloc_proxy_static_})						# oteodoro - added line
+
+    target_compile_definitions(${impl}											# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+                               PUBLIC											# oteodoro - [1]
+                               $<$<CONFIG:DEBUG>:TBB_USE_DEBUG>								# oteodoro - [1]
+                               PRIVATE											# oteodoro - [1]
+                               __TBBMALLOCPROXY_BUILD)									# oteodoro - [1]
+
+    target_include_directories(${impl}											# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+        PUBLIC														# oteodoro - [1]
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../include>							# oteodoro - [1]
+        $<INSTALL_INTERFACE:include>)											# oteodoro - [1]
+
+    if (NOT APPLE AND CMAKE_CXX_COMPILER_ID STREQUAL "GNU")								# oteodoro - [1]
+        # gcc 5.0 and later have -Wno-sized-deallocation options							# oteodoro - [1]
+        set(TBB_WARNING_SUPPRESS ${TBB_WARNING_SUPPRESS}								# oteodoro - [1]
+                             $<$<NOT:$<VERSION_LESS:${CMAKE_CXX_COMPILER_VERSION},5.0>>:-Wno-sized-deallocation>)	# oteodoro - [1]
+    endif()														# oteodoro - [1]
+
+    target_compile_options(${impl}											# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+        PRIVATE														# oteodoro - [1]
+        ${TBB_CXX_STD_FLAG} # TODO: consider making it PUBLIC.								# oteodoro - [1]
+        ${TBB_MMD_FLAG}													# oteodoro - [1]
+        ${TBB_DSE_FLAG}													# oteodoro - [1]
+        ${TBB_WARNING_LEVEL}												# oteodoro - [1]
+        ${TBB_WARNING_SUPPRESS}												# oteodoro - [1]
+        ${TBB_LIB_COMPILE_FLAGS}											# oteodoro - [1]
+        ${TBB_COMMON_COMPILE_FLAGS}											# oteodoro - [1]
+    )															# oteodoro - [1]
+
+    set_target_properties(${impl} PROPERTIES										# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+        VERSION ${TBBMALLOC_BINARY_VERSION}.${TBB_BINARY_MINOR_VERSION}							# oteodoro - [1]
+        SOVERSION ${TBBMALLOC_BINARY_VERSION})										# oteodoro - [1]
+
+    if (UNIX AND NOT APPLE)												# oteodoro - [1]
+        # Avoid use of target_link_libraries here as it changes /DEF option to \DEF on Windows.				# oteodoro - [1]
+        set_target_properties(${impl} PROPERTIES									# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+            LINK_FLAGS ${TBB_LINK_DEF_FILE_FLAG}${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-proxy.def	# oteodoro - [1]
+            LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/def/${TBB_DEF_FILE_PREFIX}-proxy.def				# oteodoro - [1]
+            DEFINE_SYMBOL "")												# oteodoro - [1]
+    endif()														# oteodoro - [1]
+
+    # Prefer using target_link_options instead of target_link_libraries to specify link options because			# oteodoro - [1]
+    # target_link_libraries may incorrectly handle some options (on Windows, for example).				# oteodoro - [1]
+    if (COMMAND target_link_options)											# oteodoro - [1]
+        target_link_options(${impl}											# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+            PRIVATE													# oteodoro - [1]
+            ${TBB_LIB_LINK_FLAGS}											# oteodoro - [1]
+            ${TBB_COMMON_LINK_FLAGS}											# oteodoro - [1]
+        )														# oteodoro - [1]
+    else()														# oteodoro - [1]
+       target_link_libraries(${impl}											# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+            PRIVATE													# oteodoro - [1]
+            ${TBB_LIB_LINK_FLAGS}											# oteodoro - [1]
+            ${TBB_COMMON_LINK_FLAGS}											# oteodoro - [1]
+        )														# oteodoro - [1]
+    endif()														# oteodoro - [1]
+
+    if (${impl} MATCHES tbbmalloc_proxy_static)										# oteodoro - added line
+        target_link_libraries(tbbmalloc_proxy_static									# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+            PRIVATE													# oteodoro - [1]
+            TBB::tbbmalloc_static											# oteodoro - [1], TBB::tbbmalloc -> TBB::tbbmalloc_static
+            Threads::Threads												# oteodoro - [1]
+            ${TBB_LIB_LINK_LIBS}											# oteodoro - [1]
+            ${TBB_COMMON_LINK_LIBS}											# oteodoro - [1]
+        )														# oteodoro - [1]
+    else()
+        target_link_libraries(tbbmalloc_proxy										# oteodoro - [1]
+            PRIVATE													# oteodoro - [1]
+            TBB::tbbmalloc												# oteodoro - [1]
+            Threads::Threads												# oteodoro - [1]
+            ${TBB_LIB_LINK_LIBS}											# oteodoro - [1]
+            ${TBB_COMMON_LINK_LIBS}											# oteodoro - [1]
+        )														# oteodoro - [1]
+    endif()
 
-tbb_install_target(tbbmalloc_proxy)
+    tbb_install_target(${impl})												# oteodoro - [1], tbbmalloc_proxy -> ${impl}
+endforeach()														# oteodoro - added line
diff -urp oneTBB-2021.2.0.orig/src/tbbmalloc_proxy/proxy.h oneTBB-2021.2.0/src/tbbmalloc_proxy/proxy.h
--- oneTBB-2021.2.0.orig/src/tbbmalloc_proxy/proxy.h	2021-01-27 12:03:49.000000000 -0800
+++ oneTBB-2021.2.0/src/tbbmalloc_proxy/proxy.h	2021-06-27 17:36:40.850157139 -0700
@@ -14,10 +14,16 @@
     limitations under the License.
 */
 
+// oteodoro - changes for static-lib support
+
 #ifndef _TBB_malloc_proxy_H_
 #define _TBB_malloc_proxy_H_
 
+#if defined(__TBB_DYNAMIC_LOAD_ENABLED) && __TBB_DYNAMIC_LOAD_ENABLED == 0		// oteodoro - added line
+#define MALLOC_UNIXLIKE_OVERLOAD_ENABLED 0						// oteodoro - added line
+#else											// oteodoro - added line
 #define MALLOC_UNIXLIKE_OVERLOAD_ENABLED __linux__
+#endif											// oteodoro - added line
 #define MALLOC_ZONE_OVERLOAD_ENABLED __APPLE__
 
 // MALLOC_UNIXLIKE_OVERLOAD_ENABLED depends on MALLOC_CHECK_RECURSION stuff
