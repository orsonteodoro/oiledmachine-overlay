<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person" proxied="yes">
    <!-- Ebuild originators -->
    <email>dnovomesky@gmail.com</email>
    <name>Daniel Novomesky</name>
  </maintainer>
  <maintainer type="project" proxied="proxy">
    <!-- Ebuild originators -->
    <email>proxy-maint@gentoo.org</email>
    <name>Proxy Maintainers</name>
  </maintainer>
  <!--

  oiledmachine-overlay notes:

  Ebuild forked to control cpu flags.

  -->
  <longdescription>
    Highway is a C++ library for SIMD (Single Instruction, Multiple Data),
    i.e. applying the same operation to multiple 'lanes' using a single CPU
    instruction.
  </longdescription>
  <upstream>
    <remote-id type="github">google/highway</remote-id>
  </upstream>
  <use>
    <flag name="cpu_flags_arm_aes">
      Optimize for ARM with Advanced Encryption Standard (AES)
    </flag>
    <flag name="cpu_flags_arm_bf16">
      Optimize for ARM with BF16
    </flag>
    <flag name="cpu_flags_arm_neon">
      Optimize for ARM Advanced SIMD extension (NEON)
    </flag>
    <flag name="cpu_flags_arm_sve">
      Optimize for ARM Scalable Vector Extensions (SVE)
    </flag>
    <flag name="cpu_flags_arm_sve_256">
      Optimize for ARM Scalable Vector Extensions (SVE) 256-bit vectors
    </flag>
    <flag name="cpu_flags_arm_sve2">
      Optimize for ARM Scalable Vector Extensions 2 (SVE2)
    </flag>
    <flag name="cpu_flags_arm_sve2_128">
      Optimize for ARM Scalable Vector Extensions 2 (SVE2) 128-bit vectors
    </flag>
    <flag name="cpu_flags_ppc_crypto">
      Optimize with cryptographic instructions
    </flag>
    <flag name="cpu_flags_ppc_power8-vector">
      Optimize for POWER8
    </flag>
    <flag name="cpu_flags_ppc_power9-vector">
      Optimize for POWER9
    </flag>
    <flag name="cpu_flags_ppc_power10-vector">
      Optimize for POWER10
    </flag>
    <flag name="cpu_flags_riscv_rvv">
      Optimize with RISC-V Vector Extension (RVV)
    </flag>
    <flag name="cpu_flags_s390_z14">
      Optimize for z14
    </flag>
    <flag name="cpu_flags_s390_z15">
      Optimize for z15
    </flag>
    <flag name="cpu_flags_x86_aes">
      Optimize with Advanced Encryption Standard New Instructions (AES-NI)
    </flag>
    <flag name="cpu_flags_x86_avx">
      Optimize with Advanced Vector Extensions (AVX)
    </flag>
    <flag name="cpu_flags_x86_avx2">
      Optimize with Advanced Vector Extensions 2 (AVX2)
    </flag>
    <flag name="cpu_flags_x86_avx512bf16">
      Optimize with AVX-512 Bfloat16 Floating-Point Instructions (AVX512BF16) for Zen 4 or later
    </flag>
    <flag name="cpu_flags_x86_avx512bitalg">
      Optimize with AVX-512 Bit Algorithms (AVX512BITALG)
    </flag>
    <flag name="cpu_flags_x86_avx512bw">
      Optimize with AVX-512 Byte and Word Instructions (AVX512BW)
    </flag>
    <flag name="cpu_flags_x86_avx512cd">
      Optimize with AVX-512 Conflict Detection Instructions (AVX512CD)
    </flag>
    <flag name="cpu_flags_x86_avx512dq">
      Optimize with AVX-512 Doubleword and Quadword Instructions (AVX512DQ)
    </flag>
    <flag name="cpu_flags_x86_avx512f">
      Optimize with AVX-512 Foundation Instructions (AVX512F)
    </flag>
    <flag name="cpu_flags_x86_avx512fp16">
      Optimize with AVX-512 Half-Precision Floating-Point Instructions (AVX512FP16) for Sapphire Rapids or later
    </flag>
    <flag name="cpu_flags_x86_avx512vbmi">
      Optimize with AVX-512 Vector Byte Manipulation Instructions (AVX512VBMI)
    </flag>
    <flag name="cpu_flags_x86_avx512vbmi2">
      Optimize with AVX-512 Vector Byte Manipulation Instructions 2 (AVX512VBMI2)
    </flag>
    <flag name="cpu_flags_x86_avx512vl">
      Optimize with AVX-512 Vector Length Extensions (AVX512VL)
    </flag>
    <flag name="cpu_flags_x86_avx512vnni">
      Optimize with AVX-512 Vector Neural Network Instructions (AVX512VNNI)
    </flag>
    <flag name="cpu_flags_x86_avx512vpopcntdq">
      Optimize with AVX-512 Vector Population Count Instruction (AVX512VPOPCNTDQ)
    </flag>
    <flag name="cpu_flags_x86_bmi">
      Optimize with Bit Manipulation Instructions Set 1 (BMI)
    </flag>
    <flag name="cpu_flags_x86_bmi2">
      Optimize with Bit Manipulation Instructions Set 2 (BMI2)
    </flag>
    <flag name="cpu_flags_x86_fma">
      Optimize with Fused Multiply-Add (FMA)
    </flag>
    <flag name="cpu_flags_x86_f16c">
      Optimize with Half-Precision Conversion Instructions (F16C)
    </flag>
    <flag name="cpu_flags_x86_gfni">
      Optimize with AVX-512 Galois Field New Instructions (GFNI)
    </flag>
    <flag name="cpu_flags_x86_pclmul">
      Optimize with Packed Carry-less Multiplication (PCLMUL)
    </flag>
    <flag name="cpu_flags_x86_sse2">
      Optimize with Streaming SIMD Extensions 2 (SSE2)
    </flag>
    <flag name="cpu_flags_x86_sse4_2">
      Optimize with Streaming SIMD Extensions 4 (SSE 4.1, SSE 4.2)
    </flag>
    <flag name="cpu_flags_x86_ssse3">
      Optimize with Supplemental Streaming SIMD Extensions 3 (SSSE3)
    </flag>
    <flag name="cpu_flags_x86_vaes">
      Optimize with Vector AES Instructions (VAES)
    </flag>
    <flag name="cpu_flags_x86_vpclmulqdq">
      Optimize with Packed Carry-less Multiplication of Quadwords (VPCLMULQDQ)
    </flag>
  </use>
</pkgmetadata>
