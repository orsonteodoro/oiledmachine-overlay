#!/bin/bash
# License: MIT or GPL2+
# This package just checks but doesn't do updating.  Portage is responsible
# for that to allow for the package manager to erase update cruft created by
# npm.
#
# This script is a /etc/portage/postsync.d/ hook handler
#
# It is designed to check every registered npm package and it's bundled
# dependencies.  If it finds a package with a security vulerability, it will
# suggest to the user to re-emerge the package.  A package that uses
# electron-app.eclass or npm-secaudit.eclass in the oiledmachine-overlay will
# run `npm audit fix --force` to replace the vulnerable internal dependency.

if [[ -f "/etc/npm-secaudit.conf" ]] ; then
# Save your settings here
source /etc/npm-secaudit.conf
fi

G_ACTIVE=${G_ACTIVE:="1"} # can only be 0=disable, 1=run audits
G_TOLERANCE=${G_TOLERANCE:="critical"} # can only be critical, high, moderate, low

G_DEBUG=""
G_INSECURE_SET_DIR="/etc/portage/sets/"
G_INSECURE_SET_FN="npm-security-update"
G_INSECURE_SET_FP="${G_INSECURE_SET_DIR}/${G_INSECURE_SET_FN}"

# can only be 1 for comprehensive long scan, 0 to short circuit the scan if it
# met >=G_TOLERANCE level
G_LONG_SCAN=${G_LONG_SCAN:="0"}

G_NPM_APPS="/var/lib/portage/npm-packages" # location of registered npm packages
G_PACKAGE_LOCK_DIR="/dev/shm"
G_VERBOSE=${G_VERBOSE:="0"} # can only be 0 for silent, or 1 for more output
G_VERSION="2021.08.18"
G_DATA_CACHE_DIR="/var/cache/npm-secaudit"
G_DATA_VERSION_DATA_PATH="${G_DATA_CACHE_DIR}/lite.json"
G_USE_ELECTRON=${G_USE_ELECTRON:="1"}

# This contains a new line delimited ${CATEGORY}/${PN}:${SLOT} list to not
# include in the @${G_INSECURE_SET_FN} set.  Use at your own risk.
G_BLACKLIST="/etc/portage/npm-secaudit-blacklist"

# Chromium 91.x is EOL, Electron v13 contains EOL Chromium

# Track "Security:" in https://www.electronjs.org/releases/stable?version=13
G_CVE_PATCHED_ELECTRON_13="13.1.7"

# Track "Security:" in https://www.electronjs.org/releases/stable?version=12
G_CVE_PATCHED_ELECTRON_12="12.0.15"

# Track "Security:" in https://www.electronjs.org/releases/stable?version=11
G_CVE_PATCHED_ELECTRON_11="11.4.10"

# Track "Vulnerabilities fixed" in https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V16.md
G_CVE_PATCHED_NODE_16="16.6.2"

# Track "Vulnerabilities fixed" in https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V14.md
G_CVE_PATCHED_NODE_14="14.17.5"

# Track "Vulnerabilities fixed" in https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V12.md
G_CVE_PATCHED_NODE_12="12.22.5"

# These Chromium desktop versions listed are non vulnerable versions:
# Reason why is to minimize vulnerability checks in this eclass.

# Instead we track the latest version since it is confusing which gets the
# updates between the OS or Desktop versions.  The latest versions of each major
# version are listed in the link below:
# https://omahaproxy.appspot.com/

# They mix up 92 and 93 which is difficult to filter.
# Dev channel
# Track "security updates" in https://chromereleases.googleblog.com/search/label/Dev%20updates
G_LATEST_CHROMIUM_94="94.0.4603.0"

# Beta channel
# Track "security updates" in https://chromereleases.googleblog.com/search/label/Beta%20updates
G_LATEST_CHROMIUM_93="93.0.4577.51"

# Stable channel
# Track "security updates" in https://chromereleases.googleblog.com/search/label/Stable%20updates
G_LATEST_CHROMIUM_92="92.0.4515.159"

H_INFO="\
$(basename $BASH_SOURCE) ${G_VERSION}
Copyright 2019-2020 Orson Teodoro
License: Dual licensed under MIT or GPL2+"

H_HELP="\
$(basename $BASH_SOURCE) <args>

Generates a package set for you to update affected packages.

args:
	-d, --debug		prints debug messages
	-h, --help		prints all the supported commands
	-l, --long		perform a long scan
	-sc, --critical		scan for critical vulnerabilities only
	-sh, --high		scan for high and above vulnerabilities
	-sl, --low		scan for low and above vulnerabilities
	-sm, --moderate		scan for moderate and above vulnerabilities
	-v, --verbose		prints the full vulnerability report
	-ver, --version		version info"

for arg in $@ ; do
	case "$arg" in
		--debug|-debug|-d)
			G_DEBUG="1"
			G_VERBOSE="1"
			;;
		--help|-help|-h)
			echo "${H_HELP}"
			exit
			;;
		-l|--long)
			G_LONG_SCAN="1"
			;;
		-sc|--critical)
			G_TOLERANCE="critical"
			;;
		-sh|--high)
			G_TOLERANCE="high"
			;;
		-sl|--low)
			G_TOLERANCE="low"
			;;
		-sm|--moderate)
			G_TOLERANCE="moderate"
			;;
		--verbose|-verbose|-v)
			G_VERBOSE="1"
			;;
		--version|-version|-ver)
			echo "${H_INFO}"
			exit
			;;
		*)
			;;
	esac
done

function einfo() {
	echo -e ">>> $1"
}

function dinfo() {
	case "${G_DEBUG}" in
		1)
			echo ">>> $1"
			;;
		*)
			true
			;;
	esac
}

function clean_editing_pkg_db_mutex() {
	einfo "Called clean_editing_pkg_db_mutex"
	rm -rf "${G_PACKAGE_LOCK_DIR}/mutex-editing-pkg_db"
}

function init() {
	mkdir -p "${G_INSECURE_SET_DIR}"
	touch "${G_INSECURE_SET_FP}"

	if [[ ! -d "/dev/shm" ]] ; then
		einfo "Missing /dev/shm.  Check the kernel config?"
		exit 1
	fi

	# remove blank lines
	while true ; do
		if mkdir "${G_PACKAGE_LOCK_DIR}/mutex-editing-pkg_db" 2>/dev/null ; then
			trap clean_editing_pkg_db_mutex EXIT
			sed -i '/^$/d' "${G_NPM_APPS}"
			rm -rf "${G_PACKAGE_LOCK_DIR}/mutex-editing-pkg_db"
			break
		else
			einfo \
"Waiting for mutex-editing-pkg_db to free.  Close all emerges and\n\
npm-secaudit instances and remove ${G_PACKAGE_LOCK_DIR}/mutex-editing-pkg_db\n\
directory."
		fi
	done

	if [[ "${G_USE_ELECTRON}" == "1" ]] ; then
		local prev_update
		if [[ -f "${G_DATA_VERSION_DATA_PATH}" ]] ; then
			prev_update=$(stat -c "%W" "${G_DATA_VERSION_DATA_PATH}")
		else
			prev_update=0
		fi
		local now=$(date +%s)
		local next_update_seconds=86400
		if [[ ! -d "${G_DATA_CACHE_DIR}" ]] ; then
			mkdir -p "${G_DATA_CACHE_DIR}" || die
		fi
		if (( $((${prev_update} + ${next_update_seconds})) < ${now} )) ; then
			einfo "Updating Electron release data"
			rm -rf "${G_DATA_VERSION_DATA_PATH}" || true
			wget -O "${G_DATA_VERSION_DATA_PATH}" \
			"https://raw.githubusercontent.com/electron/releases/master/lite.json" || die
		else
			einfo "Using cached Electron release data"
		fi
	fi
}

# version tests
# x < y
is_x_lt_y() {
	local x="${1}"
	local y="${2}"
	local result=$(echo -e "${x}\n${y}" | sort -V | tr "\n" " " \
		| cut -f 1 -d $' ')
	if [[ "${result}" == "${x}" ]] ; then
		return 0
	else
		return 1
	fi
}
is_x_le_y() {
	local x="${1}"
	local y="${2}"
	local result=$(echo -e "${x}\n${y}" | sort -V | tr "\n" " " \
		| cut -f 1 -d $' ')
	if [[ "${result}" == "${x}" || "${x}" == "${y}" ]] ; then
		return 0
	else
		return 1
	fi
}
is_x_gt_y() {
	local x="${1}"
	local y="${2}"
	local result=$(echo -e "${x}\n${y}" | sort -V | tr "\n" " " \
		| cut -f 1 -d $' ')
	if [[ "${result}" != "${x}" ]] ; then
		return 0
	else
		return 1
	fi
}
is_x_ge_y() {
	local x="${1}"
	local y="${2}"
	local result=$(echo -e "${x}\n${y}" | sort -V | tr "\n" " " \
		| cut -f 1 -d $' ')
	if [[ "${result}" != "${x}" || "${x}" == "${y}" ]] ; then
		return 0
	else
		return 1
	fi
}
is_x_eq_y() {
	local x="${1}"
	local y="${2}"
	if [[ "${x}" == "${y}" ]] ; then
		return 0
	else
		return 1
	fi
}
is_x_ne_y() {
	local x="${1}"
	local y="${2}"
	if [[ "${x}" != "${y}" ]] ; then
		return 0
	else
		return 1
	fi
}

is_x_op_y() {
	local x="${1}"
	local op="${2}"
	local y="${3}"

	if [[ "${op}" == "-lt" ]] ; then
		is_x_lt_y "${x}" "${y}"
	elif [[ "${op}" == "-le" ]] ; then
		is_x_le_y "${x}" "${y}"
	elif [[ "${op}" == "-gt" ]] ; then
		is_x_gt_y "${x}" "${y}"
	elif [[ "${op}" == "-ge" ]] ; then
		is_x_ge_y "${x}" "${y}"
	elif [[ "${op}" == "-eq" ]] ; then
		is_x_eq_y "${x}" "${y}"
	elif [[ "${op}" == "-ne" ]] ; then
		is_x_ne_y "${x}" "${y}"
	fi
}

_query_lite_json() {
	echo $(cat "${G_DATA_VERSION_DATA_PATH}" \
		| jq '.[] | select(.tag_name == "v'${ELECTRON_V}'")' \
		| jq ${1} | sed -r -e "s|[\"]*||g")
}

function electron_version_audit() {
	[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Inspecting the ${p} package internal versions for vulnerabilities"

	if npm ls electron | grep -q -F -e " electron@" ; then
		[[ "${G_VERBOSE}" == "1" ]] && einfo "Detected Electron"
	else
		return 0
	fi

	ELECTRON_V=$(npm ls electron | grep -E -e "electron@[0-9.]+" \
		| tail -n 1 | sed -r -e "s|[^0-9\.]*||g") # used by package
	CHROMIUM_V=$(_query_lite_json '.deps.chrome')
	V8_V=$(_query_lite_json '.deps.v8')

	local is_vulnerable=0
	# Check Electron
	if is_x_op_y $(echo ${ELECTRON_V} | cut -f 1 -d ".") "-eq" 15 ; then
		# Stable in 2021 Sep
		:; # Passed
	elif is_x_op_y $(echo ${ELECTRON_V} | cut -f 1 -d ".") "-eq" 14 ; then
		# Stable in 2021 Aug
		:; # Passed
	elif is_x_op_y $(echo ${ELECTRON_V} | cut -f 1 -d ".") "-eq" 13 \
		&& is_x_op_y ${ELECTRON_V} "-ge" ${G_CVE_PATCHED_ELECTRON_13} ; then
		# Patched
		:; # Passed
	elif is_x_op_y $(echo ${ELECTRON_V} | cut -f 1 -d ".") "-eq" 13 \
		&& is_x_op_y ${ELECTRON_V} "-lt" ${G_CVE_PATCHED_ELECTRON_13} ; then
		# Unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} is not receiving proper security updates."
		is_vulnerable=1
	elif is_x_op_y $(echo ${ELECTRON_V} | cut -f 1 -d ".") "-eq" 12 \
		&& is_x_op_y ${ELECTRON_V} "-ge" ${G_CVE_PATCHED_ELECTRON_12} ; then
		# Patched
		:; # Passed
	elif is_x_op_y $(echo ${ELECTRON_V} | cut -f 1 -d ".") "-eq" 12 \
		&& is_x_op_y ${ELECTRON_V} "-lt" ${G_CVE_PATCHED_ELECTRON_12} ; then
		# Unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} is not receiving proper security updates."
		is_vulnerable=1
	elif is_x_op_y $(echo ${ELECTRON_V} | cut -f 1 -d ".") "-eq" 11 \
		&& is_x_op_y ${ELECTRON_V} "-ge" ${G_CVE_PATCHED_ELECTRON_11} ; then
		# Patched
		:; # Passed
	elif is_x_op_y $(echo ${ELECTRON_V} | cut -f 1 -d ".") "-eq" 11 \
		&& is_x_op_y ${ELECTRON_V} "-lt" ${G_CVE_PATCHED_ELECTRON_11} ; then
		# Unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} is not receiving proper security updates."
		is_vulnerable=1
	else
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} has already reached End Of Life (EOL)."
		is_vulnerable=1
	fi

	# Check Node.js EOL
	if is_x_op_y $(echo ${NODE_V} | cut -f 1 -d ".") "-eq" 16 \
		&& is_x_op_y ${NODE_V} "-ge" ${G_CVE_PATCHED_NODE_16} ; then
		# Patched
		:; # Passed
	elif is_x_op_y $(echo ${NODE_V} | cut -f 1 -d ".") "-eq" 16 \
		&& is_x_op_y ${NODE_V} "-lt" ${G_CVE_PATCHED_NODE_16} ; then
		# Unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} uses Node.js ${NODE_V} which is not receiving\n\
security updates."
		is_vulnerable=1
	elif is_x_op_y $(echo ${NODE_V} | cut -f 1 -d ".") "-eq" 14 \
		&& is_x_op_y ${NODE_V} "-ge" ${G_CVE_PATCHED_NODE_14} ; then
		# Patched
		:; # Passed
	elif is_x_op_y $(echo ${NODE_V} | cut -f 1 -d ".") "-eq" 14 \
		&& is_x_op_y ${NODE_V} "-lt" ${G_CVE_PATCHED_NODE_14} ; then
		# Unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} uses Node.js ${NODE_V} which is not receiving\n\
security updates."
		is_vulnerable=1
	elif is_x_op_y $(echo ${NODE_V} | cut -f 1 -d ".") "-eq" 12 \
		&& is_x_op_y ${NODE_V} "-ge" ${G_CVE_PATCHED_NODE_12} ; then
		# Patched
		:; # Passed
	elif is_x_op_y $(echo ${NODE_V} | cut -f 1 -d ".") "-eq" 12 \
		&& is_x_op_y ${NODE_V} "-lt" ${G_CVE_PATCHED_NODE_12} ; then
		# Unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} uses Node.js ${NODE_V} which is not receiving\n\
security updates."
		is_vulnerable=1
	else
		# Check Node.js EOL
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} uses Node.js ${NODE_V} which is End Of Life (EOL)."
		is_vulnerable=1
	fi

	# Check Chromium
	# Chromium versioning:  MAJOR.MINOR.BUILD.PATCH
	if is_x_op_y $(echo ${CHROMIUM_V} | cut -f 1 -d ".") "-eq" 94 \
		&& is_x_op_y ${CHROMIUM_V} "-ge" ${G_LATEST_CHROMIUM_94} ; then
		# Dev patched
		:; # Passed
	elif is_x_op_y $(echo ${CHROMIUM_V} | cut -f 1 -d ".") "-eq" 94 \
		&& is_x_op_y ${CHROMIUM_V} "-lt" ${G_LATEST_CHROMIUM_94} ; then
		# Dev unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} uses Chromium ${CHROMIUM_V} which is not receiving\n\
proper security updates."
		is_vulnerable=1
	elif is_x_op_y $(echo ${CHROMIUM_V} | cut -f 1 -d ".") "-eq" 93 \
		&& is_x_op_y ${CHROMIUM_V} "-ge" ${G_LATEST_CHROMIUM_93} ; then
		# Beta patched
		:; # Passed
	elif is_x_op_y $(echo ${CHROMIUM_V} | cut -f 1 -d ".") "-eq" 93 \
		&& is_x_op_y ${CHROMIUM_V} "-lt" ${G_LATEST_CHROMIUM_93} ; then
		# Beta unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} uses Chromium ${CHROMIUM_V} which is not receiving\n\
proper security updates."
		is_vulnerable=1
	elif is_x_op_y $(echo ${CHROMIUM_V} | cut -f 1 -d ".") "-eq" 92 \
		&& is_x_op_y ${CHROMIUM_V} "-ge" ${G_LATEST_CHROMIUM_92} ; then
		# Stable patched
		:; # Passed
	elif is_x_op_y $(echo ${CHROMIUM_V} | cut -f 1 -d ".") "-eq" 92 \
		&& is_x_op_y ${CHROMIUM_V} "-lt" ${G_LATEST_CHROMIUM_92} ; then
		# Stable unpatched
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} uses Chromium ${CHROMIUM_V} which is not receiving\n\
proper security updates."
		is_vulnerable=1
	else
		[[ "${G_VERBOSE}" == "1" ]] && einfo \
"Electron ${ELECTRON_V} uses Chromium ${CHROMIUM_V} which is End Of Life (EOL)."
		is_vulnerable=1
	fi

	if [[ "${G_VERBOSE}" == "1" ]]; then
	LIBUV_V=$(_query_lite_json '.deps.uv')
	BORINGSSL_V=$(_query_lite_json '.deps.openssl')
	NODE_V=$(_query_lite_json '.deps.node')
	ZLIB_V=$(_query_lite_json '.deps.zlib')
	einfo
	einfo "Electron version report with internal/external dependencies:"
	einfo
	einfo "ELECTRON_V=${ELECTRON_V}"
	einfo "CHROMIUM_V=${CHROMIUM_V}"
	einfo "LIBUV_V=${LIBUV_V}"
	einfo "NODE_V=${NODE_V}"
	einfo "V8_V=${V8_V}"
	einfo "ZLIB_V=${ZLIB_V}"
	einfo
	fi
	return ${is_vulnerable}
}

function recursive_package_lock_audit() {
	local result="0"
	local p="$1"
	local path="$2"
	echo ">>> Checking ${p}"
	dinfo "Performing recursive package-lock.json audit"
	L=$(find . -name "package-lock.json")
	for l in ${L}; do
		if [[ "${G_LONG_SCAN}" != "1" && "${result}" == "1" ]] ; then
			dinfo "Skipping long scan"
			break
		elif [[ "${G_LONG_SCAN}" == "1" ]] ; then
			dinfo "Continuing long scan"
		fi
		pushd $(dirname ${l}) >/dev/null
		dinfo "Path: "$(realpath "${path}/${l}")
		[ -e /tmp/npm-secaudit-result ] && rm /tmp/npm-secaudit-result
		if [[ "${G_VERBOSE}" == "1" ]]; then
			npm audit &> /tmp/npm-secaudit-result
			cat /tmp/npm-secaudit-result
		else
			npm audit &> /tmp/npm-secaudit-result
		fi
		local t
		cat /tmp/npm-secaudit-result | grep -F \
			-e "ELOCKVERIFY" >/dev/null
		if [[ "$?" == "0" ]] ; then
			dinfo \
"Ignoring results of packages referencing pruned dev packages.  You can\n\
re-emerge to verify if has a vulnerability."
		else
			cat /tmp/npm-secaudit-result \
				| grep -F -e "npm audit security report" >/dev/null
			local result_found1="$?"
			cat /tmp/npm-secaudit-result \
				| grep -F -e " Critical " >/dev/null
			local result_critical="$?"
			cat /tmp/npm-secaudit-result \
				| grep -F -e " High " >/dev/null
			local result_high="$?"
			cat /tmp/npm-secaudit-result \
				| grep -F -e " Moderate " >/dev/null
			local result_moderate="$?"
			cat /tmp/npm-secaudit-result \
				| grep -F -e " Low " >/dev/null
			local result_low="$?"
			if [[ "${result_found1}" == "0" ]] ; then
				if [[ "${result_critical}" == "0" \
					&& "${G_TOLERANCE}" == "critical" ]]
				then
					dinfo "Critical vulnerability found"
					result="1"
				elif [[ ( "${result_high}" == "0" \
					|| "${result_critical}" == "0" ) \
					&& "${G_TOLERANCE}" == "high" ]]
				then
					dinfo \
					"High and above vulnerability found"
					result="1"
				elif [[ ( "${result_moderate}" == "0" \
					|| "${result_high}" == "0" \
					|| "${result_critical}" == "0" ) \
					&& "${G_TOLERANCE}" == "moderate" ]]
				then
					dinfo \
					"Moderate and above vulnerability found"
					result="1"
				elif [[ ( "${result_low}" == "0" \
					|| "${result_moderate}" == "0" \
					|| "${result_high}" == "0" \
					|| "${result_critical}" == "0" ) \
					&& "${G_TOLERANCE}" == "low" ]]
				then
					dinfo \
					"Low and above vulnerability found"
					result="1"
				fi
			fi
		fi
		popd >/dev/null
	done
	dinfo "Auditing security done"
	return ${result}
}

function check() {
	einfo \
"Checking npm packages and Electron apps for vulnerabilities please wait..."
	echo "" > "${G_INSECURE_SET_FP}"

	while read -r line ; do
		local p=$(echo "${line}" | cut -f 1)
		local path=$(echo "${line}" | cut -f 2)

		if [[ -f "${G_BLACKLIST}" ]] && grep -q -F -e "${p}" "${G_BLACKLIST}" ; then
			einfo "Skipping blacklisted ${p} for audit"
		elif [[ ! -d "${path}" ]] ; then
			einfo \
"Skipping missing dir: ${path}.  Report to ebuild maintainer if package is\n\
installed."
		else
			pushd "${path}" >/dev/null
				recursive_package_lock_audit "${p}" "${path}"
				local r1="$?"
				local r2="0"
				if [[ "${G_USE_ELECTRON}" == "1" ]] ; then
					electron_version_audit
					r2="$?"
				fi
				dinfo "r1=${r1} r2=${r2}"
				if [[ "$r1" == "0" && "$r2" == "0" ]] ; then
					dinfo "Package ${p} is good."
				else
					dinfo \
"Package ${p} needs to be updated and has been placed in the\n\
@${G_INSECURE_SET_FN} set."
					echo "${p}" >> "${G_INSECURE_SET_FP}"
				fi
			popd >/dev/null
		fi
	done < "${G_NPM_APPS}"
}

function summary() {
	# remove blank lines
	sed -i '/^$/d' "${G_INSECURE_SET_FP}"

	local n_insecure=$(wc -l ${G_INSECURE_SET_FP} | cut -f 1 -d ' ')
	local fsz=$(wc -c ${G_INSECURE_SET_FP} | cut -f 1 -d ' ')
	dinfo "n_insecure=$n_insecure"
	dinfo "fsz=$fsz"
	if (( ${n_insecure} > 0 && ${fsz} > 1 )); then
		D=$(cd "$(dirname "$0")" ; pwd -P)
		einfo \
"npm-secaudit found ${n_insecure} insecure apps.  Please update immediately\n\
with \`emerge @${G_INSECURE_SET_FN}\`.\n\
For a full report, run with \`${D}/$(basename $BASH_SOURCE) -v\`."
	else
		einfo "No apps found with >=${G_TOLERANCE} vulnerability level."
	fi
}

clean_insecure_set_mutex()
{
	einfo "Called clean_insecure_set_mutex"
	rm -rf "${G_PACKAGE_LOCK_DIR}/mutex-insecure-set"
}

function main() {
	[[ "${G_ACTIVE}" == "0" ]] && return
	while true ; do
		if mkdir "${G_PACKAGE_LOCK_DIR}/mutex-insecure-set" 2>/dev/null ; then
			trap clean_insecure_set_mutex EXIT
			init
			check
			summary
			rm -rf "${G_PACKAGE_LOCK_DIR}/mutex-insecure-set"
			break
		else
			einfo \
"Multiple instances of npm-secaudit detected.  Close all instances of them\n\
and remove the ${G_PACKAGE_LOCK_DIR}/mutex-insecure-set directory or wait till they\n\
are done."
			sleep 15
		fi
	done
}

main
