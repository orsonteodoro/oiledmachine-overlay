#!/bin/bash
# License: MIT or GPL2+
# This package just checks but doesn't do updating.  Portage is responsible
# for that to allow for the package manager to erase update cruft created by
# npm.
#
# This script is a /etc/portage/postsync.d/ hook handler
#
# It is designed to check every registered npm package and it's bundled
# dependencies.  If it finds a package with a security vulerability, it will
# suggest to the user to re-emerge the package.  A package that uses
# electron-app.eclass or npm-secaudit.eclass in the oiledmachine-overlay will
# run `npm audit fix --force` to replace the vulnerable internal dependency.

G_CHECK_PERIOD="$((60*60*24*1))" # seconds
G_DEBUG=""
G_INSECURE_SET_DIR="/etc/portage/sets/"
G_INSECURE_SET_FN="npm-security-update"
G_INSECURE_SET_FP="${G_INSECURE_SET_DIR}/${G_INSECURE_SET_FN}"
G_LONG_SCAN=""
G_NPM_APPS="/var/lib/portage/npm-packages" # location of registered npm packages
G_PACKAGE_LOCK_DIR="/dev/shm"
G_SCAN_MODE="low"
G_VERBOSE=""
G_VERSION="2020.01.22"

H_INFO="\
$(basename $BASH_SOURCE) ${G_VERSION}
Copyright 2019-2020 Orson Teodoro
License: Dual licensed under MIT or GPL2+"

H_HELP="\
$(basename $BASH_SOURCE) <args>

Generates a package set for you to update affected packages.

args:
	-d, --debug		prints debug messages
	-h, --help		prints all the supported commands
	-l, --long		perform a long scan
	-sc, --critical		scan for critical vulnerabilities only
	-sh, --high		scan for high and above vulnerabilities
	-sl, --low		scan for low and above vulnerabilities
	-sm, --moderate		scan for moderate and above vulnerabilities
	-v, --verbose		prints the full vulnerability report
	-ver, --version		version info"

for arg in $@ ; do
	case "$arg" in
		--debug|-debug|-d)
			G_DEBUG="1"
			G_VERBOSE="1"
			;;
		--help|-help|-h)
			echo "${H_HELP}"
			exit
			;;
		-l|--long)
			G_LONG_SCAN="1"
			;;
		-sc|--critical)
			G_SCAN_MODE="critical"
			;;
		-sh|--high)
			G_SCAN_MODE="high"
			;;
		-sl|--low)
			G_SCAN_MODE="low"
			;;
		-sm|--moderate)
			G_SCAN_MODE="moderate"
			;;
		--verbose|-verbose|-v)
			G_VERBOSE="1"
			;;
		--version|-version|-ver)
			echo "${H_INFO}"
			exit
			;;
		*)
			;;
	esac
done

function einfo() {
	echo -e ">>> $1"
}

function dinfo() {
	case "${G_DEBUG}" in
		1)
			echo ">>> $1"
			;;
		*)
			true
			;;
	esac
}

function clean_editing_pkg_db_mutex() {
	einfo "Called clean_editing_pkg_db_mutex"
	rm -rf "${G_PACKAGE_LOCK_DIR}/mutex-editing-pkg_db"
}

function init() {
	mkdir -p "${G_INSECURE_SET_DIR}"
	touch "${G_INSECURE_SET_FP}"

	if [[ ! -d "/dev/shm" ]] ; then
		einfo "Missing /dev/shm.  Check the kernel config?"
		exit 1
	fi

	# remove blank lines
	while true ; do
		if mkdir "${G_PACKAGE_LOCK_DIR}/mutex-editing-pkg_db" 2>/dev/null ; then
			trap clean_editing_pkg_db_mutex EXIT
			sed -i '/^$/d' "${G_NPM_APPS}"
			rm -rf "${G_PACKAGE_LOCK_DIR}/mutex-editing-pkg_db"
			break
		else
			einfo \
"Waiting for mutex-editing-pkg_db to free.  Close all emerges and\n\
npm-secaudit instances and remove ${G_PACKAGE_LOCK_DIR}/mutex-editing-pkg_db\n\
directory."
		fi
	done
}

function raudit() {
	local result="0"
	local p="$1"
	local path="$2"
	echo -e "\n>>> Checking ${p}"
	dinfo "Performing recursive package-lock.json audit"
	L=$(find . -name "package-lock.json")
	for l in ${L}; do
		if [[ "${G_LONG_SCAN}" != "1" && "${result}" == "1" ]] ; then
			dinfo "Skipping long scan"
			break
		elif [[ "${G_LONG_SCAN}" == "1" ]] ; then
			dinfo "Continuing long scan"
		fi
		pushd $(dirname ${l}) >/dev/null
		dinfo "Path: "$(realpath "${path}/${l}")
		[ -e /tmp/npm-secaudit-result ] && rm /tmp/npm-secaudit-result
		if [[ "${G_VERBOSE}" == "1" ]]; then
			npm audit &> /tmp/npm-secaudit-result
			cat /tmp/npm-secaudit-result
		else
			npm audit &> /tmp/npm-secaudit-result
		fi
		local t
		cat /tmp/npm-secaudit-result | grep -F \
			-e "ELOCKVERIFY" >/dev/null
		if [[ "$?" == "0" ]] ; then
			dinfo \
"Ignoring results of packages referencing pruned dev packages.  You can\n\
re-emerge to verify if has a vulnerability."
		else
			cat /tmp/npm-secaudit-result \
				| grep -F -e "npm audit security report" >/dev/null
			local result_found1="$?"
			cat /tmp/npm-secaudit-result \
				| grep -F -e " Critical " >/dev/null
			local result_critical="$?"
			cat /tmp/npm-secaudit-result \
				| grep -F -e " High " >/dev/null
			local result_high="$?"
			cat /tmp/npm-secaudit-result \
				| grep -F -e " Moderate " >/dev/null
			local result_moderate="$?"
			cat /tmp/npm-secaudit-result \
				| grep -F -e " Low " >/dev/null
			local result_low="$?"
			if [[ "${result_found1}" == "0" ]] ; then
				if [[ "${result_critical}" == "0" \
					&& "${G_SCAN_MODE}" == "critical" ]]
				then
					dinfo "Critical vulnerability found"
					result="1"
				elif [[ ( "${result_high}" == "0" \
					|| "${result_critical}" == "0" ) \
					&& "${G_SCAN_MODE}" == "high" ]]
				then
					dinfo \
					"High and above vulnerability found"
					result="1"
				elif [[ ( "${result_moderate}" == "0" \
					|| "${result_high}" == "0" \
					|| "${result_critical}" == "0" ) \
					&& "${G_SCAN_MODE}" == "moderate" ]]
				then
					dinfo \
					"Moderate and above vulnerability found"
					result="1"
				elif [[ ( "${result_low}" == "0" \
					|| "${result_moderate}" == "0" \
					|| "${result_high}" == "0" \
					|| "${result_critical}" == "0" ) \
					&& "${G_SCAN_MODE}" == "low" ]]
				then
					dinfo \
					"Low and above vulnerability found"
					result="1"
				fi
			fi
		fi
		popd >/dev/null
	done
	dinfo "Auditing security done"
	echo ""
	return ${result}
}

function check() {
	einfo \
"Checking npm packages and Electron apps for vulnerabilities please wait..."
	echo "" > "${G_INSECURE_SET_FP}"

	while read -r line ; do
		local p=$(echo "${line}" | cut -f1)
		local path=$(echo "${line}" | cut -f2)

		pushd "${path}" >/dev/null
			raudit "${p}" "${path}"
			if [[ "$?" == "0" ]] ; then
				dinfo "Package ${p} is good."
			else
				dinfo \
"Package ${p} needs to be updated and has been placed in the\n\
@${G_INSECURE_SET_FN} set."
				echo "${p}" >> "${G_INSECURE_SET_FP}"
			fi
		popd >/dev/null
	done < "${G_NPM_APPS}"
}

function summary() {
	# remove blank lines
	sed -i '/^$/d' "${G_INSECURE_SET_FP}"

	local n_insecure=$(wc -l ${G_INSECURE_SET_FP} | cut -f1 -d' ')
	local fsz=$(wc -c ${G_INSECURE_SET_FP} | cut -f1 -d' ')
	dinfo "n_insecure=$n_insecure"
	dinfo "fsz=$fsz"
	if (( ${n_insecure} > 0 && ${fsz} > 1 )); then
		D=$(cd "$(dirname "$0")" ; pwd -P)
		einfo \
"npm-secaudit found ${n_insecure} insecure apps.  Please update immediately\n\
with \`emerge @${G_INSECURE_SET_FN}\`.\n\
\n\
For a full report, run with \`${D}/$(basename $BASH_SOURCE) -v\`."
	else
		einfo "No insecure npm/electron apps found."
	fi
}

clean_insecure_set_mutex()
{
	einfo "Called clean_insecure_set_mutex"
	rm -rf "${G_PACKAGE_LOCK_DIR}/mutex-insecure-set"
}

function main() {
	while true ; do
		if mkdir "${G_PACKAGE_LOCK_DIR}/mutex-insecure-set" 2>/dev/null ; then
			trap clean_insecure_set_mutex EXIT
			init
			check
			summary
			rm -rf "${G_PACKAGE_LOCK_DIR}/mutex-insecure-set"
			break
		else
			einfo \
"Multiple instances of npm-secaudit detected.  Close all instances of them\n\
and remove the ${G_PACKAGE_LOCK_DIR}/mutex-insecure-set directory or wait till they\n\
are done."
			sleep 15
		fi
	done
}

main
