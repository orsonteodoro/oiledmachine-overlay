#!/bin/bash
G_INFO="
Copyright 2016-2020 Orson Teodoro
License: Dual licensed under MIT or GPL2
"

PGO_WHITELIST="/etc/portage/package.pgo.whitelist"
PGO_PACKAGE_PHASES="/etc/portage/package.pgo.phases"
PGO_SIMULATION_WINDOW="$((60*60*24*7))" # seconds
PGO_MUTEX_DIR="/dev/shm"
PGO_SHOW_PHASES=${PGO_SHOW_PHASES:="0"}

_pgo_pkg_setup_check_sandbox_permissions() {
	if [[ "${CC}" == "gcc" || "${CXX}" == "g++"  ]]; then
		grep -r -F -e "SANDBOX_WRITE" /etc/sandbox.d/* \
			| grep -F -e "/var/lib/pgo"
		if [[ "$?" != "0" ]]; then
			die \
"You need to add /var/lib/pgo to SANDBOX_WRITE in /etc/sandbox.d/00default"
		fi
	fi
}

_pgo_pkg_setup_found_new_package() {
	einfo "Detected new package to be instrumented."
	echo "=${CATEGORY}/${PF} 1" >> "${PGO_PACKAGE_PHASES}"
}

_pgo_promote_package_to_phase3_if_gcc() {
        if [[ "${CC}" == "clang" \
		|| "${CXX}" == "clang++" ]]
	then
		LST=$(ls ${ROOT}/var/lib/pgo/${CATEGORY}/${PF}/default.profraw)
		echo "${LST}" | grep -F -e ".profraw" &>/dev/null
		if [[ "$?" == "0" ]]; then
			einfo "Detected clang/LLVM PGO profiling data."
			A="=${CATEGORY}/${PF} *" \
			B="=${CATEGORY}/${PF} 3" \
			perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' \
				"${PGO_PACKAGE_PHASES}"
		else
			die "No profiling data detected."
		fi
	fi
}

_pgo_promote_package_to_phase3_if_llvm() {
	if [[ "${CC}" == "gcc" \
		|| "${CXX}" == "g++" ]]
	then
		find ${ROOT}/var/lib/pgo/${CATEGORY}/${PF} -name *gcda &>/dev/null
		if [[ "$?" == "0" ]]; then
			einfo "Detected gcc/g++ profiling data."
			A="=${CATEGORY}/${PF} *" \
			B="=${CATEGORY}/${PF} 3" \
			perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' \
				"${PGO_PACKAGE_PHASES}"
		else
			die "No profiling data detected."
		fi
        fi
}

_pgo_package_not_ready() {
	T="$((${ROW[2]}+${PGO_SIMULATION_WINDOW}))"
	einfo \
"You package simulation time window has not expired.  You may emerge after "\
$(date --date="@${T}" "+%a %b %d %r %Z %Y")
	die
}

_pgo_pkg_setup_found_old_package() {
	PGO_PACKAGE=$(cat "${PGO_PACKAGE_PHASES}" \
		| grep -F -e "${CATEGORY}/${PF}")
	IFS=" " \
	read -ra ROW <<< "${PGO_PACKAGE}"
	PGO_PACKAGE_PHASE="${ROW[1]}"

	if [[ "${PGO_PACKAGE_PHASE}" == "*" ]]; then
		PGO_PACKAGE=$(cat "${PGO_PACKAGE_PHASES}" \
			| grep -F -e "${CATEGORY}/${PF}")
		IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
		local A
		local B
		_pgo_generate_package_simulation_lists
	        if [[ "${A} ${B}" =~ "${ROW[0]}"  ]]; then
			if [[ "$((${ROW[2]}+${PGO_SIMULATION_WINDOW}))" \
				< "$(date +%s)" ]]; then
				_pgo_promote_package_to_phase3_if_gcc
				_pgo_promote_package_to_phase3_if_llvm
			else
				_pgo_package_not_ready
			fi
		else
			die \
"Your package has not been simulated.  Remove the package from\n\
/etc/portage/package.pgo.whitelist or simulate it."
	        fi
	fi
}

_pgo_pkg_setup() {
	if [[ "${PGO_SHOW_PHASES}" == "1" ]] ; then
		einfo "pgo_pkg_setup"
	fi
	touch "${PGO_PACKAGE_PHASES}"
	touch "${PGO_WHITELIST}"

	if [[ ! -d /var/lib/pgo ]] ; then
		mkdir -p "${ROOT}/var/lib/pgo/"
		chgrp -R wheel "${ROOT}/var/lib/pgo"
		chmod -R g+w "${ROOT}/var/lib/pgo"
	fi

	cat "${PGO_WHITELIST}" \
		| grep -F -e "${CATEGORY}/${PN}" \
		| grep -v -F -e "#" &>/dev/null
	if [[ "$?" == "0" ]]; then
		V=$(clang -v 2>&1 \
			| grep -E -o -e "version [0-9.]*" \
			| sed -e "s|version ||g")
		if [[ "$V" < "3.7.0" ]]; then
			die \
"System-wide PGO requires clang/llvm 3.7.0.  Please upgrade."
		fi

		einfo "Package is in PGO whitelist [OK]"
		cat "${PGO_PACKAGE_PHASES}" \
			| grep -F -e "${CATEGORY}/${PF}" &>/dev/null
		if [[ "$?" != "0" ]]; then
			_pgo_pkg_setup_found_new_package
		else
			_pgo_pkg_setup_found_old_package
		fi
		_pgo_pkg_setup_check_sandbox_permissions
	fi
}

_pgo_set_compiler_flags() {
	PGO_PACKAGE=$(cat "${PGO_PACKAGE_PHASES}" \
			| grep -F -e "${CATEGORY}/${PF}")
	IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
	PGO_PACKAGE_PHASE="${ROW[1]}"
	if [[ "${#PGO_PACKAGE_PHASE}" != "0" ]]; then
		einfo "PGO Phase: ${PGO_PACKAGE_PHASE}"
	fi

        INSTRUMENT_CFLAGS=""
        INSTRUMENT_LDFLAGS=""
        INSTRUMENT_LIBS=""
        PROFILE_DATA_CFLAGS=""
        PROFILE_DATA_LDFLAGS=""
        PROFILE_DATA_LIBS=""
        if [[ "${CC}" == "gcc" || "${CXX}" == "g++" ]]; then
                INSTRUMENT_CFLAGS="-fprofile-generate=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
                INSTRUMENT_LDFLAGS="-fprofile-generate=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
                INSTRUMENT_LIBS=""

                PROFILE_DATA_CFLAGS="-fprofile-use=${ROOT}/var/lib/pgo/${CATEGORY}/${PF} -fprofile-correction"
                PROFILE_DATA_LDFLAGS="-fprofile-use=${ROOT}/var/lib/pgo/${CATEGORY}/${PF} -fprofile-correction"
                PROFILE_DATA_LIBS=""
        elif [[ "${CC}" == "clang" || "${CXX}" == "clang++" ]]; then
                INSTRUMENT_CFLAGS="-fprofile-generate=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
                INSTRUMENT_LDFLAGS="-fprofile-generate=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
                INSTRUMENT_LIBS=""
		#if [[ "${PN}" == "chromium" ]]; then
	        #        INSTRUMENT_LIBS="-lconv"
	                #INSTRUMENT_LIBS="-lgcov"
		#	true
		#fi

                PROFILE_DATA_CFLAGS="-fprofile-use=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
                PROFILE_DATA_LDFLAGS="-fprofile-use=${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
                PROFILE_DATA_LIBS=""
        else
                die "Check your compiler CC and CXX must be clang/clang++ or gcc/g++."
        fi

	if [[ "${PGO_PACKAGE_PHASE}" == "1" ]]; then
		einfo "Using PGO instrumentation flags to trace user activity..."
		CFLAGS="${CFLAGS} ${INSTRUMENT_CFLAGS}"
		CXXFLAGS="${CXXFLAGS} ${INSTRUMENT_CFLAGS}"
		CPPFLAGS="${CPPFLAGS} ${INSTRUMENT_CFLAGS}"
		LDFLAGS="${LDFLAGS} ${INSTRUMENT_LDFLAGS}"
		LIBS="${LIBS} ${INSTRUMENT_LIBS}"
	fi

	if [[ "${PGO_PACKAGE_PHASE}" == "3" ]]; then
		einfo "Using the PGO profile and PGO flags to optimize package..."
		CFLAGS="${CFLAGS} ${PROFILE_DATA_CFLAGS}"
		CXXFLAGS="${CXXFLAGS} ${PROFILE_DATA_CFLAGS}"
		CPPFLAGS="${CPPFLAGS} ${PROFILE_DATA_CFLAGS}"
		LDFLAGS="${LDFLAGS} ${PROFILE_DATA_LDFLAGS}"
		LIBS="${LIBS} ${PROFILE_DATA_LIBS}"
	fi
}

_pgo_src_configure() {
	if [[ "${PGO_SHOW_PHASES}" == "1" ]] ; then
		einfo "pgo_src_configure"
	fi
	cat "${PGO_WHITELIST}" \
		| grep -F -e "${CATEGORY}/${PN}" \
		| grep -v -F -e "#" &>/dev/null
	if [[ "$?" == "0" ]]; then
		_pgo_set_compiler_flags
	fi
}

_pgo_src_compile() {
	if [[ "${PGO_SHOW_PHASES}" == "1" ]] ; then
		einfo "pgo_src_compile"
	fi
	cat "${PGO_WHITELIST}" \
		| grep -F -e "${CATEGORY}/${PN}" \
		| grep -v -F -e "#" &>/dev/null
	if [[ "$?" == "0" \
		&& "${PGO_PACKAGE_PHASE}" == "1" ]]; then
		einfo "Compiling with PGO..."
	fi
}

_pgo_promote_package_phase() {
	cat "${PGO_WHITELIST}" \
		| grep -F -e "${CATEGORY}/${PN}" \
		| grep -v -F -e "#" &>/dev/null
	if [[ "$?" == "0" ]]; then
		PGO_PACKAGE=$(cat "${PGO_PACKAGE_PHASES}" \
			| grep -F -e "${CATEGORY}/${PF}")
		IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
		PGO_PACKAGE_PHASE="${ROW[1]}"

		if [[ "${#PGO_PACKAGE_PHASE}" != "0" ]]; then
			einfo "PGO Phase: ${PGO_PACKAGE_PHASE}"
		fi
		if [[ "${PGO_PACKAGE_PHASE}" == "1" ]]; then
			einfo "Done with phase 1"
			A="=${CATEGORY}/${PF} 1" \
			B="=${CATEGORY}/${PF} * $(date +%s)" \
			perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' \
				"${PGO_PACKAGE_PHASES}"
			rm -rf "${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
			mkdir -p "${ROOT}/var/lib/pgo/${CATEGORY}/${PF}"
			chgrp -R wheel "${ROOT}/var/lib/pgo"
			chmod -R g+w "${ROOT}/var/lib/pgo"
			einfo \
"You must run the ${PF} package then re-emerge the package to complete the\n\
optimization.  After about a week or required duration of regular usage,\n\
re-emerge this package.  You may simulate as many times you want before\n\
re-emerging."
		elif [[ "${PGO_PACKAGE_PHASE}" == "3" ]]; then
			einfo "Done with phase 3"
			A="=${CATEGORY}/${PF} 3" \
			B="=${CATEGORY}/${PF} 4" \
			perl -p -i -e 's|\Q$ENV{'A'}\E|$ENV{'B'}|g' \
				"${PGO_PACKAGE_PHASES}"
			einfo "The package is now PGO optimized."
			echo "${CATEGORY}/${PF}" \
				>> "${ROOT}"/etc/portage/package.pgo.finished
		fi
	fi
}

_pgo_report_package_simulation_progress() {
	einfo "The following packages still need to be simulated."
	while read PGO_PACKAGE; do
		IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
	        if [[ "${A} ${B}" =~ "${ROW[0]}"  ]]; then
			if [[ "$((${ROW[2]}+${PGO_SIMULATION_WINDOW}))" \
				< "$(date +%s)" ]]; then
				true # ready to emerge
			else
				if [[ "${ROW[1]}" == "*" ]]; then
			                einfo "  ${ROW[0]}" # needs more simulation time
				fi
			fi
	        else
	                einfo "  ${ROW[0]}" # not simulated
	        fi
	done < /etc/portage/package.pgo.phases
}

_pgo_generate_package_simulation_lists() {
	# echo "The list of simulated packages:"

	# gcc
	A=$(find /var/lib/pgo -name "*.gcda" \
		| sed -r \
-e "s|/var/tmp/ccache/././[^\.]+.o.tmp.[^\.]+.[0-9]*[.]?gcda||g" \
		| sed -e "s|\./|=|g" \
		| sed -e "s|/var/lib/pgo||g" \
		| sed -e "s|^/|=|g" \
		| uniq)

	# llvm
	B=$(find /var/lib/pgo -name "*.profraw" \
		| sed -e "s|/default.profraw||g" \
		| sed -e "s|\./|=|g" \
		| sed -e "s|/var/lib/pgo||g" \
		| sed -e "s|^/|=|g" )
	# einfo "${A}"
	# einfo "${B}"
}

_pgo_add_package_to_pgo_update_if_ready() {
	echo "" > /etc/portage/sets/pgo-update
	einfo \
"The following packages are ready to be emerged to complete PGO optimization."
	while read PGO_PACKAGE; do
		IFS=" " read -ra ROW <<< "${PGO_PACKAGE}"
	        if [[ "${A} ${B}" =~ "${ROW[0]}" \
			&& "$((${ROW[2]}+${PGO_SIMULATION_WINDOW}))" \
				< "$(date +%s)" \
				&& "${ROW[1]}" == "*" ]]
		then
	                einfo "  ${ROW[0]}" # is simulated
			echo "${ROW[0]}" \
				>> /etc/portage/sets/pgo-update
	        fi
	done < /etc/portage/package.pgo.phases
}

clean_update-set-mutex() {
	einfo "Called clean_update-set-mutex"
	rm -rf "${PGO_MUTEX_DIR}/mutex-update-set"
}

_pgo_pkg_posinst() {
	if [[ "${PGO_SHOW_PHASES}" == "1" ]] ; then
		einfo "pgo_pkg_postinst"
	fi

	_pgo_promote_package_phase

	local A
	local B

	_pgo_generate_package_simulation_lists
	_pgo_report_package_simulation_progress

	while true ; do
		if mkdir -p "${PGO_MUTEX_DIR}/mutex-update-set" ; then
			trap clean_update-set-mutex EXIT
			_pgo_add_package_to_pgo_update_if_ready
			rm -rf "${PGO_MUTEX_DIR}/mutex-update-set"
			break
		else
			einfo \
"pgo-update is currently being updated.  Wait or close all emerge instances\n\
and remove ${PGO_MUTEX_DIR}/mutex-update-set directory."
		fi
	done
	einfo "Use emerge @pgo-update to emerge these packages."
	einfo ""
}

if [[ "$EBUILD_PHASE_FUNC" == "pkg_setup" ]]; then
	_pgo_pkg_setup
fi

if [[ "$EBUILD_PHASE_FUNC" == "src_configure" ]]; then
	_pgo_src_configure
fi

if [[ "$EBUILD_PHASE_FUNC" == "src_compile" ]]; then
	_pgo_src_compile
fi

if [[ "$EBUILD_PHASE_FUNC" == "pkg_postinst" ]]; then
	_pgo_pkg_posinst
fi
