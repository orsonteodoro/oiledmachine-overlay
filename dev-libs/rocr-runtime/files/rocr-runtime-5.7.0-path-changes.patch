diff -urp src.orig/CMakeLists.txt src/CMakeLists.txt
--- src.orig/CMakeLists.txt	2023-09-15 07:32:06.000000000 -0700
+++ src/CMakeLists.txt	2023-09-18 19:21:26.246080439 -0700
@@ -95,7 +95,7 @@ set ( PACKAGE_VERSION_STRING "${VERSION_
 ## Find external dependencies.
 find_package(PkgConfig)
 find_package(LibElf REQUIRED)
-find_package(hsakmt 1.0 REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsakmt 1.0 REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS @EPREFIX_ROCM_PATH@)
 pkg_check_modules(drm REQUIRED IMPORTED_TARGET libdrm)
 
 ## Create the rocr target.
diff -urp src.orig/cmake_modules/FindLibElf.cmake src/cmake_modules/FindLibElf.cmake
--- src.orig/cmake_modules/FindLibElf.cmake	2023-09-15 07:32:06.000000000 -0700
+++ src/cmake_modules/FindLibElf.cmake	2023-09-18 19:21:26.246080439 -0700
@@ -35,9 +35,9 @@ find_library (LIBELF_LIBRARIES
   NAMES
     elf
   PATHS
-    /usr/lib
-    /usr/local/lib
-    /opt/local/lib
+    @ESYSROOT@/usr/@LIBDIR@
+    @ESYSROOT@/usr/local/@LIBDIR@
+    @ESYSROOT@/opt/local/@LIBDIR@
     /sw/lib
     ENV LIBRARY_PATH
     ENV LD_LIBRARY_PATH)
diff -urp src.orig/core/runtime/trap_handler/CMakeLists.txt src/core/runtime/trap_handler/CMakeLists.txt
--- src.orig/core/runtime/trap_handler/CMakeLists.txt	2023-09-15 07:32:06.000000000 -0700
+++ src/core/runtime/trap_handler/CMakeLists.txt	2023-09-18 19:24:36.422077899 -0700
@@ -43,8 +43,14 @@
 cmake_minimum_required ( VERSION 3.7 )
 
 # Import target 'clang' and 'llvm-objcopy'
-find_package(Clang REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS /opt/rocm/llvm )
-find_package(LLVM REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS /opt/rocm/llvm )
+option(USE_SYSTEM_LLVM "Use the system's LLVM" OFF)
+if(${USE_SYSTEM_LLVM})
+  find_package(Clang REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS @ESYSROOT@/usr/lib/llvm/@LLVM_SLOT@ )
+  find_package(LLVM REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS @ESYSROOT@/usr/lib/llvm/@LLVM_SLOT@ )
+else
+  find_package(Clang REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS @ESYSROOT_ROCM_PATH@/llvm )
+  find_package(LLVM REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS @ESYSROOT_ROCM_PATH@/llvm )
+endif()
 
 set (TARGET_DEVS "gfx900;gfx940;gfx941;gfx942;gfx1010;gfx1030;gfx1100")
 set (POSTFIX "9;940;941;942;1010;10;11")
diff -urp src.orig/hsa-backward-compat.cmake src/hsa-backward-compat.cmake
--- src.orig/hsa-backward-compat.cmake	2023-09-15 07:32:06.000000000 -0700
+++ src/hsa-backward-compat.cmake	2023-09-18 19:21:26.246080439 -0700
@@ -19,7 +19,7 @@
 
 set(HSA_WRAPPER_DIR ${CMAKE_CURRENT_BINARY_DIR}/wrapper_dir)
 set(HSA_WRAPPER_INC_DIR ${HSA_WRAPPER_DIR}/include/hsa)
-set(HSA_WRAPPER_LIB_DIR ${HSA_WRAPPER_DIR}/lib)
+set(HSA_WRAPPER_LIB_DIR ${HSA_WRAPPER_DIR}/@LIBDIR@)
 
 #Function to generate header template file
 function(create_header_template)
diff -urp src.orig/image/blit_src/CMakeLists.txt src/image/blit_src/CMakeLists.txt
--- src.orig/image/blit_src/CMakeLists.txt	2023-09-15 07:32:06.000000000 -0700
+++ src/image/blit_src/CMakeLists.txt	2023-09-18 19:24:24.326078061 -0700
@@ -43,7 +43,12 @@
 cmake_minimum_required ( VERSION 3.7 )
 
 # Import target 'clang'
-find_package(Clang REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS /opt/rocm/llvm )
+option(USE_SYSTEM_LLVM "Use the system's LLVM" OFF)
+if(${USE_SYSTEM_LLVM})
+  find_package(Clang REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS @ESYSROOT@/usr/lib/llvm/@LLVM_SLOT@ )
+else()
+  find_package(Clang REQUIRED HINTS ${CMAKE_PREFIX_PATH}/llvm PATHS @ESYSROOT_ROCM_PATH@/llvm )
+endif()
 
 # Determine the target devices if not specified
 if (NOT DEFINED TARGET_DEVICES)
@@ -66,7 +71,7 @@ endif()
 function(gen_kernel_bc TARGET_ID INPUT_FILE OUTPUT_FILE)
 
   separate_arguments(CLANG_ARG_LIST UNIX_COMMAND
-    "-O2 -x cl -Xclang -finclude-default-header -cl-denorms-are-zero -cl-std=CL2.0
+    "--rocm-path=/usr --rocm-device-lib-path=@ESYSROOT_ROCM_PATH@/@LIBDIR@/amdgcn/bitcode -O2 -x cl -Xclang -finclude-default-header -cl-denorms-are-zero -cl-std=CL2.0
     -target amdgcn-amd-amdhsa -mcpu=${TARGET_ID} -mcode-object-version=4
     -o ${OUTPUT_FILE} ${INPUT_FILE}")
 
diff -urp src.orig/image/blit_src/README.md src/image/blit_src/README.md
--- src.orig/image/blit_src/README.md	2023-09-15 07:32:06.000000000 -0700
+++ src/image/blit_src/README.md	2023-09-18 19:21:26.246080439 -0700
@@ -46,9 +46,9 @@ There are several variables are required
 object file.  All of them have default values, and defined as following:
 
       OPENCL_DIR - the location of installed OpenCL
-                   (Default: /opt/rocm/opencl)
+                   (Default: @ESYSROOT_ROCM_PATH@/opencl)
      BITCODE_DIR - the directory contains the bitcode library
-                   (Default: /opt/rocm/amdgcn/bitcode)
+                   (Default: @ESYSROOT_ROCM_PATH@/@LIBDIR@/amdgcn/bitcode)
         LLVM_DIR - the directory contains the clang, llvm-link and llvm-dis
                    executables
                    (Default: ${PROJECT_BUILD_DIR}/../lightning/bin)
diff -urp src.orig/README.md src/README.md
--- src.orig/README.md	2023-09-15 07:32:06.000000000 -0700
+++ src/README.md	2023-09-18 19:21:26.246080439 -0700
@@ -79,7 +79,7 @@ ROCm packages installed, execute the fol
 ```bash
 mkdir build
 cd build
-cmake -DCMAKE_INSTALL_PATH=/opt/rocm ..
+cmake -DCMAKE_INSTALL_PATH=@ESYSROOT_ROCM_PATH@ ..
 make
 make install
 make package
@@ -112,12 +112,12 @@ make
 ## Building Against the Runtime
 
 The runtime provides a CMake package config file, installed by default to
-`/opt/rocm/lib/cmake/hsa-runtime64`. The runtime exports CMake target
+`@ESYSROOT_ROCM_PATH@/@LIBDIR@/cmake/hsa-runtime64`. The runtime exports CMake target
 `hsa-runtime64` in namespace `hsa-runtime64`. A CMake project (`Foo`) using the
 runtime may locate, include, and link the runtime with the following template:
 
 ```cmake
-# Add /opt/rocm to CMAKE_PREFIX_PATH.
+# Add @ESYSROOT_ROCM_PATH@ to CMAKE_PREFIX_PATH.
 
 find_package(hsa-runtime64 1.0 REQUIRED)
 ...
