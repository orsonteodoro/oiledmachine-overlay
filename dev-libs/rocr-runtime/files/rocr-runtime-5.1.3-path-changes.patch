diff -urp src.orig/CMakeLists.txt src/CMakeLists.txt
--- src.orig/CMakeLists.txt	2022-05-20 11:40:46.000000000 -0700
+++ src/CMakeLists.txt	2023-09-18 19:26:26.026076436 -0700
@@ -94,7 +94,7 @@ set ( PACKAGE_VERSION_STRING "${VERSION_
 
 ## Find external dependencies.
 find_package(LibElf REQUIRED)
-find_package(hsakmt 1.0 REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsakmt 1.0 REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 
 ## Create the rocr target.
 add_library( ${CORE_RUNTIME_TARGET} "" )
@@ -122,8 +122,8 @@ target_include_directories( ${CORE_RUNTI
   ${CMAKE_CURRENT_SOURCE_DIR}
   ${CMAKE_CURRENT_SOURCE_DIR}/libamdhsacode )
 
-## Set RUNPATH - ../../lib covers use of the legacy symlink in /hsa/lib/
-set_property(TARGET ${CORE_RUNTIME_TARGET} PROPERTY INSTALL_RPATH "$ORIGIN;$ORIGIN/../../lib;$ORIGIN/../../lib64;$ORIGIN/../lib64" )
+## Set RUNPATH - ../../@LIBDIR@ covers use of the legacy symlink in /hsa/@LIBDIR@/
+set_property(TARGET ${CORE_RUNTIME_TARGET} PROPERTY INSTALL_RPATH "$ORIGIN;$ORIGIN/../../@LIBDIR@;$ORIGIN/../@LIBDIR@" )
 
 ## ------------------------- Linux Compiler and Linker options -------------------------
 set ( HSA_CXX_FLAGS ${HSA_COMMON_CXX_FLAGS} -fexceptions -fno-rtti -fvisibility=hidden -Wno-error=missing-braces -Wno-error=sign-compare -Wno-sign-compare -Wno-write-strings -Wno-conversion-null -fno-math-errno -fno-threadsafe-statics -fmerge-all-constants -fms-extensions -Wno-error=comment -Wno-comment -Wno-error=pointer-arith -Wno-pointer-arith -Wno-error=unused-variable -Wno-error=unused-function )
@@ -275,7 +275,7 @@ if( NOT ${BUILD_SHARED_LIBS} )
 
   ## Bind to source build target interface but not its link requirements.
   target_include_directories( ${CORE_RUNTIME_NAME} INTERFACE $<TARGET_PROPERTY:${CORE_RUNTIME_NAME}::${CORE_RUNTIME_TARGET},INTERFACE_INCLUDE_DIRECTORIES> )
-  target_link_libraries ( ${CORE_RUNTIME_NAME} INTERFACE -Wl,$<INSTALL_PREFIX>/lib/cmake/${CORE_RUNTIME_NAME}/${LNKSCR}
+  target_link_libraries ( ${CORE_RUNTIME_NAME} INTERFACE -Wl,$<INSTALL_PREFIX>/@LIBDIR@/cmake/${CORE_RUNTIME_NAME}/${LNKSCR}
     -Wl,--whole-archive $<TARGET_FILE:${CORE_RUNTIME_NAME}::${CORE_RUNTIME_TARGET}> -Wl,--no-whole-archive)
   add_dependencies( ${CORE_RUNTIME_NAME} ${CORE_RUNTIME_TARGET} )
 
@@ -289,16 +289,16 @@ endif()
 ## Create symlinks for legacy packaging and install
 add_custom_target ( hsa_include_link ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../include/hsa hsa_include_link )
 if ( ${BUILD_SHARED_LIBS} )
-    add_custom_target ( hsa_lib_link ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../lib/${CORE_RUNTIME_LIBRARY}.so ${CORE_RUNTIME_LIBRARY}-link.so )
-    add_custom_target ( hsa_lib_link2 ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../lib/${CORE_RUNTIME_LIBRARY}.so.${VERSION_MAJOR} ${CORE_RUNTIME_LIBRARY}-link.so.${VERSION_MAJOR} )
+    add_custom_target ( hsa_lib_link ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../@LIBDIR@/${CORE_RUNTIME_LIBRARY}.so ${CORE_RUNTIME_LIBRARY}-link.so )
+    add_custom_target ( hsa_lib_link2 ALL WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR} COMMAND ${CMAKE_COMMAND} -E create_symlink ../../@LIBDIR@/${CORE_RUNTIME_LIBRARY}.so.${VERSION_MAJOR} ${CORE_RUNTIME_LIBRARY}-link.so.${VERSION_MAJOR} )
 endif()
 
 ## Set install information
 # Installs binaries and exports the library usage data to ${HSAKMT_TARGET}Targets
 # TODO: Fix me for flat directory layout.  Should be ${CMAKE_INSTALL_LIBDIR}
 install ( TARGETS ${CORE_RUNTIME_TARGET} EXPORT ${CORE_RUNTIME_NAME}Targets
-  ARCHIVE DESTINATION lib COMPONENT binary
-  LIBRARY DESTINATION lib COMPONENT binary )
+  ARCHIVE DESTINATION @LIBDIR@ COMPONENT binary
+  LIBRARY DESTINATION @LIBDIR@ COMPONENT binary )
 
 # Install license
 install ( FILES ${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.md DESTINATION ${CMAKE_INSTALL_DOCDIR} COMPONENT binary )
@@ -312,8 +312,8 @@ install ( FILES ${CMAKE_CURRENT_BINARY_D
 
 # Legacy symlinks.
 if ( ${BUILD_SHARED_LIBS} )
-    install ( FILES ${CMAKE_CURRENT_BINARY_DIR}/${CORE_RUNTIME_LIBRARY}-link.so DESTINATION hsa/lib PERMISSIONS OWNER_WRITE OWNER_READ RENAME ${CORE_RUNTIME_LIBRARY}.so COMPONENT binary)
-    install ( FILES ${CMAKE_CURRENT_BINARY_DIR}/${CORE_RUNTIME_LIBRARY}-link.so.${VERSION_MAJOR} DESTINATION hsa/lib PERMISSIONS OWNER_WRITE OWNER_READ RENAME ${CORE_RUNTIME_LIBRARY}.so.${VERSION_MAJOR} COMPONENT binary)
+    install ( FILES ${CMAKE_CURRENT_BINARY_DIR}/${CORE_RUNTIME_LIBRARY}-link.so DESTINATION hsa/@LIBDIR@ PERMISSIONS OWNER_WRITE OWNER_READ RENAME ${CORE_RUNTIME_LIBRARY}.so COMPONENT binary)
+    install ( FILES ${CMAKE_CURRENT_BINARY_DIR}/${CORE_RUNTIME_LIBRARY}-link.so.${VERSION_MAJOR} DESTINATION hsa/@LIBDIR@ PERMISSIONS OWNER_WRITE OWNER_READ RENAME ${CORE_RUNTIME_LIBRARY}.so.${VERSION_MAJOR} COMPONENT binary)
 endif ()
 
 ## Configure and install package config file
@@ -322,7 +322,7 @@ endif ()
 install ( EXPORT ${CORE_RUNTIME_NAME}Targets
   FILE ${CORE_RUNTIME_NAME}Targets.cmake
   NAMESPACE ${CORE_RUNTIME_NAME}::
-  DESTINATION lib/cmake/${CORE_RUNTIME_NAME}
+  DESTINATION @LIBDIR@/cmake/${CORE_RUNTIME_NAME}
   COMPONENT dev)
 
 # Adds the target alias hsa-runtime64::hsa-runtime64 to the local cmake cache.
@@ -339,25 +339,25 @@ include(CMakePackageConfigHelpers)
 # TODO: Fix me for flat directory layout.  Should be ${CMAKE_INSTALL_LIBDIR}
 configure_package_config_file(${CORE_RUNTIME_NAME}-config.cmake.in
   ${CORE_RUNTIME_NAME}-config.cmake
-  INSTALL_DESTINATION lib/cmake/${CORE_RUNTIME_NAME} )
+  INSTALL_DESTINATION @LIBDIR@/cmake/${CORE_RUNTIME_NAME} )
 
 write_basic_package_version_file(${CORE_RUNTIME_NAME}-config-version.cmake
   VERSION ${SO_VERSION_STRING} COMPATIBILITY AnyNewerVersion )
 
 # TODO: Fix me for flat directory layout.  Should be ${CMAKE_INSTALL_LIBDIR}
 install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${CORE_RUNTIME_NAME}-config.cmake ${CMAKE_CURRENT_BINARY_DIR}/${CORE_RUNTIME_NAME}-config-version.cmake
-  DESTINATION lib/cmake/${CORE_RUNTIME_NAME}
+  DESTINATION @LIBDIR@/cmake/${CORE_RUNTIME_NAME}
   COMPONENT dev)
 
 # Install build files needed only when using a static build.
 if( NOT ${BUILD_SHARED_LIBS} )
   # libelf find package module
   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/FindLibElf.cmake ${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules/COPYING-CMAKE-SCRIPTS
-    DESTINATION lib/cmake/${CORE_RUNTIME_NAME}
+    DESTINATION @LIBDIR@/cmake/${CORE_RUNTIME_NAME}
     COMPONENT dev)
   # Linker script (defines function aliases)
   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${LNKSCR}
-    DESTINATION lib/cmake/${CORE_RUNTIME_NAME}
+    DESTINATION @LIBDIR@/cmake/${CORE_RUNTIME_NAME}
     COMPONENT dev)
 endif()
 
diff -urp src.orig/cmake_modules/FindLibElf.cmake src/cmake_modules/FindLibElf.cmake
--- src.orig/cmake_modules/FindLibElf.cmake	2022-05-20 11:40:46.000000000 -0700
+++ src/cmake_modules/FindLibElf.cmake	2023-09-18 19:26:26.026076436 -0700
@@ -35,9 +35,9 @@ find_library (LIBELF_LIBRARIES
   NAMES
     elf
   PATHS
-    /usr/lib
-    /usr/local/lib
-    /opt/local/lib
+    @ESYSROOT@/usr/@LIBDIR@
+    @ESYSROOT@/usr/local/@LIBDIR@
+    @ESYSROOT@/opt/local/@LIBDIR@
     /sw/lib
     ENV LIBRARY_PATH
     ENV LD_LIBRARY_PATH)
diff -urp src.orig/image/blit_src/CMakeLists.txt src/image/blit_src/CMakeLists.txt
--- src.orig/image/blit_src/CMakeLists.txt	2022-05-20 11:40:46.000000000 -0700
+++ src/image/blit_src/CMakeLists.txt	2023-09-18 19:27:35.642075506 -0700
@@ -46,11 +46,11 @@ cmake_minimum_required ( VERSION 3.7 )
 set (QUIT 0)
 
 # Import target 'clang'
-find_package(Clang REQUIRED HINTS ${CMAKE_INSTALL_PREFIX}/llvm ${CMAKE_PREFIX_PATH}/llvm PATHS /opt/rocm/llvm )
+find_package(Clang REQUIRED HINTS @ESYSROOT_LLVM_PATH@ )
 
 # Device libs doesn't support find_package yet.
 set(PREFIX_HINTS "")
-foreach(hint "/amdgcn/bitcode" "/lib/bitcode" "/lib/x86_64/bitcode")
+foreach(hint "@LIBDIR@/amdgcn/bitcode" "/lib/bitcode" "/lib/x86_64/bitcode")
   foreach(path ${CMAKE_PREFIX_PATH})
     string(APPEND path ${hint})
     list(APPEND PREFIX_HINTS ${path})
@@ -59,15 +64,13 @@ endforeach(hint)
 
 get_include_path(BITCODE_DIR "Bitcode library path" RESULT FOUND NAMES "opencl.bc" "opencl.amdgcn.bc"
   HINTS
-    "${CMAKE_INSTALL_PREFIX}/amdgcn/bitcode"
-    "${CMAKE_INSTALL_PREFIX}/lib/bitcode"
-    "${CMAKE_INSTALL_PREFIX}/lib/x86_64/bitcode"
+    "${CMAKE_INSTALL_PREFIX}/@LIBDIR@/amdgcn/bitcode"
+    "${CMAKE_INSTALL_PREFIX}/@LIBDIR@/bitcode"
     "${PREFIX_HINTS}"
   PATHS
-    "/opt/rocm/amdgcn/bitcode"
-    "/opt/rocm/lib/bitcode"
-    "/opt/rocm/lib"
-    "/opt/rocm/lib/x86_64/bitcode")
+    "@ESYSROOT_ROCM_PATH@/@LIBDIR@/amdgcn/bitcode"
+    "@ESYSROOT_ROCM_PATH@/@LIBDIR@/bitcode"
+    "@ESYSROOT_ROCM_PATH@/@LIBDIR@")
 if (NOT ${FOUND})
   set (QUIT 1)
 endif()
@@ -122,7 +125,7 @@ function(gen_kernel_bc TARGET_ID INPUT_F
   endif()
 
   separate_arguments(CLANG_ARG_LIST UNIX_COMMAND
-    "-O2 -x cl -cl-denorms-are-zero -cl-std=CL2.0 -target amdgcn-amd-amdhsa
+    "--rocm-path=@ESYSROOT_ROCM_PATH@ --rocm-device-lib-path=@ESYSROOT_ROCM_PATH@/@LIBDIR@/amdgcn/bitcode -O2 -x cl -cl-denorms-are-zero -cl-std=CL2.0 -target amdgcn-amd-amdhsa
     -Xclang -finclude-default-header -mcpu=${TARGET_ID}
     ${BITCODE_ARGS} -o ${OUTPUT_FILE} ${INPUT_FILE}")
 
diff -urp src.orig/image/blit_src/README.md src/image/blit_src/README.md
--- src.orig/image/blit_src/README.md	2022-05-20 11:40:46.000000000 -0700
+++ src/image/blit_src/README.md	2023-09-18 19:26:26.026076436 -0700
@@ -46,9 +46,9 @@ There are several variables are required
 object file.  All of them have default values, and defined as following:
 
       OPENCL_DIR - the location of installed OpenCL
-                   (Default: /opt/rocm/opencl)
+                   (Default: @ESYSROOT_ROCM_PATH@/opencl)
      BITCODE_DIR - the directory contains the bitcode library
-                   (Default: /opt/rocm/amdgcn/bitcode)
+                   (Default: @ESYSROOT_ROCM_PATH@/@LIBDIR@/amdgcn/bitcode)
         LLVM_DIR - the directory contains the clang, llvm-link and llvm-dis
                    executables
                    (Default: ${PROJECT_BUILD_DIR}/../lightning/bin)
diff -urp src.orig/README.md src/README.md
--- src.orig/README.md	2022-05-20 11:40:46.000000000 -0700
+++ src/README.md	2023-09-18 19:26:26.026076436 -0700
@@ -74,7 +74,7 @@ ROCm packages installed, execute the fol
 
     mkdir build
     cd build
-    cmake -DCMAKE_INSTALL_PATH=/opt/rocm ..
+    cmake -DCMAKE_INSTALL_PATH=@ESYSROOT_ROCM_PATH@ ..
     make
     make install
     make package
@@ -102,11 +102,11 @@ Alternately ccmake and cmake-gui are sup
 #### Building Against the Runtime
 
 The runtime provides a cmake package config file, installed by default to
-/opt/rocm/lib/cmake/hsa-runtime64. The runtime exports cmake target
+@ESYSROOT_ROCM_PATH@/@LIBDIR@/cmake/hsa-runtime64. The runtime exports cmake target
 hsa-runtime64 in namespace hsa-runtime64. A cmake project (Foo) using the
 runtime may locate, include, and link the runtime with the following template:
 
-    Add /opt/rocm to CMAKE_PREFIX_PATH.
+    Add @ESYSROOT_ROCM_PATH@ to CMAKE_PREFIX_PATH.
 
     find_package(hsa-runtime64 1.0 REQUIRED)
     ...
