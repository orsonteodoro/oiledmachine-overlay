diff -urp AMDMIGraphX-rocm-5.6.0.orig/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/CMakeLists.txt	2023-09-03 22:56:23.192323086 -0700
@@ -30,7 +30,7 @@ endif()
 # This has to be initialized before the project() command appears
 # Set the default of CMAKE_BUILD_TYPE to be release, unless user specifies with -D.  MSVC_IDE does not use CMAKE_BUILD_TYPE
 if( NOT MSVC_IDE AND NOT CMAKE_BUILD_TYPE )
-    set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." )
+#_cmake_modify_IGNORE     set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." )
 endif()
 
 # Setup valid strings for build type
@@ -41,12 +41,12 @@ set_property(CACHE CMAKE_BUILD_TYPE PROP
 
 # Default installation path
 if(WIN32)
-    set(CMAKE_INSTALL_PREFIX "/opt/rocm/x86_64-w64-mingw32" CACHE PATH "")
+#_cmake_modify_IGNORE     set(CMAKE_INSTALL_PREFIX "@EPREFIX_ROCM_PATH@/x86_64-w64-mingw32" CACHE PATH "")
 else()
-    set(CMAKE_INSTALL_PREFIX "/opt/rocm" CACHE PATH "")
+#_cmake_modify_IGNORE     set(CMAKE_INSTALL_PREFIX "@EPREFIX_ROCM_PATH@" CACHE PATH "")
 endif()
 
-set(CMAKE_BUILD_RPATH "${CMAKE_BINARY_DIR}/lib")
+set(CMAKE_BUILD_RPATH "${CMAKE_BINARY_DIR}/@LIBDIR@")
 
 project(migraphx)
 find_package(ROCM REQUIRED)
@@ -264,8 +264,8 @@ enable_testing()
 
 include(ROCMCreatePackage)
 
-set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
-set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/@LIBDIR@)
+set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/@LIBDIR@)
 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
 add_subdirectory(src)
 add_subdirectory(docs)
@@ -274,9 +274,9 @@ add_subdirectory(tools)
 
 set(DEST_DIR ${CMAKE_BINARY_DIR})
 file(GLOB backend_files ${CMAKE_SOURCE_DIR}/src/py/backend/*.py)
-file(MAKE_DIRECTORY ${DEST_DIR}/lib/onnx_migraphx)
+file(MAKE_DIRECTORY ${DEST_DIR}/@LIBDIR@/onnx_migraphx)
 foreach(py_file ${backend_files})
-    configure_file(${py_file} ${DEST_DIR}/lib/onnx_migraphx/. COPYONLY)
+    configure_file(${py_file} ${DEST_DIR}/@LIBDIR@/onnx_migraphx/. COPYONLY)
 endforeach(py_file)
 configure_file(${CMAKE_SOURCE_DIR}/test/py/onnx_backend_test.py ${DEST_DIR}/onnx_backend_test.py COPYONLY)
 
diff -urp AMDMIGraphX-rocm-5.6.0.orig/docs/driver.rst AMDMIGraphX-rocm-5.6.0/docs/driver.rst
--- AMDMIGraphX-rocm-5.6.0.orig/docs/driver.rst	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/docs/driver.rst	2023-09-03 22:49:16.984328778 -0700
@@ -73,9 +73,9 @@ An example command line combined with ro
 
 .. code-block:: bash
 
-    /opt/rocm/bin/rocprof --hip-trace --roctx-trace --flush-rate 1ms --timestamp on -d <OUTPUT_PATH> --obj-tracking on /opt/rocm/bin/migraphx-driver roctx <ONNX_FILE> <MIGRAPHX_OPTIONS>
+    @EPREFIX_ROCM_PATH@/bin/rocprof --hip-trace --roctx-trace --flush-rate 1ms --timestamp on -d <OUTPUT_PATH> --obj-tracking on /usr/bin/migraphx-driver roctx <ONNX_FILE> <MIGRAPHX_OPTIONS>
 
 After `rocprof` is run, the output directory will contain trace information for HIP, HCC and ROCTX in seperate `.txt` files.
 To understand the interactions between API calls, it is recommended to utilize `roctx.py` helper script as desribed in :ref:`dev/tools:rocTX` section. 
 
-.. include:: ./driver/compile.rst
\ No newline at end of file
+.. include:: ./driver/compile.rst
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/cpp_dynamic_batch/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/examples/migraphx/cpp_dynamic_batch/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/cpp_dynamic_batch/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/cpp_dynamic_batch/CMakeLists.txt	2023-09-03 22:49:32.536328570 -0700
@@ -27,7 +27,7 @@ project (cpp_dynamic_batch)
 set (CMAKE_CXX_STANDARD 14)
 set (EXAMPLE dynamic_batch)
 
-list (APPEND CMAKE_PREFIX_PATH /opt/rocm)
+list (APPEND CMAKE_PREFIX_PATH @ESYSROOT_ROCM_PATH@)
 find_package (migraphx)
 
 message("source file: " ${EXAMPLE}.cpp " ---> bin: " ${EXAMPLE})
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/cpp_parse_load_save/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/examples/migraphx/cpp_parse_load_save/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/cpp_parse_load_save/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/cpp_parse_load_save/CMakeLists.txt	2023-09-03 22:49:24.296328680 -0700
@@ -27,7 +27,7 @@ project (PLS)
 set (CMAKE_CXX_STANDARD 14)
 set (EXAMPLE parse_load_save)
 
-list (APPEND CMAKE_PREFIX_PATH /opt/rocm)
+list (APPEND CMAKE_PREFIX_PATH @ESYSROOT_ROCM_PATH@)
 find_package (migraphx)
 
 message("source file: " ${EXAMPLE}.cpp " ---> bin: " ${EXAMPLE})
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_hip_kernel/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_hip_kernel/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_hip_kernel/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_hip_kernel/CMakeLists.txt	2023-09-03 22:49:30.664328595 -0700
@@ -27,7 +27,7 @@ project (custom_hip_kernel)
 set (CMAKE_CXX_STANDARD 14)
 set (EXAMPLE custom_op_hip_kernel)
 
-list (APPEND CMAKE_PREFIX_PATH /opt/rocm/hip /opt/rocm)
+list (APPEND CMAKE_PREFIX_PATH @ESYSROOT_ROCM_PATH@/hip @ESYSROOT_ROCM_PATH@)
 find_package (migraphx REQUIRED)
 find_package (hip REQUIRED)
 
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_hip_kernel/README.md AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_hip_kernel/README.md
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_hip_kernel/README.md	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_hip_kernel/README.md	2023-09-03 22:56:13.400323217 -0700
@@ -3,9 +3,9 @@ This is an example of a custom operator
 
 Kernels can be written in either HIP, MIOpen, or by using RocBLAS library. This particular example uses **HIP**.
 
- To build the example, ensure ROCm is installed at `/opt/rocm`. 
- 1.  `export LD_LIBRARY_PATH=/opt/rocm/lib:$LD_LIBRARY_PATH`
+ To build the example, ensure ROCm is installed at `@EPREFIX_ROCM_PATH@`. 
+ 1.  `export LD_LIBRARY_PATH=@EPREFIX_ROCM_PATH@/@LIBDIR@:$LD_LIBRARY_PATH`
  2.  `cd $MIGRAPHX_SRC/examples/migraphx/custom_op_hip_kernel/`
  3.  `mkdir build && cd build`
- 4.  `CXX=/opt/rocm/llvm/bin/clang++ cmake ..  && make`
- 5.  `./custom_op_hip_kernel`
\ No newline at end of file
+ 4.  `CXX=@EPREFIX_LLVM_PATH@/bin/clang++ cmake ..  && make`
+ 5.  `./custom_op_hip_kernel`
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_miopen_kernel/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_miopen_kernel/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_miopen_kernel/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_miopen_kernel/CMakeLists.txt	2023-09-03 22:49:29.096328616 -0700
@@ -27,7 +27,7 @@ project (custom_miopen_kernel)
 set (CMAKE_CXX_STANDARD 14)
 set (EXAMPLE custom_op_miopen_kernel)
 
-list (APPEND CMAKE_PREFIX_PATH /opt/rocm)
+list (APPEND CMAKE_PREFIX_PATH @ESYSROOT_ROCM_PATH@)
 find_package (migraphx REQUIRED)
 find_package (miopen REQUIRED)
 
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_miopen_kernel/README.md AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_miopen_kernel/README.md
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_miopen_kernel/README.md	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_miopen_kernel/README.md	2023-09-03 22:56:08.072323288 -0700
@@ -2,8 +2,8 @@
  This is an example of a custom operator implementation using MIGraphX's C/C++ APIs. It also demonstrates how to use this custom op in conjunction with rest of MIGraphX operators to build  and run MIGraphX program on GPU. 
  Kernels can be written in either HIP, MIOpen, or by using RocBLAS library.  This particular example uses **MIOpen** library calls.
 
- To build and run example, ensure ROCm is installed at `/opt/rocm`. 
- 1.  `export LD_LIBRARY_PATH=/opt/rocm/lib:$LD_LIBRARY_PATH`
+ To build and run example, ensure ROCm is installed at `@EPREFIX_ROCM_PATH@`. 
+ 1.  `export LD_LIBRARY_PATH=/usr/@LIBDIR@:$LD_LIBRARY_PATH`
  2.  `cd $MIGRAPHX_SRC/examples/migraphx/custom_op_miopen_kernel/`
  3.  `mkdir build && cd build`
  4.  `cmake ..  && make`
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_rocblas_kernel/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_rocblas_kernel/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_rocblas_kernel/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_rocblas_kernel/CMakeLists.txt	2023-09-03 22:49:27.448328638 -0700
@@ -28,7 +28,7 @@ set (CMAKE_CXX_STANDARD 14)
 set (EXAMPLE custom_op_rocblas_kernel)
 
 
-list (APPEND CMAKE_PREFIX_PATH /opt/rocm)
+list (APPEND CMAKE_PREFIX_PATH @ESYSROOT_ROCM_PATH@)
 find_package (migraphx REQUIRED)
 find_package (rocblas REQUIRED)
 
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_rocblas_kernel/README.md AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_rocblas_kernel/README.md
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/custom_op_rocblas_kernel/README.md	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/custom_op_rocblas_kernel/README.md	2023-09-03 22:56:27.448323029 -0700
@@ -3,8 +3,8 @@
 
  Kernels can be written in either HIP, MIOpen, or by using RocBLAS library.  This particular example uses **rocBLAS** library calls.
 
- To build and run the example, ensure ROCm is installed at `/opt/rocm`. 
- 1.  `export LD_LIBRARY_PATH=/opt/rocm/lib:$LD_LIBRARY_PATH`
+ To build and run the example, ensure ROCm is installed at `@EPREFIX_ROCM_PATH@`. 
+ 1.  `export LD_LIBRARY_PATH=@EPREFIX_ROCM_PATH@/@LIBDIR@:$LD_LIBRARY_PATH`
  2.  `cd $MIGRAPHX_SRC/examples/migraphx/custom_op_rocblas_kernel/`
  3.  `mkdir build && cd build`
  4.  `cmake ..  && make`
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/export_frozen_graph_tf2/example.ipynb AMDMIGraphX-rocm-5.6.0/examples/migraphx/export_frozen_graph_tf2/example.ipynb
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/export_frozen_graph_tf2/example.ipynb	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/export_frozen_graph_tf2/example.ipynb	2023-09-03 22:49:25.896328659 -0700
@@ -168,7 +168,7 @@
    "outputs": [],
    "source": [
     "import subprocess\n",
-    "driver = \"/opt/rocm/bin/migraphx-driver\"\n",
+    "driver = \"@EPREFIX_ROCM_PATH@/bin/migraphx-driver\"\n",
     "command = \"read\"\n",
     "model_path = \"./frozen_models/{}_frozen_graph.pb\".format(MODEL_NAME)\n",
     "process = subprocess.run([driver, command, model_path], \n",
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/export_frozen_graph_tf2/.ipynb_checkpoints/example-checkpoint.ipynb AMDMIGraphX-rocm-5.6.0/examples/migraphx/export_frozen_graph_tf2/.ipynb_checkpoints/example-checkpoint.ipynb
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/export_frozen_graph_tf2/.ipynb_checkpoints/example-checkpoint.ipynb	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/export_frozen_graph_tf2/.ipynb_checkpoints/example-checkpoint.ipynb	2023-09-03 22:49:26.652328649 -0700
@@ -3040,7 +3040,7 @@
    ],
    "source": [
     "import subprocess\n",
-    "driver = \"/opt/rocm/bin/migraphx-driver\"\n",
+    "driver = \"@EPREFIX_ROCM_PATH@/bin/migraphx-driver\"\n",
     "command = \"read\"\n",
     "model_path = \"./frozen_models/{}_frozen_graph.pb\".format(MODEL_NAME)\n",
     "process = subprocess.run([driver, command, model_path], \n",
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/migraphx_driver/README.md AMDMIGraphX-rocm-5.6.0/examples/migraphx/migraphx_driver/README.md
--- AMDMIGraphX-rocm-5.6.0.orig/examples/migraphx/migraphx_driver/README.md	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/migraphx/migraphx_driver/README.md	2023-09-03 22:49:25.064328670 -0700
@@ -5,7 +5,7 @@ The MIGraphX driver is a tool that allow
 
 ## How to Use this Example
 
-The MIGraphX driver is installed with MIGraphX and can be found in `/opt/rocm/bin/migraphx-driver`, or in `AMDMIGraphX/build/bin/migraphx-driver` after building the source code. 
+The MIGraphX driver is installed with MIGraphX and can be found in `@EPREFIX_ROCM_PATH@/bin/migraphx-driver`, or in `AMDMIGraphX/build/bin/migraphx-driver` after building the source code. 
 
 See below for a comprehensive list of commands and option arguments, as well as some usage examples.
 
@@ -66,7 +66,7 @@ The examples below supply a simple MNIST
 
 ##### Example: op
 ```
-$ /opt/rocm/bin/migraphx-driver op --list
+$ @EPREFIX_ROCM_PATH@/bin/migraphx-driver op --list
 ```
 
 <details>
@@ -282,7 +282,7 @@ unsqueeze
 
 ##### Example: params
 ```
-$ /opt/rocm/bin/migraphx-driver params simple_graph.pb 
+$ @EPREFIX_ROCM_PATH@/bin/migraphx-driver params simple_graph.pb 
 ```
 
 <details>
@@ -298,7 +298,7 @@ x: float_type, {1, 28, 28}, {784, 28, 1}
 
 ##### Example: run (onnx file input)
 ```
-$ /opt/rocm/bin/migraphx-driver run --onnx simple_graph.onnx
+$ @EPREFIX_ROCM_PATH@/bin/migraphx-driver run --onnx simple_graph.onnx
 ```
 
 <details>
@@ -358,7 +358,7 @@ x:0 = @param:x:0 -> float_type, {1, 28,
 
 ##### Example: read
 ```
-$ /opt/rocm/bin/migraphx-driver read simple_graph.pb 
+$ @EPREFIX_ROCM_PATH@/bin/migraphx-driver read simple_graph.pb 
 ```
 
 <details>
@@ -393,7 +393,7 @@ x = @param:x -> float_type, {1, 28, 28},
 
 ##### Example: compile (on GPU, quantized for fp16)
 ```
-$ /opt/rocm/bin/migraphx-driver compile --gpu --fp16 simple_graph.pb
+$ @EPREFIX_ROCM_PATH@/bin/migraphx-driver compile --gpu --fp16 simple_graph.pb
 ```
 
 <details>
@@ -433,7 +433,7 @@ output = @param:output -> float_type, {1
 
 ##### Example: verify
 ```
-$ /opt/rocm/bin/migraphx-driver verify simple_graph.pb
+$ @EPREFIX_ROCM_PATH@/bin/migraphx-driver verify simple_graph.pb
 ```
 
 <details>
@@ -532,7 +532,7 @@ output = @param:output -> float_type, {1
 
 ##### Example: perf
 ```
-$ /opt/rocm/bin/migraphx-driver perf simple_graph.pb
+$ @EPREFIX_ROCM_PATH@/bin/migraphx-driver perf simple_graph.pb
 ```
 
 <details>
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/vision/cpp_mnist/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/examples/vision/cpp_mnist/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/examples/vision/cpp_mnist/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/vision/cpp_mnist/CMakeLists.txt	2023-09-03 22:49:22.824328700 -0700
@@ -27,7 +27,7 @@ project (CAI)
 set (CMAKE_CXX_STANDARD 14)
 set (EXAMPLE mnist_inference)
 
-list (APPEND CMAKE_PREFIX_PATH /opt/rocm)
+list (APPEND CMAKE_PREFIX_PATH @ESYSROOT_ROCM_PATH@)
 find_package (migraphx)
 
 message("source file: " ${EXAMPLE}.cpp " ---> bin: " ${EXAMPLE})
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/vision/cpp_mnist/README.md AMDMIGraphX-rocm-5.6.0/examples/vision/cpp_mnist/README.md
--- AMDMIGraphX-rocm-5.6.0.orig/examples/vision/cpp_mnist/README.md	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/vision/cpp_mnist/README.md	2023-09-03 22:51:18.424327156 -0700
@@ -78,7 +78,7 @@ prog.compile(targ);
 
 The targets "ref" and "cpu" both compile the program to run on the CPU. The target "ref" is primarily used for correctness checking. The target "cpu" is under ongoing development and has more optimizations enabled. Additionally, the "cpu" target requires MIGraphX to be built with the `-DMIGRAPHX_ENABLE_CPU=On` flag. Specifically, 
 ```
-CXX=/opt/rocm/llvm/bin/clang++ cmake -DMIGRAPHX_ENABLE_CPU=On ..
+CXX=@EPREFIX_LLVM_PATH@/bin/clang++ cmake -DMIGRAPHX_ENABLE_CPU=On ..
 ```
 
 ## Preparing Input Data
@@ -118,7 +118,7 @@ This directory contains everything that
 ```
 $ mkdir build
 $ cd build
-$ CXX=/opt/rocm/llvm/bin/clang++ cmake ..
+$ CXX=@EPREFIX_LLVM_PATH@/bin/clang++ cmake ..
 $ make
 ```
 There will now be an executable named `mnist_inference` in the `build` directory. This can be run with or without options. Executing without any options will produce the following output:
@@ -178,4 +178,4 @@ CORRECT
 
 ```
 
-*Note: the actual digit selected and printed will not necessarily be the same as shown above. 
\ No newline at end of file
+*Note: the actual digit selected and printed will not necessarily be the same as shown above. 
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/vision/python_resnet50/resnet50_inference.ipynb AMDMIGraphX-rocm-5.6.0/examples/vision/python_resnet50/resnet50_inference.ipynb
--- AMDMIGraphX-rocm-5.6.0.orig/examples/vision/python_resnet50/resnet50_inference.ipynb	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/vision/python_resnet50/resnet50_inference.ipynb	2023-09-03 22:55:13.112324022 -0700
@@ -66,11 +66,11 @@
     "Sometimes the PYTHONPATH variable is not set during installation of MIGraphX. \n",
     "If your receive a \"Module Not Found\" error when trying to `import migraphx` in your own application, try running:\n",
     "```\n",
-    "$ export PYTHONPATH=/opt/rocm/lib:$PYTHONPATH\n",
+    "$ export PYTHONPATH=@EPREFIX_ROCM_PATH@/@LIBDIR@:$PYTHONPATH\n",
     "```\n",
     "For this example, the library will be added to the kernel's sys.path.\n",
     "\n",
-    "If you receive \"cannot open shared object file: No such file or directory\" , please make sure `/opt/rocm/lib` is included in $LD_LIBRARY_PATH\n",
+    "If you receive \"cannot open shared object file: No such file or directory\" , please make sure `@EPREFIX_ROCM_PATH@/@LIBDIR@` is included in $LD_LIBRARY_PATH\n",
     "```\n",
     " cannot open shared object file: No such file or directory\n",
     "```"
@@ -82,7 +82,7 @@
    "metadata": {},
    "outputs": [],
    "source": [
-    "migx_lib_path = \"/opt/rocm/lib\"\n",
+    "migx_lib_path = \"@EPREFIX_ROCM_PATH@/@LIBDIR@\"\n",
     "if migx_lib_path not in sys.path:\n",
     "    sys.path.append(migx_lib_path)"
    ]
diff -urp AMDMIGraphX-rocm-5.6.0.orig/examples/vision/python_yolov4/yolov4_inference.ipynb AMDMIGraphX-rocm-5.6.0/examples/vision/python_yolov4/yolov4_inference.ipynb
--- AMDMIGraphX-rocm-5.6.0.orig/examples/vision/python_yolov4/yolov4_inference.ipynb	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/examples/vision/python_yolov4/yolov4_inference.ipynb	2023-09-03 22:49:21.320328720 -0700
@@ -80,9 +80,9 @@
    "outputs": [],
    "source": [
     "if not os.path.exists(\"yolov4_fp16.mxr\"):\n",
-    "    !/opt/rocm/bin/migraphx-driver compile ./utilities/yolov4.onnx --gpu --enable-offload-copy --fp16 --binary -o yolov4_fp16.mxr\n",
+    "    !@EPREFIX_ROCM_PATH@/bin/migraphx-driver compile ./utilities/yolov4.onnx --gpu --enable-offload-copy --fp16 --binary -o yolov4_fp16.mxr\n",
     "if not os.path.exists(\"yolov4.mxr\"):\n",
-    "    !/opt/rocm/bin/migraphx-driver compile ./utilities/yolov4.onnx --gpu --enable-offload-copy --binary -o yolov4.mxr"
+    "    !@EPREFIX_ROCM_PATH@/bin/migraphx-driver compile ./utilities/yolov4.onnx --gpu --enable-offload-copy --binary -o yolov4.mxr"
    ]
   },
   {
diff -urp AMDMIGraphX-rocm-5.6.0.orig/rbuild.ini AMDMIGraphX-rocm-5.6.0/rbuild.ini
--- AMDMIGraphX-rocm-5.6.0.orig/rbuild.ini	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/rbuild.ini	2023-09-03 22:50:11.160328054 -0700
@@ -1,6 +1,6 @@
 [main]
-cxx = ${rocm_path}/llvm/bin/clang++
-cc = ${rocm_path}/llvm/bin/clang
+cxx = @ESYSROOT_LLVM_PATH@/bin/clang++
+cc = @ESYSROOT_LLVM_PATH@/bin/clang
 deps =
     ROCmSoftwarePlatform/rocm-recipes
     -f requirements.txt
@@ -17,8 +17,8 @@ define =
     BUILD_DEV=On
 
 [develop]
-cxx = ${rocm_path}/llvm/bin/clang++
-cc = ${rocm_path}/llvm/bin/clang
+cxx = @ESYSROOT_LLVM_PATH@/bin/clang++
+cc = @ESYSROOT_LLVM_PATH@/bin/clang
 deps =
     -f dev-requirements.txt
     oneapi-src/oneDNN@v1.7
diff -urp AMDMIGraphX-rocm-5.6.0.orig/README.md AMDMIGraphX-rocm-5.6.0/README.md
--- AMDMIGraphX-rocm-5.6.0.orig/README.md	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/README.md	2023-09-03 22:56:25.160323060 -0700
@@ -13,7 +13,7 @@ With ROCm installed correctly, MIGraphX
 ```
 sudo apt update && sudo apt install -y migraphx
 ```
-then the header files and libs are installed under `/opt/rocm-<version>`, where `<version>` is the ROCm version.
+then the header files and libs are installed under `@EPREFIX_ROCM_PATH@`.
 
 ## Building from source
 
@@ -114,7 +114,7 @@ cd build
 2) Configure the cmake. If the prerequisites are installed at the default location `/usr/local`, the command is:
 
 ```
-CXX=/opt/rocm/llvm/bin/clang++ cmake ..
+CXX=@EPREFIX_LLVM_PATH@/bin/clang++ cmake ..
 ```
 Otherwise, you need to set `-DCMAKE_PREFIX_PATH=$your_loc` to configure the cmake. 
 
@@ -156,7 +156,7 @@ To use MIGraphX's Python module, please
 
 - Setting `PYTHONPATH` :
 ```
-export PYTHONPATH=/opt/rocm/lib:$PYTHONPATH
+export PYTHONPATH=@EPREFIX_ROCM_PATH@/@LIBDIR@:$PYTHONPATH
 ```
 - Creating and installing the package:
 
diff -urp AMDMIGraphX-rocm-5.6.0.orig/src/include/migraphx/half.hpp AMDMIGraphX-rocm-5.6.0/src/include/migraphx/half.hpp
--- AMDMIGraphX-rocm-5.6.0.orig/src/include/migraphx/half.hpp	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/src/include/migraphx/half.hpp	2023-09-03 22:46:43.052330833 -0700
@@ -25,7 +25,7 @@
 #ifndef MIGRAPHX_GUARD_RTGLIB_HALF_HPP
 #define MIGRAPHX_GUARD_RTGLIB_HALF_HPP
 
-#include <half/half.hpp>
+#include <half.hpp>
 #include <migraphx/config.hpp>
 
 namespace migraphx {
diff -urp AMDMIGraphX-rocm-5.6.0.orig/src/targets/gpu/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/src/targets/gpu/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/src/targets/gpu/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/src/targets/gpu/CMakeLists.txt	2023-09-03 22:49:20.536328730 -0700
@@ -22,11 +22,11 @@
 # THE SOFTWARE.
 # ####################################################################################
 
-list(APPEND CMAKE_PREFIX_PATH /opt/rocm)
+list(APPEND CMAKE_PREFIX_PATH @ESYSROOT_ROCM_PATH@)
 find_package(miopen)
 
 # rocblas
-find_package(rocblas REQUIRED PATHS /opt/rocm)
+find_package(rocblas REQUIRED PATHS @ESYSROOT_ROCM_PATH@)
 message(STATUS "Build with rocblas")
 
 if(NOT TARGET MIOpen)
diff -urp AMDMIGraphX-rocm-5.6.0.orig/test/api/CMakeLists.txt AMDMIGraphX-rocm-5.6.0/test/api/CMakeLists.txt
--- AMDMIGraphX-rocm-5.6.0.orig/test/api/CMakeLists.txt	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/test/api/CMakeLists.txt	2023-09-03 22:49:15.896328792 -0700
@@ -57,7 +57,7 @@ add_api_test(custom_op test_custom_op.cp
 add_api_test(tf_parser test_tf_parser.cpp ${TEST_TF_DIR})
 # GPU-based tests
 if(MIGRAPHX_ENABLE_GPU)
-list(APPEND CMAKE_PREFIX_PATH /opt/rocm)
+list(APPEND CMAKE_PREFIX_PATH @EPREFIX_ROCM_PATH@)
 find_package(hip)
 add_api_test(gpu test_gpu.cpp ${TEST_ONNX_DIR})
 target_link_libraries(test_api_gpu)
diff -urp AMDMIGraphX-rocm-5.6.0.orig/tools/build_and_test_onnxrt.sh AMDMIGraphX-rocm-5.6.0/tools/build_and_test_onnxrt.sh
--- AMDMIGraphX-rocm-5.6.0.orig/tools/build_and_test_onnxrt.sh	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/tools/build_and_test_onnxrt.sh	2023-09-03 22:51:56.440326648 -0700
@@ -31,7 +31,7 @@ pip3 install -r requirements-dev.txt
 # Add newer cmake to the path
 export PATH="/opt/cmake/bin:$PATH"
 export CXXFLAGS="-D__HIP_PLATFORM_AMD__=1 -w"
-./build.sh --config Release  --cmake_extra_defines CMAKE_HIP_COMPILER=/opt/rocm/llvm/bin/clang++ --update --build --parallel --cmake_extra_defines ONNXRUNTIME_VERSION=$(cat ./VERSION_NUMBER) --skip_tests --rocm_home /opt/rocm --use_migraphx --migraphx_home /opt/rocm --rocm_version=`cat /opt/rocm/.info/version-dev` --allow_running_as_root
+./build.sh --config Release  --cmake_extra_defines CMAKE_HIP_COMPILER=@ESYSROOT_LLVM_PATH@/bin/clang++ --update --build --parallel --cmake_extra_defines ONNXRUNTIME_VERSION=$(cat ./VERSION_NUMBER) --skip_tests --rocm_home @ESYSROOT_ROCM_PATH@ --use_migraphx --migraphx_home /usr --rocm_version=`cat /usr/.info/version-dev` --allow_running_as_root
 
 cd build/Linux/Release
 #Add test launcher for onnxrt tests
diff -urp AMDMIGraphX-rocm-5.6.0.orig/tools/roctx.py AMDMIGraphX-rocm-5.6.0/tools/roctx.py
--- AMDMIGraphX-rocm-5.6.0.orig/tools/roctx.py	2023-06-14 13:38:45.000000000 -0700
+++ AMDMIGraphX-rocm-5.6.0/tools/roctx.py	2023-09-03 22:49:19.688328742 -0700
@@ -217,7 +217,7 @@ def run():
     #configurations
     configs = '--hip-trace --roctx-trace --flush-rate 10ms --timestamp on'
     output_dir = f"-d {args.out}"
-    executable = f"/opt/rocm/bin/migraphx-driver roctx {run_args}"
+    executable = f"@EPREFIX_ROCM_PATH@/bin/migraphx-driver roctx {run_args}"
     process_args = configs + ' ' + output_dir + ' ' + executable
     for i in range(repeat_count):
         os.system('rocprof ' + process_args)
