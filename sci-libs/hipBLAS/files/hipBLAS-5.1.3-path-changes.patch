diff -urp hipBLAS-rocm-5.1.3.orig/clients/benchmarks/CMakeLists.txt hipBLAS-rocm-5.1.3/clients/benchmarks/CMakeLists.txt
--- hipBLAS-rocm-5.1.3.orig/clients/benchmarks/CMakeLists.txt	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/clients/benchmarks/CMakeLists.txt	2023-09-01 14:42:20.229479566 -0700
@@ -17,11 +17,11 @@ endif()
 if(LINK_BLIS)
     if (NOT WIN32)
       set( BLIS_INCLUDE_DIR ${BUILD_DIR}/deps/blis/include/blis )
-      set( BLIS_LIBRARY ${BUILD_DIR}/deps/blis/lib/libblis.so )
+      set( BLIS_LIBRARY ${BUILD_DIR}/deps/blis/@LIBDIR@/libblis.so )
     else()
       set( BLIS_INCLUDE_DIR ${BLIS_DIR}/include/blis CACHE PATH "Blis library include path" )
       find_library( BLIS_LIBRARY libblis
-                      PATHS ${BLIS_DIR}/lib
+                      PATHS ${BLIS_DIR}/@LIBDIR@
                       REQUIRED
                       NO_DEFAULT_PATH
                   )
@@ -29,7 +29,7 @@ if(LINK_BLIS)
 endif()
 
 if( NOT TARGET hipblas )
-  find_package( hipblas REQUIRED CONFIG PATHS /opt/rocm/hipblas )
+  find_package( hipblas REQUIRED CONFIG PATHS @ESYSROOT_ROCM_PATH@/hipblas )
 endif( )
 
 set( hipblas_benchmark_common
@@ -74,11 +74,11 @@ target_include_directories( hipblas-benc
 if(LINK_BLIS)
     if (NOT WIN32)
       set( BLIS_INCLUDE_DIR ${BUILD_DIR}/deps/blis/include/blis )
-      set( BLIS_LIBRARY ${BUILD_DIR}/deps/blis/lib/libblis.so )
+      set( BLIS_LIBRARY ${BUILD_DIR}/deps/blis/@LIBDIR@/libblis.so )
     else()
       set( BLIS_INCLUDE_DIR ${BLIS_DIR}/include/blis CACHE PATH "Blis library include path" )
       find_library( BLIS_LIBRARY libblis
-                      PATHS ${BLIS_DIR}/lib
+                      PATHS ${BLIS_DIR}/@LIBDIR@
                       REQUIRED
                       NO_DEFAULT_PATH
                   )
diff -urp hipBLAS-rocm-5.1.3.orig/clients/CMakeLists.txt hipBLAS-rocm-5.1.3/clients/CMakeLists.txt
--- hipBLAS-rocm-5.1.3.orig/clients/CMakeLists.txt	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/clients/CMakeLists.txt	2023-09-01 14:42:20.229479566 -0700
@@ -8,15 +8,15 @@ cmake_minimum_required( VERSION 3.5 )
 # Consider removing this in the future
 # This should appear before the project command, because it does not use FORCE
 if( WIN32 )
-  set( CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}/package" CACHE PATH "Install path prefix, prepended onto install directories" )
+#_cmake_modify_IGNORE   set( CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}/package" CACHE PATH "Install path prefix, prepended onto install directories" )
 else( )
-  set( CMAKE_INSTALL_PREFIX "/opt/rocm" CACHE PATH "Install path prefix, prepended onto install directories" )
+#_cmake_modify_IGNORE   set( CMAKE_INSTALL_PREFIX "@ESYSROOT_ROCM_PATH@" CACHE PATH "Install path prefix, prepended onto install directories" )
 endif( )
 
 # This has to be initialized before the project() command appears
 # Set the default of CMAKE_BUILD_TYPE to be release, unless user specifies with -D.  MSVC_IDE does not use CMAKE_BUILD_TYPE
 if( NOT DEFINED CMAKE_CONFIGURATION_TYPES AND NOT DEFINED CMAKE_BUILD_TYPE )
-  set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." )
+#_cmake_modify_IGNORE   set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." )
 endif()
 
 # This project may compile dependencies for clients
diff -urp hipBLAS-rocm-5.1.3.orig/clients/gtest/CMakeLists.txt hipBLAS-rocm-5.1.3/clients/gtest/CMakeLists.txt
--- hipBLAS-rocm-5.1.3.orig/clients/gtest/CMakeLists.txt	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/clients/gtest/CMakeLists.txt	2023-09-01 14:42:20.229479566 -0700
@@ -9,7 +9,7 @@ endif()
 find_package( cblas REQUIRED CONFIG PATHS ${LAPACK_DIR} )
 
 if( NOT TARGET hipblas )
-  find_package( hipblas REQUIRED CONFIG PATHS /opt/rocm/hipblas )
+  find_package( hipblas REQUIRED CONFIG PATHS @ESYSROOT_ROCM_PATH@/hipblas )
 endif( )
 
 find_package( GTest REQUIRED )
@@ -112,11 +112,11 @@ add_executable( hipblas-test ${hipblas_f
 if(LINK_BLIS)
     if (NOT WIN32)
       set( BLIS_INCLUDE_DIR ${BUILD_DIR}/deps/blis/include/blis )
-      set( BLIS_LIBRARY ${BUILD_DIR}/deps/blis/lib/libblis.so )
+      set( BLIS_LIBRARY ${BUILD_DIR}/deps/blis/@LIBDIR@/libblis.so )
     else( )
       set( BLIS_INCLUDE_DIR ${BLIS_DIR}/include/blis CACHE PATH "Blis library include path" )
       find_library( BLIS_LIBRARY libblis
-                      PATHS ${BLIS_DIR}/lib
+                      PATHS ${BLIS_DIR}/@LIBDIR@
                       REQUIRED
                       NO_DEFAULT_PATH
                   )
diff -urp hipBLAS-rocm-5.1.3.orig/CMakeLists.txt hipBLAS-rocm-5.1.3/CMakeLists.txt
--- hipBLAS-rocm-5.1.3.orig/CMakeLists.txt	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/CMakeLists.txt	2023-09-01 14:42:20.229479566 -0700
@@ -15,15 +15,15 @@ endif()
 # Consider removing this in the future
 # This should appear before the project command, because it does not use FORCE
 if( WIN32 )
-  set( CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}/package" CACHE PATH "Install path prefix, prepended onto install directories" )
+#_cmake_modify_IGNORE   set( CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}/package" CACHE PATH "Install path prefix, prepended onto install directories" )
 else( )
-  set( CMAKE_INSTALL_PREFIX "/opt/rocm" CACHE PATH "Install path prefix, prepended onto install directories" )
+#_cmake_modify_IGNORE   set( CMAKE_INSTALL_PREFIX "@ESYSROOT_ROCM_PATH@" CACHE PATH "Install path prefix, prepended onto install directories" )
 endif( )
 
 # This has to be initialized before the project() command appears
 # Set the default of CMAKE_BUILD_TYPE to be release, unless user specifies with -D.  MSVC_IDE does not use CMAKE_BUILD_TYPE
 if( NOT DEFINED CMAKE_CONFIGURATION_TYPES AND NOT DEFINED CMAKE_BUILD_TYPE )
-  set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." )
+#_cmake_modify_IGNORE   set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." )
 endif()
 
 if (NOT WIN32)
@@ -38,7 +38,7 @@ project( hipblas LANGUAGES CXX ${fortran
 # This finds the rocm-cmake project, and installs it if not found
 # rocm-cmake contains common cmake code for rocm projects to help setup and install
 set( PROJECT_EXTERN_DIR ${CMAKE_CURRENT_BINARY_DIR}/extern )
-find_package( ROCM 0.6 CONFIG QUIET PATHS /opt/rocm )
+find_package( ROCM 0.6 CONFIG QUIET PATHS @ESYSROOT_ROCM_PATH@ )
 if( NOT ROCM_FOUND )
   set( rocm_cmake_tag "master" CACHE STRING "rocm-cmake tag to download" )
   file( DOWNLOAD https://github.com/RadeonOpenCompute/rocm-cmake/archive/${rocm_cmake_tag}.zip
@@ -64,7 +64,7 @@ set ( VERSION_STRING "0.50.0" )
 rocm_setup_version( VERSION ${VERSION_STRING} )
 
 if( NOT DEFINED ENV{HIP_PATH})
-    set( HIP_PATH "/opt/rocm/hip" )
+    set( HIP_PATH "@ESYSROOT_ROCM_PATH@/hip" )
 else( )
     set (HIP_PATH $ENV{HIP_PATH} )
 endif( )
@@ -74,7 +74,7 @@ endif( )
 list( APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake  ${HIP_PATH}/cmake)
 
 # NOTE:  workaround until hip cmake modules fixes symlink logic in their config files; remove when fixed
-list( APPEND CMAKE_PREFIX_PATH /opt/rocm /opt/rocm/llvm /opt/rocm/hip )
+list( APPEND CMAKE_PREFIX_PATH @ESYSROOT_ROCM_PATH@ @ESYSROOT_LLVM_PATH@ @ESYSROOT_ROCM_PATH@/hip )
 
 option( BUILD_VERBOSE "Output additional build information" OFF )
 
@@ -97,7 +97,7 @@ endif()
 if( USE_CUDA)
     find_package( HIP MODULE REQUIRED )
 else( )
-    find_package( hip REQUIRED CONFIG PATHS ${HIP_PATH} ${ROCM_PATH} /opt/rocm)
+    find_package( hip REQUIRED CONFIG PATHS ${HIP_PATH} ${ROCM_PATH} @ESYSROOT_ROCM_PATH@)
 endif( )
 
 if( USE_CUDA )
@@ -120,8 +120,8 @@ add_subdirectory( library )
 
 include( clients/cmake/build-options.cmake )
 
-# force library install path to lib (CentOS 7 defaults to lib64)
-set(CMAKE_INSTALL_LIBDIR "lib" CACHE INTERNAL "Installation directory for libraries" FORCE)
+# force library install path to lib (defaults to @LIBDIR@)
+set(CMAKE_INSTALL_LIBDIR "@LIBDIR@" CACHE INTERNAL "Installation directory for libraries" FORCE)
 
 # Build clients of the library
 if( BUILD_CLIENTS_SAMPLES OR BUILD_CLIENTS_TESTS OR BUILD_CLIENTS_BENCHMARKS )
@@ -166,7 +166,7 @@ if(BUILD_CODE_COVERAGE)
     COMMAND mkdir -p lcoverage
     COMMAND echo "\\#!/bin/bash" > llvm-gcov.sh
     COMMAND echo "\\# THIS FILE HAS BEEN GENERATED" >> llvm-gcov.sh
-    COMMAND printf "exec /opt/rocm/llvm/bin/llvm-cov gcov $$\\@" >> llvm-gcov.sh
+    COMMAND printf "exec @ESYSROOT_LLVM_PATH@/bin/llvm-cov gcov $$\\@" >> llvm-gcov.sh
     COMMAND chmod +x llvm-gcov.sh
     )
 
diff -urp hipBLAS-rocm-5.1.3.orig/deps/CMakeLists.txt hipBLAS-rocm-5.1.3/deps/CMakeLists.txt
--- hipBLAS-rocm-5.1.3.orig/deps/CMakeLists.txt	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/deps/CMakeLists.txt	2023-09-01 14:42:20.229479566 -0700
@@ -12,13 +12,13 @@ list( APPEND CMAKE_MODULE_PATH ${CMAKE_C
 # Consider removing this in the future
 # It can be annoying for visual studio developers to build a project that tries to install into 'program files'
 if( WIN32 AND CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT )
-  set( CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}/package" CACHE PATH "Install path prefix, prepended onto install directories" FORCE )
+#_cmake_modify_IGNORE   set( CMAKE_INSTALL_PREFIX "${PROJECT_BINARY_DIR}/package" CACHE PATH "Install path prefix, prepended onto install directories" FORCE )
 endif( )
 
 # This has to be initialized before the project() command appears
 # Set the default of CMAKE_BUILD_TYPE to be release, unless user specifies with -D.  MSVC_IDE does not use CMAKE_BUILD_TYPE
 if( NOT DEFINED CMAKE_CONFIGURATION_TYPES AND NOT DEFINED CMAKE_BUILD_TYPE )
-  set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." )
+#_cmake_modify_IGNORE   set( CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." )
 endif()
 
 # The superbuild does not build anything itself; all compiling is done in external projects
diff -urp hipBLAS-rocm-5.1.3.orig/deps/external-gtest.cmake hipBLAS-rocm-5.1.3/deps/external-gtest.cmake
--- hipBLAS-rocm-5.1.3.orig/deps/external-gtest.cmake	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/deps/external-gtest.cmake	2023-09-01 14:42:35.185479955 -0700
@@ -72,11 +72,7 @@ ExternalProject_Get_Property( googletest
 set( package_dir "${PREFIX_GTEST}" )
 if( CMAKE_CONFIGURATION_TYPES )
   # Create a package by bundling libraries and header files
-  if( BUILD_64 )
-    set( LIB_DIR lib64 )
-  else( )
-    set( LIB_DIR lib )
-  endif( )
+  set( LIB_DIR @LIBDIR@ )
 
   set( gtest_lib_dir "<BINARY_DIR>/${LIB_DIR}" )
   ExternalProject_Add_Step( googletest createPackage
diff -urp hipBLAS-rocm-5.1.3.orig/docs/source/contributing.rst hipBLAS-rocm-5.1.3/docs/source/contributing.rst
--- hipBLAS-rocm-5.1.3.orig/docs/source/contributing.rst	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/docs/source/contributing.rst	2023-09-01 14:42:20.229479566 -0700
@@ -100,7 +100,7 @@ Format
 ------
 
 C and C++ code is formatted using ``clang-format``. To run clang-format
-use the version in the ``/opt/rocm/llvm/bin`` directory. Please do not use your
+use the version in the ``@ESYSROOT_LLVM_PATH@/bin`` directory. Please do not use your
 system's built-in ``clang-format``, as this may be an older version that
 will result in different results.
 
@@ -108,14 +108,14 @@ To format a file, use:
 
 ::
 
-    /opt/rocm/llvm/bin/clang-format -style=file -i <path-to-source-file>
+    @ESYSROOT_LLVM_PATH@/bin/clang-format -style=file -i <path-to-source-file>
 
 To format all files, run the following script in rocBLAS directory:
 
 ::
 
     #!/bin/bash
-    git ls-files -z *.cc *.cpp *.h *.hpp *.cl *.h.in *.hpp.in *.cpp.in | xargs -0 /opt/rocm/llvm/bin/clang-format -style=file -i
+    git ls-files -z *.cc *.cpp *.h *.hpp *.cl *.h.in *.hpp.in *.cpp.in | xargs -0 @ESYSROOT_LLVM_PATH@/bin/clang-format -style=file -i
 
 Also, githooks can be installed to format the code per-commit:
 
diff -urp hipBLAS-rocm-5.1.3.orig/docs/source/install.rst hipBLAS-rocm-5.1.3/docs/source/install.rst
--- hipBLAS-rocm-5.1.3.orig/docs/source/install.rst	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/docs/source/install.rst	2023-09-01 14:42:20.229479566 -0700
@@ -61,7 +61,7 @@ in the table below.
 | ``./install.sh -i``                       | Build library, then      |
 |                                           | build and install        |
 |                                           | hipBLAS package in       |
-|                                           | `/opt/rocm/hipblas`. You |
+|                                           | `@ESYSROOT_ROCM_PATH@/hipblas`. You |
 |                                           | will be prompted for     |
 |                                           | sudo access. This will   |
 |                                           | install for all users.   |
@@ -162,11 +162,11 @@ Build Library Using Individual Commands
 .. code-block::bash
    mkdir -p [HIPBLAS_BUILD_DIR]/release
    cd [HIPBLAS_BUILD_DIR]/release
-   # Default install location is in /opt/rocm, define -DCMAKE_INSTALL_PREFIX=<path> to specify other
+   # Default install location is in @ESYSROOT_ROCM_PATH@, define -DCMAKE_INSTALL_PREFIX=<path> to specify other
    # Default build config is 'Release', define -DCMAKE_BUILD_TYPE=<config> to specify other
-   CXX=/opt/rocm/bin/hcc ccmake [HIPBLAS_SOURCE]
+   CXX=@ESYSROOT_ROCM_PATH@/bin/hcc ccmake [HIPBLAS_SOURCE]
    make -j$(nproc)
-   sudo make install # sudo required if installing into system directory such as /opt/rocm
+   sudo make install # sudo required if installing into system directory such as @ESYSROOT_ROCM_PATH@
 
 
 Build Library + Tests + Benchmarks + Samples Using Individual Commands
@@ -197,7 +197,7 @@ Once dependencies are available on the s
 .. code-block::bash
 
    -DCMAKE_PREFIX_PATH="<semicolon separated paths>"
-   # Default install location is in /opt/rocm, use -DCMAKE_INSTALL_PREFIX=<path> to specify other
-   CXX=/opt/rocm/bin/hcc ccmake -DBUILD_CLIENTS_TESTS=ON -DBUILD_CLIENTS_BENCHMARKS=ON [HIPBLAS_SOURCE]
+   # Default install location is in @ESYSROOT_ROCM_PATH@, use -DCMAKE_INSTALL_PREFIX=<path> to specify other
+   CXX=@ESYSROOT_ROCM_PATH@/bin/hcc ccmake -DBUILD_CLIENTS_TESTS=ON -DBUILD_CLIENTS_BENCHMARKS=ON [HIPBLAS_SOURCE]
    make -j$(nproc)
-   sudo make install   # sudo required if installing into system directory such as /opt/rocm
+   sudo make install   # sudo required if installing into system directory such as @ESYSROOT_ROCM_PATH@
diff -urp hipBLAS-rocm-5.1.3.orig/install.sh hipBLAS-rocm-5.1.3/install.sh
--- hipBLAS-rocm-5.1.3.orig/install.sh	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/install.sh	2023-09-01 14:42:20.229479566 -0700
@@ -338,8 +338,8 @@ build_hip_clang=true
 build_release=true
 build_relocatable=false
 build_address_sanitizer=false
-cmake_prefix_path=/opt/rocm
-rocm_path=/opt/rocm
+cmake_prefix_path=@ESYSROOT_ROCM_PATH@
+rocm_path=@ESYSROOT_ROCM_PATH@
 compiler=g++
 build_static=false
 build_release_debug=false
@@ -457,7 +457,7 @@ if [[ "${build_relocatable}" == true ]];
         rocm_path=${ROCM_PATH}
     fi
 
-    rocm_rpath=" -Wl,--enable-new-dtags -Wl,--rpath,/opt/rocm/lib:/opt/rocm/lib64"
+    rocm_rpath=" -Wl,--enable-new-dtags -Wl,--rpath,@EPREFIX_ROCM_PATH@/@LIBDIR@"
     if ! [ -z ${ROCM_RPATH+x} ]; then
         rocm_rpath=" -Wl,--enable-new-dtags -Wl,--rpath,${ROCM_RPATH}"
     fi
@@ -528,7 +528,7 @@ if [[ "${install_dependencies}" == true
 
 # We append customary rocm path; if user provides custom rocm path in ${path}, our
 # hard-coded path has lesser priority
-# export PATH=${PATH}:/opt/rocm/bin
+# export PATH=${PATH}:@ESYSROOT_ROCM_PATH@/bin
 pushd .
   # #################################################
   # configure & build
@@ -606,7 +606,7 @@ pushd .
     CXX=${compiler} ${cmake_executable} ${cmake_common_options[@]} ${cmake_client_options[@]} -DCPACK_SET_DESTDIR=OFF -DCMAKE_INSTALL_PREFIX="${rocm_path}" \
     -DCMAKE_PREFIX_PATH="${rocm_path};${rocm_path}/hcc;${rocm_path}/hip;$(pwd)/../deps/deps-install;/usr/local/cuda;${cmake_prefix_path}" \
     -DCMAKE_SHARED_LINKER_FLAGS="${rocm_rpath}" \
-    -DCMAKE_EXE_LINKER_FLAGS=" -Wl,--enable-new-dtags -Wl,--rpath,${rocm_path}/lib:${rocm_path}/lib64" \
+    -DCMAKE_EXE_LINKER_FLAGS=" -Wl,--enable-new-dtags -Wl,--rpath,@EPREFIX_ROCM_PATH@/@LIBDIR@" \
     -DROCM_DISABLE_LDCONFIG=ON \
     -DROCM_PATH="${rocm_path}" ../..
   else
diff -urp hipBLAS-rocm-5.1.3.orig/library/CMakeLists.txt hipBLAS-rocm-5.1.3/library/CMakeLists.txt
--- hipBLAS-rocm-5.1.3.orig/library/CMakeLists.txt	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/library/CMakeLists.txt	2023-09-01 14:42:20.229479566 -0700
@@ -81,7 +81,7 @@ else()
   endif()
 endif( )
 
-set( CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "\${CPACK_PACKAGING_INSTALL_PREFIX}" "\${CPACK_PACKAGING_INSTALL_PREFIX}/include" "\${CPACK_PACKAGING_INSTALL_PREFIX}/lib" )
+set( CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION "\${CPACK_PACKAGING_INSTALL_PREFIX}" "\${CPACK_PACKAGING_INSTALL_PREFIX}/include" "\${CPACK_PACKAGING_INSTALL_PREFIX}/@LIBDIR@" )
 
 # Give hipblas compiled for CUDA backend a different name
 if( NOT USE_CUDA )
diff -urp hipBLAS-rocm-5.1.3.orig/library/src/CMakeLists.txt hipBLAS-rocm-5.1.3/library/src/CMakeLists.txt
--- hipBLAS-rocm-5.1.3.orig/library/src/CMakeLists.txt	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/library/src/CMakeLists.txt	2023-09-01 14:42:20.229479566 -0700
@@ -62,7 +62,7 @@ if( NOT USE_CUDA )
     elseif( WIN32 )
         find_package( rocblas REQUIRED CONFIG PATHS ${ROCBLAS_PATH})
     else()
-      find_package( rocblas REQUIRED CONFIG PATHS /opt/rocm /opt/rocm/rocblas )
+      find_package( rocblas REQUIRED CONFIG PATHS @ESYSROOT_ROCM_PATH@ @ESYSROOT_ROCM_PATH@/rocblas )
     endif( )
   endif( )
 
@@ -77,7 +77,7 @@ if( NOT USE_CUDA )
       elseif(WIN32)
         find_package( rocsolver REQUIRED CONFIG PATHS ${ROCSOLVER_PATH} )
       else()
-        find_package( rocsolver REQUIRED CONFIG PATHS /opt/rocm /opt/rocm/rocsolver /usr/local/rocsolver )
+        find_package( rocsolver REQUIRED CONFIG PATHS @ESYSROOT_ROCM_PATH@ @ESYSROOT_ROCM_PATH@/rocsolver @ESYSROOT@/usr/local/rocsolver )
       endif()
     endif( )
     target_link_libraries( hipblas PRIVATE roc::rocsolver )
diff -urp hipBLAS-rocm-5.1.3.orig/README.md hipBLAS-rocm-5.1.3/README.md
--- hipBLAS-rocm-5.1.3.orig/README.md	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/README.md	2023-09-01 14:42:20.229479566 -0700
@@ -25,7 +25,7 @@ To download the **hipBLAS** source code,
 
 **hipBLAS** requires specific version of **rocBLAS** & **rocSOLVER** to be installed on the system. The required **rocBLAS** and **rocSOLVER** versions to build **hipBLAS** is provided [here](https://github.com/ROCmSoftwarePlatform/hipBLAS/blob/develop/library/CMakeLists.txt).
 
-Once the dependent libraries are installed, the following command will build hipBLAS and install to `/opt/rocm/hipblas`:
+Once the dependent libraries are installed, the following command will build hipBLAS and install to `@ESYSROOT_ROCM_PATH@/hipblas`:
 
 ```bash
     cd hipblas
diff -urp hipBLAS-rocm-5.1.3.orig/rmake.py hipBLAS-rocm-5.1.3/rmake.py
--- hipBLAS-rocm-5.1.3.orig/rmake.py	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/rmake.py	2023-09-01 14:42:20.229479566 -0700
@@ -119,7 +119,7 @@ def config_cmd():
         cmake_options.append( generator )
         toolchain = os.path.join( src_path, "toolchain-windows.cmake" )
     else:
-        rocm_path = os.getenv( 'ROCM_PATH', "/opt/rocm")
+        rocm_path = os.getenv( 'ROCM_PATH', "@ESYSROOT_ROCM_PATH@")
         if (OS_info["ID"] in ['centos', 'rhel']):
           cmake_executable = "cmake" # was cmake3 but now we built cmake
         else:
diff -urp hipBLAS-rocm-5.1.3.orig/scripts/performance/blas/commandrunner.py hipBLAS-rocm-5.1.3/scripts/performance/blas/commandrunner.py
--- hipBLAS-rocm-5.1.3.orig/scripts/performance/blas/commandrunner.py	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/scripts/performance/blas/commandrunner.py	2023-09-01 14:42:20.229479566 -0700
@@ -97,7 +97,7 @@ def import_rocm_smi(install_path):
             import rocm_smi
             smi = rocm_smi
 
-            # The following is needed to call rsmi_init() before other calls as documented in /opt/rocm/rocm_smi/docs/README.md
+            # The following is needed to call rsmi_init() before other calls as documented in @ESYSROOT_ROCM_PATH@/rocm_smi/docs/README.md
             smi.initializeRsmi()
         except ImportError:
             print('WARNING - rocm_smi.py not found!')
@@ -1382,7 +1382,7 @@ def parse_input_arguments(parser):
                         help='Output directory for the summary documentation.')
     parser.add_argument('-d', '--device-num', default=0, type=int,
                         help='Device number to run on.')
-    parser.add_argument('--install-path', default='/opt/rocm', help='Top directory of driver installation.')
+    parser.add_argument('--install-path', default='@ESYSROOT_ROCM_PATH@', help='Top directory of driver installation.')
     return parser.parse_args()
 
 
diff -urp hipBLAS-rocm-5.1.3.orig/scripts/performance/blas/getspecs.py hipBLAS-rocm-5.1.3/scripts/performance/blas/getspecs.py
--- hipBLAS-rocm-5.1.3.orig/scripts/performance/blas/getspecs.py	2022-03-10 14:24:13.000000000 -0800
+++ hipBLAS-rocm-5.1.3/scripts/performance/blas/getspecs.py	2023-09-01 14:42:20.229479566 -0700
@@ -21,7 +21,7 @@ def get_smi_exec(cuda):
     if cuda:
         return "nvidia-smi"
     else:
-        return "/opt/rocm/bin/rocm-smi"
+        return "@ESYSROOT_ROCM_PATH@/bin/rocm-smi"
 
 # Get the hostname
 def gethostname():
@@ -376,7 +376,7 @@ def validmemtypes(cuda, smi=None):
     if cuda:
         return ["vram"]
     elif smi is not None:
-        # Hardcoded in /opt/rocm/rocm_smi/bindings/rsmiBindings.py
+        # Hardcoded in @ESYSROOT_ROCM_PATH@/rocm_smi/bindings/rsmiBindings.py
         return ["VRAM", "VIS_VRAM", "GTT"]
 
 def getmeminfo(devicenum, mem_type, cuda, smi=None):
@@ -400,7 +400,7 @@ def validversioncomponents(cuda, smi=Non
     if cuda:
         return ['driver']
     else:
-        # currently only driver according to /opt/rocm/bin/rocm_smi.py
+        # currently only driver according to @ESYSROOT_ROCM_PATH@/bin/rocm_smi.py
         return ['driver']
 
 def getversion(devicenum, component, cuda, smi=None):
