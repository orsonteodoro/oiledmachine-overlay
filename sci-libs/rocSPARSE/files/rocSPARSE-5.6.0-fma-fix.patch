# Backport of fixing fma ambiguities (#516)
https://github.com/ROCmSoftwarePlatform/rocSPARSE/commit/0be37a2288c3692e7165221326d257e54f50e8c9
diff -urp rocSPARSE-rocm-5.6.0.orig/library/CMakeLists.txt rocSPARSE-rocm-5.6.0/library/CMakeLists.txt
--- rocSPARSE-rocm-5.6.0.orig/library/CMakeLists.txt	2023-07-31 01:33:08.450473023 -0700
+++ rocSPARSE-rocm-5.6.0/library/CMakeLists.txt	2023-07-31 01:36:55.030478925 -0700
@@ -1,5 +1,5 @@
 # ########################################################################
-# Copyright (C) 2018-2022 Advanced Micro Devices, Inc. All rights Reserved.
+# Copyright (C) 2018-2023 Advanced Micro Devices, Inc. All rights Reserved.
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
diff -urp rocSPARSE-rocm-5.6.0.orig/library/include/rocsparse-complex-types.h rocSPARSE-rocm-5.6.0/library/include/rocsparse-complex-types.h
--- rocSPARSE-rocm-5.6.0.orig/library/include/rocsparse-complex-types.h	2023-06-20 14:29:47.000000000 -0700
+++ rocSPARSE-rocm-5.6.0/library/include/rocsparse-complex-types.h	2023-07-31 01:33:26.986473506 -0700
@@ -200,7 +200,7 @@ private:
 
     static __forceinline__ __device__ __host__ float fma(float p, float q, float r)
     {
-        return ::fma(p, q, r);
+        return ::fmaf(p, q, r);
     }
 
     static __forceinline__ __device__ __host__ double fma(double p, double q, double r)
diff -urp rocSPARSE-rocm-5.6.0.orig/library/src/include/common.h rocSPARSE-rocm-5.6.0/library/src/include/common.h
--- rocSPARSE-rocm-5.6.0.orig/library/src/include/common.h	2023-06-20 14:29:47.000000000 -0700
+++ rocSPARSE-rocm-5.6.0/library/src/include/common.h	2023-07-31 01:36:07.558477688 -0700
@@ -75,10 +75,25 @@ __device__ __forceinline__ double rocspa
 __device__ __forceinline__ rocsparse_float_complex rocsparse_ldg(const rocsparse_float_complex* ptr) { return rocsparse_float_complex(__ldg((const float*)ptr), __ldg((const float*)ptr + 1)); }
 __device__ __forceinline__ rocsparse_double_complex rocsparse_ldg(const rocsparse_double_complex* ptr) { return rocsparse_double_complex(__ldg((const double*)ptr), __ldg((const double*)ptr + 1)); }
 
-__device__ __forceinline__ int32_t rocsparse_fma(int32_t p, int32_t q, int32_t r) { return fma(p, q, r); }
+template <typename T>
+__device__ __forceinline__ T rocsparse_fma(T p, T q, T r);
+
+template <>
+__device__ __forceinline__ int32_t rocsparse_fma(int32_t p, int32_t q, int32_t r) { return p * q + r; }
+
+template <>
+__device__ __forceinline__ int64_t rocsparse_fma(int64_t p, int64_t q, int64_t r) { return p * q + r; }
+
+template <>
 __device__ __forceinline__ float rocsparse_fma(float p, float q, float r) { return fma(p, q, r); }
+
+template <>
 __device__ __forceinline__ double rocsparse_fma(double p, double q, double r) { return fma(p, q, r); }
+
+template <>
 __device__ __forceinline__ rocsparse_float_complex rocsparse_fma(rocsparse_float_complex p, rocsparse_float_complex q, rocsparse_float_complex r) { return std::fma(p, q, r); }
+
+template <>
 __device__ __forceinline__ rocsparse_double_complex rocsparse_fma(rocsparse_double_complex p, rocsparse_double_complex q, rocsparse_double_complex r) { return std::fma(p, q, r); }
 
 __device__ __forceinline__ float rocsparse_abs(float x) { return x < 0.0f ? -x : x; }
@@ -212,12 +227,6 @@ __device__ __forceinline__ T conj_val(T
     return conj ? rocsparse_conj(val) : val;
 }
 
-template <typename T>
-__device__ __forceinline__ T rocsparse_fma(T p, T q, T r)
-{
-    return rocsparse_fma(p, q, r);
-}
-
 // Block reduce kernel computing block sum
 template <unsigned int BLOCKSIZE, typename T>
 __device__ __forceinline__ void rocsparse_blockreduce_sum(int i, T* data)
