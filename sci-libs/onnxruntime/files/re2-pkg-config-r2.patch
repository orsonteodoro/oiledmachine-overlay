--- a/cmake/external/onnxruntime_external_deps.cmake
+++ b/cmake/external/onnxruntime_external_deps.cmake
@@ -31,14 +31,19 @@ message("Loading Dependencies ...")
 # ABSL should be included before protobuf because protobuf may use absl
 include(external/abseil-cpp.cmake)
 
-set(RE2_BUILD_TESTING OFF CACHE BOOL "" FORCE)
-
-FetchContent_Declare(
-    re2
-    URL ${DEP_URL_re2}
-    URL_HASH SHA1=${DEP_SHA1_re2}
-    FIND_PACKAGE_ARGS NAMES re2
-)
+include(FindPkgConfig)
+pkg_check_modules(re2 IMPORTED_TARGET re2)
+if (re2_FOUND)
+    add_library(re2::re2 ALIAS PkgConfig::re2)
+else()
+    set(RE2_BUILD_TESTING OFF CACHE BOOL "" FORCE)
+    FetchContent_Declare(
+        re2
+        URL ${DEP_URL_re2}
+        URL_HASH SHA1=${DEP_SHA1_re2}
+        FIND_PACKAGE_ARGS NAMES re2
+    )
+endif()
 
 if (onnxruntime_BUILD_UNIT_TESTS)
   # WebAssembly threading support in Node.js is still an experimental feature and
@@ -380,7 +385,10 @@ onnxruntime_fetchcontent_makeavailable(u
 # protobuf's cmake/utf8_range.cmake has the following line
 include_directories(${utf8_range_SOURCE_DIR})
 
-onnxruntime_fetchcontent_makeavailable(Protobuf nlohmann_json mp11 re2 GSL flatbuffers ${ONNXRUNTIME_CPUINFO_PROJ} ${ONNXRUNTIME_CLOG_PROJ})
+onnxruntime_fetchcontent_makeavailable(Protobuf nlohmann_json mp11 GSL flatbuffers ${ONNXRUNTIME_CPUINFO_PROJ} ${ONNXRUNTIME_CLOG_PROJ})
+if(NOT re2_FOUND)
+  onnxruntime_fetchcontent_makeavailable(re2)
+endif()
 if(NOT flatbuffers_FOUND)
   if(NOT TARGET flatbuffers::flatbuffers)
     add_library(flatbuffers::flatbuffers ALIAS flatbuffers)
