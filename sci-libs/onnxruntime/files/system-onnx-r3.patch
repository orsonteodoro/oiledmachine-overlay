diff '--color=auto' -urp onnxruntime-1.19.0.orig/cmake/CMakeLists.txt onnxruntime-1.19.0/cmake/CMakeLists.txt
--- onnxruntime-1.19.0.orig/cmake/CMakeLists.txt	2024-07-30 03:49:14.000000000 -0700
+++ onnxruntime-1.19.0/cmake/CMakeLists.txt	2024-08-03 21:08:07.786879964 -0700
@@ -443,6 +443,8 @@ if (onnxruntime_ENABLE_MEMORY_PROFILE)
 endif()
 
 set(ONNX_ML 1)
+add_definitions(-DONNX_ML=1)
+add_definitions(-DONNX_NAMESPACE=onnx)
 
 if (NOT (UNIX AND onnxruntime_ENABLE_PYTHON AND onnxruntime_ENABLE_TRAINING AND (NOT onnxruntime_BUILD_SHARED_LIB)))
   if (onnxruntime_ENABLE_TRAINING_TORCH_INTEROP)
@@ -1438,6 +1440,15 @@ string(APPEND ORT_BUILD_INFO ", cmake cx
 configure_file(onnxruntime_config.h.in ${CMAKE_CURRENT_BINARY_DIR}/onnxruntime_config.h)
 get_property(onnxruntime_GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
 
+Find_Package(ONNX)
+if (ONNX_FOUND)
+  message( STATUS "ONNX Version: ${ONNX_VERSION}")
+  mark_as_advanced(ONNX_INCLUDE_DIRS ONNX_LIBRARIES)
+  list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${ONNX_LINK_FLAGS})
+else ()
+    message(FATAL_ERROR "This build is patched to only use system ONNX, but it can't be found.")
+endif()
+
 if (onnxruntime_USE_CUDA)
   set(CMAKE_CUDA_RUNTIME_LIBRARY Shared)
   set(CMAKE_CUDA_STANDARD 17)
Only in onnxruntime-1.19.0/cmake: CMakeLists.txt.orig
Only in onnxruntime-1.19.0/cmake: CMakeLists.txt.rej
diff '--color=auto' -urp onnxruntime-1.19.0.orig/cmake/external/onnxruntime_external_deps.cmake onnxruntime-1.19.0/cmake/external/onnxruntime_external_deps.cmake
--- onnxruntime-1.19.0.orig/cmake/external/onnxruntime_external_deps.cmake	2024-08-03 21:07:24.691427788 -0700
+++ onnxruntime-1.19.0/cmake/external/onnxruntime_external_deps.cmake	2024-08-03 21:07:42.959195628 -0700
@@ -508,12 +508,6 @@ FetchContent_Declare(
 include(eigen)
 include(wil)
 
-if (NOT onnxruntime_MINIMAL_BUILD)
-    onnxruntime_fetchcontent_makeavailable(onnx)
-else()
-  include(onnx_minimal)
-endif()
-
 set(GSL_TARGET "Microsoft.GSL::GSL")
 set(GSL_INCLUDE_DIR "$<TARGET_PROPERTY:${GSL_TARGET},INTERFACE_INCLUDE_DIRECTORIES>")
 
@@ -542,19 +536,10 @@ endif()
 #onnxruntime_EXTERNAL_LIBRARIES could contain onnx, onnx_proto,libprotobuf, cuda/cudnn,
 # dnnl/mklml, onnxruntime_codegen_tvm, tvm and pthread
 # pthread is always at the last
-set(onnxruntime_EXTERNAL_LIBRARIES ${onnxruntime_EXTERNAL_LIBRARIES_XNNPACK} ${WIL_TARGET} nlohmann_json::nlohmann_json onnx onnx_proto ${PROTOBUF_LIB} re2::re2 Boost::mp11 safeint_interface flatbuffers::flatbuffers ${GSL_TARGET} ${ABSEIL_LIBS} date::date ${ONNXRUNTIME_CLOG_TARGET_NAME})
+set(onnxruntime_EXTERNAL_LIBRARIES ${onnxruntime_EXTERNAL_LIBRARIES_XNNPACK} ${WIL_TARGET} nlohmann_json::nlohmann_json ONNX::onnx ONNX::onnx_proto ${PROTOBUF_LIB} re2::re2 Boost::mp11 safeint_interface flatbuffers::flatbuffers ${GSL_TARGET} ${ABSEIL_LIBS} date::date ${ONNXRUNTIME_CLOG_TARGET_NAME})
 # The source code of onnx_proto is generated, we must build this lib first before starting to compile the other source code that uses ONNX protobuf types.
 # The other libs do not have the problem. All the sources are already there. We can compile them in any order.
-set(onnxruntime_EXTERNAL_DEPENDENCIES onnx_proto flatbuffers::flatbuffers)
-
-target_compile_definitions(onnx PUBLIC $<TARGET_PROPERTY:onnx_proto,INTERFACE_COMPILE_DEFINITIONS> PRIVATE "__ONNX_DISABLE_STATIC_REGISTRATION")
-if (NOT onnxruntime_USE_FULL_PROTOBUF)
-  target_compile_definitions(onnx PUBLIC "__ONNX_NO_DOC_STRINGS")
-endif()
-
-if (onnxruntime_RUN_ONNX_TESTS)
-  add_definitions(-DORT_RUN_EXTERNAL_ONNX_TESTS)
-endif()
+set(onnxruntime_EXTERNAL_DEPENDENCIES ONNX::onnx_proto flatbuffers::flatbuffers)
 
 
 if(onnxruntime_ENABLE_ATEN)
Only in onnxruntime-1.19.0/cmake/external: onnxruntime_external_deps.cmake.orig
diff '--color=auto' -urp onnxruntime-1.19.0.orig/cmake/onnxruntime_graph.cmake onnxruntime-1.19.0/cmake/onnxruntime_graph.cmake
--- onnxruntime-1.19.0.orig/cmake/onnxruntime_graph.cmake	2024-07-30 03:49:14.000000000 -0700
+++ onnxruntime-1.19.0/cmake/onnxruntime_graph.cmake	2024-08-03 21:07:42.959195628 -0700
@@ -95,8 +95,8 @@ if (onnxruntime_ENABLE_TRAINING_OPS)
 endif()
 
 onnxruntime_add_static_library(onnxruntime_graph ${onnxruntime_graph_src} ${orttraining_graph_src})
-add_dependencies(onnxruntime_graph onnx_proto flatbuffers::flatbuffers)
-onnxruntime_add_include_to_target(onnxruntime_graph onnxruntime_common ${WIL_TARGET} onnx onnx_proto ${PROTOBUF_LIB} flatbuffers::flatbuffers safeint_interface Boost::mp11)
+add_dependencies(onnxruntime_graph ONNX::onnx_proto flatbuffers::flatbuffers)
+onnxruntime_add_include_to_target(onnxruntime_graph onnxruntime_common ${WIL_TARGET} ONNX::onnx ONNX::onnx_proto ${PROTOBUF_LIB} flatbuffers::flatbuffers safeint_interface Boost::mp11)
 
 if (MSVC)
   set(ONNX_PROTOBUF_NATVIS_FILE "onnx_protobuf.natvis")
diff '--color=auto' -urp onnxruntime-1.19.0.orig/cmake/onnxruntime_providers_cpu.cmake onnxruntime-1.19.0/cmake/onnxruntime_providers_cpu.cmake
--- onnxruntime-1.19.0.orig/cmake/onnxruntime_providers_cpu.cmake	2024-07-30 03:49:14.000000000 -0700
+++ onnxruntime-1.19.0/cmake/onnxruntime_providers_cpu.cmake	2024-08-03 21:07:42.959195628 -0700
@@ -165,7 +165,7 @@ if (MSVC)
 #      target_compile_options(onnxruntime_providers PRIVATE "/wd4244")
 #   endif()
 endif()
-onnxruntime_add_include_to_target(onnxruntime_providers onnxruntime_common onnxruntime_framework onnx onnx_proto ${PROTOBUF_LIB} flatbuffers::flatbuffers Boost::mp11 safeint_interface)
+onnxruntime_add_include_to_target(onnxruntime_providers onnxruntime_common onnxruntime_framework ONNX::onnx ONNX::onnx_proto ${PROTOBUF_LIB} flatbuffers::flatbuffers Boost::mp11 safeint_interface)
 
 if (onnxruntime_BUILD_MS_EXPERIMENTAL_OPS)
   target_compile_definitions(onnxruntime_providers PRIVATE BUILD_MS_EXPERIMENTAL_OPS=1)
@@ -193,7 +193,7 @@ endif()
 
 target_include_directories(onnxruntime_providers PRIVATE ${ONNXRUNTIME_ROOT} ${eigen_INCLUDE_DIRS})
 onnxruntime_add_include_to_target(onnxruntime_providers re2::re2)
-add_dependencies(onnxruntime_providers onnx ${onnxruntime_EXTERNAL_DEPENDENCIES})
+add_dependencies(onnxruntime_providers ONNX::onnx ${onnxruntime_EXTERNAL_DEPENDENCIES})
 
 if (onnxruntime_ENABLE_TRAINING_OPS)
   target_include_directories(onnxruntime_providers PRIVATE ${ORTTRAINING_ROOT})
