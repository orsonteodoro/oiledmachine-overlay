diff '--color=auto' -urp audio-2.0.1.orig/third_party/bzip2/CMakeLists.txt audio-2.0.1/third_party/bzip2/CMakeLists.txt
--- audio-2.0.1.orig/third_party/bzip2/CMakeLists.txt	2023-03-15 11:02:00.000000000 -0700
+++ audio-2.0.1/third_party/bzip2/CMakeLists.txt	2024-11-18 15:59:06.835208847 -0800
@@ -1,59 +1,70 @@
 include(ExternalProject)
 
-set(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../install)
-set(ARCHIVE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../archives)
+if($ENV{USE_SYSTEM_BZIP2} EQUAL 1)
+else()
+  option(USE_SYSTEM_BZIP2 "Use system bzip2?" OFF)
+endif()
 
-if (MSVC)
-  set(
-    BZIP_LIBRARIES
-    ${INSTALL_DIR}/lib/libbz2.lib
-  )
-  ExternalProject_Add(bzip2-
-    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-    DOWNLOAD_DIR ${ARCHIVE_DIR}
-    URL https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
-    URL_HASH SHA256=ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269
-    BUILD_BYPRODUCTS ${BZIP_LIBRARIES}
-    BUILD_IN_SOURCE 1
-    CONFIGURE_COMMAND nmake -f makefile.msc
-    BUILD_COMMAND cp bzlib.h ${INSTALL_DIR}/include
-    INSTALL_COMMAND cp libbz2.* ${INSTALL_DIR}/lib
-    DOWNLOAD_NO_PROGRESS ON
-    LOG_DOWNLOAD ON
-    LOG_UPDATE ON
-    LOG_CONFIGURE ON
-    LOG_BUILD ON
-    LOG_INSTALL ON
-    LOG_MERGED_STDOUTERR ON
-    LOG_OUTPUT_ON_FAILURE ON
-  )
+if(USE_SYSTEM_BZIP2 EQUAL 1 OR $ENV{USE_SYSTEM_BZIP2} EQUAL 1)
+  add_library(bzip2 SHARED IMPORTED)
+  set_target_properties( bzip2 PROPERTIES IMPORTED_LOCATION /usr/lib64/libbz2.so )
 else()
-  set(
-    BZIP_LIBRARIES
-    ${INSTALL_DIR}/lib/libbz2.a
-  )
-  ExternalProject_Add(bzip2-
-    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-    DOWNLOAD_DIR ${ARCHIVE_DIR}
-    URL https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
-    URL_HASH SHA256=ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269
-    BUILD_BYPRODUCTS ${BZIP_LIBRARIES}
-    BUILD_IN_SOURCE 1
-    CONFIGURE_COMMAND ""
-    BUILD_COMMAND make VERBOSE=1 "CFLAGS=-fPIC -fvisibility=hidden -Wall -Winline -O2 -g -D_FILE_OFFSET_BITS=64"
-    INSTALL_COMMAND make install PREFIX=${INSTALL_DIR}
-    DOWNLOAD_NO_PROGRESS ON
-    LOG_DOWNLOAD ON
-    LOG_UPDATE ON
-    LOG_CONFIGURE ON
-    LOG_BUILD ON
-    LOG_INSTALL ON
-    LOG_MERGED_STDOUTERR ON
-    LOG_OUTPUT_ON_FAILURE ON
-  )
-endif(MSVC)
 
-add_library(bzip2 INTERFACE)
-add_dependencies(bzip2 bzip2-)
-target_include_directories(bzip2 INTERFACE ${INSTALL_DIR}/include)
-target_link_libraries(bzip2 INTERFACE ${BZIP_LIBRARIES})
+  set(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../install)
+  set(ARCHIVE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../archives)
+
+  if (MSVC)
+    set(
+      BZIP_LIBRARIES
+      ${INSTALL_DIR}/lib/libbz2.lib
+    )
+    ExternalProject_Add(bzip2-
+      PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+      DOWNLOAD_DIR ${ARCHIVE_DIR}
+      URL https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
+      URL_HASH SHA256=ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269
+      BUILD_BYPRODUCTS ${BZIP_LIBRARIES}
+      BUILD_IN_SOURCE 1
+      CONFIGURE_COMMAND nmake -f makefile.msc
+      BUILD_COMMAND cp bzlib.h ${INSTALL_DIR}/include
+      INSTALL_COMMAND cp libbz2.* ${INSTALL_DIR}/lib
+      DOWNLOAD_NO_PROGRESS ON
+      LOG_DOWNLOAD ON
+      LOG_UPDATE ON
+      LOG_CONFIGURE ON
+      LOG_BUILD ON
+      LOG_INSTALL ON
+      LOG_MERGED_STDOUTERR ON
+      LOG_OUTPUT_ON_FAILURE ON
+    )
+  else()
+    set(
+      BZIP_LIBRARIES
+      ${INSTALL_DIR}/lib/libbz2.a
+    )
+    ExternalProject_Add(bzip2-
+      PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+      DOWNLOAD_DIR ${ARCHIVE_DIR}
+      URL https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
+      URL_HASH SHA256=ab5a03176ee106d3f0fa90e381da478ddae405918153cca248e682cd0c4a2269
+      BUILD_BYPRODUCTS ${BZIP_LIBRARIES}
+      BUILD_IN_SOURCE 1
+      CONFIGURE_COMMAND ""
+      BUILD_COMMAND make VERBOSE=1 "CFLAGS=-fPIC -fvisibility=hidden -Wall -Winline -O2 -g -D_FILE_OFFSET_BITS=64"
+      INSTALL_COMMAND make install PREFIX=${INSTALL_DIR}
+      DOWNLOAD_NO_PROGRESS ON
+      LOG_DOWNLOAD ON
+      LOG_UPDATE ON
+      LOG_CONFIGURE ON
+      LOG_BUILD ON
+      LOG_INSTALL ON
+      LOG_MERGED_STDOUTERR ON
+      LOG_OUTPUT_ON_FAILURE ON
+    )
+  endif(MSVC)
+
+  add_library(bzip2 INTERFACE)
+  add_dependencies(bzip2 bzip2-)
+  target_include_directories(bzip2 INTERFACE ${INSTALL_DIR}/include)
+  target_link_libraries(bzip2 INTERFACE ${BZIP_LIBRARIES})
+endif()
diff '--color=auto' -urp audio-2.0.1.orig/third_party/kenlm/CMakeLists.txt audio-2.0.1/third_party/kenlm/CMakeLists.txt
--- audio-2.0.1.orig/third_party/kenlm/CMakeLists.txt	2023-03-15 11:02:00.000000000 -0700
+++ audio-2.0.1/third_party/kenlm/CMakeLists.txt	2024-11-18 15:59:06.835208847 -0800
@@ -61,10 +61,20 @@ target_include_directories(
 
 set(
   kenlm_deps
-  zlib
-  bzip2
   )
 
+if(USE_SYSTEM_ZLIB EQUAL 1 OR $ENV{USE_SYSTEM_ZLIB} EQUAL 1)
+  list(APPEND kenlm_deps z)
+else()
+  list(APPEND kenlm_deps zlib)
+endif()
+
+if(USE_SYSTEM_BZIP2 EQUAL 1 OR $ENV{USE_SYSTEM_BZIP2} EQUAL 1)
+  list(APPEND kenlm_deps bz2)
+else()
+  list(APPEND kenlm_deps bzip2)
+endif()
+
 set(
   kenlm_compiler_definitions
   KENLM_MAX_ORDER=6
diff '--color=auto' -urp audio-2.0.1.orig/third_party/lzma/CMakeLists.txt audio-2.0.1/third_party/lzma/CMakeLists.txt
--- audio-2.0.1.orig/third_party/lzma/CMakeLists.txt	2023-03-15 11:02:00.000000000 -0700
+++ audio-2.0.1/third_party/lzma/CMakeLists.txt	2024-11-18 15:59:06.835208847 -0800
@@ -1,45 +1,56 @@
 include(ExternalProject)
 
-set(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../install)
-set(ARCHIVE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../archives)
-set(patch_dir ${PROJECT_SOURCE_DIR}/third_party/patches)
-
-# To pass custom environment variables to ExternalProject_Add command,
-# we need to do `${CMAKE_COMMAND} -E env ${envs} <COMMANAD>`.
-# https://stackoverflow.com/a/62437353
-# We constrcut the custom environment variables here
-set(envs
-  "PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig"
-  "LDFLAGS=-L${INSTALL_DIR}/lib $ENV{LDFLAGS}"
-  "CFLAGS=-I${INSTALL_DIR}/include -fvisibility=hidden -fPIC $ENV{CFLAGS}"
-)
-
-set(
-  LZMA_LIBRARIES
-  ${INSTALL_DIR}/lib/liblzma.a
+if($ENV{USE_SYSTEM_LZMA} EQUAL 1)
+else()
+  option(USE_SYSTEM_LZMA "Use system lzma?" OFF)
+endif()
+
+if(USE_SYSTEM_LZMA EQUAL 1 OR $ENV{USE_SYSTEM_LZMA} EQUAL 1)
+  add_library(lzma SHARED IMPORTED)
+  set_target_properties( lzma PROPERTIES IMPORTED_LOCATION /usr/lib64/liblzma.so )
+else()
+
+  set(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../install)
+  set(ARCHIVE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../archives)
+  set(patch_dir ${PROJECT_SOURCE_DIR}/third_party/patches)
+
+  # To pass custom environment variables to ExternalProject_Add command,
+  # we need to do `${CMAKE_COMMAND} -E env ${envs} <COMMANAD>`.
+  # https://stackoverflow.com/a/62437353
+  # We constrcut the custom environment variables here
+  set(envs
+    "PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig"
+    "LDFLAGS=-L${INSTALL_DIR}/lib $ENV{LDFLAGS}"
+    "CFLAGS=-I${INSTALL_DIR}/include -fvisibility=hidden -fPIC $ENV{CFLAGS}"
   )
 
-ExternalProject_Add(lzma-
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://tukaani.org/xz/xz-5.2.5.tar.gz
-  URL_HASH SHA256=f6f4910fd033078738bd82bfba4f49219d03b17eb0794eb91efbae419f4aba10
-  BUILD_BYPRODUCTS ${LZMA_LIBRARIES}
-  PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/lzma-/build-aux/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/lzma-/configure --prefix=${INSTALL_DIR} --disable-xz --disable-xzdec --disable-lzmadec --disable-lzmainfo --disable-lzma-links --disable-scripts --disable-doc --enable-static --disable-shared
-  BUILD_COMMAND  ${CMAKE_COMMAND} -E env ${envs} make VERBOSE=1
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-
-add_library(lzma INTERFACE)
-add_dependencies(lzma lzma-)
-target_include_directories(lzma INTERFACE ${INSTALL_DIR}/include)
-target_link_libraries(lzma INTERFACE ${LZMA_LIBRARIES})
+  set(
+    LZMA_LIBRARIES
+    ${INSTALL_DIR}/lib/liblzma.a
+    )
+
+  ExternalProject_Add(lzma-
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://tukaani.org/xz/xz-5.2.5.tar.gz
+    URL_HASH SHA256=f6f4910fd033078738bd82bfba4f49219d03b17eb0794eb91efbae419f4aba10
+    BUILD_BYPRODUCTS ${LZMA_LIBRARIES}
+    PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/lzma-/build-aux/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/lzma-/configure --prefix=${INSTALL_DIR} --disable-xz --disable-xzdec --disable-lzmadec --disable-lzmainfo --disable-lzma-links --disable-scripts --disable-doc --enable-static --disable-shared
+    BUILD_COMMAND  ${CMAKE_COMMAND} -E env ${envs} make VERBOSE=1
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+  )
+
+
+  add_library(lzma INTERFACE)
+  add_dependencies(lzma lzma-)
+  target_include_directories(lzma INTERFACE ${INSTALL_DIR}/include)
+  target_link_libraries(lzma INTERFACE ${LZMA_LIBRARIES})
+endif()
diff '--color=auto' -urp audio-2.0.1.orig/third_party/sox/CMakeLists.txt audio-2.0.1/third_party/sox/CMakeLists.txt
--- audio-2.0.1.orig/third_party/sox/CMakeLists.txt	2023-03-15 11:02:00.000000000 -0700
+++ audio-2.0.1/third_party/sox/CMakeLists.txt	2024-11-18 15:59:06.835208847 -0800
@@ -1,212 +1,222 @@
 find_package(PkgConfig REQUIRED)
 
-include(ExternalProject)
+if($ENV{USE_SYSTEM_SOX} EQUAL 1)
+else()
+  option(USE_SYSTEM_SOX "Use system sox?" OFF)
+endif()
+
+if(USE_SYSTEM_SOX EQUAL 1 OR $ENV{USE_SYSTEM_SOX} EQUAL 1)
+  add_library(libsox SHARED IMPORTED)
+  set_target_properties( libsox PROPERTIES IMPORTED_LOCATION /usr/lib64/libsox.so )
+else()
+  include(ExternalProject)
+
+  set(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../install)
+  set(ARCHIVE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../archives)
+  set(patch_dir ${PROJECT_SOURCE_DIR}/third_party/patches)
+  set(COMMON_ARGS --quiet --disable-shared --enable-static --prefix=${INSTALL_DIR} --with-pic --disable-dependency-tracking --disable-debug --disable-examples --disable-doc)
+
+  # To pass custom environment variables to ExternalProject_Add command,
+  # we need to do `${CMAKE_COMMAND} -E env ${envs} <COMMANAD>`.
+  # https://stackoverflow.com/a/62437353
+  # We constrcut the custom environment variables here
+  set(envs
+    "PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig"
+    "LDFLAGS=-L${INSTALL_DIR}/lib $ENV{LDFLAGS}"
+    "CFLAGS=-I${INSTALL_DIR}/include -fvisibility=hidden $ENV{CFLAGS}"
+  )
+
+  ExternalProject_Add(amr
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-0.1.5.tar.gz
+    URL_HASH SHA256=2c006cb9d5f651bfb5e60156dbff6af3c9d35c7bbcc9015308c0aff1e14cd341
+    PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/amr/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/amr/configure ${COMMON_ARGS}
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+  )
+
+  ExternalProject_Add(lame
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
+    URL_HASH SHA256=24346b4158e4af3bd9f2e194bb23eb473c75fb7377011523353196b19b9a23ff
+    PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/lame/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/lame/configure ${COMMON_ARGS} --enable-nasm
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+  )
+
+  ExternalProject_Add(ogg
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.3.tar.gz
+    URL_HASH SHA256=c2e8a485110b97550f453226ec644ebac6cb29d1caef2902c007edab4308d985
+    PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/ogg/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/ogg/configure ${COMMON_ARGS}
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+ )
+
+  ExternalProject_Add(flac
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DEPENDS ogg
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://ftp.osuosl.org/pub/xiph/releases/flac/flac-1.3.2.tar.xz
+    URL_HASH SHA256=91cfc3ed61dc40f47f050a109b08610667d73477af6ef36dcad31c31a4a8d53f
+    PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/flac/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/flac/configure ${COMMON_ARGS} --with-ogg --disable-cpplibs
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+  )
+
+  ExternalProject_Add(vorbis
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DEPENDS ogg
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.6.tar.gz
+    URL_HASH SHA256=6ed40e0241089a42c48604dc00e362beee00036af2d8b3f46338031c9e0351cb
+    PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/vorbis/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/vorbis/configure ${COMMON_ARGS} --with-ogg
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+  )
+
+  ExternalProject_Add(opus
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DEPENDS ogg
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://ftp.osuosl.org/pub/xiph/releases/opus/opus-1.3.1.tar.gz
+    URL_HASH SHA256=65b58e1e25b2a114157014736a3d9dfeaad8d41be1c8179866f144a2fb44ff9d
+    PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/opus/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/opus/configure ${COMMON_ARGS} --with-ogg
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+  )
+
+  ExternalProject_Add(opusfile
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DEPENDS opus
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://ftp.osuosl.org/pub/xiph/releases/opus/opusfile-0.12.tar.gz
+    URL_HASH SHA256=118d8601c12dd6a44f52423e68ca9083cc9f2bfe72da7a8c1acb22a80ae3550b
+    PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/opusfile/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/opusfile/configure ${COMMON_ARGS} --disable-http
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+  )
+
+  # OpenMP is by default compiled against GNU OpenMP, which conflicts with the version of OpenMP that PyTorch uses.
+  # See https://github.com/pytorch/audio/pull/1026
+  # TODO: Add flags like https://github.com/suphoff/pytorch_parallel_extension_cpp/blob/master/setup.py
+  set(SOX_OPTIONS
+    --disable-openmp
+    --with-amrnb
+    --with-amrwb
+    --with-flac
+    --with-lame
+    --with-oggvorbis
+    --with-opus
+    --without-alsa
+    --without-ao
+    --without-coreaudio
+    --without-oss
+    --without-id3tag
+    --without-ladspa
+    --without-mad
+    --without-magic
+    --without-png
+    --without-pulseaudio
+    --without-sndfile
+    --without-sndio
+    --without-sunaudio
+    --without-waveaudio
+    --without-wavpack
+    --without-twolame
+    )
+
+  set(SOX_LIBRARIES
+    ${INSTALL_DIR}/lib/libsox.a
+    ${INSTALL_DIR}/lib/libopencore-amrnb.a
+    ${INSTALL_DIR}/lib/libopencore-amrwb.a
+    ${INSTALL_DIR}/lib/libmp3lame.a
+    ${INSTALL_DIR}/lib/libFLAC.a
+    ${INSTALL_DIR}/lib/libopusfile.a
+    ${INSTALL_DIR}/lib/libopus.a
+    ${INSTALL_DIR}/lib/libvorbisenc.a
+    ${INSTALL_DIR}/lib/libvorbisfile.a
+    ${INSTALL_DIR}/lib/libvorbis.a
+    ${INSTALL_DIR}/lib/libogg.a
+    )
+
+  set(sox_depends
+    ogg flac vorbis opusfile lame amr
+    )
+
+  ExternalProject_Add(sox
+    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+    DEPENDS ${sox_depends}
+    DOWNLOAD_DIR ${ARCHIVE_DIR}
+    URL https://downloads.sourceforge.net/project/sox/sox/14.4.2/sox-14.4.2.tar.bz2
+    URL_HASH SHA256=81a6956d4330e75b5827316e44ae381e6f1e8928003c6aa45896da9041ea149c
+    PATCH_COMMAND patch -p1 < ${patch_dir}/sox.patch && cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/sox/
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/sox/configure ${COMMON_ARGS} ${SOX_OPTIONS}
+    BUILD_BYPRODUCTS ${SOX_LIBRARIES}
+    DOWNLOAD_NO_PROGRESS ON
+    LOG_DOWNLOAD ON
+    LOG_UPDATE ON
+    LOG_CONFIGURE ON
+    LOG_BUILD ON
+    LOG_INSTALL ON
+    LOG_MERGED_STDOUTERR ON
+    LOG_OUTPUT_ON_FAILURE ON
+  )
 
-set(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../install)
-set(ARCHIVE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../archives)
-set(patch_dir ${PROJECT_SOURCE_DIR}/third_party/patches)
-set(COMMON_ARGS --quiet --disable-shared --enable-static --prefix=${INSTALL_DIR} --with-pic --disable-dependency-tracking --disable-debug --disable-examples --disable-doc)
-
-# To pass custom environment variables to ExternalProject_Add command,
-# we need to do `${CMAKE_COMMAND} -E env ${envs} <COMMANAD>`.
-# https://stackoverflow.com/a/62437353
-# We constrcut the custom environment variables here
-set(envs
-  "PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig"
-  "LDFLAGS=-L${INSTALL_DIR}/lib $ENV{LDFLAGS}"
-  "CFLAGS=-I${INSTALL_DIR}/include -fvisibility=hidden $ENV{CFLAGS}"
-)
-
-ExternalProject_Add(amr
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://sourceforge.net/projects/opencore-amr/files/opencore-amr/opencore-amr-0.1.5.tar.gz
-  URL_HASH SHA256=2c006cb9d5f651bfb5e60156dbff6af3c9d35c7bbcc9015308c0aff1e14cd341
-  PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/amr/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/amr/configure ${COMMON_ARGS}
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-ExternalProject_Add(lame
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://downloads.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
-  URL_HASH SHA256=24346b4158e4af3bd9f2e194bb23eb473c75fb7377011523353196b19b9a23ff
-  PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/lame/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/lame/configure ${COMMON_ARGS} --enable-nasm
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-ExternalProject_Add(ogg
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.3.tar.gz
-  URL_HASH SHA256=c2e8a485110b97550f453226ec644ebac6cb29d1caef2902c007edab4308d985
-  PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/ogg/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/ogg/configure ${COMMON_ARGS}
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-ExternalProject_Add(flac
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DEPENDS ogg
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://ftp.osuosl.org/pub/xiph/releases/flac/flac-1.3.2.tar.xz
-  URL_HASH SHA256=91cfc3ed61dc40f47f050a109b08610667d73477af6ef36dcad31c31a4a8d53f
-  PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/flac/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/flac/configure ${COMMON_ARGS} --with-ogg --disable-cpplibs
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-ExternalProject_Add(vorbis
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DEPENDS ogg
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.6.tar.gz
-  URL_HASH SHA256=6ed40e0241089a42c48604dc00e362beee00036af2d8b3f46338031c9e0351cb
-  PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/vorbis/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/vorbis/configure ${COMMON_ARGS} --with-ogg
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-ExternalProject_Add(opus
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DEPENDS ogg
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://ftp.osuosl.org/pub/xiph/releases/opus/opus-1.3.1.tar.gz
-  URL_HASH SHA256=65b58e1e25b2a114157014736a3d9dfeaad8d41be1c8179866f144a2fb44ff9d
-  PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/opus/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/opus/configure ${COMMON_ARGS} --with-ogg
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-ExternalProject_Add(opusfile
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DEPENDS opus
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://ftp.osuosl.org/pub/xiph/releases/opus/opusfile-0.12.tar.gz
-  URL_HASH SHA256=118d8601c12dd6a44f52423e68ca9083cc9f2bfe72da7a8c1acb22a80ae3550b
-  PATCH_COMMAND cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/opusfile/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/opusfile/configure ${COMMON_ARGS} --disable-http
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-# OpenMP is by default compiled against GNU OpenMP, which conflicts with the version of OpenMP that PyTorch uses.
-# See https://github.com/pytorch/audio/pull/1026
-# TODO: Add flags like https://github.com/suphoff/pytorch_parallel_extension_cpp/blob/master/setup.py
-set(SOX_OPTIONS
-  --disable-openmp
-  --with-amrnb
-  --with-amrwb
-  --with-flac
-  --with-lame
-  --with-oggvorbis
-  --with-opus
-  --without-alsa
-  --without-ao
-  --without-coreaudio
-  --without-oss
-  --without-id3tag
-  --without-ladspa
-  --without-mad
-  --without-magic
-  --without-png
-  --without-pulseaudio
-  --without-sndfile
-  --without-sndio
-  --without-sunaudio
-  --without-waveaudio
-  --without-wavpack
-  --without-twolame
-  )
-
-set(SOX_LIBRARIES
-  ${INSTALL_DIR}/lib/libsox.a
-  ${INSTALL_DIR}/lib/libopencore-amrnb.a
-  ${INSTALL_DIR}/lib/libopencore-amrwb.a
-  ${INSTALL_DIR}/lib/libmp3lame.a
-  ${INSTALL_DIR}/lib/libFLAC.a
-  ${INSTALL_DIR}/lib/libopusfile.a
-  ${INSTALL_DIR}/lib/libopus.a
-  ${INSTALL_DIR}/lib/libvorbisenc.a
-  ${INSTALL_DIR}/lib/libvorbisfile.a
-  ${INSTALL_DIR}/lib/libvorbis.a
-  ${INSTALL_DIR}/lib/libogg.a
-  )
-
-set(sox_depends
-  ogg flac vorbis opusfile lame amr
-  )
-
-ExternalProject_Add(sox
-  PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-  DEPENDS ${sox_depends}
-  DOWNLOAD_DIR ${ARCHIVE_DIR}
-  URL https://downloads.sourceforge.net/project/sox/sox/14.4.2/sox-14.4.2.tar.bz2
-  URL_HASH SHA256=81a6956d4330e75b5827316e44ae381e6f1e8928003c6aa45896da9041ea149c
-  PATCH_COMMAND patch -p1 < ${patch_dir}/sox.patch && cp ${patch_dir}/config.guess ${patch_dir}/config.sub ${CMAKE_CURRENT_BINARY_DIR}/src/sox/
-  CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/sox/configure ${COMMON_ARGS} ${SOX_OPTIONS}
-  BUILD_BYPRODUCTS ${SOX_LIBRARIES}
-  DOWNLOAD_NO_PROGRESS ON
-  LOG_DOWNLOAD ON
-  LOG_UPDATE ON
-  LOG_CONFIGURE ON
-  LOG_BUILD ON
-  LOG_INSTALL ON
-  LOG_MERGED_STDOUTERR ON
-  LOG_OUTPUT_ON_FAILURE ON
-)
-
-add_library(libsox INTERFACE)
-add_dependencies(libsox sox)
-target_include_directories(libsox INTERFACE ${INSTALL_DIR}/include)
-target_link_libraries(libsox INTERFACE ${SOX_LIBRARIES})
+  add_library(libsox INTERFACE)
+  add_dependencies(libsox sox)
+  target_include_directories(libsox INTERFACE ${INSTALL_DIR}/include)
+  target_link_libraries(libsox INTERFACE ${SOX_LIBRARIES})
+endif()
diff '--color=auto' -urp audio-2.0.1.orig/third_party/zlib/CMakeLists.txt audio-2.0.1/third_party/zlib/CMakeLists.txt
--- audio-2.0.1.orig/third_party/zlib/CMakeLists.txt	2023-03-15 11:02:00.000000000 -0700
+++ audio-2.0.1/third_party/zlib/CMakeLists.txt	2024-11-18 15:59:06.835208847 -0800
@@ -1,68 +1,80 @@
 include(ExternalProject)
 
-set(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../install)
-set(ARCHIVE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../archives)
-
-if (MSVC)
-  set(
-    ZLIB_LIBRARIES
-    ${INSTALL_DIR}/lib/zlib.lib
-  )
-
-  ExternalProject_Add(zlib-
-    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-    DOWNLOAD_DIR ${ARCHIVE_DIR}
-    URL https://github.com/madler/zlib/archive/refs/tags/v1.2.12.tar.gz
-    URL_HASH SHA256=d8688496ea40fb61787500e863cc63c9afcbc524468cedeb478068924eb54932
-    BUILD_BYPRODUCTS ${ZLIB_LIBRARIES}
-    BUILD_IN_SOURCE 1
-    CONFIGURE_COMMAND nmake -f win32/Makefile.msc zlib.lib
-    BUILD_COMMAND cp zlib.lib ${INSTALL_DIR}/lib/
-    INSTALL_COMMAND cp zlib.h zconf.h ${INSTALL_DIR}/include/
-    LOG_DOWNLOAD ON
-    LOG_UPDATE ON
-    LOG_CONFIGURE ON
-    LOG_BUILD ON
-    LOG_INSTALL ON
-    LOG_MERGED_STDOUTERR ON
-    LOG_OUTPUT_ON_FAILURE ON
-  )
+if($ENV{USE_SYSTEM_ZLIB} EQUAL 1)
 else()
-  # To pass custom environment variables to ExternalProject_Add command,
-  # we need to do `${CMAKE_COMMAND} -E env ${envs} <COMMANAD>`.
-  # https://stackoverflow.com/a/62437353
-  # We constrcut the custom environment variables here
-  set(envs
-    "PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig"
-    "LDFLAGS=-L${INSTALL_DIR}/lib $ENV{LDFLAGS}"
-    "CFLAGS=-I${INSTALL_DIR}/include -fvisibility=hidden -fPIC $ENV{CFLAGS}"
-    "prefix=${INSTALL_DIR}"
-  )
-
-  set(
-    ZLIB_LIBRARIES
-    ${INSTALL_DIR}/lib/libz.a
-  )
-
-  ExternalProject_Add(zlib-
-    PREFIX ${CMAKE_CURRENT_BINARY_DIR}
-    DOWNLOAD_DIR ${ARCHIVE_DIR}
-    URL https://github.com/madler/zlib/archive/refs/tags/v1.2.12.tar.gz
-    URL_HASH SHA256=d8688496ea40fb61787500e863cc63c9afcbc524468cedeb478068924eb54932
-    BUILD_BYPRODUCTS ${ZLIB_LIBRARIES}
-    CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/zlib-/configure --static
-    BUILD_COMMAND ${CMAKE_COMMAND} -E env ${envs} make VERBOSE=1
-    LOG_DOWNLOAD ON
-    LOG_UPDATE ON
-    LOG_CONFIGURE ON
-    LOG_BUILD ON
-    LOG_INSTALL ON
-    LOG_MERGED_STDOUTERR ON
-    LOG_OUTPUT_ON_FAILURE ON
-  )
+  option(USE_SYSTEM_ZLIB "Use system lzma?" OFF)
 endif()
 
-add_library(zlib INTERFACE)
-add_dependencies(zlib zlib-)
-target_include_directories(zlib INTERFACE ${INSTALL_DIR}/include)
-target_link_libraries(zlib INTERFACE ${ZLIB_LIBRARIES})
+if(USE_SYSTEM_ZLIB EQUAL 1 OR $ENV{USE_SYSTEM_ZLIB} EQUAL 1)
+  add_library(zlib SHARED IMPORTED)
+  set_target_properties( zlib PROPERTIES IMPORTED_LOCATION /usr/lib64/libz.so )
+else()
+
+  set(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../install)
+  set(ARCHIVE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/../archives)
+
+  if (MSVC)
+    set(
+      ZLIB_LIBRARIES
+      ${INSTALL_DIR}/lib/zlib.lib
+    )
+
+    ExternalProject_Add(zlib-
+      PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+      DOWNLOAD_DIR ${ARCHIVE_DIR}
+      URL https://github.com/madler/zlib/archive/refs/tags/v1.2.12.tar.gz
+      URL_HASH SHA256=d8688496ea40fb61787500e863cc63c9afcbc524468cedeb478068924eb54932
+      BUILD_BYPRODUCTS ${ZLIB_LIBRARIES}
+      BUILD_IN_SOURCE 1
+      CONFIGURE_COMMAND nmake -f win32/Makefile.msc zlib.lib
+      BUILD_COMMAND cp zlib.lib ${INSTALL_DIR}/lib/
+      INSTALL_COMMAND cp zlib.h zconf.h ${INSTALL_DIR}/include/
+      LOG_DOWNLOAD ON
+      LOG_UPDATE ON
+      LOG_CONFIGURE ON
+      LOG_BUILD ON
+      LOG_INSTALL ON
+      LOG_MERGED_STDOUTERR ON
+      LOG_OUTPUT_ON_FAILURE ON
+    )
+  else()
+    # To pass custom environment variables to ExternalProject_Add command,
+    # we need to do `${CMAKE_COMMAND} -E env ${envs} <COMMANAD>`.
+    # https://stackoverflow.com/a/62437353
+    # We constrcut the custom environment variables here
+    set(envs
+      "PKG_CONFIG_PATH=${INSTALL_DIR}/lib/pkgconfig"
+      "LDFLAGS=-L${INSTALL_DIR}/lib $ENV{LDFLAGS}"
+      "CFLAGS=-I${INSTALL_DIR}/include -fvisibility=hidden -fPIC $ENV{CFLAGS}"
+      "prefix=${INSTALL_DIR}"
+    )
+
+    set(
+      ZLIB_LIBRARIES
+      ${INSTALL_DIR}/lib/libz.a
+    )
+
+    message(STATUS "DEBUG PATH 2")
+    ExternalProject_Add(zlib-
+      PREFIX ${CMAKE_CURRENT_BINARY_DIR}
+      DOWNLOAD_DIR ${ARCHIVE_DIR}
+      URL https://github.com/madler/zlib/archive/refs/tags/v1.2.12.tar.gz
+      URL_HASH SHA256=d8688496ea40fb61787500e863cc63c9afcbc524468cedeb478068924eb54932
+      BUILD_BYPRODUCTS ${ZLIB_LIBRARIES}
+      CONFIGURE_COMMAND ${CMAKE_COMMAND} -E env ${envs} ${CMAKE_CURRENT_BINARY_DIR}/src/zlib-/configure --static
+      BUILD_COMMAND ${CMAKE_COMMAND} -E env ${envs} make VERBOSE=1
+      LOG_DOWNLOAD ON
+      LOG_UPDATE ON
+      LOG_CONFIGURE ON
+      LOG_BUILD ON
+      LOG_INSTALL ON
+      LOG_MERGED_STDOUTERR ON
+      LOG_OUTPUT_ON_FAILURE ON
+    )
+  endif()
+
+  add_library(zlib INTERFACE)
+  add_dependencies(zlib zlib-)
+  target_include_directories(zlib INTERFACE ${INSTALL_DIR}/include)
+  target_link_libraries(zlib INTERFACE ${ZLIB_LIBRARIES})
+endif()
diff '--color=auto' -urp audio-2.0.1.orig/torchaudio/csrc/sox/CMakeLists.txt audio-2.0.1/torchaudio/csrc/sox/CMakeLists.txt
--- audio-2.0.1.orig/torchaudio/csrc/sox/CMakeLists.txt	2023-03-15 11:02:00.000000000 -0700
+++ audio-2.0.1/torchaudio/csrc/sox/CMakeLists.txt	2024-11-18 16:01:43.038202726 -0800
@@ -6,11 +6,16 @@ set(
   effects_chain.cpp
   types.cpp
   )
+if(USE_SYSTEM_SOX EQUAL 1 OR $ENV{USE_SYSTEM_SOX} EQUAL 1)
+  set(LIBSOX_LIB sox)
+else()
+  set(LIBSOX_LIB libsox)
+endif()
 torchaudio_library(
   libtorchaudio_sox
   "${sources}"
   ""
-  "torch;libsox"
+  "torch;${LIBSOX_LIB}"
   ""
   )
 
