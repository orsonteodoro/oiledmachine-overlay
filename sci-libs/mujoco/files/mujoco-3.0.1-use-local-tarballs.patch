diff -urp mujoco-3.0.1.orig/cmake/FindOrFetch.cmake mujoco-3.0.1/cmake/FindOrFetch.cmake
--- mujoco-3.0.1.orig/cmake/FindOrFetch.cmake	2023-11-15 09:30:35.000000000 -0800
+++ mujoco-3.0.1/cmake/FindOrFetch.cmake	2024-05-08 00:32:04.027389175 -0700
@@ -23,6 +23,7 @@
 #               [LIBRARY_NAME [name]]
 #               [GIT_REPO [repo]]
 #               [GIT_TAG [tag]]
+#               [TARBALL_PATH [path]]
 #               [PATCH_COMMAND [cmd] [args]]
 #               [TARGETS [targets]]
 #               [EXCLUDE_FROM_ALL])
@@ -56,6 +57,8 @@
 # https://cmake.org/cmake/help/latest/module/FetchContent.html#variables to
 # override this macro behaviour.
 
+# oteodoro:  changes to use local tarballs to avoid sandbox wipe re-downloads
+
 if(COMMAND FindOrFetch)
   return()
 endif()
@@ -73,6 +76,7 @@ macro(FindOrFetch)
       LIBRARY_NAME
       GIT_REPO
       GIT_TAG
+      TARBALL_PATH
   )
   set(multi_value_args PATCH_COMMAND TARGETS)
   cmake_parse_arguments(
@@ -112,18 +116,45 @@ macro(FindOrFetch)
       message(CHECK_START
               "mujoco::FindOrFetch: Using FetchContent to retrieve `${_ARGS_LIBRARY_NAME}`"
       )
-      FetchContent_Declare(
-        ${_ARGS_LIBRARY_NAME}
-        GIT_REPOSITORY ${_ARGS_GIT_REPO}
-        GIT_TAG ${_ARGS_GIT_TAG}
-        GIT_SHALLOW FALSE
-        PATCH_COMMAND ${_ARGS_PATCH_COMMAND}
-        UPDATE_DISCONNECTED TRUE
-      )
+      if(USE_LOCAL_TARBALL)
+        FetchContent_Declare(
+          ${_ARGS_LIBRARY_NAME}
+          DOWNLOAD_NO_EXTRACT FALSE
+          URL ${_ARGS_TARBALL_PATH}
+          PATCH_COMMAND ${_ARGS_PATCH_COMMAND}
+        )
+        get_filename_component(TARBALL_NAME ${_ARGS_TARBALL_PATH} NAME)
+        file(ARCHIVE_EXTRACT
+          INPUT $ENV{DISTDIR}/${TARBALL_NAME}
+          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/_deps
+        )
+      else()
+        FetchContent_Declare(
+          ${_ARGS_LIBRARY_NAME}
+          GIT_REPOSITORY ${_ARGS_GIT_REPO}
+          GIT_TAG ${_ARGS_GIT_TAG}
+          GIT_SHALLOW FALSE
+          PATCH_COMMAND ${_ARGS_PATCH_COMMAND}
+          UPDATE_DISCONNECTED TRUE
+        )
+      endif()
       if(${_ARGS_EXCLUDE_FROM_ALL})
         FetchContent_GetProperties(${_ARGS_LIBRARY_NAME})
         if(NOT ${${_ARGS_LIBRARY_NAME}_POPULATED})
           FetchContent_Populate(${_ARGS_LIBRARY_NAME})
+          string(REPLACE "-" "_" __ARGS_LIBRARY_NAME ${_ARGS_LIBRARY_NAME})
+          if(USE_LOCAL_TARBALL)
+            if("${_ARGS_LIBRARY_NAME}" STREQUAL "ccd")
+              set(___ARGS_LIBRARY_NAME "libccd")
+            elseif("${_ARGS_LIBRARY_NAME}" STREQUAL "sdflib")
+              set(___ARGS_LIBRARY_NAME "SdfLib")
+            elseif("${_ARGS_LIBRARY_NAME}" STREQUAL "marchingcubecpp")
+              set(___ARGS_LIBRARY_NAME "MarchingCubeCpp")
+            else()
+              set(___ARGS_LIBRARY_NAME "${_ARGS_LIBRARY_NAME}")
+            endif()
+            set(${_ARGS_LIBRARY_NAME}_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/${___ARGS_LIBRARY_NAME}-${MUJOCO_DEP_VERSION_${__ARGS_LIBRARY_NAME}})
+          endif()
           add_subdirectory(
             ${${_ARGS_LIBRARY_NAME}_SOURCE_DIR} ${${_ARGS_LIBRARY_NAME}_BINARY_DIR}
             EXCLUDE_FROM_ALL
diff -urp mujoco-3.0.1.orig/cmake/MujocoDependencies.cmake mujoco-3.0.1/cmake/MujocoDependencies.cmake
--- mujoco-3.0.1.orig/cmake/MujocoDependencies.cmake	2023-11-15 09:30:35.000000000 -0800
+++ mujoco-3.0.1/cmake/MujocoDependencies.cmake	2024-05-08 00:28:14.993464949 -0700
@@ -14,6 +14,10 @@
 
 # Build configuration for third party libraries used in MuJoCo.
 
+# oteodoro:  changes for prefetched local tarball to avoid sandbox wipe re-downloads.
+
+option(USE_LOCAL_TARBALL "Use the local tarballs instead of remote repo" ON)
+
 set(MUJOCO_DEP_VERSION_lodepng
     b4ed2cd7ecf61d29076169b49199371456d4f90b
     CACHE STRING "Version of `lodepng` to be fetched."
@@ -42,22 +46,18 @@ set(MUJOCO_DEP_VERSION_Eigen3
     e8515f78ac098329ab9f8cab21c87caede090a3f
     CACHE STRING "Version of `Eigen3` to be fetched."
 )
-
-set(MUJOCO_DEP_VERSION_abseil
+set(MUJOCO_DEP_VERSION_abseil_cpp
     fb3621f4f897824c0dbe0615fa94543df6192f30 # LTS 20230802.1
     CACHE STRING "Version of `abseil` to be fetched."
 )
-
-set(MUJOCO_DEP_VERSION_gtest
+set(MUJOCO_DEP_VERSION_googletest
     f8d7d77c06936315286eb55f8de22cd23c188571 # v1.14.0
-    CACHE STRING "Version of `gtest` to be fetched."
+    CACHE STRING "Version of `googletest` to be fetched."
 )
-
 set(MUJOCO_DEP_VERSION_benchmark
     344117638c8ff7e239044fd0fa7085839fc03021 # v1.8.3
     CACHE STRING "Version of `benchmark` to be fetched."
 )
-
 set(MUJOCO_DEP_VERSION_sdflib
     7c49cfba9bbec763b5d0f7b90b26555f3dde8088
     CACHE STRING "Version of `SdfLib` to be fetched."
@@ -70,8 +70,8 @@ mark_as_advanced(MUJOCO_DEP_VERSION_tiny
 mark_as_advanced(MUJOCO_DEP_VERSION_ccd)
 mark_as_advanced(MUJOCO_DEP_VERSION_qhull)
 mark_as_advanced(MUJOCO_DEP_VERSION_Eigen3)
-mark_as_advanced(MUJOCO_DEP_VERSION_abseil)
-mark_as_advanced(MUJOCO_DEP_VERSION_gtest)
+mark_as_advanced(MUJOCO_DEP_VERSION_abseil_cpp)
+mark_as_advanced(MUJOCO_DEP_VERSION_googletest)
 mark_as_advanced(MUJOCO_DEP_VERSION_benchmark)
 mark_as_advanced(MUJOCO_DEP_VERSION_sdflib)
 
@@ -91,15 +91,33 @@ set(BUILD_SHARED_LIBS
 )
 
 if(NOT TARGET lodepng)
-  FetchContent_Declare(
-    lodepng
-    GIT_REPOSITORY https://github.com/lvandeve/lodepng.git
-    GIT_TAG ${MUJOCO_DEP_VERSION_lodepng}
-  )
+  if(USE_LOCAL_TARBALL)
+    FetchContent_Declare(
+      lodepng
+      DOWNLOAD_NO_EXTRACT FALSE
+      URL $ENV{DISTDIR}/lodepng-${MUJOCO_DEP_VERSION_lodepng}.tar.gz
+    )
+    file(ARCHIVE_EXTRACT
+      INPUT $ENV{DISTDIR}/lodepng-${MUJOCO_DEP_VERSION_lodepng}.tar.gz
+      DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/_deps
+    )
+  else()
+    FetchContent_Declare(
+      lodepng
+      GIT_REPOSITORY https://github.com/lvandeve/lodepng.git
+      GIT_TAG ${MUJOCO_DEP_VERSION_lodepng}
+    )
+  endif()
 
   FetchContent_GetProperties(lodepng)
+  if(USE_LOCAL_TARBALL)
+    set(lodepng_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/lodepng-${MUJOCO_DEP_VERSION_lodepng})
+  endif()
   if(NOT lodepng_POPULATED)
     FetchContent_Populate(lodepng)
+    if(USE_LOCAL_TARBALL)
+      set(lodepng_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/lodepng-${MUJOCO_DEP_VERSION_lodepng})
+    endif()
     # This is not a CMake project.
     set(LODEPNG_SRCS ${lodepng_SOURCE_DIR}/lodepng.cpp)
     set(LODEPNG_HEADERS ${lodepng_SOURCE_DIR}/lodepng.h)
@@ -111,15 +129,33 @@ if(NOT TARGET lodepng)
 endif()
 
 if(NOT TARGET marchingcubecpp)
-  FetchContent_Declare(
-    marchingcubecpp
-    GIT_REPOSITORY https://github.com/aparis69/MarchingCubeCpp.git
-    GIT_TAG ${MUJOCO_DEP_VERSION_MarchingCubeCpp}
-  )
+  if(USE_LOCAL_TARBALL)
+    FetchContent_Declare(
+      marchingcubecpp
+      DOWNLOAD_NO_EXTRACT FALSE
+      URL $ENV{DISTDIR}/marchingcubecpp-${MUJOCO_DEP_VERSION_MarchingCubeCpp}.tar.gz
+    )
+    file(ARCHIVE_EXTRACT
+      INPUT $ENV{DISTDIR}/marchingcubecpp-${MUJOCO_DEP_VERSION_MarchingCubeCpp}.tar.gz
+      DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/_deps
+    )
+  else()
+    FetchContent_Declare(
+      marchingcubecpp
+      GIT_REPOSITORY https://github.com/aparis69/MarchingCubeCpp.git
+      GIT_TAG ${MUJOCO_DEP_VERSION_MarchingCubeCpp}
+    )
+  endif()
 
   FetchContent_GetProperties(marchingcubecpp)
+  if(USE_LOCAL_TARBALL)
+    set(lodepng_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/MarchingCubeCpp-${MUJOCO_DEP_VERSION_MarchingCubeCpp})
+  endif()
   if(NOT marchingcubecpp_POPULATED)
     FetchContent_Populate(marchingcubecpp)
+    if(USE_LOCAL_TARBALL)
+      set(lodepng_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/MarchingCubeCpp-${MUJOCO_DEP_VERSION_MarchingCubeCpp})
+    endif()
     include_directories(${marchingcubecpp_SOURCE_DIR})
   endif()
 endif()
@@ -137,6 +173,8 @@ findorfetch(
   https://github.com/qhull/qhull.git
   GIT_TAG
   ${MUJOCO_DEP_VERSION_qhull}
+  TARBALL_PATH
+  $ENV{DISTDIR}/qhull-${MUJOCO_DEP_VERSION_qhull}.tar.gz
   TARGETS
   qhull
   EXCLUDE_FROM_ALL
@@ -161,6 +199,8 @@ findorfetch(
   https://github.com/leethomason/tinyxml2.git
   GIT_TAG
   ${MUJOCO_DEP_VERSION_tinyxml2}
+  TARBALL_PATH
+  $ENV{DISTDIR}/tinyxml2-${MUJOCO_DEP_VERSION_tinyxml2}.tar.gz
   TARGETS
   tinyxml2
   EXCLUDE_FROM_ALL
@@ -179,6 +219,8 @@ findorfetch(
   https://github.com/tinyobjloader/tinyobjloader.git
   GIT_TAG
   ${MUJOCO_DEP_VERSION_tinyobjloader}
+  TARBALL_PATH
+  $ENV{DISTDIR}/tinyobjloader-${MUJOCO_DEP_VERSION_tinyobjloader}.tar.gz
   TARGETS
   tinyobjloader
   EXCLUDE_FROM_ALL
@@ -198,6 +240,8 @@ findorfetch(
   https://github.com/UPC-ViRVIG/SdfLib.git
   GIT_TAG
   ${MUJOCO_DEP_VERSION_sdflib}
+  TARBALL_PATH
+  $ENV{DISTDIR}/sdflib-${MUJOCO_DEP_VERSION_sdflib}.tar.gz
   TARGETS
   SdfLib
   EXCLUDE_FROM_ALL
@@ -218,6 +262,8 @@ findorfetch(
   https://github.com/danfis/libccd.git
   GIT_TAG
   ${MUJOCO_DEP_VERSION_ccd}
+  TARBALL_PATH
+  $ENV{DISTDIR}/libccd-${MUJOCO_DEP_VERSION_ccd}.tar.gz
   TARGETS
   ccd
   EXCLUDE_FROM_ALL
@@ -258,6 +304,8 @@ if(MUJOCO_BUILD_TESTS)
     https://github.com/abseil/abseil-cpp.git
     GIT_TAG
     ${MUJOCO_DEP_VERSION_abseil}
+    TARBALL_PATH
+    $ENV{DISTDIR}/abseil-cpp-${MUJOCO_DEP_VERSION_abseil_cpp}.tar.gz
     TARGETS
     absl::core_headers
     EXCLUDE_FROM_ALL
@@ -285,6 +333,8 @@ if(MUJOCO_BUILD_TESTS)
     https://github.com/google/googletest.git
     GIT_TAG
     ${MUJOCO_DEP_VERSION_gtest}
+    TARBALL_PATH
+    $ENV{DISTDIR}/googletest-${MUJOCO_DEP_VERSION_googletest}.tar.gz
     TARGETS
     gtest
     gmock
@@ -319,6 +369,8 @@ if(MUJOCO_BUILD_TESTS)
     https://github.com/google/benchmark.git
     GIT_TAG
     ${MUJOCO_DEP_VERSION_benchmark}
+    TARBALL_PATH
+    $ENV{DISTDIR}/benchmark-${MUJOCO_DEP_VERSION_benchmark}.tar.gz
     TARGETS
     benchmark::benchmark
     benchmark::benchmark_main
@@ -333,15 +385,33 @@ if(MUJOCO_TEST_PYTHON_UTIL)
     # Support new IN_LIST if() operator.
     set(CMAKE_POLICY_DEFAULT_CMP0057 NEW)
 
-    FetchContent_Declare(
-      Eigen3
-      GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
-      GIT_TAG ${MUJOCO_DEP_VERSION_Eigen3}
-    )
+    if(USE_LOCAL_TARBALL)
+      FetchContent_Declare(
+        Eigen3
+        DOWNLOAD_NO_EXTRACT FALSE
+        URL $ENV{DISTDIR}/eigen-${MUJOCO_DEP_VERSION_Eigen3}.tar.gz
+      )
+      file(ARCHIVE_EXTRACT
+        INPUT $ENV{DISTDIR}/eigen-${MUJOCO_DEP_VERSION_Eigen3}.tar.gz
+        DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/_deps
+      )
+    else()
+      FetchContent_Declare(
+        Eigen3
+        GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
+        GIT_TAG ${MUJOCO_DEP_VERSION_Eigen3}
+      )
+    endif()
 
     FetchContent_GetProperties(Eigen3)
+    if(USE_LOCAL_TARBALL)
+      set(eigen3_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/eigen-${MUJOCO_DEP_VERSION_Eigen3})
+    endif()
     if(NOT Eigen3_POPULATED)
       FetchContent_Populate(Eigen3)
+      if(USE_LOCAL_TARBALL)
+        set(eigen3_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/eigen-${MUJOCO_DEP_VERSION_Eigen3})
+      endif()
 
       # Mark the library as IMPORTED as a workaround for https://gitlab.kitware.com/cmake/cmake/-/issues/15415
       add_library(Eigen3::Eigen INTERFACE IMPORTED)
diff -urp mujoco-3.0.1.orig/python/mujoco/CMakeLists.txt mujoco-3.0.1/python/mujoco/CMakeLists.txt
--- mujoco-3.0.1.orig/python/mujoco/CMakeLists.txt	2023-11-15 09:30:35.000000000 -0800
+++ mujoco-3.0.1/python/mujoco/CMakeLists.txt	2024-05-08 00:25:16.563080566 -0700
@@ -12,6 +12,23 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+# oteodoro:  changes for prefetched local tarball to avoid sandbox wipe re-downloads.
+
+option(USE_LOCAL_TARBALL "Use the local tarballs instead of remote repo" ON)
+
+set(MUJOCO_DEP_VERSION_abseil_cpp
+    fb3621f4f897824c0dbe0615fa94543df6192f30
+    CACHE STRING "Version of `abseil` to be fetched."
+)
+set(MUJOCO_DEP_VERSION_eigen
+    e8515f78ac098329ab9f8cab21c87caede090a3f
+    CACHE STRING "Version of `eigen` to be fetched."
+)
+set(MUJOCO_DEP_VERSION_pybind11
+    8a099e44b3d5f85b20f05828d919d2332a8de841
+    CACHE STRING "Version of `pybind11` to be fetched."
+)
+
 project(mujoco_python)
 cmake_minimum_required(VERSION 3.15)
 
@@ -140,7 +157,9 @@ findorfetch(
   GIT_REPO
   https://github.com/abseil/abseil-cpp
   GIT_TAG
-  fb3621f4f897824c0dbe0615fa94543df6192f30 # LTS 20230802.1
+  ${MUJOCO_DEP_VERSION_abseil_cpp} # LTS 20230802.1
+  TARBALL_PATH
+  $ENV{DISTDIR}/abseil-${MUJOCO_DEP_VERSION_abseil_cpp}.tar.gz
   TARGETS
   ${MUJOCO_PYTHON_ABSL_TARGETS}
   EXCLUDE_FROM_ALL
@@ -173,7 +192,9 @@ findorfetch(
   GIT_REPO
   https://gitlab.com/libeigen/eigen
   GIT_TAG
-  e8515f78ac098329ab9f8cab21c87caede090a3f
+  ${MUJOCO_DEP_VERSION_eigen}
+  TARBALL_PATH
+  $ENV{DISTDIR}/eigen-${MUJOCO_DEP_VERSION_eigen}.tar.gz
   TARGETS
   Eigen3::Eigen
   EXCLUDE_FROM_ALL
@@ -190,7 +211,9 @@ findorfetch(
   GIT_REPO
   https://github.com/pybind/pybind11
   GIT_TAG
-  8a099e44b3d5f85b20f05828d919d2332a8de841 # v2.11.1
+  ${MUJOCO_DEP_VERSION_pybind11} # v2.11.1
+  TARBALL_PATH
+  $ENV{DISTDIR}/pybind11-${MUJOCO_DEP_VERSION_pybind11}.tar.gz
   TARGETS
   pybind11::pybind11_headers
   EXCLUDE_FROM_ALL
diff -urp mujoco-3.0.1.orig/sample/cmake/FindOrFetch.cmake mujoco-3.0.1/sample/cmake/FindOrFetch.cmake
--- mujoco-3.0.1.orig/sample/cmake/FindOrFetch.cmake	2023-11-15 09:30:35.000000000 -0800
+++ mujoco-3.0.1/sample/cmake/FindOrFetch.cmake	2024-05-08 00:31:51.323504368 -0700
@@ -23,6 +23,7 @@
 #               [LIBRARY_NAME [name]]
 #               [GIT_REPO [repo]]
 #               [GIT_TAG [tag]]
+#               [TARBALL_PATH [path]]
 #               [PATCH_COMMAND [cmd] [args]]
 #               [TARGETS [targets]]
 #               [EXCLUDE_FROM_ALL])
@@ -56,6 +57,8 @@
 # https://cmake.org/cmake/help/latest/module/FetchContent.html#variables to
 # override this macro behaviour.
 
+# oteodoro:  changes to use local tarballs to avoid sandbox wipe re-downloads
+
 if(COMMAND FindOrFetch)
   return()
 endif()
@@ -73,6 +76,7 @@ macro(FindOrFetch)
       LIBRARY_NAME
       GIT_REPO
       GIT_TAG
+      TARBALL_PATH
   )
   set(multi_value_args PATCH_COMMAND TARGETS)
   cmake_parse_arguments(
@@ -112,18 +116,58 @@ macro(FindOrFetch)
       message(CHECK_START
               "mujoco::FindOrFetch: Using FetchContent to retrieve `${_ARGS_LIBRARY_NAME}`"
       )
-      FetchContent_Declare(
-        ${_ARGS_LIBRARY_NAME}
-        GIT_REPOSITORY ${_ARGS_GIT_REPO}
-        GIT_TAG ${_ARGS_GIT_TAG}
-        GIT_SHALLOW FALSE
-        PATCH_COMMAND ${_ARGS_PATCH_COMMAND}
-        UPDATE_DISCONNECTED TRUE
-      )
+      if(USE_LOCAL_TARBALL)
+        FetchContent_Declare(
+          ${_ARGS_LIBRARY_NAME}
+          DOWNLOAD_NO_EXTRACT FALSE
+          URL ${_ARGS_TARBALL_PATH}
+          PATCH_COMMAND ${_ARGS_PATCH_COMMAND}
+        )
+        get_filename_component(TARBALL_NAME ${_ARGS_TARBALL_PATH} NAME)
+        file(ARCHIVE_EXTRACT
+          INPUT $ENV{DISTDIR}/${TARBALL_NAME}
+          DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/_deps
+        )
+      else()
+        FetchContent_Declare(
+          ${_ARGS_LIBRARY_NAME}
+          GIT_REPOSITORY ${_ARGS_GIT_REPO}
+          GIT_TAG ${_ARGS_GIT_TAG}
+          GIT_SHALLOW FALSE
+          PATCH_COMMAND ${_ARGS_PATCH_COMMAND}
+          UPDATE_DISCONNECTED TRUE
+        )
+      endif()
       if(${_ARGS_EXCLUDE_FROM_ALL})
         FetchContent_GetProperties(${_ARGS_LIBRARY_NAME})
+        string(REPLACE "-" "_" __ARGS_LIBRARY_NAME ${_ARGS_LIBRARY_NAME})
+        if(USE_LOCAL_TARBALL)
+          if("${_ARGS_LIBRARY_NAME}" STREQUAL "ccd")
+            set(___ARGS_LIBRARY_NAME "libccd")
+          elseif("${_ARGS_LIBRARY_NAME}" STREQUAL "sdflib")
+            set(___ARGS_LIBRARY_NAME "SdfLib")
+          elseif("${_ARGS_LIBRARY_NAME}" STREQUAL "marchingcubecpp")
+            set(___ARGS_LIBRARY_NAME "MarchingCubeCpp")
+          else()
+            set(___ARGS_LIBRARY_NAME "${_ARGS_LIBRARY_NAME}")
+          endif()
+          set(${_ARGS_LIBRARY_NAME}_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/${___ARGS_LIBRARY_NAME}-${MUJOCO_DEP_VERSION_${__ARGS_LIBRARY_NAME}})
+        endif()
         if(NOT ${${_ARGS_LIBRARY_NAME}_POPULATED})
           FetchContent_Populate(${_ARGS_LIBRARY_NAME})
+          string(REPLACE "-" "_" __ARGS_LIBRARY_NAME ${_ARGS_LIBRARY_NAME})
+          if(USE_LOCAL_TARBALL)
+            if("${_ARGS_LIBRARY_NAME}" STREQUAL "ccd")
+              set(___ARGS_LIBRARY_NAME "libccd")
+            elseif("${_ARGS_LIBRARY_NAME}" STREQUAL "sdflib")
+              set(___ARGS_LIBRARY_NAME "SdfLib")
+            elseif("${_ARGS_LIBRARY_NAME}" STREQUAL "marchingcubecpp")
+              set(___ARGS_LIBRARY_NAME "MarchingCubeCpp")
+            else()
+              set(___ARGS_LIBRARY_NAME "${_ARGS_LIBRARY_NAME}")
+            endif()
+            set(${_ARGS_LIBRARY_NAME}_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/${___ARGS_LIBRARY_NAME}-${MUJOCO_DEP_VERSION_${__ARGS_LIBRARY_NAME}})
+          endif()
           add_subdirectory(
             ${${_ARGS_LIBRARY_NAME}_SOURCE_DIR} ${${_ARGS_LIBRARY_NAME}_BINARY_DIR}
             EXCLUDE_FROM_ALL
diff -urp mujoco-3.0.1.orig/sample/cmake/SampleDependencies.cmake mujoco-3.0.1/sample/cmake/SampleDependencies.cmake
--- mujoco-3.0.1.orig/sample/cmake/SampleDependencies.cmake	2023-11-15 09:30:35.000000000 -0800
+++ mujoco-3.0.1/sample/cmake/SampleDependencies.cmake	2024-05-08 00:25:16.563080566 -0700
@@ -12,8 +12,12 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+# oteodoro:  changes for prefetched local tarball to avoid sandbox wipe re-downloads.
+
 include(FindOrFetch)
 
+option(USE_LOCAL_TARBALL "Use the local tarballs instead of remote repo" ON)
+
 if(SAMPLE_STANDALONE)
   # If standalone, by default look for MuJoCo binary version.
   set(DEFAULT_USE_SYSTEM_MUJOCO ON)
@@ -35,6 +39,12 @@ set(MUJOCO_DEP_VERSION_glfw3
 )
 mark_as_advanced(MUJOCO_DEP_VERSION_glfw3)
 
+set(MUJOCO_DEP_VERSION_mujoco
+    8d5966eec9c8ee17cee6bb5638577c1f6a47968c # 3.0.1
+    CACHE STRING "Version of `mujoco` to be fetched."
+)
+mark_as_advanced(MUJOCO_DEP_VERSION_mujoco)
+
 find_package(Threads REQUIRED)
 
 set(MUJOCO_BUILD_EXAMPLES OFF)
@@ -53,6 +63,8 @@ findorfetch(
   https://github.com/google-deepmind/mujoco.git
   GIT_TAG
   main
+  TARBALL_PATH
+  $ENV{DISTDIR}/mujoco-${MUJOCO_DEP_VERSION_mujoco}.tar.gz
   TARGETS
   mujoco
   EXCLUDE_FROM_ALL
@@ -85,6 +97,8 @@ findorfetch(
   https://github.com/glfw/glfw.git
   GIT_TAG
   ${MUJOCO_DEP_VERSION_glfw3}
+  TARBALL_PATH
+  $ENV{DISTDIR}/glfw-${MUJOCO_DEP_VERSION_glfw}.tar.gz
   TARGETS
   glfw
   EXCLUDE_FROM_ALL
diff -urp mujoco-3.0.1.orig/simulate/cmake/SimulateDependencies.cmake mujoco-3.0.1/simulate/cmake/SimulateDependencies.cmake
--- mujoco-3.0.1.orig/simulate/cmake/SimulateDependencies.cmake	2023-11-15 09:30:35.000000000 -0800
+++ mujoco-3.0.1/simulate/cmake/SimulateDependencies.cmake	2024-05-08 00:25:16.563080566 -0700
@@ -12,8 +12,12 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
+# oteodoro:  changes for prefetched local tarball to avoid sandbox wipe re-downloads.
+
 include(FindOrFetch)
 
+option(USE_LOCAL_TARBALL "Use the local tarballs instead of remote repo" ON)
+
 if(SIMULATE_STANDALONE)
   # If standalone, by default look for MuJoCo binary version.
   set(DEFAULT_USE_SYSTEM_MUJOCO ON)
@@ -35,6 +39,12 @@ set(MUJOCO_DEP_VERSION_glfw3
 )
 mark_as_advanced(MUJOCO_DEP_VERSION_glfw3)
 
+set(MUJOCO_DEP_VERSION_mujoco
+    8d5966eec9c8ee17cee6bb5638577c1f6a47968c # 3.0.1
+    CACHE STRING "Version of `mujoco` to be fetched."
+)
+mark_as_advanced(MUJOCO_DEP_VERSION_mujoco)
+
 find_package(Threads REQUIRED)
 
 set(MUJOCO_BUILD_EXAMPLES OFF)
@@ -53,6 +63,8 @@ findorfetch(
   https://github.com/google-deepmind/mujoco.git
   GIT_TAG
   main
+  TARBALL_PATH
+  $ENV{DISTDIR}/mujoco-${MUJOCO_DEP_VERSION_mujoco}.tar.gz
   TARGETS
   mujoco
   EXCLUDE_FROM_ALL
@@ -85,6 +97,8 @@ findorfetch(
   https://github.com/glfw/glfw.git
   GIT_TAG
   ${MUJOCO_DEP_VERSION_glfw3}
+  TARBALL_PATH
+  $ENV{DISTDIR}/glfw-${MUJOCO_DEP_VERSION_glfw}.tar.gz
   TARGETS
   glfw
   EXCLUDE_FROM_ALL
diff -urp mujoco-3.0.1.orig/simulate/CMakeLists.txt mujoco-3.0.1/simulate/CMakeLists.txt
--- mujoco-3.0.1.orig/simulate/CMakeLists.txt	2023-11-15 09:30:35.000000000 -0800
+++ mujoco-3.0.1/simulate/CMakeLists.txt	2024-05-08 00:25:16.563080566 -0700
@@ -14,6 +14,8 @@
 
 cmake_minimum_required(VERSION 3.16)
 
+option(USE_LOCAL_TARBALL "Use the local tarballs instead of remote repo" ON)
+
 # INTERPROCEDURAL_OPTIMIZATION is enforced when enabled.
 set(CMAKE_POLICY_DEFAULT_CMP0069 NEW)
 # Default to GLVND if available.
@@ -81,15 +83,33 @@ endif()
 
 # Fetch lodepng dependency.
 if(NOT TARGET lodepng)
-  FetchContent_Declare(
-    lodepng
-    GIT_REPOSITORY https://github.com/lvandeve/lodepng.git
-    GIT_TAG ${MUJOCO_DEP_VERSION_lodepng}
-  )
+  if(USE_LOCAL_TARBALL)
+    FetchContent_Declare(
+      lodepng
+      DOWNLOAD_NO_EXTRACT FALSE
+      URL $ENV{DISTDIR}/lodepng-${MUJOCO_DEP_VERSION_lodepng}.tar.gz
+    )
+    file(ARCHIVE_EXTRACT
+      INPUT $ENV{DISTDIR}/lodepng-${MUJOCO_DEP_VERSION_lodepng}.tar.gz
+      DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/_deps
+    )
+  else()
+    FetchContent_Declare(
+      lodepng
+      GIT_REPOSITORY https://github.com/lvandeve/lodepng.git
+      GIT_TAG ${MUJOCO_DEP_VERSION_lodepng}
+    )
+  endif()
 
   FetchContent_GetProperties(lodepng)
+  if(USE_LOCAL_TARBALL)
+    set(lodepng_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/lodepng-${MUJOCO_DEP_VERSION_lodepng})
+  endif()
   if(NOT lodepng_POPULATED)
     FetchContent_Populate(lodepng)
+    if(USE_LOCAL_TARBALL)
+      set(lodepng_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/_deps/lodepng-${MUJOCO_DEP_VERSION_lodepng})
+    endif()
     # This is not a CMake project.
     set(LODEPNG_SRCS ${lodepng_SOURCE_DIR}/lodepng.cpp)
     set(LODEPNG_HEADERS ${lodepng_SOURCE_DIR}/lodepng.h)
