diff -urp rocBLAS-rocm-5.6.0.orig/CHANGELOG.md rocBLAS-rocm-5.6.0/CHANGELOG.md
--- rocBLAS-rocm-5.6.0.orig/CHANGELOG.md	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/CHANGELOG.md	2023-08-29 19:11:42.209354919 -0700
@@ -289,7 +289,7 @@ Full documentation for rocBLAS is availa
 - function rocblas_Xdgmm algorithm corrected and incx=0 support added
 - dependencies:
   - rocblas-tensile internal component requires msgpack instead of LLVM
-- Moved the following files from /opt/rocm/include to /opt/rocm/include/internal:
+- Moved the following files from @EPREFIX_ROCM_PATH@/include to @EPREFIX_ROCM_PATH@/include/internal:
   - rocblas-auxillary.h
   - rocblas-complex-types.h
   - rocblas-functions.h
@@ -297,7 +297,7 @@ Full documentation for rocBLAS is availa
   - rocblas-version.h
   - rocblas_bfloat16.h
 
-  These files should NOT be included directly as this may lead to errors. Instead, /opt/rocm/include/rocblas.h should be included directly. /opt/rocm/include/rocblas_module.f90 can also be direcly used.
+  These files should NOT be included directly as this may lead to errors. Instead, @EPREFIX_ROCM_PATH@/include/rocblas.h should be included directly. @EPREFIX_ROCM_PATH@/include/rocblas_module.f90 can also be direcly used.
 
 
 ## rocBLAS 2.26.0 for ROCm 3.7.0
Only in rocBLAS-rocm-5.6.0: CHANGELOG.md.orig
diff -urp rocBLAS-rocm-5.6.0.orig/clients/CMakeLists.txt rocBLAS-rocm-5.6.0/clients/CMakeLists.txt
--- rocBLAS-rocm-5.6.0.orig/clients/CMakeLists.txt	2023-08-29 19:11:25.101354575 -0700
+++ rocBLAS-rocm-5.6.0/clients/CMakeLists.txt	2023-08-29 19:12:28.769355857 -0700
@@ -75,9 +75,9 @@ find_package(OpenMP)
 
 if (TARGET OpenMP::OpenMP_CXX)
   set( COMMON_LINK_LIBS "OpenMP::OpenMP_CXX")
-  list( APPEND COMMON_LINK_LIBS "-L\"${HIP_CLANG_ROOT}/lib\"")
+  list( APPEND COMMON_LINK_LIBS "-L\"${HIP_CLANG_ROOT}/@LIBDIR@\"")
   if (NOT WIN32)
-    list( APPEND COMMON_LINK_LIBS "-Wl,-rpath=${HIP_CLANG_ROOT}/lib")
+    list( APPEND COMMON_LINK_LIBS "-Wl,-rpath=@EPREFIX_LLVM_PATH@/@LIBDIR@")
   endif()
 endif()
 
@@ -97,11 +97,11 @@ include( client-build-options )
 set( CMAKE_EXPORT_COMPILE_COMMANDS ON )
 
 if( NOT TARGET rocblas )
-  find_package( rocblas REQUIRED CONFIG PATHS ${ROCM_PATH} /opt/rocm ${ROCM_PATH}/rocblas /opt/rocm/rocblas ${ROCBLAS_LIBRARY_DIR})
+  find_package( rocblas REQUIRED CONFIG PATHS ${ROCM_PATH} @ESYSROOT_ROCM_PATH@ ${ROCM_PATH}/rocblas @ESYSROOT_ROCM_PATH@/rocblas ${ROCBLAS_LIBRARY_DIR})
 endif( )
 
 # Hip headers required of all clients; clients use hip to allocate device memory
-list( APPEND CMAKE_PREFIX_PATH ${ROCM_PATH} /opt/rocm )
+list( APPEND CMAKE_PREFIX_PATH ${ROCM_PATH} @ESYSROOT_ROCM_PATH@ )
 if ( NOT hip_FOUND )
   find_package( hip REQUIRED CONFIG PATHS ${ROCM_PATH} )
 endif( )
@@ -113,14 +113,14 @@ endif( )
 if( BUILD_CLIENTS_BENCHMARKS OR BUILD_CLIENTS_TESTS)
   if ( NOT WIN32 )
     if (LINK_BLIS)
-      if(EXISTS "${BUILD_DIR}/deps/blis/lib/libblis.a")
+      if(EXISTS "${BUILD_DIR}/deps/blis/@LIBDIR@/libblis.a")
         set( BLIS_INCLUDE_DIR ${BUILD_DIR}/deps/blis/include/blis )
         set( BLIS_CPP ../common/blis_interface.cpp )
-        set( BLAS_LIBRARY ${BUILD_DIR}/deps/blis/lib/libblis.a )
-      elseif(EXISTS "/usr/local/lib/libblis.a")
+        set( BLAS_LIBRARY ${BUILD_DIR}/deps/blis/@LIBDIR@/libblis.a )
+      elseif(EXISTS "@ESYSROOT@/usr/local/@LIBDIR@/libblis.a")
         set( BLIS_INCLUDE_DIR /usr/local/include/blis )
         set( BLIS_CPP ../common/blis_interface.cpp )
-        set( BLAS_LIBRARY /usr/local/lib/libblis.a )
+        set( BLAS_LIBRARY @ESYSROOT@/usr/local/@LIBDIR@/libblis.a )
       endif()
     else()
       set( BLAS_LIBRARY "blas -lcblas" )
@@ -128,7 +128,7 @@ if( BUILD_CLIENTS_BENCHMARKS OR BUILD_CL
   else() # WIN32
     set( BLAS_INCLUDE_DIR ${OPENBLAS_DIR}/include CACHE PATH "OpenBLAS library include path" )
     find_library( BLAS_LIBRARY libopenblas
-                  PATHS ${OPENBLAS_DIR}/lib
+                  PATHS ${OPENBLAS_DIR}/@LIBDIR@
                   NO_DEFAULT_PATH
                 )
     if (NOT BLAS_LIBRARY)
Only in rocBLAS-rocm-5.6.0/clients: CMakeLists.txt.orig
Only in rocBLAS-rocm-5.6.0/clients: CMakeLists.txt.rej
diff -urp rocBLAS-rocm-5.6.0.orig/CMakeLists.txt rocBLAS-rocm-5.6.0/CMakeLists.txt
--- rocBLAS-rocm-5.6.0.orig/CMakeLists.txt	2023-08-29 19:11:25.089354574 -0700
+++ rocBLAS-rocm-5.6.0/CMakeLists.txt	2023-08-29 19:16:00.533360121 -0700
@@ -54,7 +54,7 @@ endif()
 # This finds the rocm-cmake project, and installs it if not found
 # rocm-cmake contains common cmake code for rocm projects to help setup and install
 set( PROJECT_EXTERN_DIR ${CMAKE_CURRENT_BINARY_DIR}/extern )
-find_package( ROCM 0.7.3 CONFIG QUIET PATHS ${ROCM_PATH} /opt/rocm )
+find_package( ROCM 0.7.3 CONFIG QUIET PATHS ${ROCM_PATH} @ESYSROOT_ROCM_PATH@ )
 if( NOT ROCM_FOUND )
   set( rocm_cmake_tag "master" CACHE STRING "rocm-cmake tag to download" )
   file( DOWNLOAD https://github.com/RadeonOpenCompute/rocm-cmake/archive/${rocm_cmake_tag}.zip
@@ -105,7 +105,7 @@ rocm_setup_version( VERSION ${VERSION_ST
 
 # Users may override HIP path by specifying their own in CMAKE_MODULE_PATH
 # NOTE:  workaround until llvm & hip cmake modules fixes symlink logic in their config files; remove when fixed
-list( APPEND CMAKE_PREFIX_PATH ${ROCM_PATH}/llvm ${ROCM_PATH} ${ROCM_PATH}/hip /opt/rocm/llvm /opt/rocm /opt/rocm/hip )
+list( APPEND CMAKE_PREFIX_PATH @ESYSROOT_LLVM_PATH@ ${ROCM_PATH} ${ROCM_PATH}/hip @ESYSROOT_LLVM_PATH@ @ESYSROOT_ROCM_PATH@ @ESYSROOT_ROCM_PATH@/hip )
 
 
 # gpu arch configuration
@@ -148,7 +148,7 @@ endif()
 
 # Find HIP dependencies
 if( CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
-  find_package( hip REQUIRED CONFIG PATHS ${HIP_DIR} ${ROCM_PATH} /opt/rocm )
+  find_package( hip REQUIRED CONFIG PATHS ${HIP_DIR} ${ROCM_PATH} @ESYSROOT_ROCM_PATH@ )
 endif( )
 
 message(STATUS "Using AMDGPU_TARGETS: ${AMDGPU_TARGETS}")
@@ -301,7 +301,7 @@ if(BUILD_CODE_COVERAGE)
     COMMAND mkdir -p lcoverage
     COMMAND echo "\\#!/bin/bash" > llvm-gcov.sh
     COMMAND echo "\\# THIS FILE HAS BEEN GENERATED" >> llvm-gcov.sh
-    COMMAND printf "exec /opt/rocm/llvm/bin/llvm-cov gcov $$\\@" >> llvm-gcov.sh
+    COMMAND printf "exec @ESYSROOT_LLVM_PATH@/bin/llvm-cov gcov $$\\@" >> llvm-gcov.sh
     COMMAND chmod +x llvm-gcov.sh
     )
 
@@ -362,4 +362,4 @@ endif()
 add_custom_target(docs DEPENDS sphinx_docs)
 if (DOXYGEN_FOUND)
     add_dependencies(docs doxygen_docs)
-endif()
\ No newline at end of file
+endif()
diff -urp rocBLAS-rocm-5.6.0.orig/CONTRIBUTING.rst rocBLAS-rocm-5.6.0/CONTRIBUTING.rst
--- rocBLAS-rocm-5.6.0.orig/CONTRIBUTING.rst	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/CONTRIBUTING.rst	2023-08-29 19:11:42.209354919 -0700
@@ -774,7 +774,7 @@ Format
 ------
 
 C and C++ code is formatted using ``clang-format``. To run clang-format
-use the version in the ``/opt/rocm/llvm/bin`` directory. Please do not use your
+use the version in the ``@EPREFIX_LLVM_PATH@/bin`` directory. Please do not use your
 system's built-in ``clang-format``, as this may be an older version that
 will result in different results.
 
@@ -782,14 +782,14 @@ To format a file, use:
 
 ::
 
-    /opt/rocm/llvm/bin/clang-format -style=file -i <path-to-source-file>
+    @EPREFIX_LLVM_PATH@/bin/clang-format -style=file -i <path-to-source-file>
 
 To format all files, run the following script in rocBLAS directory:
 
 ::
 
     #!/bin/bash
-    git ls-files -z *.cc *.cpp *.h *.hpp *.cl *.h.in *.hpp.in *.cpp.in | xargs -0 /opt/rocm/llvm/bin/clang-format -style=file -i
+    git ls-files -z *.cc *.cpp *.h *.hpp *.cl *.h.in *.hpp.in *.cpp.in | xargs -0 @EPREFIX_LLVM_PATH@/bin/clang-format -style=file -i
 
 Also, githooks can be installed to format the code per-commit:
 
diff -urp rocBLAS-rocm-5.6.0.orig/deps/external-gtest.cmake rocBLAS-rocm-5.6.0/deps/external-gtest.cmake
--- rocBLAS-rocm-5.6.0.orig/deps/external-gtest.cmake	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/deps/external-gtest.cmake	2023-08-29 19:11:42.213354919 -0700
@@ -90,11 +90,7 @@ ExternalProject_Get_Property( googletest
 set( package_dir "${PREFIX_GTEST}" )
 if( CMAKE_CONFIGURATION_TYPES )
   # Create a package by bundling libraries and header files
-  if( BUILD_64 )
-    set( LIB_DIR lib64 )
-  else( )
-    set( LIB_DIR lib )
-  endif( )
+  set( LIB_DIR @LIBDIR@ )
 
   set( gtest_lib_dir "<BINARY_DIR>/${LIB_DIR}" )
   ExternalProject_Add_Step( googletest createPackage
diff -urp rocBLAS-rocm-5.6.0.orig/docs/Linux_Install_Guide.rst rocBLAS-rocm-5.6.0/docs/Linux_Install_Guide.rst
--- rocBLAS-rocm-5.6.0.orig/docs/Linux_Install_Guide.rst	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/docs/Linux_Install_Guide.rst	2023-08-29 19:14:03.313357761 -0700
@@ -45,9 +45,9 @@ The rocblas.h header file must be includ
 into rocBLAS, and the rocBLAS shared library will become link-time and run-time
 dependent for the user application.
 
-Once installed, find rocblas.h and rocblas_module.f90 in the /opt/rocm/include
+Once installed, find rocblas.h and rocblas_module.f90 in the @EPREFIX_ROCM_PATH@/include
 directory. Only use these two installed files when needed in user code.
-Find other rocBLAS files in /opt/rocm/include/internal, However, do not include these files directly.
+Find other rocBLAS files in @EPREFIX_ROCM_PATH@/include/internal, However, do not include these files directly.
 
 
 -------------------------------
@@ -146,7 +146,7 @@ in the table below:
 | ``./install.sh -i``  | Build library, then      |
 |                      | build and install        |
 |                      | rocBLAS package in       |
-|                      | /opt/rocm/rocblas. You   |
+|                      | @EPREFIX_ROCM_PATH@/rocblas. You   |
 |                      | will be prompted for     |
 |                      | sudo access. This will   |
 |                      | install for all users.   |
@@ -243,7 +243,7 @@ Note that the version of the rocBLAS cli
 | ``./install.sh --clients-only``     | Build rocBLAS clients    |
 |                                     | and use an installed     |
 |                                     | rocBLAS library at       |
-|                                     | ROCM_PATH (/opt/rocm if  |
+|                                     | ROCM_PATH (@EPREFIX_ROCM_PATH@ if  |
 |                                     | not specified).          |
 +-------------------------------------+--------------------------+
 | ``./install.sh --clients-only``     | Build rocBLAS clients    |
diff -urp rocBLAS-rocm-5.6.0.orig/header_compilation_tests.sh rocBLAS-rocm-5.6.0/header_compilation_tests.sh
--- rocBLAS-rocm-5.6.0.orig/header_compilation_tests.sh	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/header_compilation_tests.sh	2023-08-29 19:11:43.617354947 -0700
@@ -39,7 +39,7 @@ out_uptodate()
     done
 }
 
-rocm_path=/opt/rocm
+rocm_path=@EPREFIX_ROCM_PATH@
 if ! [ -z ${ROCM_PATH+x} ]; then
     rocm_path=${ROCM_PATH}
 fi
@@ -50,7 +50,7 @@ HCC_OPTS="-Werror -DBUILD_WITH_TENSILE=1
 
 GPU_OPTS="-Wno-unused-command-line-argument -fvisibility=hidden -fvisibility-inlines-hidden -hc -fno-gpu-rdc --amdgpu-target=gfx803 --amdgpu-target=gfx900 --amdgpu-target=gfx906 -Werror"
 
-CLANG=${rocm_path}/llvm/bin/clang
+CLANG=@EPREFIX_LLVM_PATH@/bin/clang
 CLANG_OPTS="-xc-header -std=c99"  # auto set in hip_common.h -D__HIP_PLATFORM_HCC__
 
 GCC=/usr/bin/gcc
diff -urp rocBLAS-rocm-5.6.0.orig/install.sh rocBLAS-rocm-5.6.0/install.sh
--- rocBLAS-rocm-5.6.0.orig/install.sh	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/install.sh	2023-08-29 19:13:19.377356876 -0700
@@ -174,7 +174,7 @@ install_packages( )
     library_dependencies_sles+=( "gcc-fortran" "libgomp1" )
 
     # wget is needed for blis
-    if [[ ! -e "${build_dir}/deps/blis/lib/libblis.a" ]] && [[ ! -e "/usr/local/lib/libblis.a" ]]; then
+    if [[ ! -e "${build_dir}/deps/blis/@LIBDIR@/libblis.a" ]] && [[ ! -e "@ESYSROOT@/usr/local/@LIBDIR@/libblis.a" ]]; then
       library_dependencies_ubuntu+=("wget")
       library_dependencies_centos_rhel+=("wget")
       library_dependencies_centos_8+=("wget")
@@ -404,7 +404,7 @@ printf "\033[32mCreating project build d
 install_blis()
 {
     #Download prebuilt AMD multithreaded blis
-    if [[ ! -e "./blis/lib/libblis.a" ]]; then
+    if [[ ! -e "./blis/@LIBDIR@/libblis.a" ]]; then
       case "${ID}" in
           centos|rhel|sles|opensuse-leap)
               wget -nv -O blis.tar.gz https://github.com/amd/blis/releases/download/2.0/aocl-blis-mt-centos-2.0.tar.gz
@@ -422,7 +422,7 @@ install_blis()
       rm -rf blis/amd-blis-mt
       mv amd-blis-mt blis
       rm blis.tar.gz
-      cd blis/lib
+      cd blis/@LIBDIR@
       ln -sf libblis-mt.a libblis.a
     fi
 }
@@ -482,7 +482,7 @@ if [[ "${install_dependencies}" == true
     CXX=${cxx} CC=${cc} FC=${fc} ${cmake_executable} ${ROCBLAS_SRC_PATH}/deps
     make build_deps
     elevate_if_not_root make install_deps
-    if [[ ! -e "${build_dir}/deps/blis/lib/libblis.a" ]] && [[ ! -e "/usr/local/lib/libblis.a" ]]; then
+    if [[ ! -e "${build_dir}/deps/blis/@LIBDIR@/libblis.a" ]] && [[ ! -e "@ESYSROOT@/usr/local/@LIBDIR@/libblis.a" ]]; then
       install_blis
     fi
     popd
diff -urp rocBLAS-rocm-5.6.0.orig/library/src/tensile_host.cpp rocBLAS-rocm-5.6.0/library/src/tensile_host.cpp
--- rocBLAS-rocm-5.6.0.orig/library/src/tensile_host.cpp	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/library/src/tensile_host.cpp	2023-08-29 19:19:28.793364315 -0700
@@ -66,7 +66,7 @@ extern "C" void rocblas_shutdown();
 #include <libgen.h>
 #include <link.h>
 #include <unistd.h>
-#define ROCBLAS_LIB_PATH "/opt/rocm/lib/rocblas"
+#define ROCBLAS_LIB_PATH "@EPREFIX_ROCM_PATH@/@LIBDIR@"
 #endif
 
 #ifdef WIN32
@@ -582,47 +582,10 @@ namespace
             }
             else
             {
-                path = ROCBLAS_LIB_PATH;
-
                 // Find the location of librocblas.dll/.so
                 // Fall back on hard-coded path if static library or not found
 
-#ifndef ROCBLAS_STATIC_LIB
-#ifdef WIN32
-                // wchar_t wpath[MAX_PATH + 1] = {0};
-                // if(GetModuleFileNameW(GetModuleHandle("rocblas.dll"), wpath, MAX_PATH + 1))
-                // {
-                //     std::wstring          wspath(wpath);
-                //     std::string           tmp(wspath.begin(), wspath.end());
-
-                std::vector<TCHAR> dll_path(MAX_PATH + 1);
-                if(GetModuleFileNameA(
-                       GetModuleHandleA("rocblas.dll"), dll_path.data(), MAX_PATH + 1))
-                {
-                    std::string           tmp(dll_path.begin(), dll_path.end());
-                    std::filesystem::path exepath = tmp;
-                    if(exepath.has_filename())
-                    {
-                        path = exepath.remove_filename().string();
-                    }
-                }
-#else
-                dl_iterate_phdr(rocblas_dl_iterate_phdr_callback, NULL);
-                if(rocblas_so_path.size())
-                    path = std::string{dirname(&rocblas_so_path[0])};
-#endif
-#endif // ifndef ROCBLAS_STATIC_LIB
-
-                // Find the location of the libraries
-                if(TestPath(path + "/../../Tensile/library"))
-                    path += "/../../Tensile/library";
-                else if(TestPath(path + "library"))
-                    path += "/library";
-                else
-                    path += "/rocblas/library";
-
-                if(TestPath(path + "/" + processor))
-                    path += "/" + processor;
+		path="@EPREFIX@/usr/@LIBDIR@/rocblas/library";
             }
 
 #ifdef TENSILE_YAML
diff -urp rocBLAS-rocm-5.6.0.orig/rmake.py rocBLAS-rocm-5.6.0/rmake.py
--- rocBLAS-rocm-5.6.0.orig/rmake.py	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/rmake.py	2023-08-29 19:11:43.617354947 -0700
@@ -105,7 +105,7 @@ def parse_args():
                         help='Disable on-demand loading of Tensile Library files. (Default is enabled)')
 
     parser.add_argument(     '--library-path', dest='library_dir_installed', type=str, required=False, default="",
-                        help='Specify path to a pre-built rocBLAS library, when building clients only using --clients-only flag. (optional, default: /opt/rocm/rocblas)')
+                        help='Specify path to a pre-built rocBLAS library, when building clients only using --clients-only flag. (optional, default: @ESYSROOT_ROCM_PATH@/rocblas)')
 
     parser.add_argument('-n', '--no_tensile', dest='build_tensile', required=False, default=True, action='store_false',
                         help='Build a subset of rocBLAS library which does not require Tensile.')
@@ -258,7 +258,7 @@ def config_cmd():
         cmake_platform_opts.append(f'-DCMAKE_INSTALL_PREFIX="C:/hipSDK"')
         toolchain = os.path.join(src_path, "toolchain-windows.cmake")
     else:
-        rocm_raw_path = os.getenv('ROCM_PATH', "/opt/rocm")
+        rocm_raw_path = os.getenv('ROCM_PATH', "@ESYSROOT_ROCM_PATH@")
         rocm_path = rocm_raw_path
         cmake_platform_opts.append(f"-DROCM_DIR:PATH={rocm_path} -DCPACK_PACKAGING_INSTALL_PREFIX={rocm_path}")
         cmake_platform_opts.append(f'-DCMAKE_INSTALL_PREFIX="rocblas-install"')
@@ -318,7 +318,7 @@ def config_cmd():
         cmake_options.append(f"-DBUILD_SHARED_LIBS=OFF")
 
     if args.relocatable:
-        rocm_rpath = os.getenv('ROCM_RPATH', "/opt/rocm/lib:/opt/rocm/lib64")
+        rocm_rpath = os.getenv('ROCM_RPATH', "@EPREFIX_ROCM_PATH@/@LIBDIR@")
-        cmake_options.append(f'-DCMAKE_SHARED_LINKER_FLAGS=" -Wl,--enable-new-dtags -Wl,--rpath,{rocm_rpath}"')
+        cmake_options.append(f'-DCMAKE_SHARED_LINKER_FLAGS=" -Wl,--enable-new-dtags -Wl,--rpath,@EPREFIX_ROCM_PATH@"')
 
     if args.skip_ld_conf_entry or args.relocatable:
Only in rocBLAS-rocm-5.6.0: rmake.py.orig
diff -urp rocBLAS-rocm-5.6.0.orig/scripts/performance/blas/commandrunner.py rocBLAS-rocm-5.6.0/scripts/performance/blas/commandrunner.py
--- rocBLAS-rocm-5.6.0.orig/scripts/performance/blas/commandrunner.py	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/scripts/performance/blas/commandrunner.py	2023-08-29 19:11:43.617354947 -0700
@@ -125,7 +125,7 @@ def import_rocm_smi(install_path):
             import rocm_smi
             smi = rocm_smi
 
-            # The following is needed to call rsmi_init() before other calls as documented in /opt/rocm/rocm_smi/docs/README.md
+            # The following is needed to call rsmi_init() before other calls as documented in @EPREFIX_ROCM_PATH@/rocm_smi/docs/README.md
             smi.initializeRsmi()
         except ImportError:
             print('WARNING - rocm_smi.py not found!')
@@ -1433,7 +1433,7 @@ def parse_input_arguments(parser):
                         help='Output directory for the summary documentation.')
     parser.add_argument('-d', '--device-num', default=0, type=int,
                         help='Device number to run on.')
-    parser.add_argument('--install-path', default='/opt/rocm', help='Top directory of driver installation.')
+    parser.add_argument('--install-path', default='@EPREFIX_ROCM_PATH@', help='Top directory of driver installation.')
 
     parser.add_argument('--surface-plot', default=False, action='store_true', help='Adds a surface plot instead of a normal plot.')
 
diff -urp rocBLAS-rocm-5.6.0.orig/scripts/performance/blas/getspecs.py rocBLAS-rocm-5.6.0/scripts/performance/blas/getspecs.py
--- rocBLAS-rocm-5.6.0.orig/scripts/performance/blas/getspecs.py	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/scripts/performance/blas/getspecs.py	2023-08-29 19:14:23.185358161 -0700
@@ -45,13 +45,13 @@ def get_smi_exec(cuda):
     if cuda:
         return "nvidia-smi"
     else:
-        return "/opt/rocm/bin/rocm-smi"
+        return "@EPREFIX_ROCM_PATH@/bin/rocm-smi"
 
 def getgfx(devicenum, cuda):
     if cuda:
         return "N/A"
     else:
-        cmd = ["/opt/rocm/bin/rocm_agent_enumerator"]
+        cmd = ["@EPREFIX_ROCM_PATH@/bin/rocm_agent_enumerator"]
         success, cout = _subprocess_helper(cmd)
         if not success:
             return "N/A"
@@ -113,10 +113,10 @@ def getdistro():
 
 # Get the version number for rocm
 def getrocmversion():
-    if os.path.isfile("/opt/rocm/.info/version-utils"):
-        rocm_info = path("/opt/rocm/.info/version-utils").read_text()
-    elif os.path.isfile("/opt/rocm/.info/version"):
-        rocm_info = path("/opt/rocm/.info/version").read_text()
+    if os.path.isfile("@EPREFIX_ROCM_PATH@/.info/version-utils"):
+        rocm_info = path("@EPREFIX_ROCM_PATH@/.info/version-utils").read_text()
+    elif os.path.isfile("@EPREFIX_ROCM_PATH@/.info/version"):
+        rocm_info = path("@EPREFIX_ROCM_PATH@/.info/version").read_text()
     else:
         return "N/A"
 
@@ -410,7 +410,7 @@ def validmemtypes(cuda, smi=None):
     if cuda:
         return ["vram"]
     elif smi is not None:
-        # Hardcoded in /opt/rocm/rocm_smi/bindings/rsmiBindings.py
+        # Hardcoded in @EPREFIX_ROCM_PATH@/rocm_smi/bindings/rsmiBindings.py
         return ["VRAM", "VIS_VRAM", "GTT"]
 
 def getmeminfo(devicenum, mem_type, cuda, smi=None):
@@ -431,12 +431,12 @@ def getmeminfo(devicenum, mem_type, cuda
         return smi.getMemInfo(devicenum, mem_type)
 
 def validversioncomponents(cuda, smi=None):
-    # currently only driver according to /opt/rocm/bin/rocm_smi.py
-    # driver corresponds to 0 in /opt/rocm/bin/rocm_smi.py
+    # currently only driver according to @EPREFIX_ROCM_PATH@/bin/rocm_smi.py
+    # driver corresponds to 0 in @EPREFIX_ROCM_PATH@/bin/rocm_smi.py
     if cuda:
         return ['driver']
     else:
-        # currently only driver according to /opt/rocm/bin/rocm_smi.py
+        # currently only driver according to @EPREFIX_ROCM_PATH@/bin/rocm_smi.py
         return [0]
 
 def getversion(devicenum, component, cuda, smi=None):
diff -urp rocBLAS-rocm-5.6.0.orig/scripts/utilities/check_for_pretuned_sizes_c/Makefile rocBLAS-rocm-5.6.0/scripts/utilities/check_for_pretuned_sizes_c/Makefile
--- rocBLAS-rocm-5.6.0.orig/scripts/utilities/check_for_pretuned_sizes_c/Makefile	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/scripts/utilities/check_for_pretuned_sizes_c/Makefile	2023-08-29 19:11:43.617354947 -0700
@@ -1,9 +1,9 @@
-# Makefile assumes rocBLAS is installed in /opt/rocm/rocblas
+# Makefile assumes rocBLAS is installed in @EPREFIX_ROCM_PATH@/rocblas
 
-ROCM_INSTALL_DIR=/opt/rocm
+ROCM_INSTALL_DIR=@EPREFIX_ROCM_PATH@
 ROCBLAS_INSTALL_DIR=$(ROCM_INSTALL_DIR)
 ROCBLAS_INCLUDE=$(ROCBLAS_INSTALL_DIR)/include
-ROCBLAS_LIB_PATH=$(ROCBLAS_INSTALL_DIR)/lib
+ROCBLAS_LIB_PATH=$(ROCBLAS_INSTALL_DIR)/@LIBDIR@
 HIP_INCLUDE=$(ROCM_INSTALL_DIR)/include
 LDFLAGS=-L$(ROCBLAS_LIB_PATH) -lrocblas
 LD=$(ROCM_INSTALL_DIR)/bin/hipcc
diff -urp rocBLAS-rocm-5.6.0.orig/toolchain-linux.cmake rocBLAS-rocm-5.6.0/toolchain-linux.cmake
--- rocBLAS-rocm-5.6.0.orig/toolchain-linux.cmake	2023-06-12 10:58:30.000000000 -0700
+++ rocBLAS-rocm-5.6.0/toolchain-linux.cmake	2023-08-29 19:11:43.621354947 -0700
@@ -6,7 +6,7 @@ endif()
 if (DEFINED ENV{ROCM_PATH})
   set(rocm_bin "$ENV{ROCM_PATH}/bin")
 else()
-  set(rocm_bin "/opt/rocm/bin")
+  set(rocm_bin "@ESYSROOT_ROCM_PATH@/bin")
 endif()
 
 # relying on env and path for backward compatibility with external recipes
