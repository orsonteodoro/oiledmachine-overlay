diff '--color=auto' -urp pytorch-2.5.1.orig/CMakeLists.txt pytorch-2.5.1/CMakeLists.txt
--- pytorch-2.5.1.orig/CMakeLists.txt	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/CMakeLists.txt	2024-11-03 15:26:43.738629778 -0800
@@ -986,12 +986,11 @@ endif()
 # third_party/FBGEMM
 include(cmake/public/utils.cmake)
 if(NOT MSVC)
-  string(APPEND CMAKE_CXX_FLAGS " -O2 -fPIC")
+  string(APPEND CMAKE_CXX_FLAGS " -O2")
   # Eigen fails to build with some versions, so convert this to a warning
   # Details at http://eigen.tuxfamily.org/bz/show_bug.cgi?id=1459
   string(APPEND CMAKE_CXX_FLAGS " -Wall")
   string(APPEND CMAKE_CXX_FLAGS " -Wextra")
-  append_cxx_flag_if_supported("-Werror=return-type" CMAKE_CXX_FLAGS)
   append_cxx_flag_if_supported("-Werror=non-virtual-dtor" CMAKE_CXX_FLAGS)
   append_cxx_flag_if_supported("-Werror=braced-scalar-init" CMAKE_CXX_FLAGS)
   append_cxx_flag_if_supported("-Werror=range-loop-construct" CMAKE_CXX_FLAGS)
@@ -1085,7 +1084,6 @@ if(NOT MSVC)
   string(APPEND CMAKE_LINKER_FLAGS_DEBUG " -fno-omit-frame-pointer -O0")
   append_cxx_flag_if_supported("-fno-math-errno" CMAKE_CXX_FLAGS)
   append_cxx_flag_if_supported("-fno-trapping-math" CMAKE_CXX_FLAGS)
-  append_cxx_flag_if_supported("-Werror=format" CMAKE_CXX_FLAGS)
 else()
   # skip unwanted includes from windows.h
   add_compile_definitions(WIN32_LEAN_AND_MEAN)
Only in pytorch-2.5.1: CMakeLists.txt.orig
diff '--color=auto' -urp pytorch-2.5.1.orig/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt pytorch-2.5.1/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt
--- pytorch-2.5.1.orig/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt	2024-11-03 15:26:43.774629235 -0800
@@ -324,16 +324,8 @@ set_target_properties(pytorch_qnnpack PR
 set_target_properties(pytorch_qnnpack PROPERTIES PUBLIC_HEADER include/qnnpack_func.h)
 
 # ---[ Configure clog
-if(NOT TARGET clog)
-  set(CLOG_BUILD_TESTS OFF CACHE BOOL "")
-  set(CLOG_RUNTIME_TYPE "${CPUINFO_RUNTIME_TYPE}" CACHE STRING "")
-  add_subdirectory(
-    "${CLOG_SOURCE_DIR}"
-    "${CONFU_DEPENDENCIES_BINARY_DIR}/clog")
-  # We build static version of clog but a dynamic library may indirectly depend on it
-  set_property(TARGET clog PROPERTY POSITION_INDEPENDENT_CODE ON)
-endif()
-target_link_libraries(pytorch_qnnpack PUBLIC clog)
+find_library(CLOG_LIBRARY NAMES clog REQUIRED)
+target_link_libraries(pytorch_qnnpack PUBLIC ${CLOG_LIBRARY})
 
 # ---[ Configure cpuinfo
 if(NOT TARGET cpuinfo AND USE_SYSTEM_CPUINFO)
diff '--color=auto' -urp pytorch-2.5.1.orig/c10/CMakeLists.txt pytorch-2.5.1/c10/CMakeLists.txt
--- pytorch-2.5.1.orig/c10/CMakeLists.txt	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/c10/CMakeLists.txt	2024-11-03 15:28:51.432701399 -0800
@@ -94,8 +94,8 @@ if(NOT BUILD_LIBTORCHLESS)
   if(C10_USE_GLOG)
     target_link_libraries(c10 PUBLIC glog::glog)
   endif()
-  target_link_libraries(c10 PRIVATE fmt::fmt-header-only)
-  target_link_libraries(c10 PRIVATE nlohmann)
+  target_link_libraries(c10 PRIVATE fmt)
+   target_link_libraries(c10 PRIVATE nlohmann)
 
   if(C10_USE_NUMA)
     message(STATUS "NUMA paths:")
Only in pytorch-2.5.1/c10: CMakeLists.txt.orig
Only in pytorch-2.5.1/c10: CMakeLists.txt.rej
diff '--color=auto' -urp pytorch-2.5.1.orig/caffe2/CMakeLists.txt pytorch-2.5.1/caffe2/CMakeLists.txt
--- pytorch-2.5.1.orig/caffe2/CMakeLists.txt	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/caffe2/CMakeLists.txt	2024-11-03 15:26:43.842628209 -0800
@@ -87,7 +87,7 @@ endif()
 # Note: the folders that are being commented out have not been properly
 # addressed yet.
 
-if(NOT MSVC AND USE_XNNPACK)
+if(FALSE)
   if(NOT TARGET fxdiv)
     set(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
     set(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -1081,7 +1081,6 @@ if(USE_XPU)
 endif()
 
 if(NOT MSVC AND USE_XNNPACK)
-  TARGET_LINK_LIBRARIES(torch_cpu PRIVATE fxdiv)
 endif()
 
 # ==========================================================
@@ -1184,8 +1183,7 @@ target_include_directories(torch_cpu PRI
 target_include_directories(torch_cpu PRIVATE
   ${TORCH_ROOT}/third_party/miniz-2.1.0)
 
-target_include_directories(torch_cpu PRIVATE
-  ${TORCH_ROOT}/third_party/kineto/libkineto/include)
+target_include_directories(torch_cpu PRIVATE /usr/include/kineto)
 
 if(USE_KINETO)
   target_include_directories(torch_cpu PRIVATE
Only in pytorch-2.5.1/caffe2: CMakeLists.txt.orig
diff '--color=auto' -urp pytorch-2.5.1.orig/cmake/Codegen.cmake pytorch-2.5.1/cmake/Codegen.cmake
--- pytorch-2.5.1.orig/cmake/Codegen.cmake	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/cmake/Codegen.cmake	2024-11-03 15:26:43.858627967 -0800
@@ -57,7 +57,7 @@ if(INTERN_BUILD_ATEN_OPS)
   if(MSVC)
     set(OPT_FLAG "/fp:strict ")
   else(MSVC)
-    set(OPT_FLAG "-O3 ")
+    set(OPT_FLAG " ")
     if("${CMAKE_BUILD_TYPE}" MATCHES "Debug")
       set(OPT_FLAG " ")
     endif()
diff '--color=auto' -urp pytorch-2.5.1.orig/cmake/Dependencies.cmake pytorch-2.5.1/cmake/Dependencies.cmake
--- pytorch-2.5.1.orig/cmake/Dependencies.cmake	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/cmake/Dependencies.cmake	2024-11-03 15:26:43.874627725 -0800
@@ -473,7 +473,9 @@ if(USE_PYTORCH_QNNPACK)
       set_property(TARGET pytorch_qnnpack PROPERTY POSITION_INDEPENDENT_CODE ON)
       set_property(TARGET cpuinfo PROPERTY POSITION_INDEPENDENT_CODE ON)
       # QNNPACK depends on gemmlowp headers
-      target_include_directories(pytorch_qnnpack PRIVATE "${CAFFE2_THIRD_PARTY_ROOT}/gemmlowp")
+      find_package(gemmlowp REQUIRED)
+      get_target_property(GEMMLOWP_INCLUDE_DIRS gemmlowp::gemmlowp INTERFACE_INCLUDE_DIRECTORIES)
+      target_include_directories(pytorch_qnnpack PRIVATE ${GEMMLOWP_INCLUDE_DIRS})
 
       if(PYTORCH_QNNPACK_CUSTOM_THREADPOOL)
         target_compile_definitions(
@@ -712,7 +714,7 @@ if(BUILD_TEST OR BUILD_MOBILE_BENCHMARK
 endif()
 
 # ---[ FBGEMM
-if(USE_FBGEMM)
+if(FALSE)
   set(CAFFE2_THIRD_PARTY_ROOT "${PROJECT_SOURCE_DIR}/third_party")
   if(NOT DEFINED FBGEMM_SOURCE_DIR)
     set(FBGEMM_SOURCE_DIR "${CAFFE2_THIRD_PARTY_ROOT}/fbgemm" CACHE STRING "FBGEMM source directory")
@@ -760,6 +762,7 @@ if(USE_FBGEMM)
 endif()
 
 if(USE_FBGEMM)
+  list(APPEND Caffe2_DEPENDENCY_LIBS fbgemm)
   caffe2_update_option(USE_FBGEMM ON)
 else()
   caffe2_update_option(USE_FBGEMM OFF)
@@ -1519,7 +1522,6 @@ endif()
 #
 set(TEMP_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
 set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libs" FORCE)
-add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 
 # Disable compiler feature checks for `fmt`.
 #
@@ -1528,9 +1530,7 @@ add_subdirectory(${PROJECT_SOURCE_DIR}/t
 # CMAKE_CXX_FLAGS in ways that break feature checks. Since we already know
 # `fmt` is compatible with a superset of the compilers that PyTorch is, it
 # shouldn't be too bad to just disable the checks.
-set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
 
-list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt-header-only)
 set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS} CACHE BOOL "Build shared libs" FORCE)
 
 # ---[ Kineto
Only in pytorch-2.5.1/cmake: Dependencies.cmake.orig
Only in pytorch-2.5.1/cmake: Dependencies.cmake.rej
diff '--color=auto' -urp pytorch-2.5.1.orig/cmake/External/nnpack.cmake pytorch-2.5.1/cmake/External/nnpack.cmake
--- pytorch-2.5.1.orig/cmake/External/nnpack.cmake	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/cmake/External/nnpack.cmake	2024-11-03 15:26:43.874627725 -0800
@@ -56,7 +56,7 @@ if(ANDROID OR IOS OR ${CMAKE_SYSTEM_NAME
   set(PTHREADPOOL_SOURCE_DIR "${CAFFE2_THIRD_PARTY_ROOT}/pthreadpool" CACHE STRING "pthreadpool source directory")
   set(GOOGLETEST_SOURCE_DIR "${CAFFE2_THIRD_PARTY_ROOT}/googletest" CACHE STRING "Google Test source directory")
 
-  if(NOT TARGET nnpack)
+  if(FALSE)
     if(NOT USE_SYSTEM_PTHREADPOOL AND USE_INTERNAL_PTHREADPOOL_IMPL)
       set(NNPACK_CUSTOM_THREADPOOL ON CACHE BOOL "")
     endif()
diff '--color=auto' -urp pytorch-2.5.1.orig/cmake/public/utils.cmake pytorch-2.5.1/cmake/public/utils.cmake
--- pytorch-2.5.1.orig/cmake/public/utils.cmake	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/cmake/public/utils.cmake	2024-11-03 15:26:43.874627725 -0800
@@ -422,8 +422,6 @@ function(torch_compile_options libname)
   endif()
 
   # Use -O2 for release builds (-O3 doesn't improve perf, and -Os results in perf regression)
-  target_compile_options(${libname} PRIVATE
-      $<$<AND:$<COMPILE_LANGUAGE:CXX>,$<OR:$<CONFIG:Release>,$<CONFIG:RelWithDebInfo>>>:-O2>)
 
 endfunction()
 
Only in pytorch-2.5.1/cmake/public: utils.cmake.orig
diff '--color=auto' -urp pytorch-2.5.1.orig/functorch/CMakeLists.txt pytorch-2.5.1/functorch/CMakeLists.txt
--- pytorch-2.5.1.orig/functorch/CMakeLists.txt	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/functorch/CMakeLists.txt	2024-11-03 15:26:43.894627424 -0800
@@ -42,4 +42,4 @@ endif()
 if(NOT ${TORCH_PYTHON_LINK_FLAGS} STREQUAL "")
   set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS ${TORCH_PYTHON_LINK_FLAGS})
 endif()
-install(TARGETS ${PROJECT_NAME} DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}")
+install(TARGETS ${PROJECT_NAME} DESTINATION "${CMAKE_INSTALL_LIBDIR}")
diff '--color=auto' -urp pytorch-2.5.1.orig/torch/CMakeLists.txt pytorch-2.5.1/torch/CMakeLists.txt
--- pytorch-2.5.1.orig/torch/CMakeLists.txt	2024-10-22 18:14:52.000000000 -0700
+++ pytorch-2.5.1/torch/CMakeLists.txt	2024-11-03 15:27:46.633680122 -0800
@@ -59,17 +59,10 @@ set(TORCH_PYTHON_INCLUDE_DIRECTORIES
     ${CMAKE_BINARY_DIR}
     ${CMAKE_BINARY_DIR}/aten/src
     ${CMAKE_BINARY_DIR}/caffe2/aten/src
-    ${CMAKE_BINARY_DIR}/third_party
-    ${CMAKE_BINARY_DIR}/third_party/onnx
 
-    ${TORCH_ROOT}/third_party/valgrind-headers
+     ${TORCH_ROOT}/third_party/nlohmann/include
 
-    ${TORCH_ROOT}/third_party/gloo
-    ${TORCH_ROOT}/third_party/onnx
-    ${TORCH_ROOT}/third_party/flatbuffers/include
-    ${TORCH_ROOT}/third_party/kineto/libkineto/include
-    ${TORCH_ROOT}/third_party/cpp-httplib
-    ${TORCH_ROOT}/third_party/nlohmann/include
+    /usr/include/kineto
 
     ${TORCH_SRC_DIR}/csrc
     ${TORCH_SRC_DIR}/csrc/api/include
@@ -85,7 +78,6 @@ set(TORCH_PYTHON_LINK_LIBRARIES
     httplib
     nlohmann
     shm
-    fmt::fmt-header-only
     ATEN_CPU_FILES_GEN_LIB)
 
 if(USE_ASAN AND TARGET Sanitizer::address)
Only in pytorch-2.5.1/torch: CMakeLists.txt.orig
Only in pytorch-2.5.1/torch: CMakeLists.txt.rej
