Backport of https://github.com/ROCm/rocFFT/commit/4de95432b42831c01eb1aafa107aa3ede29ba618
diff '--color=auto' -urp rocFFT-rocm-5.4.3.orig/library/src/CMakeLists.txt rocFFT-rocm-5.4.3/library/src/CMakeLists.txt
--- rocFFT-rocm-5.4.3.orig/library/src/CMakeLists.txt	2023-01-25 13:05:23.000000000 -0800
+++ rocFFT-rocm-5.4.3/library/src/CMakeLists.txt	2024-07-08 00:02:57.055372748 -0700
@@ -333,24 +333,31 @@ target_link_libraries( rocfft_aot_helper
   )
 
 # compile kernels into the cache file we ship
-#
-# cache file should go next to the shared object - on Windows this
-# would be the DLL, not the import library.
-if( WIN32 )
-  set( ROCFFT_KERNEL_CACHE_PATH ${CMAKE_BINARY_DIR}/staging/rocfft_kernel_cache.db )
-else()
-  set( ROCFFT_KERNEL_CACHE_PATH ${CMAKE_BINARY_DIR}/library/src/rocfft_kernel_cache.db )
+
+# While useful in most situations, building the kernel cache takes a long time
+# enable a configure-time option to skip kernel cache building
+option( ROCFFT_KERNEL_CACHE_ENABLE "Enable building rocFFT kernel cache" ON)
+
+if ( ROCFFT_KERNEL_CACHE_ENABLE )
+  #
+  # cache file should go next to the shared object - on Windows this
+  # would be the DLL, not the import library.
+  if( WIN32 )
+    set( ROCFFT_KERNEL_CACHE_PATH ${CMAKE_BINARY_DIR}/staging/rocfft_kernel_cache.db )
+  else()
+    set( ROCFFT_KERNEL_CACHE_PATH ${CMAKE_BINARY_DIR}/library/src/rocfft_kernel_cache.db )
+  endif()
+  add_custom_command(
+    OUTPUT rocfft_kernel_cache.db
+    COMMAND rocfft_aot_helper ${ROCFFT_KERNEL_CACHE_PATH} $<TARGET_FILE:rocfft_rtc_helper> ${AMDGPU_TARGETS}
+    DEPENDS rocfft_aot_helper rocfft_rtc_helper
+    COMMENT "Compile kernels into shipped cache file"
+  )
+  add_custom_target( rocfft_kernel_cache_target ALL
+    DEPENDS rocfft_kernel_cache.db
+    VERBATIM
+  )
 endif()
-add_custom_command(
-  OUTPUT rocfft_kernel_cache.db
-  COMMAND rocfft_aot_helper ${ROCFFT_KERNEL_CACHE_PATH} $<TARGET_FILE:rocfft_rtc_helper> ${AMDGPU_TARGETS}
-  DEPENDS rocfft_aot_helper rocfft_rtc_helper
-  COMMENT "Compile kernels into shipped cache file"
-)
-add_custom_target( rocfft_kernel_cache_target ALL
-  DEPENDS rocfft_kernel_cache.db
-  VERBATIM
-)
 
 rocm_set_soversion( rocfft ${rocfft_SOVERSION} )
 set_target_properties( rocfft PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/staging" )
@@ -390,10 +397,12 @@ if(WIN32)
 else()
   set(ROCFFT_KERNEL_CACHE_INSTALL_DIR ${ROCM_INSTALL_LIBDIR})
 endif()
-rocm_install(FILES ${ROCFFT_KERNEL_CACHE_PATH}
-  DESTINATION "${ROCFFT_KERNEL_CACHE_INSTALL_DIR}"
-  COMPONENT runtime
-)
+if(ROCFFT_KERNEL_CACHE_ENABLE)
+  rocm_install(FILES ${ROCFFT_KERNEL_CACHE_PATH}
+    DESTINATION "${ROCFFT_KERNEL_CACHE_INSTALL_DIR}"
+    COMPONENT runtime
+  )
+endif()
 
 #         PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ
 
diff '--color=auto' -urp rocFFT-rocm-5.4.3.orig/library/src/device/CMakeLists.txt rocFFT-rocm-5.4.3/library/src/device/CMakeLists.txt
--- rocFFT-rocm-5.4.3.orig/library/src/device/CMakeLists.txt	2023-01-25 13:05:23.000000000 -0800
+++ rocFFT-rocm-5.4.3/library/src/device/CMakeLists.txt	2024-07-08 00:03:22.695022366 -0700
@@ -112,8 +112,10 @@ if( STATUS AND NOT STATUS EQUAL 0 )
   message( FATAL_ERROR "Kernel generator failed (list): ${STATUS}")
 endif()
 
+# stockham_aot will be having relative RUNPATH with respect to package install directory
+# Set LD_LIBRARY_PATH for running the executable from build directory
 add_custom_command(OUTPUT ${gen_headers}
-  COMMAND ${PYTHON3_EXE} ${kgen}
+  COMMAND ${CMAKE_COMMAND} -E env "LD_LIBRARY_PATH=${ROCM_PATH}/${CMAKE_INSTALL_LIBDIR}" ${PYTHON3_EXE} ${kgen}
   --pattern=${GENERATOR_PATTERN}
   --precision=${GENERATOR_PRECISION}
   --manual-small=${GENERATOR_MANUAL_SMALL_SIZE}
