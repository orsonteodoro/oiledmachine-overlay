diff -urp MIOpen-rocm-5.3.3.orig/CMakeLists.txt MIOpen-rocm-5.3.3/CMakeLists.txt
--- MIOpen-rocm-5.3.3.orig/CMakeLists.txt	2023-07-20 20:37:40.807507920 -0700
+++ MIOpen-rocm-5.3.3/CMakeLists.txt	2023-07-20 20:38:13.147508762 -0700
@@ -248,7 +248,7 @@ if( MIOPEN_BACKEND STREQUAL "HIP" OR MIO
     # miopentensile default off
     set(MIOPEN_USE_MIOPENTENSILE OFF CACHE BOOL "")
 
-    find_program(HIP_OC_COMPILER clang-ocl
+    find_program(HIP_OC_COMPILER clang
         PATH_SUFFIXES bin
         PATHS
             /opt/rocm
diff -urp MIOpen-rocm-5.3.3.orig/README.md MIOpen-rocm-5.3.3/README.md
--- MIOpen-rocm-5.3.3.orig/README.md	2022-09-23 08:20:14.000000000 -0700
+++ MIOpen-rocm-5.3.3/README.md	2023-07-20 20:38:38.299509417 -0700
@@ -14,7 +14,6 @@ MIOpen supports two programming models -
 * Base software stack, which includes:
   * HIP - 
     * HIP and HCC libraries and header files.
-    * [clang-ocl](https://github.com/RadeonOpenCompute/clang-ocl) -- **required**
   * OpenCL - OpenCL libraries and header files.
 * [MIOpenGEMM](https://github.com/ROCmSoftwarePlatform/MIOpenGEMM) - enable various functionalities including transposed and dilated convolutions. 
   * This is optional on the HIP backend, and required on the OpenCL backend.
diff -urp MIOpen-rocm-5.3.3.orig/src/hipoc/hipoc_program.cpp MIOpen-rocm-5.3.3/src/hipoc/hipoc_program.cpp
--- MIOpen-rocm-5.3.3.orig/src/hipoc/hipoc_program.cpp	2022-09-23 08:20:14.000000000 -0700
+++ MIOpen-rocm-5.3.3/src/hipoc/hipoc_program.cpp	2023-07-20 20:39:39.547511012 -0700
@@ -254,7 +254,12 @@ void HIPOCProgramImpl::BuildCodeObjectIn
         if(miopen::IsEnabled(MIOPEN_DEBUG_OPENCL_WAVE64_NOWGP{}))
             params += " -mwavefrontsize64 -mcumode";
         WriteFile(src, dir->path / filename);
-        dir->Execute(HIP_OC_COMPILER, params + " " + filename + " -o " + hsaco_file.string());
+        params += " -target amdgcn-amd-amdhsa -x cl -D__AMD__=1  -O3";
+        params += " -cl-kernel-arg-info -cl-denorms-are-zero";
+        params += " -cl-std=CL1.2 -mllvm -amdgpu-early-inline-all";
+        params += " -mllvm -amdgpu-internalize-symbols ";
+        params += " " + filename + " -o " + hsaco_file.string();
+        dir->Execute(HIP_OC_COMPILER, params);
     }
     if(!boost::filesystem::exists(hsaco_file))
         MIOPEN_THROW("Cant find file: " + hsaco_file.string());
