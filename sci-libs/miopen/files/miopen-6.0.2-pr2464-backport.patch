Subject:  Fix build when composable-kernel USE flag is disabled
Originally from https://github.com/ROCm/MIOpen/pull/2464
Suggested from https://github.com/ROCm/MIOpen/issues/2670
diff '--color=auto' -urp MIOpen-rocm-6.0.2.orig/src/solver/batchnorm/backward_ck.cpp MIOpen-rocm-6.0.2/src/solver/batchnorm/backward_ck.cpp
--- MIOpen-rocm-6.0.2.orig/src/solver/batchnorm/backward_ck.cpp	2023-11-08 15:10:42.000000000 -0800
+++ MIOpen-rocm-6.0.2/src/solver/batchnorm/backward_ck.cpp	2025-04-12 17:57:30.897851259 -0700
@@ -154,43 +154,6 @@ static bool CheckCKApplicability(const m
                           CKArgsBNormBwd>(problem);
 }
 
-#endif
-
-bool BnCKBwdBackward::IsApplicable(const ExecutionContext& context,
-                                   const miopen::batchnorm::ProblemDescription& bn_problem) const
-{
-#if !MIOPEN_BACKEND_HIP || !MIOPEN_USE_COMPOSABLEKERNEL
-    std::ignore = context;
-    std::ignore = fdesc_problem;
-    return false;
-#else
-    if(miopen::IsDisabled(MIOPEN_DEBUG_CONV_CK_BN_BACK{}))
-        return false;
-    if(!bn_problem.IsLayoutNHWC())
-        return false;
-    if(!ck_utility::is_ck_supported_hardware(context.GetStream()))
-        return false;
-    if(bn_problem.GetXDesc().GetType() != bn_problem.GetScaleBiasDiffDesc().GetType())
-        return false;
-
-    switch(bn_problem.GetXDesc().GetType())
-    {
-    case miopenFloat: return CheckCKApplicability<F32, F32, F32, F32, F32, F32, F32>(bn_problem);
-    case miopenDouble: return CheckCKApplicability<F64, F64, F64, F64, F64, F64, F64>(bn_problem);
-    case miopenHalf: return CheckCKApplicability<F16, F32, F32, F32, F16, F32, F32>(bn_problem);
-    case miopenBFloat16:
-        return CheckCKApplicability<BF16, F32, F32, F32, BF16, F32, F32>(bn_problem);
-    case miopenInt32:
-    case miopenInt8:
-    case miopenInt8x4:
-    case miopenBFloat8:
-    case miopenFloat8:
-    default: MIOPEN_THROW("Unsupported datatype");
-    }
-    return false;
-#endif
-}
-
 template <typename XDataType,
           typename DxDataType,
           typename DyDataType,
@@ -198,7 +161,7 @@ template <typename XDataType,
           typename ScaleDataType,
           typename DscaleDbiasDataType,
           typename MeanVarDataType>
-ConvSolution MakeAnyInvokerFactory(const miopen::batchnorm::ProblemDescription& bn_problem)
+static ConvSolution MakeAnyInvokerFactory(const miopen::batchnorm::ProblemDescription& bn_problem)
 {
     const auto& valid_kernel_ids = FillValidKernelsIDs<DeviceOpBNBwdPtrs<XDataType,
                                                                          DxDataType,
@@ -221,6 +184,38 @@ ConvSolution MakeAnyInvokerFactory(const
                                  miopen::batchnorm::BwdInvokeParams>(bn_problem, kernel_id);
 }
 
+#endif
+
+bool BnCKBwdBackward::IsApplicable(const ExecutionContext& context,
+                                   const miopen::batchnorm::ProblemDescription& bn_problem) const
+{
+#if MIOPEN_BACKEND_HIP && MIOPEN_USE_COMPOSABLEKERNEL
+    if(miopen::IsDisabled(MIOPEN_DEBUG_CONV_CK_BN_BACK{}))
+        return false;
+    if(!bn_problem.IsLayoutNHWC())
+        return false;
+    if(!ck_utility::is_ck_supported_hardware(context.GetStream()))
+        return false;
+    if(bn_problem.GetXDesc().GetType() != bn_problem.GetScaleBiasDiffDesc().GetType())
+        return false;
+
+    switch(bn_problem.GetXDesc().GetType())
+    {
+    case miopenFloat: return CheckCKApplicability<F32, F32, F32, F32, F32, F32, F32>(bn_problem);
+    case miopenDouble: return CheckCKApplicability<F64, F64, F64, F64, F64, F64, F64>(bn_problem);
+    case miopenHalf: return CheckCKApplicability<F16, F32, F32, F32, F16, F32, F32>(bn_problem);
+    case miopenBFloat16:
+        return CheckCKApplicability<BF16, F32, F32, F32, BF16, F32, F32>(bn_problem);
+    case miopenInt32:
+    case miopenInt8:
+    case miopenInt8x4:
+    case miopenBFloat8:
+    case miopenFloat8: break;
+    }
+#endif
+    return false;
+}
+
 ConvSolution BnCKBwdBackward::GetSolution(
     [[maybe_unused]] const ExecutionContext& context,
     [[maybe_unused]] const miopen::batchnorm::ProblemDescription& bn_problem) const
diff '--color=auto' -urp MIOpen-rocm-6.0.2.orig/src/solver/batchnorm/forward_inference_ck.cpp MIOpen-rocm-6.0.2/src/solver/batchnorm/forward_inference_ck.cpp
--- MIOpen-rocm-6.0.2.orig/src/solver/batchnorm/forward_inference_ck.cpp	2023-11-08 15:10:42.000000000 -0800
+++ MIOpen-rocm-6.0.2/src/solver/batchnorm/forward_inference_ck.cpp	2025-04-12 17:51:53.985939155 -0700
@@ -175,14 +175,11 @@ static void RunCKSolution(const Handle&
 }
 #endif
 
-bool BnCKFwdInference::IsApplicable(const ExecutionContext& context,
-                                    const miopen::batchnorm::ProblemDescription& bn_problem) const
+bool BnCKFwdInference::IsApplicable(
+     [[maybe_unused]] const ExecutionContext& context,
+     [[maybe_unused]] const miopen::batchnorm::ProblemDescription& bn_problem) const
 {
-#if !MIOPEN_BACKEND_HIP || !MIOPEN_USE_COMPOSABLEKERNEL
-    std::ignore = context;
-    std::ignore = bn_problem;
-    return false;
-#else
+#if MIOPEN_BACKEND_HIP && MIOPEN_USE_COMPOSABLEKERNEL
     if(miopen::IsDisabled(MIOPEN_DEBUG_CONV_CK_BN_INFER{}))
         return false;
     if(!bn_problem.IsLayoutNHWC())
@@ -202,22 +199,17 @@ bool BnCKFwdInference::IsApplicable(cons
     case miopenInt8:
     case miopenInt8x4: // Support discontinued.
     case miopenFloat8:
-    case miopenBFloat8:
-    default: MIOPEN_THROW("Unsupported datatype");
+    case miopenBFloat8: break;
     }
-    return false;
 #endif
+    return false;
 }
 
-ConvSolution
-BnCKFwdInference::GetSolution(const ExecutionContext& context,
-                              const miopen::batchnorm::ProblemDescription& bn_problem) const
+ConvSolution BnCKFwdInference::GetSolution(
+    [[maybe_unused]] const ExecutionContext& context,
+    [[maybe_unused]] const miopen::batchnorm::ProblemDescription& bn_problem) const
 {
-#if !MIOPEN_BACKEND_HIP || !MIOPEN_USE_COMPOSABLEKERNEL
-    std::ignore = context;
-    std::ignore = bn_problem;
-    return {};
-#else
+#if MIOPEN_BACKEND_HIP && MIOPEN_USE_COMPOSABLEKERNEL
     std::ignore = context;
 
     ConvSolution result;
@@ -252,6 +244,8 @@ BnCKFwdInference::GetSolution(const Exec
         };
     };
     return result;
+#else
+    return {};
 #endif
 }
 
diff '--color=auto' -urp MIOpen-rocm-6.0.2.orig/src/solver/batchnorm/forward_training_ck.cpp MIOpen-rocm-6.0.2/src/solver/batchnorm/forward_training_ck.cpp
--- MIOpen-rocm-6.0.2.orig/src/solver/batchnorm/forward_training_ck.cpp	2023-11-08 15:10:42.000000000 -0800
+++ MIOpen-rocm-6.0.2/src/solver/batchnorm/forward_training_ck.cpp	2025-04-12 17:53:05.827861437 -0700
@@ -149,39 +149,6 @@ static bool CheckCKApplicability(const m
                                                     MeanVarDataType>,
                           CKArgsBNormFwdTraining>(problem);
 }
-#endif
-
-bool BnCKFwdTraining::IsApplicable(const ExecutionContext& context,
-                                   const miopen::batchnorm::ProblemDescription& bn_problem) const
-{
-#if !MIOPEN_BACKEND_HIP || !MIOPEN_USE_COMPOSABLEKERNEL
-    std::ignore = context;
-    std::ignore = fdesc_problem;
-    return false;
-#else
-    if(miopen::IsDisabled(MIOPEN_DEBUG_CONV_CK_BN_FWD_TRAINING{}))
-        return false;
-    if(!bn_problem.IsLayoutNHWC())
-        return false;
-    if(!ck_utility::is_ck_supported_hardware(context.GetStream()))
-        return false;
-
-    switch(bn_problem.GetXDesc().GetType())
-    {
-    case miopenHalf: return CheckCKApplicability<F16, F16, F32, F16, F16, F32>(bn_problem);
-    case miopenFloat: return CheckCKApplicability<F32, F32, F32, F32, F32, F32>(bn_problem);
-    case miopenDouble: return CheckCKApplicability<F64, F64, F64, F64, F64, F64>(bn_problem);
-    case miopenBFloat16: return CheckCKApplicability<BF16, BF16, F32, BF16, BF16, F32>(bn_problem);
-    case miopenInt32:
-    case miopenInt8:
-    case miopenInt8x4:
-    case miopenBFloat8:
-    case miopenFloat8:
-    default: MIOPEN_THROW("BnCKFwdTraining operation does not supprot this data type");
-    }
-    return false;
-#endif
-}
 
 template <typename XDataType,
           typename YDataType,
@@ -189,7 +156,7 @@ template <typename XDataType,
           typename ScaleDataType,
           typename BiasDataType,
           typename MeanVarDataType>
-ConvSolution MakeAnyInvokerFactory(const miopen::batchnorm::ProblemDescription& bn_problem)
+static ConvSolution MakeAnyInvokerFactory(const miopen::batchnorm::ProblemDescription& bn_problem)
 {
     const auto& valid_kernel_ids = FillValidKernelsIDs<DeviceOpBNFwdTrainingPtrs<XDataType,
                                                                                  YDataType,
@@ -209,6 +176,34 @@ ConvSolution MakeAnyInvokerFactory(const
                                  CKArgsBNormFwdTraining,
                                  miopen::batchnorm::InvokeParams>(bn_problem, kernel_id);
 }
+#endif
+
+bool BnCKFwdTraining::IsApplicable(const ExecutionContext& context,
+                                   const miopen::batchnorm::ProblemDescription& bn_problem) const
+{
+#if MIOPEN_BACKEND_HIP && MIOPEN_USE_COMPOSABLEKERNEL
+    if(miopen::IsDisabled(MIOPEN_DEBUG_CONV_CK_BN_FWD_TRAINING{}))
+        return false;
+    if(!bn_problem.IsLayoutNHWC())
+        return false;
+    if(!ck_utility::is_ck_supported_hardware(context.GetStream()))
+        return false;
+
+    switch(bn_problem.GetXDesc().GetType())
+    {
+    case miopenHalf: return CheckCKApplicability<F16, F16, F32, F16, F16, F32>(bn_problem);
+    case miopenFloat: return CheckCKApplicability<F32, F32, F32, F32, F32, F32>(bn_problem);
+    case miopenDouble: return CheckCKApplicability<F64, F64, F64, F64, F64, F64>(bn_problem);
+    case miopenBFloat16: return CheckCKApplicability<BF16, BF16, F32, BF16, BF16, F32>(bn_problem);
+    case miopenInt32:
+    case miopenInt8:
+    case miopenInt8x4:
+    case miopenBFloat8:
+    case miopenFloat8: break;
+    }
+#endif
+    return false;
+}
 
 ConvSolution BnCKFwdTraining::GetSolution(
     [[maybe_unused]] const ExecutionContext& context,
