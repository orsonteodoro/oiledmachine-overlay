diff '--color=auto' -urp keepassxc-2.7.10.orig/CMakeLists.txt keepassxc-2.7.10/CMakeLists.txt
--- keepassxc-2.7.10.orig/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/CMakeLists.txt	2025-07-14 11:37:09.862361318 -0700
@@ -491,35 +491,67 @@ endif()
 
 include(CLangFormat)
 
-set(QT_COMPONENTS Core Network Concurrent Gui Svg Widgets Test LinguistTools)
-if(UNIX AND NOT APPLE)
-    if(WITH_XC_X11)
-        list(APPEND QT_COMPONENTS X11Extras)
-    endif()
-    find_package(Qt5 COMPONENTS ${QT_COMPONENTS} DBus REQUIRED)
-elseif(APPLE)
-    find_package(Qt5 COMPONENTS ${QT_COMPONENTS} REQUIRED HINTS
-            /usr/local/opt/qt@5/lib/cmake
-            /usr/local/Cellar/qt@5/*/lib/cmake
-            /opt/homebrew/opt/qt@5/lib/cmake
-            ENV PATH)
-    find_package(Qt5 COMPONENTS MacExtras HINTS
-            /usr/local/opt/qt@5/lib/cmake
-            /usr/local/Cellar/qt@5/*/lib/cmake
-            /opt/homebrew/opt/qt@5/lib/cmake
-            ENV PATH)
-else()
-    find_package(Qt5 COMPONENTS ${QT_COMPONENTS} REQUIRED)
+option(WITH_QT6 "Use Qt6" OFF)
+option(WITH_QT5 "Use Qt5" ON)
+option(WITH_QT5COMPAT "Use Qt5Compat library for KDB 1.1 support" OFF)
+if(WITH_QT6 AND WITH_QT5)
+    message(FATAL_ERROR "WITH_QT5 and WITH_QT6 cannot be used at the same time.")
 endif()
-
-if(Qt5Core_VERSION VERSION_LESS "5.2.0")
-    message(FATAL_ERROR "Qt version 5.2.0 or higher is required")
+if(WITH_QT5COMPAT AND NOT WITH_QT6)
+    message(FATAL_ERROR "WITH_QT5COMPAT requires WITH_QT6.")
 endif()
 
-# CBOR for Passkeys requires Qt 5.12
-if(Qt5Core_VERSION VERSION_LESS "5.12.0")
-    message(STATUS "Qt version 5.12.0 or higher is required for Passkeys support")
-    set(WITH_XC_BROWSER_PASSKEYS OFF)
+if(WITH_QT6)
+    set(QT_COMPONENTS Core Network Concurrent Gui Svg Widgets Test LinguistTools)
+    if(UNIX AND NOT APPLE)
+        find_package(Qt6 COMPONENTS ${QT_COMPONENTS} DBus REQUIRED)
+    elseif(APPLE)
+        find_package(Qt6 COMPONENTS ${QT_COMPONENTS} REQUIRED HINTS
+                /usr/local/opt/qt@6/lib/cmake
+                /usr/local/Cellar/qt@6/*/lib/cmake
+                /opt/homebrew/opt/qt@6/lib/cmake
+                ENV PATH)
+        find_package(Qt6 COMPONENTS MacExtras HINTS
+                /usr/local/opt/qt@6/lib/cmake
+                /usr/local/Cellar/qt@6/*/lib/cmake
+                /opt/homebrew/opt/qt@6/lib/cmake
+                ENV PATH)
+    else()
+        find_package(Qt6 COMPONENTS ${QT_COMPONENTS} REQUIRED)
+    endif()
+    if(Qt6Core_VERSION VERSION_LESS "6.6.1")
+        message(FATAL_ERROR "Qt version 6.6.1 or higher is required")
+    endif()
+elseif(WITH_QT5)
+    set(QT_COMPONENTS Core Network Concurrent Gui Svg Widgets Test LinguistTools)
+    if(UNIX AND NOT APPLE)
+        if(WITH_XC_X11)
+            list(APPEND QT_COMPONENTS X11Extras)
+        endif()
+        find_package(Qt5 COMPONENTS ${QT_COMPONENTS} DBus REQUIRED)
+    elseif(APPLE)
+        find_package(Qt5 COMPONENTS ${QT_COMPONENTS} REQUIRED HINTS
+                /usr/local/opt/qt@5/lib/cmake
+                /usr/local/Cellar/qt@5/*/lib/cmake
+                /opt/homebrew/opt/qt@5/lib/cmake
+                ENV PATH)
+        find_package(Qt5 COMPONENTS MacExtras HINTS
+                /usr/local/opt/qt@5/lib/cmake
+                /usr/local/Cellar/qt@5/*/lib/cmake
+                /opt/homebrew/opt/qt@5/lib/cmake
+                ENV PATH)
+    else()
+        find_package(Qt5 COMPONENTS ${QT_COMPONENTS} REQUIRED)
+    endif()
+    if(Qt5Core_VERSION VERSION_LESS "5.2.0")
+        message(FATAL_ERROR "Qt version 5.2.0 or higher is required")
+    endif()
+
+    # CBOR for Passkeys requires Qt 5.12
+    if(Qt5Core_VERSION VERSION_LESS "5.12.0")
+        message(STATUS "Qt version 5.12.0 or higher is required for Passkeys support")
+        set(WITH_XC_BROWSER_PASSKEYS OFF)
+    endif()
 endif()
 
 get_filename_component(Qt5_PREFIX ${Qt5_DIR}/../../.. REALPATH)
@@ -535,20 +567,38 @@ set(CMAKE_AUTOUIC ON)
 # Process .qrc files automatically
 set(CMAKE_AUTORCC ON)
 
-if(APPLE)
-    set(CMAKE_MACOSX_RPATH TRUE)
-    find_program(MACDEPLOYQT_EXE macdeployqt HINTS ${Qt5_PREFIX}/bin ${Qt5_PREFIX}/tools/qt5/bin ENV PATH)
-    if(NOT MACDEPLOYQT_EXE)
-        message(FATAL_ERROR "macdeployqt is required to build on macOS")
-    endif()
-    message(STATUS "Using macdeployqt: ${MACDEPLOYQT_EXE}")
-    set(MACDEPLOYQT_EXTRA_BINARIES "")
-elseif(WIN32)
-    find_program(WINDEPLOYQT_EXE windeployqt HINTS ${Qt5_PREFIX}/bin ${Qt5_PREFIX}/tools/qt5/bin ENV PATH)
-    if(NOT WINDEPLOYQT_EXE)
-        message(FATAL_ERROR "windeployqt is required to build on Windows")
+if(WITH_QT6)
+    if(APPLE)
+        set(CMAKE_MACOSX_RPATH TRUE)
+        find_program(MACDEPLOYQT_EXE macdeployqt HINTS ${Qt6_PREFIX}/bin ${Qt6_PREFIX}/tools/qt6/bin ENV PATH)
+        if(NOT MACDEPLOYQT_EXE)
+            message(FATAL_ERROR "macdeployqt is required to build on macOS")
+        endif()
+        message(STATUS "Using macdeployqt: ${MACDEPLOYQT_EXE}")
+        set(MACDEPLOYQT_EXTRA_BINARIES "")
+    elseif(WIN32)
+        find_program(WINDEPLOYQT_EXE windeployqt HINTS ${Qt6_PREFIX}/bin ${Qt6_PREFIX}/tools/qt6/bin ENV PATH)
+        if(NOT WINDEPLOYQT_EXE)
+            message(FATAL_ERROR "windeployqt is required to build on Windows")
+        endif()
+        message(STATUS "Using windeployqt: ${WINDEPLOYQT_EXE}")
+    endif()
+elseif(WITH_QT5)
+    if(APPLE)
+        set(CMAKE_MACOSX_RPATH TRUE)
+        find_program(MACDEPLOYQT_EXE macdeployqt HINTS ${Qt5_PREFIX}/bin ${Qt5_PREFIX}/tools/qt5/bin ENV PATH)
+        if(NOT MACDEPLOYQT_EXE)
+            message(FATAL_ERROR "macdeployqt is required to build on macOS")
+        endif()
+        message(STATUS "Using macdeployqt: ${MACDEPLOYQT_EXE}")
+        set(MACDEPLOYQT_EXTRA_BINARIES "")
+    elseif(WIN32)
+        find_program(WINDEPLOYQT_EXE windeployqt HINTS ${Qt5_PREFIX}/bin ${Qt5_PREFIX}/tools/qt5/bin ENV PATH)
+        if(NOT WINDEPLOYQT_EXE)
+            message(FATAL_ERROR "windeployqt is required to build on Windows")
+        endif()
+        message(STATUS "Using windeployqt: ${WINDEPLOYQT_EXE}")
     endif()
-    message(STATUS "Using windeployqt: ${WINDEPLOYQT_EXE}")
 endif()
 
 # Debian sets the build type to None for package builds.
diff '--color=auto' -urp keepassxc-2.7.10.orig/share/translations/CMakeLists.txt keepassxc-2.7.10/share/translations/CMakeLists.txt
--- keepassxc-2.7.10.orig/share/translations/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/share/translations/CMakeLists.txt	2025-07-14 11:37:09.862644810 -0700
@@ -20,7 +20,11 @@ list(REMOVE_ITEM TRANSLATION_FILES keepa
 list(REMOVE_ITEM TRANSLATION_FILES ${TRANSLATION_EN_ABS})
 message(STATUS "Including translations...\n")
 
-qt5_add_translation(QM_FILES ${TRANSLATION_FILES})
+if(WITH_QT6)
+    qt6_add_translation(QM_FILES ${TRANSLATION_FILES})
+elseif(WITH_QT5)
+    qt5_add_translation(QM_FILES ${TRANSLATION_FILES})
+endif()
 
 if(WIN32)
     file(GLOB QTBASE_TRANSLATIONS ${Qt5_PREFIX}/share/qt5/translations/qtbase_*.qm)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/CMakeLists.txt keepassxc-2.7.10/src/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/CMakeLists.txt	2025-07-14 11:37:09.862789562 -0700
@@ -206,10 +206,17 @@ if(UNIX AND NOT APPLE)
         list(APPEND keepassx_SOURCES
             gui/osutils/nixutils/X11Funcs.cpp)
     endif()
-    qt5_add_dbus_adaptor(keepassx_SOURCES
-            gui/org.keepassxc.KeePassXC.MainWindow.xml
-            gui/MainWindow.h
-            MainWindow)
+    if(WITH_QT6)
+        qt6_add_dbus_adaptor(keepassx_SOURCES
+                gui/org.keepassxc.KeePassXC.MainWindow.xml
+                gui/MainWindow.h
+                MainWindow)
+    elseif(WITH_QT5)
+        qt5_add_dbus_adaptor(keepassx_SOURCES
+                gui/org.keepassxc.KeePassXC.MainWindow.xml
+                gui/MainWindow.h
+                MainWindow)
+    endif()
 endif()
 if(WIN32)
     set(keepassx_SOURCES
@@ -341,20 +348,32 @@ configure_file(config-keepassx.h.cmake $
 configure_file(git-info.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/git-info.h)
 
 add_library(autotype STATIC ${autotype_SOURCES})
-target_link_libraries(autotype Qt5::Core Qt5::Widgets)
+if(WITH_QT6 AND WITH_QT5COMPAT)
+    add_definitions(-DUSE_QT5COMPAT)
+    find_package(Qt6 REQUIRED COMPONENTS Core5Compat)
+    target_link_libraries(autotype Qt6::Core Qt6::Core5Compat Qt6::Widgets)
+    set(QT_LIBS Qt6::Core Qt6::Core5Compat Qt6::Concurrent Qt6::Network Qt6::Widgets)
+elseif(WITH_QT6)
+    target_link_libraries(autotype Qt6::Core Qt6::Widgets)
+    set(QT_LIBS Qt6::Core Qt6::Concurrent Qt6::Network Qt6::Widgets)
+elseif(WITH_QT5)
+    target_link_libraries(autotype Qt5::Core Qt5::Widgets)
+    set(QT_LIBS)
+    set(QT_LIBS Qt5::Core Qt5::Concurrent Qt5::Network Qt5::Widgets)
+endif()
 
 add_library(keepassx_core STATIC ${keepassx_SOURCES})
 
+#set_source_files_properties(src/polkit_dbus.h PROPERTIES COMPILE_FLAGS "-include quickunlock/PolkitDbusTypes.h")
+set_source_files_properties(polkit_dbus.cpp PROPERTIES COMPILE_FLAGS "-include quickunlock/PolkitDbusTypes.h")
+
 set_target_properties(keepassx_core PROPERTIES COMPILE_DEFINITIONS KEEPASSX_BUILDING_CORE)
 target_link_libraries(keepassx_core
         autotype
         ${keepassxcbrowser_LIB}
         ${qrcode_LIB}
         ${fdosecrets_LIB}
-        Qt5::Core
-        Qt5::Concurrent
-        Qt5::Network
-        Qt5::Widgets
+        ${QT_LIBS}
         ${BOTAN_LIBRARIES}
         ${PCSC_LIBRARIES}
         ${ZXCVBN_LIBRARIES}
@@ -371,7 +390,12 @@ if(WITH_XC_KEESHARE)
   target_link_libraries(keepassx_core keeshare)
 endif()
 
-if(APPLE)
+if(APPLE AND WITH_QT6)
+    target_link_libraries(keepassx_core "-framework Foundation -framework AppKit -framework Carbon -framework Security -framework LocalAuthentication -framework ScreenCaptureKit")
+    if(Qt6MacExtras_FOUND)
+        target_link_libraries(keepassx_core Qt6::MacExtras)
+    endif()
+elseif(APPLE AND WITH_QT5)
     target_link_libraries(keepassx_core "-framework Foundation -framework AppKit -framework Carbon -framework Security -framework LocalAuthentication -framework ScreenCaptureKit")
     if(Qt5MacExtras_FOUND)
         target_link_libraries(keepassx_core Qt5::MacExtras)
@@ -380,7 +404,17 @@ endif()
 if(HAIKU)
     target_link_libraries(keepassx_core network)
 endif()
-if(UNIX AND NOT APPLE)
+if(UNIX AND NOT APPLE AND WITH_QT6)
+    find_package(Qt6 REQUIRED COMPONENTS SvgWidgets)
+    target_link_libraries(keepassx_core Qt6::DBus Qt6::SvgWidgets ${LIBUSB_LIBRARIES})
+    if(WITH_XC_X11)
+        pkg_check_modules(XCB REQUIRED xcb)
+        pkg_check_modules(XLIB REQUIRED x11)
+        include_directories(${XCB_INCLUDE_DIRS} ${XLIB_INCLUDE_DIRS})
+        target_link_libraries(keepassx_core Qt6::Gui X11 ${XCB_LIBRARIES} ${XLIB_LIBRARIES})
+    endif()
+    include_directories(${Qt6Gui_PRIVATE_INCLUDE_DIRS})
+elseif(UNIX AND NOT APPLE AND WITH_QT5)
     target_link_libraries(keepassx_core Qt5::DBus ${LIBUSB_LIBRARIES})
     if(WITH_XC_X11)
         target_link_libraries(keepassx_core Qt5::X11Extras X11)
@@ -539,7 +573,11 @@ if(WIN32)
     endif()
 
     # install CA cert chains
-    find_file(SSL_CA_BUNDLE ca-bundle.crt PATHS "${Qt5_PREFIX}/ssl/certs")
+    if(WITH_QT6)
+        find_file(SSL_CA_BUNDLE ca-bundle.crt PATHS "${Qt6_PREFIX}/ssl/certs")
+    elseif(WITH_QT5)
+        find_file(SSL_CA_BUNDLE ca-bundle.crt PATHS "${Qt5_PREFIX}/ssl/certs")
+    endif()
     if(SSL_CA_BUNDLE)
         install(FILES ${SSL_CA_BUNDLE} DESTINATION "ssl/certs")
     else()
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/AutoType.cpp keepassxc-2.7.10/src/autotype/AutoType.cpp
--- keepassxc-2.7.10.orig/src/autotype/AutoType.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/AutoType.cpp	2025-07-14 11:37:09.863019254 -0700
@@ -452,7 +452,12 @@ void AutoType::performGlobalAutoType(con
                 if (hideExpired && entry->isExpired()) {
                     continue;
                 }
+//#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+//              auto autoTypeSequences = entry->autoTypeSequences(m_windowTitleForGlobal);
+//              auto sequences = QSet<QString>(autoTypeSequences.begin(), autoTypeSequences.end());
+//#else
                 const QSet<QString> sequences = Tools::asSet(entry->autoTypeSequences(m_windowTitleForGlobal));
+//#endif
                 for (const auto& sequence : sequences) {
                     matchList << AutoTypeMatch(entry, sequence);
                 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/AutoTypeMatch.h keepassxc-2.7.10/src/autotype/AutoTypeMatch.h
--- keepassxc-2.7.10.orig/src/autotype/AutoTypeMatch.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/AutoTypeMatch.h	2025-07-14 11:37:09.863172573 -0700
@@ -21,6 +21,8 @@
 #include <QPair>
 #include <QPointer>
 
+#include "core/Entry.h"
+
 class Entry;
 typedef QPair<QPointer<Entry>, QString> AutoTypeMatch;
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/AutoTypeMatchView.cpp keepassxc-2.7.10/src/autotype/AutoTypeMatchView.cpp
--- keepassxc-2.7.10.orig/src/autotype/AutoTypeMatchView.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/AutoTypeMatchView.cpp	2025-07-14 11:37:09.863270909 -0700
@@ -38,9 +38,15 @@ public:
         auto index1 = sourceModel()->index(sourceRow, 1, sourceParent);
         auto index2 = sourceModel()->index(sourceRow, 2, sourceParent);
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        return sourceModel()->data(index0).toString().contains(filterRegularExpression())
+               || sourceModel()->data(index1).toString().contains(filterRegularExpression())
+               || sourceModel()->data(index2).toString().contains(filterRegularExpression());
+#else
         return sourceModel()->data(index0).toString().contains(filterRegExp())
                || sourceModel()->data(index1).toString().contains(filterRegExp())
                || sourceModel()->data(index2).toString().contains(filterRegExp());
+#endif
     }
 };
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/AutoTypeSelectDialog.cpp keepassxc-2.7.10/src/autotype/AutoTypeSelectDialog.cpp
--- keepassxc-2.7.10.orig/src/autotype/AutoTypeSelectDialog.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/AutoTypeSelectDialog.cpp	2025-07-14 11:37:09.863402347 -0700
@@ -77,7 +77,11 @@ AutoTypeSelectDialog::AutoTypeSelectDial
     connect(m_ui->search, SIGNAL(returnPressed()), SLOT(activateCurrentMatch()));
     connect(&m_searchTimer, SIGNAL(timeout()), SLOT(performSearch()));
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_ui->searchCheckBox->setShortcut(Qt::CTRL | Qt::Key_F);
+#else
     m_ui->searchCheckBox->setShortcut(Qt::CTRL + Qt::Key_F);
+#endif
     connect(m_ui->searchCheckBox, &QCheckBox::toggled, this, [this](bool checked) {
         setDelayedSearch(checked);
         performSearch();
@@ -306,6 +310,41 @@ void AutoTypeSelectDialog::buildActionMe
     m_actionMenu->addAction(copyPasswordAction);
     m_actionMenu->addAction(copyTotpAction);
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    typeUsernameAction->setShortcut(Qt::CTRL | Qt::Key_1);
+    typeUsernameAction->setProperty(MENU_FIELD_PROP_NAME, MENU_FIELD::USERNAME);
+    connect(typeUsernameAction, &QAction::triggered, this, [&] {
+        auto match = m_ui->view->currentMatch();
+        match.second = "{USERNAME}";
+        submitAutoTypeMatch(match);
+    });
+
+    typePasswordAction->setShortcut(Qt::CTRL | Qt::Key_2);
+    typePasswordAction->setProperty(MENU_FIELD_PROP_NAME, MENU_FIELD::PASSWORD);
+    connect(typePasswordAction, &QAction::triggered, this, [&] {
+        auto match = m_ui->view->currentMatch();
+        match.second = "{PASSWORD}";
+        submitAutoTypeMatch(match);
+    });
+
+    typeTotpAction->setShortcut(Qt::CTRL | Qt::Key_3);
+    typeTotpAction->setProperty(MENU_FIELD_PROP_NAME, MENU_FIELD::TOTP);
+    connect(typeTotpAction, &QAction::triggered, this, [&] {
+        auto match = m_ui->view->currentMatch();
+        match.second = "{TOTP}";
+        submitAutoTypeMatch(match);
+    });
+
+#  ifdef Q_OS_WIN
+    auto typeVirtualAction = new QAction(icons()->icon("auto-type"), tr("Use Virtual Keyboard"), nullptr);
+    m_actionMenu->insertAction(copyUsernameAction, typeVirtualAction);
+    typeVirtualAction->setShortcut(Qt::CTRL | Qt::Key_4);
+    connect(typeVirtualAction, &QAction::triggered, this, [&] {
+        m_virtualMode = true;
+        activateCurrentMatch();
+    });
+#  endif
+#else // QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
     typeUsernameAction->setShortcut(Qt::CTRL + Qt::Key_1);
     typeUsernameAction->setProperty(MENU_FIELD_PROP_NAME, MENU_FIELD::USERNAME);
     connect(typeUsernameAction, &QAction::triggered, this, [&] {
@@ -338,9 +377,14 @@ void AutoTypeSelectDialog::buildActionMe
         m_virtualMode = true;
         activateCurrentMatch();
     });
+#  endif
 #endif
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    copyUsernameAction->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_1);
+#else
     copyUsernameAction->setShortcut(Qt::CTRL + Qt::SHIFT + Qt::Key_1);
+#endif
     copyUsernameAction->setProperty(MENU_FIELD_PROP_NAME, MENU_FIELD::USERNAME);
     connect(copyUsernameAction, &QAction::triggered, this, [&] {
         auto entry = m_ui->view->currentMatch().first;
@@ -350,7 +394,11 @@ void AutoTypeSelectDialog::buildActionMe
         }
     });
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    copyPasswordAction->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_2);
+#else
     copyPasswordAction->setShortcut(Qt::CTRL + Qt::SHIFT + Qt::Key_2);
+#endif
     copyPasswordAction->setProperty(MENU_FIELD_PROP_NAME, MENU_FIELD::PASSWORD);
     connect(copyPasswordAction, &QAction::triggered, this, [&] {
         auto entry = m_ui->view->currentMatch().first;
@@ -360,7 +408,11 @@ void AutoTypeSelectDialog::buildActionMe
         }
     });
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    copyTotpAction->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_3);
+#else
     copyTotpAction->setShortcut(Qt::CTRL + Qt::SHIFT + Qt::Key_3);
+#endif
     copyTotpAction->setProperty(MENU_FIELD_PROP_NAME, MENU_FIELD::TOTP);
     connect(copyTotpAction, &QAction::triggered, this, [&] {
         auto entry = m_ui->view->currentMatch().first;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/CMakeLists.txt keepassxc-2.7.10/src/autotype/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/autotype/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/CMakeLists.txt	2025-07-14 11:37:09.863546682 -0700
@@ -1,11 +1,20 @@
 if(WITH_XC_AUTOTYPE)
     if(UNIX AND NOT APPLE AND NOT HAIKU)
         find_package(X11 REQUIRED COMPONENTS Xi XTest)
-        find_package(Qt5X11Extras 5.2 REQUIRED)
-        if(PRINT_SUMMARY)
-            add_feature_info(libXi X11_Xi_FOUND "The X11 Xi Protocol library is required for auto-type")
-            add_feature_info(libXtst X11_XTest_FOUND "The X11 XTEST Protocol library is required for auto-type")
-            add_feature_info(Qt5X11Extras Qt5X11Extras_FOUND "The Qt5X11Extras library is required for auto-type")
+        if(WITH_QT6)
+            #find_package(Qt6X11Extras 6.1 REQUIRED)
+            if(PRINT_SUMMARY)
+                add_feature_info(libXi X11_Xi_FOUND "The X11 Xi Protocol library is required for auto-type")
+                add_feature_info(libXtst X11_XTest_FOUND "The X11 XTEST Protocol library is required for auto-type")
+                #add_feature_info(Qt6X11Extras Qt6X11Extras_FOUND "The Qt6X11Extras library is required for auto-type")
+            endif()
+        elseif(WITH_QT5)
+            find_package(Qt5X11Extras 5.2 REQUIRED)
+            if(PRINT_SUMMARY)
+                add_feature_info(libXi X11_Xi_FOUND "The X11 Xi Protocol library is required for auto-type")
+                add_feature_info(libXtst X11_XTest_FOUND "The X11 XTEST Protocol library is required for auto-type")
+                add_feature_info(Qt5X11Extras Qt5X11Extras_FOUND "The Qt5X11Extras library is required for auto-type")
+            endif()
         endif()
 
         add_subdirectory(xcb)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/PickcharsDialog.cpp keepassxc-2.7.10/src/autotype/PickcharsDialog.cpp
--- keepassxc-2.7.10.orig/src/autotype/PickcharsDialog.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/PickcharsDialog.cpp	2025-07-14 11:37:09.863644492 -0700
@@ -81,7 +81,11 @@ PickcharsDialog::PickcharsDialog(const Q
         m_ui->selectedChars->setText(text.left(text.size() - 1));
     });
     // Submit the form
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    shortcut = new QShortcut(Qt::CTRL | Qt::Key_S, this);
+#else
     shortcut = new QShortcut(Qt::CTRL + Qt::Key_S, this);
+#endif
     connect(shortcut, &QShortcut::activated, this, [this] { accept(); });
 }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/ShortcutWidget.cpp keepassxc-2.7.10/src/autotype/ShortcutWidget.cpp
--- keepassxc-2.7.10.orig/src/autotype/ShortcutWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/ShortcutWidget.cpp	2025-07-14 11:37:09.863750148 -0700
@@ -25,7 +25,11 @@
 ShortcutWidget::ShortcutWidget(QWidget* parent)
     : QLineEdit(parent)
     , m_key(static_cast<Qt::Key>(0))
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    , m_modifiers(Qt::NoModifier)
+#else
     , m_modifiers(nullptr)
+#endif
     , m_locked(false)
 {
     setReadOnly(true);
@@ -61,7 +65,11 @@ void ShortcutWidget::setShortcut(Qt::Key
 void ShortcutWidget::resetShortcut()
 {
     m_key = static_cast<Qt::Key>(0);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_modifiers = Qt::NoModifier;
+#else
     m_modifiers = nullptr;
+#endif
     m_locked = false;
     autoType()->unregisterGlobalShortcut();
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/mac/CMakeLists.txt keepassxc-2.7.10/src/autotype/mac/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/autotype/mac/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/mac/CMakeLists.txt	2025-07-14 11:37:09.863840194 -0700
@@ -2,7 +2,11 @@ set(autotype_mac_SOURCES AutoTypeMac.cpp
 
 add_library(keepassxc-autotype-cocoa MODULE ${autotype_mac_SOURCES})
 set_target_properties(keepassxc-autotype-cocoa PROPERTIES LINK_FLAGS "-framework Foundation -framework AppKit -framework Carbon -framework ScreenCaptureKit")
-target_link_libraries(keepassxc-autotype-cocoa ${PROGNAME} Qt5::Core Qt5::Widgets)
+if(WITH_QT6)
+    target_link_libraries(keepassxc-autotype-cocoa ${PROGNAME} Qt6::Core Qt6::Widgets)
+elseif(WITH_QT5)
+    target_link_libraries(keepassxc-autotype-cocoa ${PROGNAME} Qt5::Core Qt5::Widgets)
+endif()
 
 install(TARGETS keepassxc-autotype-cocoa
         LIBRARY DESTINATION ${PLUGIN_INSTALL_DIR} COMPONENT Runtime)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/test/CMakeLists.txt keepassxc-2.7.10/src/autotype/test/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/autotype/test/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/test/CMakeLists.txt	2025-07-14 11:37:09.863926438 -0700
@@ -1,4 +1,8 @@
 set(autotype_test_SOURCES AutoTypeTest.cpp)
 
 add_library(keepassxc-autotype-test MODULE ${autotype_test_SOURCES})
-target_link_libraries(keepassxc-autotype-test keepassx_core ${autotype_LIB} Qt5::Core Qt5::Widgets)
+if(WITH_QT6)
+    target_link_libraries(keepassxc-autotype-test keepassx_core ${autotype_LIB} Qt6::Core Qt6::Widgets)
+elseif(WITH_QT5)
+    target_link_libraries(keepassxc-autotype-test keepassx_core ${autotype_LIB} Qt5::Core Qt5::Widgets)
+endif()
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/windows/CMakeLists.txt keepassxc-2.7.10/src/autotype/windows/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/autotype/windows/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/windows/CMakeLists.txt	2025-07-14 11:37:09.864013036 -0700
@@ -1,7 +1,11 @@
 set(autotype_win_SOURCES AutoTypeWindows.cpp)
 
 add_library(keepassxc-autotype-windows MODULE ${autotype_win_SOURCES})
-target_link_libraries(keepassxc-autotype-windows keepassx_core ${autotype_LIB} Qt5::Core Qt5::Widgets)
+if(WITH_QT6)
+    target_link_libraries(keepassxc-autotype-windows keepassx_core ${autotype_LIB} Qt6::Core Qt6::Widgets)
+elseif(WITH_QT5)
+    target_link_libraries(keepassxc-autotype-windows keepassx_core ${autotype_LIB} Qt5::Core Qt5::Widgets)
+endif()
 install(TARGETS keepassxc-autotype-windows
         BUNDLE DESTINATION . COMPONENT Runtime
         LIBRARY DESTINATION ${PLUGIN_INSTALL_DIR} COMPONENT Runtime)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/xcb/AutoTypeXCB.cpp keepassxc-2.7.10/src/autotype/xcb/AutoTypeXCB.cpp
--- keepassxc-2.7.10.orig/src/autotype/xcb/AutoTypeXCB.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/xcb/AutoTypeXCB.cpp	2025-07-14 11:37:09.864141537 -0700
@@ -21,7 +21,12 @@
 #include "core/Tools.h"
 #include "gui/osutils/nixutils/X11Funcs.h"
 
-#include <QX11Info>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) //xcb xlib
+//#  include <QGuiApplication>
+#  include <QtGui/private/qtx11extras_p.h> // Short term solution
+#else //xkb
+#  include <QX11Info>
+#endif
 #include <X11/XKBlib.h>
 #include <X11/Xutil.h>
 #include <X11/extensions/XTest.h>
@@ -38,8 +43,17 @@ static const QPair<KeySym, KeySym> deadM
 AutoTypePlatformX11::AutoTypePlatformX11()
 {
     // Qt handles XCB slightly differently so we open our own connection
+#  if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && 0
+    // Broken during test
+    auto *x11Application = qGuiApp->nativeInterface<QNativeInterface::QX11Application>(); // Returns nullptr during test
+    m_dpy = x11Application->display();
+    xcb_connection_t* connection = x11Application->connection();
+    xcb_screen_t* screen = xcb_setup_roots_iterator(xcb_get_setup(connection)).data;
+    m_rootWindow = screen->root;
+#  else
     m_dpy = XOpenDisplay(XDisplayString(QX11Info::display()));
     m_rootWindow = QX11Info::appRootWindow();
+#endif
 
     m_atomWmState = XInternAtom(m_dpy, "WM_STATE", True);
     m_atomWmName = XInternAtom(m_dpy, "WM_NAME", True);
@@ -625,7 +639,11 @@ bool AutoTypePlatformX11::raiseWindow(WI
     event.xclient.message_type = m_atomNetActiveWindow;
     event.xclient.format = 32;
     event.xclient.data.l[0] = 1; // FromApplication
+#  if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     event.xclient.data.l[1] = QX11Info::appUserTime();
+#  else
+    event.xclient.data.l[1] = QX11Info::appUserTime();
+#endif
     QWidget* activeWindow = QApplication::activeWindow();
     if (activeWindow) {
         event.xclient.data.l[2] = activeWindow->internalWinId();
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/autotype/xcb/CMakeLists.txt keepassxc-2.7.10/src/autotype/xcb/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/autotype/xcb/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/autotype/xcb/CMakeLists.txt	2025-07-14 11:37:09.864330095 -0700
@@ -3,7 +3,14 @@ include_directories(SYSTEM ${X11_X11_INC
 set(autotype_XCB_SOURCES AutoTypeXCB.cpp)
 
 add_library(keepassxc-autotype-xcb MODULE ${autotype_XCB_SOURCES})
-target_link_libraries(keepassxc-autotype-xcb keepassx_core Qt5::Core Qt5::Widgets Qt5::X11Extras ${X11_X11_LIB} ${X11_Xi_LIB} ${X11_XTest_LIB})
+if(WITH_QT6)
+    pkg_check_modules(XCB REQUIRED xcb)
+    pkg_check_modules(XLIB REQUIRED x11)
+    include_directories(${XCB_INCLUDE_DIRS} ${XLIB_INCLUDE_DIRS} ${Qt6Gui_PRIVATE_INCLUDE_DIRS})
+    target_link_libraries(keepassxc-autotype-xcb keepassx_core Qt6::Core Qt6::Widgets ${X11_X11_LIB} ${X11_Xi_LIB} ${X11_XTest_LIB} ${XCB_LIBRARIES} ${XLIB_LIBRARIES})
+elseif(WITH_QT5)
+    target_link_libraries(keepassxc-autotype-xcb keepassx_core Qt5::Core Qt5::Widgets Qt5::X11Extras ${X11_X11_LIB} ${X11_Xi_LIB} ${X11_XTest_LIB})
+endif()
 install(TARGETS keepassxc-autotype-xcb
         BUNDLE DESTINATION . COMPONENT Runtime
         LIBRARY DESTINATION ${PLUGIN_INSTALL_DIR} COMPONENT Runtime)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/browser/BrowserEntryConfig.cpp keepassxc-2.7.10/src/browser/BrowserEntryConfig.cpp
--- keepassxc-2.7.10.orig/src/browser/BrowserEntryConfig.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/browser/BrowserEntryConfig.cpp	2025-07-14 11:37:09.864437008 -0700
@@ -34,22 +34,38 @@ BrowserEntryConfig::BrowserEntryConfig(Q
 
 QStringList BrowserEntryConfig::allowedHosts() const
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    return QStringList(QList<QString>(m_allowedHosts.begin(), m_allowedHosts.end()));
+#else
     return m_allowedHosts.toList();
+#endif
 }
 
 void BrowserEntryConfig::setAllowedHosts(const QStringList& allowedHosts)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_allowedHosts = QSet<QString>(allowedHosts.begin(), allowedHosts.end());
+#else
     m_allowedHosts = allowedHosts.toSet();
+#endif
 }
 
 QStringList BrowserEntryConfig::deniedHosts() const
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    return QStringList(QList<QString>(m_deniedHosts.begin(), m_deniedHosts.end()));
+#else
     return m_deniedHosts.toList();
+#endif
 }
 
 void BrowserEntryConfig::setDeniedHosts(const QStringList& deniedHosts)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_deniedHosts = QSet<QString>(deniedHosts.begin(), deniedHosts.end());
+#else
     m_deniedHosts = deniedHosts.toSet();
+#endif
 }
 
 bool BrowserEntryConfig::isAllowed(const QString& host) const
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/browser/BrowserService.cpp keepassxc-2.7.10/src/browser/BrowserService.cpp
--- keepassxc-2.7.10.orig/src/browser/BrowserService.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/browser/BrowserService.cpp	2025-07-14 11:37:09.864636284 -0700
@@ -1506,7 +1506,7 @@ bool BrowserService::isPasskeyCredential
 {
     QStringList allIds;
     for (const auto& cred : excludeCredentials) {
-        allIds << cred["id"].toString();
+        allIds << cred.toObject()["id"].toString();
     }
 
     const auto passkeyEntries = getPasskeyEntries(rpId, keyList);
@@ -1603,6 +1603,7 @@ bool BrowserService::handleURL(const QSt
     }
 
     // Match the subdomains with the limited wildcard
+    // Support https://.r2.r1.r0
     if (siteQUrl.host().endsWith(entryQUrl.host())) {
         return true;
     }
@@ -1910,7 +1911,7 @@ void BrowserService::processClientMessag
         m_browserClients.insert(clientID, QSharedPointer<BrowserAction>::create());
     }
 
-    auto& action = m_browserClients.value(clientID);
+    QSharedPointer<BrowserAction> action = m_browserClients.value(clientID);
     auto response = action->processClientMessage(socket, message);
     m_browserHost->sendClientMessage(socket, response);
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/browser/CMakeLists.txt keepassxc-2.7.10/src/browser/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/browser/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/browser/CMakeLists.txt	2025-07-14 11:37:09.864895840 -0700
@@ -42,5 +42,9 @@ if(WITH_XC_BROWSER)
     endif()
 
     add_library(keepassxcbrowser STATIC ${keepassxcbrowser_SOURCES})
-    target_link_libraries(keepassxcbrowser Qt5::Core Qt5::Concurrent Qt5::Widgets Qt5::Network ${BOTAN_LIBRARIES})
+    if(WITH_QT6)
+        target_link_libraries(keepassxcbrowser Qt6::Core Qt6::Concurrent Qt6::Widgets Qt6::Network ${BOTAN_LIBRARIES})
+    elseif(WITH_QT5)
+        target_link_libraries(keepassxcbrowser Qt5::Core Qt5::Concurrent Qt5::Widgets Qt5::Network ${BOTAN_LIBRARIES})
+    endif()
 endif()
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/browser/NativeMessageInstaller.cpp keepassxc-2.7.10/src/browser/NativeMessageInstaller.cpp
--- keepassxc-2.7.10.orig/src/browser/NativeMessageInstaller.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/browser/NativeMessageInstaller.cpp	2025-07-14 11:37:09.865008048 -0700
@@ -372,7 +372,11 @@ bool NativeMessageInstaller::createNativ
     QDir().mkpath(QFileInfo(path).absolutePath());
 
     QFile scriptFile(path);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!scriptFile.open(QIODeviceBase::WriteOnly)) {
+#else
     if (!scriptFile.open(QIODevice::WriteOnly)) {
+#endif
         qWarning() << "Browser Plugin: Failed to open native message file for writing at " << scriptFile.fileName();
         qWarning() << scriptFile.errorString();
         return false;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/browser/PasskeyUtils.cpp keepassxc-2.7.10/src/browser/PasskeyUtils.cpp
--- keepassxc-2.7.10.orig/src/browser/PasskeyUtils.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/browser/PasskeyUtils.cpp	2025-07-14 11:37:09.865152655 -0700
@@ -158,18 +158,18 @@ QJsonArray PasskeyUtils::parseCredential
         }));
     } else {
         for (const auto current : credentialTypes) {
-            if (current["type"] != BrowserPasskeys::PUBLIC_KEY || current["alg"].isUndefined()) {
+            if (current.toObject()["type"] != BrowserPasskeys::PUBLIC_KEY || current.toObject()["alg"].isUndefined()) {
                 continue;
             }
 
-            const auto currentAlg = current["alg"].toInt();
+            const auto currentAlg = current.toObject()["alg"].toInt();
             if (currentAlg != WebAuthnAlgorithms::ES256 && currentAlg != WebAuthnAlgorithms::RS256
                 && currentAlg != WebAuthnAlgorithms::EDDSA) {
                 continue;
             }
 
             credTypesAndPubKeyAlgs.push_back(QJsonObject({
-                {"type", current["type"]},
+                {"type", current.toObject()["type"]},
                 {"alg", currentAlg},
             }));
         }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Add.cpp keepassxc-2.7.10/src/cli/Add.cpp
--- keepassxc-2.7.10.orig/src/cli/Add.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Add.cpp	2025-07-14 11:37:09.867179516 -0700
@@ -74,7 +74,7 @@ int Add::executeWithDatabase(QSharedPoin
 
     // Cannot use those 2 options at the same time!
     if (parser->isSet(Add::GenerateOption) && parser->isSet(Add::PasswordPromptOption)) {
-        err << QObject::tr("Cannot generate a password and prompt at the same time.") << endl;
+        err << QObject::tr("Cannot generate a password and prompt at the same time.") << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -90,7 +90,7 @@ int Add::executeWithDatabase(QSharedPoin
 
     Entry* entry = database->rootGroup()->addEntryWithPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Could not create entry with path %1.").arg(entryPath) << endl;
+        err << QObject::tr("Could not create entry with path %1.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -108,7 +108,7 @@ int Add::executeWithDatabase(QSharedPoin
 
     if (parser->isSet(Add::PasswordPromptOption)) {
         if (!parser->isSet(Command::QuietOption)) {
-            out << QObject::tr("Enter password for new entry: ") << flush;
+            out << QObject::tr("Enter password for new entry: ") << Qt::flush;
         }
         QString password = Utils::getPassword(parser->isSet(Command::QuietOption));
         entry->setPassword(password);
@@ -119,12 +119,12 @@ int Add::executeWithDatabase(QSharedPoin
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << endl;
+        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (!parser->isSet(Command::QuietOption)) {
-        out << QObject::tr("Successfully added entry %1.").arg(entry->title()) << endl;
+        out << QObject::tr("Successfully added entry %1.").arg(entry->title()) << Qt::endl;
     }
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/AddGroup.cpp keepassxc-2.7.10/src/cli/AddGroup.cpp
--- keepassxc-2.7.10.orig/src/cli/AddGroup.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/AddGroup.cpp	2025-07-14 11:37:09.867344411 -0700
@@ -47,13 +47,13 @@ int AddGroup::executeWithDatabase(QShare
 
     Group* group = database->rootGroup()->findGroupByPath(groupPath);
     if (group) {
-        err << QObject::tr("Group %1 already exists!").arg(groupPath) << endl;
+        err << QObject::tr("Group %1 already exists!").arg(groupPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     Group* parentGroup = database->rootGroup()->findGroupByPath(parentGroupPath);
     if (!parentGroup) {
-        err << QObject::tr("Group %1 not found.").arg(parentGroupPath) << endl;
+        err << QObject::tr("Group %1 not found.").arg(parentGroupPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -64,12 +64,12 @@ int AddGroup::executeWithDatabase(QShare
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << endl;
+        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (!parser->isSet(Command::QuietOption)) {
-        out << QObject::tr("Successfully added group %1.").arg(groupName) << endl;
+        out << QObject::tr("Successfully added group %1.").arg(groupName) << Qt::endl;
     }
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Analyze.cpp keepassxc-2.7.10/src/cli/Analyze.cpp
--- keepassxc-2.7.10.orig/src/cli/Analyze.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Analyze.cpp	2025-07-14 11:37:09.867474480 -0700
@@ -60,23 +60,23 @@ int Analyze::executeWithDatabase(QShared
 
     auto okon = parser->value(Analyze::OkonOption);
     if (!okon.isEmpty()) {
-        out << QObject::tr("Evaluating database entries using okon…") << endl;
+        out << QObject::tr("Evaluating database entries using okon…") << Qt::endl;
 
         if (!HibpOffline::okonReport(database, okon, hibpDatabase, findings, &error)) {
-            err << error << endl;
+            err << error << Qt::endl;
             return EXIT_FAILURE;
         }
     } else {
         QFile hibpFile(hibpDatabase);
         if (!hibpFile.open(QFile::ReadOnly)) {
-            err << QObject::tr("Failed to open HIBP file %1: %2").arg(hibpDatabase).arg(hibpFile.errorString()) << endl;
+            err << QObject::tr("Failed to open HIBP file %1: %2").arg(hibpDatabase).arg(hibpFile.errorString()) << Qt::endl;
             return EXIT_FAILURE;
         }
 
-        out << QObject::tr("Evaluating database entries against HIBP file, this will take a while…") << endl;
+        out << QObject::tr("Evaluating database entries against HIBP file, this will take a while…") << Qt::endl;
 
         if (!HibpOffline::report(database, hibpFile, findings, &error)) {
-            err << error << endl;
+            err << error << Qt::endl;
             return EXIT_FAILURE;
         }
     }
@@ -91,9 +91,9 @@ int Analyze::executeWithDatabase(QShared
         }
 
         if (count > 0) {
-            out << QObject::tr("Password for '%1' has been leaked %2 time(s)!", "", count).arg(path).arg(count) << endl;
+            out << QObject::tr("Password for '%1' has been leaked %2 time(s)!", "", count).arg(path).arg(count) << Qt::endl;
         } else {
-            out << QObject::tr("Password for '%1' has been leaked!").arg(path) << endl;
+            out << QObject::tr("Password for '%1' has been leaked!").arg(path) << Qt::endl;
         }
     }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/AttachmentExport.cpp keepassxc-2.7.10/src/cli/AttachmentExport.cpp
--- keepassxc-2.7.10.orig/src/cli/AttachmentExport.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/AttachmentExport.cpp	2025-07-14 11:37:09.867717390 -0700
@@ -49,7 +49,7 @@ int AttachmentExport::executeWithDatabas
 
     auto entry = database->rootGroup()->findEntryByPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << endl;
+        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -57,32 +57,36 @@ int AttachmentExport::executeWithDatabas
 
     auto attachments = entry->attachments();
     if (!attachments->hasKey(attachmentName)) {
-        err << QObject::tr("Could not find attachment with name %1.").arg(attachmentName) << endl;
+        err << QObject::tr("Could not find attachment with name %1.").arg(attachmentName) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (parser->isSet(AttachmentExport::StdoutOption)) {
         // Output to STDOUT even in quiet mode
-        Utils::STDOUT << attachments->value(attachmentName) << flush;
+        Utils::STDOUT << attachments->value(attachmentName) << Qt::flush;
         return EXIT_SUCCESS;
     }
 
     if (args.size() < 4) {
-        err << QObject::tr("No export target given. Please use '--stdout' or specify an 'export-file'.") << endl;
+        err << QObject::tr("No export target given. Please use '--stdout' or specify an 'export-file'.") << Qt::endl;
         return EXIT_FAILURE;
     }
 
     auto exportFileName = args.at(3);
     QFile exportFile(exportFileName);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!exportFile.open(QIODeviceBase::WriteOnly)) {
+#else
     if (!exportFile.open(QIODevice::WriteOnly)) {
-        err << QObject::tr("Could not open output file %1.").arg(exportFileName) << endl;
+#endif
+        err << QObject::tr("Could not open output file %1.").arg(exportFileName) << Qt::endl;
         return EXIT_FAILURE;
     }
     exportFile.write(attachments->value(attachmentName));
 
     out << QObject::tr("Successfully exported attachment %1 of entry %2 to %3.")
                .arg(attachmentName, entryPath, exportFileName)
-        << endl;
+        << Qt::endl;
 
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/AttachmentImport.cpp keepassxc-2.7.10/src/cli/AttachmentImport.cpp
--- keepassxc-2.7.10.orig/src/cli/AttachmentImport.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/AttachmentImport.cpp	2025-07-14 11:37:09.867837305 -0700
@@ -48,7 +48,7 @@ int AttachmentImport::executeWithDatabas
 
     auto entry = database->rootGroup()->findEntryByPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << endl;
+        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -56,15 +56,19 @@ int AttachmentImport::executeWithDatabas
 
     auto attachments = entry->attachments();
     if (attachments->hasKey(attachmentName) && !parser->isSet(AttachmentImport::ForceOption)) {
-        err << QObject::tr("Attachment %1 already exists for entry %2.").arg(attachmentName, entryPath) << endl;
+        err << QObject::tr("Attachment %1 already exists for entry %2.").arg(attachmentName, entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     auto importFileName = args.at(3);
 
     QFile importFile(importFileName);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!importFile.open(QIODeviceBase::ReadOnly)) {
+#else
     if (!importFile.open(QIODevice::ReadOnly)) {
-        err << QObject::tr("Could not open attachment file %1.").arg(importFileName) << endl;
+#endif
+        err << QObject::tr("Could not open attachment file %1.").arg(importFileName) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -74,12 +78,12 @@ int AttachmentImport::executeWithDatabas
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << endl;
+        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     out << QObject::tr("Successfully imported attachment %1 as %2 to entry %3.")
                .arg(importFileName, attachmentName, entryPath)
-        << endl;
+        << Qt::endl;
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/AttachmentRemove.cpp keepassxc-2.7.10/src/cli/AttachmentRemove.cpp
--- keepassxc-2.7.10.orig/src/cli/AttachmentRemove.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/AttachmentRemove.cpp	2025-07-14 11:37:09.867944946 -0700
@@ -41,7 +41,7 @@ int AttachmentRemove::executeWithDatabas
 
     auto entry = database->rootGroup()->findEntryByPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << endl;
+        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -49,7 +49,7 @@ int AttachmentRemove::executeWithDatabas
 
     auto attachments = entry->attachments();
     if (!attachments->hasKey(attachmentName)) {
-        err << QObject::tr("Could not find attachment with name %1.").arg(attachmentName) << endl;
+        err << QObject::tr("Could not find attachment with name %1.").arg(attachmentName) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -59,10 +59,10 @@ int AttachmentRemove::executeWithDatabas
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << endl;
+        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
-    out << QObject::tr("Successfully removed attachment %1 from entry %2.").arg(attachmentName, entryPath) << endl;
+    out << QObject::tr("Successfully removed attachment %1 from entry %2.").arg(attachmentName, entryPath) << Qt::endl;
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/CMakeLists.txt keepassxc-2.7.10/src/cli/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/cli/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/CMakeLists.txt	2025-07-14 11:37:09.868044851 -0700
@@ -45,7 +45,15 @@ set(cli_SOURCES
         Show.cpp)
 
 add_library(cli STATIC ${cli_SOURCES})
-target_link_libraries(cli ${ZXCVBN_LIBRARIES} Qt5::Core)
+if(WITH_QT6 AND WITH_QT5COMPAT)
+    add_definitions(-DUSE_QT5COMPAT)
+    find_package(Qt6 REQUIRED COMPONENTS Core5Compat)
+    target_link_libraries(cli ${ZXCVBN_LIBRARIES} Qt6::Core Qt6::Core5Compat)
+elseif(WITH_QT6)
+    target_link_libraries(cli ${ZXCVBN_LIBRARIES} Qt6::Core)
+elseif(WITH_QT5)
+    target_link_libraries(cli ${ZXCVBN_LIBRARIES} Qt5::Core)
+endif()
 
 find_package(Readline)
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Clip.cpp keepassxc-2.7.10/src/cli/Clip.cpp
--- keepassxc-2.7.10.orig/src/cli/Clip.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Clip.cpp	2025-07-14 11:37:09.868164882 -0700
@@ -69,7 +69,7 @@ int Clip::executeWithDatabase(QSharedPoi
         bool ok;
         timeout = args.at(2).toInt(&ok);
         if (!ok) {
-            err << QObject::tr("Invalid timeout value %1.").arg(args.at(2)) << endl;
+            err << QObject::tr("Invalid timeout value %1.").arg(args.at(2)) << Qt::endl;
             return EXIT_FAILURE;
         }
     }
@@ -80,14 +80,14 @@ int Clip::executeWithDatabase(QSharedPoi
         const auto& searchTerm = args.at(1);
         const auto results = searcher.search(QString("title:%1").arg(searchTerm), database->rootGroup(), true);
         if (results.count() > 1) {
-            err << QObject::tr("Multiple entries matching:") << endl;
+            err << QObject::tr("Multiple entries matching:") << Qt::endl;
             for (const Entry* result : results) {
-                err << result->path().prepend('/') << endl;
+                err << result->path().prepend('/') << Qt::endl;
             }
             return EXIT_FAILURE;
         } else {
             entryPath = (results.isEmpty()) ? searchTerm : results[0]->path().prepend('/');
-            out << QObject::tr("Using matching entry: %1").arg(entryPath) << endl;
+            out << QObject::tr("Using matching entry: %1").arg(entryPath) << Qt::endl;
         }
     } else {
         entryPath = args.at(1);
@@ -95,12 +95,12 @@ int Clip::executeWithDatabase(QSharedPoi
 
     auto* entry = database->rootGroup()->findEntryByPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Entry %1 not found.").arg(entryPath) << endl;
+        err << QObject::tr("Entry %1 not found.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (parser->isSet(AttributeOption) && parser->isSet(TotpOption)) {
-        err << QObject::tr("ERROR: Please specify one of --attribute or --totp, not both.") << endl;
+        err << QObject::tr("ERROR: Please specify one of --attribute or --totp, not both.") << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -109,7 +109,7 @@ int Clip::executeWithDatabase(QSharedPoi
     bool found = false;
     if (parser->isSet(TotpOption) || selectedAttribute == "totp") {
         if (!entry->hasTotp()) {
-            err << QObject::tr("Entry with path %1 has no TOTP set up.").arg(entryPath) << endl;
+            err << QObject::tr("Entry with path %1 has no TOTP set up.").arg(entryPath) << Qt::endl;
             return EXIT_FAILURE;
         }
 
@@ -124,7 +124,7 @@ int Clip::executeWithDatabase(QSharedPoi
         if (attrs.size() > 1) {
             err << QObject::tr("ERROR: attribute %1 is ambiguous, it matches %2.")
                        .arg(selectedAttribute, QLocale().createSeparatedList(attrs))
-                << endl;
+                << Qt::endl;
             return EXIT_FAILURE;
         } else if (attrs.size() == 1) {
             found = true;
@@ -134,7 +134,7 @@ int Clip::executeWithDatabase(QSharedPoi
     }
 
     if (!found) {
-        out << QObject::tr("Attribute \"%1\" not found.").arg(selectedAttribute) << endl;
+        out << QObject::tr("Attribute \"%1\" not found.").arg(selectedAttribute) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -143,7 +143,7 @@ int Clip::executeWithDatabase(QSharedPoi
         return exitCode;
     }
 
-    out << QObject::tr("Entry's \"%1\" attribute copied to the clipboard!").arg(selectedAttribute) << endl;
+    out << QObject::tr("Entry's \"%1\" attribute copied to the clipboard!").arg(selectedAttribute) << Qt::endl;
 
     if (timeout <= 0) {
         return exitCode;
@@ -153,13 +153,13 @@ int Clip::executeWithDatabase(QSharedPoi
     while (timeout > 0) {
         out << '\r' << QString(lastLine.size(), ' ') << '\r';
         lastLine = QObject::tr("Clearing the clipboard in %1 second(s)...", "", timeout).arg(timeout);
-        out << lastLine << flush;
+        out << lastLine << Qt::flush;
         Tools::sleep(1000);
         --timeout;
     }
     Utils::clipText("");
     out << '\r' << QString(lastLine.size(), ' ') << '\r';
-    out << QObject::tr("Clipboard cleared!") << endl;
+    out << QObject::tr("Clipboard cleared!") << Qt::endl;
 
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/DatabaseCreate.cpp keepassxc-2.7.10/src/cli/DatabaseCreate.cpp
--- keepassxc-2.7.10.orig/src/cli/DatabaseCreate.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/DatabaseCreate.cpp	2025-07-14 11:37:09.868304951 -0700
@@ -67,13 +67,13 @@ QSharedPointer<Database> DatabaseCreate:
     if (decryptionTimeValue.length() != 0) {
         decryptionTime = decryptionTimeValue.toInt();
         if (decryptionTime <= 0) {
-            err << QObject::tr("Invalid decryption time %1.").arg(decryptionTimeValue) << endl;
+            err << QObject::tr("Invalid decryption time %1.").arg(decryptionTimeValue) << Qt::endl;
             return {};
         }
         if (decryptionTime < Kdf::MIN_ENCRYPTION_TIME || decryptionTime > Kdf::MAX_ENCRYPTION_TIME) {
             err << QObject::tr("Target decryption time must be between %1 and %2.")
                        .arg(QString::number(Kdf::MIN_ENCRYPTION_TIME), QString::number(Kdf::MAX_ENCRYPTION_TIME))
-                << endl;
+                << Qt::endl;
             return {};
         }
     }
@@ -83,7 +83,7 @@ QSharedPointer<Database> DatabaseCreate:
     if (parser->isSet(DatabaseCreate::SetPasswordOption)) {
         auto passwordKey = Utils::getConfirmedPassword();
         if (passwordKey.isNull()) {
-            err << QObject::tr("Failed to set database password.") << endl;
+            err << QObject::tr("Failed to set database password.") << Qt::endl;
             return {};
         }
         key->addKey(passwordKey);
@@ -101,7 +101,7 @@ QSharedPointer<Database> DatabaseCreate:
         }
 
         if (!Utils::loadFileKey(keyFilePath, fileKey)) {
-            err << QObject::tr("Loading the key file failed") << endl;
+            err << QObject::tr("Loading the key file failed") << Qt::endl;
             return {};
         }
 
@@ -111,7 +111,7 @@ QSharedPointer<Database> DatabaseCreate:
     }
 
     if (key->isEmpty()) {
-        err << QObject::tr("No key is set. Aborting database creation.") << endl;
+        err << QObject::tr("No key is set. Aborting database creation.") << Qt::endl;
         return {};
     }
 
@@ -122,15 +122,15 @@ QSharedPointer<Database> DatabaseCreate:
         auto kdf = db->kdf();
         Q_ASSERT(kdf);
 
-        out << QObject::tr("Benchmarking key derivation function for %1ms delay.").arg(decryptionTimeValue) << endl;
+        out << QObject::tr("Benchmarking key derivation function for %1ms delay.").arg(decryptionTimeValue) << Qt::endl;
         int rounds = kdf->benchmark(decryptionTime);
-        out << QObject::tr("Setting %1 rounds for key derivation function.").arg(QString::number(rounds)) << endl;
+        out << QObject::tr("Setting %1 rounds for key derivation function.").arg(QString::number(rounds)) << Qt::endl;
         kdf->setRounds(rounds);
 
         bool ok = db->changeKdf(kdf);
 
         if (!ok) {
-            err << QObject::tr("error while setting database key derivation settings.") << endl;
+            err << QObject::tr("error while setting database key derivation settings.") << Qt::endl;
             return {};
         }
     }
@@ -165,7 +165,7 @@ int DatabaseCreate::execute(const QStrin
 
     const QString& databaseFilename = args.at(0);
     if (QFileInfo::exists(databaseFilename)) {
-        err << QObject::tr("File %1 already exists.").arg(databaseFilename) << endl;
+        err << QObject::tr("File %1 already exists.").arg(databaseFilename) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -176,10 +176,10 @@ int DatabaseCreate::execute(const QStrin
 
     QString errorMessage;
     if (!db->saveAs(databaseFilename, Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Failed to save the database: %1.").arg(errorMessage) << endl;
+        err << QObject::tr("Failed to save the database: %1.").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
-    out << QObject::tr("Successfully created new database.") << endl;
+    out << QObject::tr("Successfully created new database.") << Qt::endl;
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/DatabaseEdit.cpp keepassxc-2.7.10/src/cli/DatabaseEdit.cpp
--- keepassxc-2.7.10.orig/src/cli/DatabaseEdit.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/DatabaseEdit.cpp	2025-07-14 11:37:09.868462904 -0700
@@ -53,7 +53,7 @@ int DatabaseEdit::executeWithDatabase(QS
         err << QObject::tr("Cannot use %1 and %2 at the same time.")
                    .arg(DatabaseCreate::SetPasswordOption.names().at(0))
                    .arg(DatabaseEdit::UnsetPasswordOption.names().at(0))
-            << endl;
+            << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -61,7 +61,7 @@ int DatabaseEdit::executeWithDatabase(QS
         err << QObject::tr("Cannot use %1 and %2 at the same time.")
                    .arg(DatabaseCreate::SetKeyFileOption.names().at(0))
                    .arg(DatabaseEdit::UnsetKeyFileOption.names().at(0))
-            << endl;
+            << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -76,7 +76,7 @@ int DatabaseEdit::executeWithDatabase(QS
                                                 parser->value(DatabaseCreate::SetKeyFileOption),
                                                 parser->isSet(DatabaseEdit::UnsetKeyFileOption));
         if (newDatabaseKey.isNull()) {
-            err << QObject::tr("Could not change the database key.") << endl;
+            err << QObject::tr("Could not change the database key.") << Qt::endl;
             return EXIT_FAILURE;
         }
         database->setKey(newDatabaseKey);
@@ -84,17 +84,17 @@ int DatabaseEdit::executeWithDatabase(QS
     }
 
     if (!databaseWasChanged) {
-        out << QObject::tr("Database was not modified.") << endl;
+        out << QObject::tr("Database was not modified.") << Qt::endl;
         return EXIT_SUCCESS;
     }
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Writing the database failed: %1").arg(errorMessage) << endl;
+        err << QObject::tr("Writing the database failed: %1").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
-    out << QObject::tr("Successfully edited the database.") << endl;
+    out << QObject::tr("Successfully edited the database.") << Qt::endl;
     return EXIT_SUCCESS;
 }
 
@@ -113,19 +113,19 @@ QSharedPointer<CompositeKey> DatabaseEdi
     auto currentChallengeResponseKey = database->key()->getChallengeResponseKey(ChallengeResponseKey::UUID);
 
     if (removePassword && currentPasswordKey.isNull()) {
-        err << QObject::tr("Cannot remove password: The database does not have a password.") << endl;
+        err << QObject::tr("Cannot remove password: The database does not have a password.") << Qt::endl;
         return {};
     }
 
     if (removeKeyFile && currentFileKey.isNull()) {
-        err << QObject::tr("Cannot remove file key: The database does not have a file key.") << endl;
+        err << QObject::tr("Cannot remove file key: The database does not have a file key.") << Qt::endl;
         return {};
     }
 
     if (updatePassword) {
         QSharedPointer<PasswordKey> newPasswordKey = Utils::getConfirmedPassword();
         if (newPasswordKey.isNull()) {
-            err << QObject::tr("Failed to set database password.") << endl;
+            err << QObject::tr("Failed to set database password.") << Qt::endl;
             return {};
         }
         newDatabaseKey->addKey(newPasswordKey);
@@ -137,7 +137,7 @@ QSharedPointer<CompositeKey> DatabaseEdi
         QSharedPointer<FileKey> newFileKey = QSharedPointer<FileKey>::create();
         QString errorMessage;
         if (!Utils::loadFileKey(newFileKeyPath, newFileKey)) {
-            err << QObject::tr("Loading the new key file failed: %1").arg(errorMessage) << endl;
+            err << QObject::tr("Loading the new key file failed: %1").arg(errorMessage) << Qt::endl;
             return {};
         }
         newDatabaseKey->addKey(newFileKey);
@@ -150,13 +150,13 @@ QSharedPointer<CompositeKey> DatabaseEdi
     // silently removed from the database.
     for (const QSharedPointer<Key>& key : database->key()->keys()) {
         if (key->uuid() != PasswordKey::UUID && key->uuid() != FileKey::UUID) {
-            err << QObject::tr("Found unexpected Key type %1").arg(key->uuid().toString()) << endl;
+            err << QObject::tr("Found unexpected Key type %1").arg(key->uuid().toString()) << Qt::endl;
             return {};
         }
     }
     for (const QSharedPointer<ChallengeResponseKey>& key : database->key()->challengeResponseKeys()) {
         if (key->uuid() != ChallengeResponseKey::UUID) {
-            err << QObject::tr("Found unexpected Key type %1").arg(key->uuid().toString()) << endl;
+            err << QObject::tr("Found unexpected Key type %1").arg(key->uuid().toString()) << Qt::endl;
             return {};
         }
     }
@@ -166,7 +166,7 @@ QSharedPointer<CompositeKey> DatabaseEdi
     }
 
     if (newDatabaseKey->keys().isEmpty() && newDatabaseKey->challengeResponseKeys().isEmpty()) {
-        err << QObject::tr("Cannot remove all the keys from a database.") << endl;
+        err << QObject::tr("Cannot remove all the keys from a database.") << Qt::endl;
         return {};
     }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/DatabaseInfo.cpp keepassxc-2.7.10/src/cli/DatabaseInfo.cpp
--- keepassxc-2.7.10.orig/src/cli/DatabaseInfo.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/DatabaseInfo.cpp	2025-07-14 11:37:09.868621047 -0700
@@ -35,39 +35,45 @@ int DatabaseInfo::executeWithDatabase(QS
 {
     auto& out = Utils::STDOUT;
 
-    out << QObject::tr("UUID: ") << database->uuid().toString() << endl;
-    out << QObject::tr("Name: ") << database->metadata()->name() << endl;
-    out << QObject::tr("Description: ") << database->metadata()->description() << endl;
+    out << QObject::tr("UUID: ") << database->uuid().toString() << Qt::endl;
+    out << QObject::tr("Name: ") << database->metadata()->name() << Qt::endl;
+    out << QObject::tr("Description: ") << database->metadata()->description() << Qt::endl;
     for (auto& cipher : asConst(KeePass2::CIPHERS)) {
         if (cipher == database->cipher()) {
-            out << QObject::tr("Cipher: ") << KeePass2::cipherToString(cipher) << endl;
+            out << QObject::tr("Cipher: ") << KeePass2::cipherToString(cipher) << Qt::endl;
         }
     }
-    out << QObject::tr("KDF: ") << database->kdf()->toString() << endl;
+    out << QObject::tr("KDF: ") << database->kdf()->toString() << Qt::endl;
     if (database->metadata()->recycleBinEnabled()) {
-        out << QObject::tr("Recycle bin is enabled.") << endl;
+        out << QObject::tr("Recycle bin is enabled.") << Qt::endl;
     } else {
-        out << QObject::tr("Recycle bin is not enabled.") << endl;
+        out << QObject::tr("Recycle bin is not enabled.") << Qt::endl;
     }
 
     DatabaseStats stats(database);
-    out << QObject::tr("Location") << ": " << database->filePath() << endl;
+    out << QObject::tr("Location") << ": " << database->filePath() << Qt::endl;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     out << QObject::tr("Database created") << ": "
-        << database->rootGroup()->timeInfo().creationTime().toString(Qt::DefaultLocaleShortDate) << endl;
-    out << QObject::tr("Last saved") << ": " << stats.modified.toString(Qt::DefaultLocaleShortDate) << endl;
+        << QLocale().toString(database->rootGroup()->timeInfo().creationTime(), QLocale::ShortFormat) << Qt::endl;
+    out << QObject::tr("Last saved") << ": " << QLocale().toString(stats.modified, QLocale::ShortFormat) << Qt::endl;
+#else
+    out << QObject::tr("Database created") << ": "
+        << database->rootGroup()->timeInfo().creationTime().toString(Qt::DefaultLocaleShortDate) << Qt::endl;
+    out << QObject::tr("Last saved") << ": " << stats.modified.toString(Qt::DefaultLocaleShortDate) << Qt::endl;
+#endif
     out << QObject::tr("Unsaved changes") << ": " << (database->isModified() ? QObject::tr("yes") : QObject::tr("no"))
-        << endl;
-    out << QObject::tr("Number of groups") << ": " << QString::number(stats.groupCount) << endl;
-    out << QObject::tr("Number of entries") << ": " << QString::number(stats.entryCount) << endl;
-    out << QObject::tr("Number of expired entries") << ": " << QString::number(stats.expiredEntries) << endl;
-    out << QObject::tr("Unique passwords") << ": " << QString::number(stats.uniquePasswords) << endl;
-    out << QObject::tr("Non-unique passwords") << ": " << QString::number(stats.reusedPasswords) << endl;
-    out << QObject::tr("Maximum password reuse") << ": " << QString::number(stats.maxPwdReuse()) << endl;
-    out << QObject::tr("Number of short passwords") << ": " << QString::number(stats.shortPasswords) << endl;
-    out << QObject::tr("Number of weak passwords") << ": " << QString::number(stats.weakPasswords) << endl;
-    out << QObject::tr("Entries excluded from reports") << ": " << QString::number(stats.excludedEntries) << endl;
+        << Qt::endl;
+    out << QObject::tr("Number of groups") << ": " << QString::number(stats.groupCount) << Qt::endl;
+    out << QObject::tr("Number of entries") << ": " << QString::number(stats.entryCount) << Qt::endl;
+    out << QObject::tr("Number of expired entries") << ": " << QString::number(stats.expiredEntries) << Qt::endl;
+    out << QObject::tr("Unique passwords") << ": " << QString::number(stats.uniquePasswords) << Qt::endl;
+    out << QObject::tr("Non-unique passwords") << ": " << QString::number(stats.reusedPasswords) << Qt::endl;
+    out << QObject::tr("Maximum password reuse") << ": " << QString::number(stats.maxPwdReuse()) << Qt::endl;
+    out << QObject::tr("Number of short passwords") << ": " << QString::number(stats.shortPasswords) << Qt::endl;
+    out << QObject::tr("Number of weak passwords") << ": " << QString::number(stats.weakPasswords) << Qt::endl;
+    out << QObject::tr("Entries excluded from reports") << ": " << QString::number(stats.excludedEntries) << Qt::endl;
     out << QObject::tr("Average password length") << ": " << QObject::tr("%1 characters").arg(stats.averagePwdLength())
-        << endl;
+        << Qt::endl;
 
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Diceware.cpp keepassxc-2.7.10/src/cli/Diceware.cpp
--- keepassxc-2.7.10.orig/src/cli/Diceware.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Diceware.cpp	2025-07-14 11:37:09.868728948 -0700
@@ -56,7 +56,7 @@ int Diceware::execute(const QStringList&
     if (wordCount.isEmpty()) {
         dicewareGenerator.setWordCount(PassphraseGenerator::DefaultWordCount);
     } else if (wordCount.toInt() <= 0) {
-        err << QObject::tr("Invalid word count %1").arg(wordCount) << endl;
+        err << QObject::tr("Invalid word count %1").arg(wordCount) << Qt::endl;
         return EXIT_FAILURE;
     } else {
         dicewareGenerator.setWordCount(wordCount.toInt());
@@ -70,12 +70,12 @@ int Diceware::execute(const QStringList&
     if (!dicewareGenerator.isValid()) {
         // We already validated the word count input so if the generator is invalid, it
         // must be because the word list is too small.
-        err << QObject::tr("Cannot generate valid passphrases because the wordlist is too short") << endl;
+        err << QObject::tr("Cannot generate valid passphrases because the wordlist is too short") << Qt::endl;
         return EXIT_FAILURE;
     }
 
     QString password = dicewareGenerator.generatePassphrase();
-    out << password << endl;
+    out << password << Qt::endl;
 
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Edit.cpp keepassxc-2.7.10/src/cli/Edit.cpp
--- keepassxc-2.7.10.orig/src/cli/Edit.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Edit.cpp	2025-07-14 11:37:09.868842317 -0700
@@ -64,7 +64,7 @@ int Edit::executeWithDatabase(QSharedPoi
 
     // Cannot use those 2 options at the same time!
     if (parser->isSet(Add::GenerateOption) && parser->isSet(Add::PasswordPromptOption)) {
-        err << QObject::tr("Cannot generate a password and prompt at the same time.") << endl;
+        err << QObject::tr("Cannot generate a password and prompt at the same time.") << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -81,7 +81,7 @@ int Edit::executeWithDatabase(QSharedPoi
 
     Entry* entry = database->rootGroup()->findEntryByPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << endl;
+        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -91,7 +91,7 @@ int Edit::executeWithDatabase(QSharedPoi
     QString title = parser->value(Edit::TitleOption);
     bool prompt = parser->isSet(Add::PasswordPromptOption);
     if (username.isEmpty() && url.isEmpty() && notes.isEmpty() && title.isEmpty() && !prompt && !generate) {
-        err << QObject::tr("Not changing any field for entry %1.").arg(entryPath) << endl;
+        err << QObject::tr("Not changing any field for entry %1.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -114,7 +114,7 @@ int Edit::executeWithDatabase(QSharedPoi
     }
 
     if (prompt) {
-        out << QObject::tr("Enter new password for entry: ") << flush;
+        out << QObject::tr("Enter new password for entry: ") << Qt::flush;
         QString password = Utils::getPassword(parser->isSet(Command::QuietOption));
         entry->setPassword(password);
     } else if (generate) {
@@ -126,10 +126,10 @@ int Edit::executeWithDatabase(QSharedPoi
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Writing the database failed: %1").arg(errorMessage) << endl;
+        err << QObject::tr("Writing the database failed: %1").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
-    out << QObject::tr("Successfully edited entry %1.").arg(entry->title()) << endl;
+    out << QObject::tr("Successfully edited entry %1.").arg(entry->title()) << Qt::endl;
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Estimate.cpp keepassxc-2.7.10/src/cli/Estimate.cpp
--- keepassxc-2.7.10.orig/src/cli/Estimate.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Estimate.cpp	2025-07-14 11:37:09.868968493 -0700
@@ -45,7 +45,7 @@ static void estimate(const char* pwd, bo
         // clang-format off
         out << QObject::tr("Length %1").arg(len, 0) << '\t'
             << QObject::tr("Entropy %1").arg(e, 0, 'f', 3) << '\t'
-            << QObject::tr("Log10 %1").arg(e * 0.301029996, 0, 'f', 3) << endl;
+            << QObject::tr("Log10 %1").arg(e * 0.301029996, 0, 'f', 3) << Qt::endl;
         // clang-format on
     } else {
         int pwdLen = 0;
@@ -60,7 +60,7 @@ static void estimate(const char* pwd, bo
         out << QObject::tr("Length %1").arg(len) << '\t'
             << QObject::tr("Entropy %1").arg(e, 0, 'f', 3) << '\t'
             << QObject::tr("Log10 %1").arg(e * 0.301029996, 0, 'f', 3) << "\n  "
-            << QObject::tr("Multi-word extra bits %1").arg(m, 0, 'f', 1) << endl;
+            << QObject::tr("Multi-word extra bits %1").arg(m, 0, 'f', 1) << Qt::endl;
         // clang-format on
         p = info;
         pwdLen = 0;
@@ -133,13 +133,13 @@ static void estimate(const char* pwd, bo
             for (n = 0; n < p->Length; ++n, ++pwd) {
                 out << *pwd;
             }
-            out << endl;
+            out << Qt::endl;
             p = p->Next;
         }
         ZxcvbnFreeInfo(info);
         if (pwdLen != len) {
             out << QObject::tr("*** Password length (%1) != sum of length of parts (%2) ***").arg(len).arg(pwdLen)
-                << endl;
+                << Qt::endl;
         }
     }
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Export.cpp keepassxc-2.7.10/src/cli/Export.cpp
--- keepassxc-2.7.10.orig/src/cli/Export.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Export.cpp	2025-07-14 11:37:09.869072439 -0700
@@ -46,7 +46,7 @@ int Export::executeWithDatabase(QSharedP
         QByteArray xmlData;
         QString errorMessage;
         if (!database->extract(xmlData, &errorMessage)) {
-            err << QObject::tr("Unable to export database to XML: %1").arg(errorMessage) << endl;
+            err << QObject::tr("Unable to export database to XML: %1").arg(errorMessage) << Qt::endl;
             return EXIT_FAILURE;
         }
         out.write(xmlData.constData());
@@ -57,7 +57,7 @@ int Export::executeWithDatabase(QSharedP
         HtmlExporter htmlExporter;
         out << htmlExporter.exportDatabase(database);
     } else {
-        err << QObject::tr("Unsupported format %1").arg(format) << endl;
+        err << QObject::tr("Unsupported format %1").arg(format) << Qt::endl;
         return EXIT_FAILURE;
     }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Generate.cpp keepassxc-2.7.10/src/cli/Generate.cpp
--- keepassxc-2.7.10.orig/src/cli/Generate.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Generate.cpp	2025-07-14 11:37:09.869175837 -0700
@@ -81,13 +81,13 @@ QSharedPointer<PasswordGenerator> Genera
     if (passwordLength.isEmpty()) {
         passwordGenerator->setLength(PasswordGenerator::DefaultLength);
     } else if (passwordLength.toInt() <= 0) {
-        err << QObject::tr("Invalid password length %1").arg(passwordLength) << endl;
+        err << QObject::tr("Invalid password length %1").arg(passwordLength) << Qt::endl;
         return QSharedPointer<PasswordGenerator>(nullptr);
     } else {
         passwordGenerator->setLength(passwordLength.toInt());
     }
 
-    PasswordGenerator::CharClasses classes = 0x0;
+    PasswordGenerator::CharClasses classes = PasswordGenerator::CharClass::NoClass;
 
     if (parser->isSet(Generate::LowerCaseOption)) {
         classes |= PasswordGenerator::LowerLetters;
@@ -105,7 +105,7 @@ QSharedPointer<PasswordGenerator> Genera
         classes |= PasswordGenerator::EASCII;
     }
 
-    PasswordGenerator::GeneratorFlags flags = 0x0;
+    PasswordGenerator::GeneratorFlags flags = PasswordGenerator::GeneratorFlag::NoFlags;
 
     if (parser->isSet(Generate::ExcludeSimilarCharsOption)) {
         flags |= PasswordGenerator::ExcludeLookAlike;
@@ -127,7 +127,7 @@ QSharedPointer<PasswordGenerator> Genera
     passwordGenerator->setExcludedCharacterSet(parser->value(Generate::ExcludeCharsOption));
 
     if (!passwordGenerator->isValid()) {
-        err << QObject::tr("Invalid password generator after applying all options") << endl;
+        err << QObject::tr("Invalid password generator after applying all options") << Qt::endl;
         return QSharedPointer<PasswordGenerator>(nullptr);
     }
 
@@ -148,7 +148,7 @@ int Generate::execute(const QStringList&
 
     auto& out = Utils::STDOUT;
     QString password = passwordGenerator->generatePassword();
-    out << password << endl;
+    out << password << Qt::endl;
 
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Import.cpp keepassxc-2.7.10/src/cli/Import.cpp
--- keepassxc-2.7.10.orig/src/cli/Import.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Import.cpp	2025-07-14 11:37:09.869300573 -0700
@@ -61,7 +61,7 @@ int Import::execute(const QStringList& a
     const QString& dbPath = args.at(1);
 
     if (QFileInfo::exists(dbPath)) {
-        err << QObject::tr("File %1 already exists.").arg(dbPath) << endl;
+        err << QObject::tr("File %1 already exists.").arg(dbPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -72,15 +72,15 @@ int Import::execute(const QStringList& a
 
     QString errorMessage;
     if (!db->import(xmlExportPath, &errorMessage)) {
-        err << QObject::tr("Unable to import XML database: %1").arg(errorMessage) << endl;
+        err << QObject::tr("Unable to import XML database: %1").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (!db->saveAs(dbPath, Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Failed to save the database: %1.").arg(errorMessage) << endl;
+        err << QObject::tr("Failed to save the database: %1.").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
-    out << QObject::tr("Successfully imported database.") << endl;
+    out << QObject::tr("Successfully imported database.") << Qt::endl;
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/List.cpp keepassxc-2.7.10/src/cli/List.cpp
--- keepassxc-2.7.10.orig/src/cli/List.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/List.cpp	2025-07-14 11:37:09.869396548 -0700
@@ -49,17 +49,17 @@ int List::executeWithDatabase(QSharedPoi
 
     // No group provided, defaulting to root group.
     if (args.size() == 1) {
-        out << database->rootGroup()->print(recursive, flatten) << flush;
+        out << database->rootGroup()->print(recursive, flatten) << Qt::flush;
         return EXIT_SUCCESS;
     }
 
     const QString& groupPath = args.at(1);
     Group* group = database->rootGroup()->findGroupByPath(groupPath);
     if (!group) {
-        err << QObject::tr("Cannot find group %1.").arg(groupPath) << endl;
+        err << QObject::tr("Cannot find group %1.").arg(groupPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
-    out << group->print(recursive, flatten) << flush;
+    out << group->print(recursive, flatten) << Qt::flush;
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Merge.cpp keepassxc-2.7.10/src/cli/Merge.cpp
--- keepassxc-2.7.10.orig/src/cli/Merge.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Merge.cpp	2025-07-14 11:37:09.869493952 -0700
@@ -89,18 +89,18 @@ int Merge::executeWithDatabase(QSharedPo
     QStringList changeList = merger.merge();
 
     for (auto& mergeChange : changeList) {
-        out << "\t" << mergeChange << endl;
+        out << "\t" << mergeChange << Qt::endl;
     }
 
     if (!changeList.isEmpty() && !parser->isSet(Merge::DryRunOption)) {
         QString errorMessage;
         if (!database->save(Database::Atomic, {}, &errorMessage)) {
-            err << QObject::tr("Unable to save database to file : %1").arg(errorMessage) << endl;
+            err << QObject::tr("Unable to save database to file : %1").arg(errorMessage) << Qt::endl;
             return EXIT_FAILURE;
         }
-        out << QObject::tr("Successfully merged %1 into %2.").arg(fromDatabasePath, toDatabasePath) << endl;
+        out << QObject::tr("Successfully merged %1 into %2.").arg(fromDatabasePath, toDatabasePath) << Qt::endl;
     } else {
-        out << QObject::tr("Database was not modified by merge operation.") << endl;
+        out << QObject::tr("Database was not modified by merge operation.") << Qt::endl;
     }
 
     return EXIT_SUCCESS;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Move.cpp keepassxc-2.7.10/src/cli/Move.cpp
--- keepassxc-2.7.10.orig/src/cli/Move.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Move.cpp	2025-07-14 11:37:09.869601710 -0700
@@ -45,18 +45,18 @@ int Move::executeWithDatabase(QSharedPoi
 
     Entry* entry = database->rootGroup()->findEntryByPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << endl;
+        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     Group* destinationGroup = database->rootGroup()->findGroupByPath(destinationPath);
     if (!destinationGroup) {
-        err << QObject::tr("Could not find group with path %1.").arg(destinationPath) << endl;
+        err << QObject::tr("Could not find group with path %1.").arg(destinationPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (destinationGroup == entry->parent()) {
-        err << QObject::tr("Entry is already in group %1.").arg(destinationPath) << endl;
+        err << QObject::tr("Entry is already in group %1.").arg(destinationPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -66,10 +66,10 @@ int Move::executeWithDatabase(QSharedPoi
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << endl;
+        err << QObject::tr("Writing the database failed %1.").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
-    out << QObject::tr("Successfully moved entry %1 to group %2.").arg(entry->title(), destinationPath) << endl;
+    out << QObject::tr("Successfully moved entry %1 to group %2.").arg(entry->title(), destinationPath) << Qt::endl;
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Remove.cpp keepassxc-2.7.10/src/cli/Remove.cpp
--- keepassxc-2.7.10.orig/src/cli/Remove.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Remove.cpp	2025-07-14 11:37:09.869699578 -0700
@@ -38,7 +38,7 @@ int Remove::executeWithDatabase(QSharedP
     auto entryPath = parser->positionalArguments().at(1);
     QPointer<Entry> entry = database->rootGroup()->findEntryByPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Entry %1 not found.").arg(entryPath) << endl;
+        err << QObject::tr("Entry %1 not found.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -54,14 +54,14 @@ int Remove::executeWithDatabase(QSharedP
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Unable to save database to file: %1").arg(errorMessage) << endl;
+        err << QObject::tr("Unable to save database to file: %1").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (recycled) {
-        out << QObject::tr("Successfully recycled entry %1.").arg(entryTitle) << endl;
+        out << QObject::tr("Successfully recycled entry %1.").arg(entryTitle) << Qt::endl;
     } else {
-        out << QObject::tr("Successfully deleted entry %1.").arg(entryTitle) << endl;
+        out << QObject::tr("Successfully deleted entry %1.").arg(entryTitle) << Qt::endl;
     }
 
     return EXIT_SUCCESS;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/RemoveGroup.cpp keepassxc-2.7.10/src/cli/RemoveGroup.cpp
--- keepassxc-2.7.10.orig/src/cli/RemoveGroup.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/RemoveGroup.cpp	2025-07-14 11:37:09.869796855 -0700
@@ -44,12 +44,12 @@ int RemoveGroup::executeWithDatabase(QSh
     // Recursive option means were looking for a group to remove.
     QPointer<Group> group = database->rootGroup()->findGroupByPath(groupPath);
     if (!group) {
-        err << QObject::tr("Group %1 not found.").arg(groupPath) << endl;
+        err << QObject::tr("Group %1 not found.").arg(groupPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (group == database->rootGroup()) {
-        err << QObject::tr("Cannot remove root group from database.") << endl;
+        err << QObject::tr("Cannot remove root group from database.") << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -64,14 +64,14 @@ int RemoveGroup::executeWithDatabase(QSh
 
     QString errorMessage;
     if (!database->save(Database::Atomic, {}, &errorMessage)) {
-        err << QObject::tr("Unable to save database to file: %1").arg(errorMessage) << endl;
+        err << QObject::tr("Unable to save database to file: %1").arg(errorMessage) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (recycled) {
-        out << QObject::tr("Successfully recycled group %1.").arg(groupPath) << endl;
+        out << QObject::tr("Successfully recycled group %1.").arg(groupPath) << Qt::endl;
     } else {
-        out << QObject::tr("Successfully deleted group %1.").arg(groupPath) << endl;
+        out << QObject::tr("Successfully deleted group %1.").arg(groupPath) << Qt::endl;
     }
 
     return EXIT_SUCCESS;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Search.cpp keepassxc-2.7.10/src/cli/Search.cpp
--- keepassxc-2.7.10.orig/src/cli/Search.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Search.cpp	2025-07-14 11:37:09.869887871 -0700
@@ -40,12 +40,12 @@ int Search::executeWithDatabase(QSharedP
     EntrySearcher searcher;
     auto results = searcher.search(args.at(1), database->rootGroup(), true);
     if (results.isEmpty()) {
-        err << "No results for that search term." << endl;
+        err << "No results for that search term." << Qt::endl;
         return EXIT_FAILURE;
     }
 
     for (const Entry* result : asConst(results)) {
-        out << result->path().prepend('/') << endl;
+        out << result->path().prepend('/') << Qt::endl;
     }
     return EXIT_SUCCESS;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Show.cpp keepassxc-2.7.10/src/cli/Show.cpp
--- keepassxc-2.7.10.orig/src/cli/Show.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Show.cpp	2025-07-14 11:37:09.869993072 -0700
@@ -70,12 +70,12 @@ int Show::executeWithDatabase(QSharedPoi
 
     Entry* entry = database->rootGroup()->findEntryByPath(entryPath);
     if (!entry) {
-        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << endl;
+        err << QObject::tr("Could not find entry with path %1.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
     if (showTotp && !entry->hasTotp()) {
-        err << QObject::tr("Entry with path %1 has no TOTP set up.").arg(entryPath) << endl;
+        err << QObject::tr("Entry with path %1 has no TOTP set up.").arg(entryPath) << Qt::endl;
         return EXIT_FAILURE;
     }
 
@@ -110,20 +110,20 @@ int Show::executeWithDatabase(QSharedPoi
             if (!attributesWereSpecified) {
                 out << attributeName << ": ";
             }
-            out << Utils::getTopLevelField(entry, attributeName) << endl;
+            out << Utils::getTopLevelField(entry, attributeName) << Qt::endl;
             continue;
         }
 
         QStringList attrs = Utils::findAttributes(*entry->attributes(), attributeName);
         if (attrs.isEmpty()) {
             encounteredError = true;
-            err << QObject::tr("ERROR: unknown attribute %1.").arg(attributeName) << endl;
+            err << QObject::tr("ERROR: unknown attribute %1.").arg(attributeName) << Qt::endl;
             continue;
         } else if (attrs.size() > 1) {
             encounteredError = true;
             err << QObject::tr("ERROR: attribute %1 is ambiguous, it matches %2.")
                        .arg(attributeName, QLocale().createSeparatedList(attrs))
-                << endl;
+                << Qt::endl;
             continue;
         }
         QString canonicalName = attrs[0];
@@ -131,33 +131,33 @@ int Show::executeWithDatabase(QSharedPoi
             out << canonicalName << ": ";
         }
         if (entry->attributes()->isProtected(canonicalName) && !attributesWereSpecified && !showProtectedAttributes) {
-            out << "PROTECTED" << endl;
+            out << "PROTECTED" << Qt::endl;
         } else {
-            out << entry->resolveMultiplePlaceholders(entry->attributes()->value(canonicalName)) << endl;
+            out << entry->resolveMultiplePlaceholders(entry->attributes()->value(canonicalName)) << Qt::endl;
         }
     }
 
     if (parser->isSet(Show::AttachmentsOption)) {
         // Separate attachment output from attributes output via a newline.
-        out << endl;
+        out << Qt::endl;
 
         EntryAttachments* attachments = entry->attachments();
         if (attachments->isEmpty()) {
-            out << QObject::tr("No attachments present.") << endl;
+            out << QObject::tr("No attachments present.") << Qt::endl;
         } else {
-            out << QObject::tr("Attachments:") << endl;
+            out << QObject::tr("Attachments:") << Qt::endl;
 
             // Iterate over the attachments and output their names and size line-by-line, indented.
             for (const QString& attachmentName : attachments->keys()) {
                 // TODO: use QLocale::formattedDataSize when >= Qt 5.10
                 QString attachmentSize = Tools::humanReadableFileSize(attachments->value(attachmentName).size(), 1);
-                out << "  " << attachmentName << " (" << attachmentSize << ")" << endl;
+                out << "  " << attachmentName << " (" << attachmentSize << ")" << Qt::endl;
             }
         }
     }
 
     if (showTotp) {
-        out << entry->totp() << endl;
+        out << entry->totp() << Qt::endl;
     }
 
     return encounteredError ? EXIT_FAILURE : EXIT_SUCCESS;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/TextStream.cpp keepassxc-2.7.10/src/cli/TextStream.cpp
--- keepassxc-2.7.10.orig/src/cli/TextStream.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/TextStream.cpp	2025-07-14 11:37:09.870149912 -0700
@@ -18,7 +18,11 @@
 #include "TextStream.h"
 
 #include <QProcessEnvironment>
-#include <QTextCodec>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QStringConverter>
+#else
+#  include <QTextCodec>
+#endif
 #ifdef Q_OS_WIN
 #include <windows.h>
 #endif
@@ -34,6 +38,31 @@ TextStream::TextStream(QIODevice* device
     detectCodec();
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+TextStream::TextStream(FILE* fileHandle, QIODeviceBase::OpenMode openMode)
+    : QTextStream(fileHandle, openMode)
+{
+    detectCodec();
+}
+
+TextStream::TextStream(QString* string, QIODeviceBase::OpenMode openMode)
+    : QTextStream(string, openMode)
+{
+    detectCodec();
+}
+
+TextStream::TextStream(QByteArray* array, QIODeviceBase::OpenMode openMode)
+    : QTextStream(array, openMode)
+{
+    detectCodec();
+}
+
+TextStream::TextStream(const QByteArray& array, QIODeviceBase::OpenMode openMode)
+    : QTextStream(array, openMode)
+{
+    detectCodec();
+}
+#else
 TextStream::TextStream(FILE* fileHandle, QIODevice::OpenMode openMode)
     : QTextStream(fileHandle, openMode)
 {
@@ -57,6 +86,7 @@ TextStream::TextStream(const QByteArray&
 {
     detectCodec();
 }
+#endif
 
 void TextStream::write(const char* str)
 {
@@ -67,6 +97,59 @@ void TextStream::write(const char* str)
     *this << QString(str);
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#warning TextStream::detectCodec():  Support for Windows-1252 is not supported across platforms.  Enable WITH_QT5 cmake option to add back support.
+void TextStream::detectCodec()
+{
+    QString codecName = "UTF-8";
+    auto env = QProcessEnvironment::systemEnvironment();
+
+#ifdef Q_OS_WIN
+    bool success = false;
+#ifdef CP_UTF8
+    success = SetConsoleOutputCP(CP_UTF8);
+#endif
+    if (!success && !env.contains("SHELL")) {
+        // Fall back to cp850 if this is Windows without CP_UTF8 and we
+        // are running in a native shell (i.e., no Msys or Cygwin).
+        codecName = "Windows-850";
+    }
+#else
+    if (env.contains("LANG") && !env.value("LANG").isEmpty() && env.value("LANG") != "C") {
+        // Only override codec if LANG is set, otherwise Qt will assume
+        // US-ASCII, which is almost always wrong and results in
+        // Unicode passwords being displayed as question marks.
+        codecName = "System";
+    }
+#endif
+
+    codecName = env.value("ENCODING_OVERRIDE", codecName);
+
+    QStringConverter::Encoding codec = QStringConverter::Utf8;
+    if (codecName.toLatin1().compare(QByteArray("UTF-8"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Utf8"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::Utf8;
+    else if (codecName.toLatin1().compare(QByteArray("UTF-16"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Utf16"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::Utf16;
+    else if (codecName.toLatin1().compare(QByteArray("UTF-16BE"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Utf16BE"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::Utf16BE;
+    else if (codecName.toLatin1().compare(QByteArray("UTF-16LE"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Utf16LE"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::Utf16LE;
+    else if (codecName.toLatin1().compare(QByteArray("UTF-32"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Utf32"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::Utf32;
+    else if (codecName.toLatin1().compare(QByteArray("UTF-32BE"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Utf32BE"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::Utf32BE;
+    else if (codecName.toLatin1().compare(QByteArray("UTF-32LE"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Utf32LE"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::Utf32LE;
+    else if (codecName.toLatin1().compare(QByteArray("ISO 8859-1"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Latin1"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::Latin1;
+    else if (codecName.toLatin1().compare(QByteArray("Windows-850"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("Windows-1252"), Qt::CaseInsensitive) == 0 || codecName.toLatin1().compare(QByteArray("System"), Qt::CaseInsensitive) == 0)
+        codec = QStringConverter::System;
+    else
+        return;
+
+    setEncoding(codec);
+}
+#else
 void TextStream::detectCodec()
 {
     QString codecName = "UTF-8";
@@ -97,3 +180,4 @@ void TextStream::detectCodec()
         setCodec(codec);
     }
 }
+#endif
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/TextStream.h keepassxc-2.7.10/src/cli/TextStream.h
--- keepassxc-2.7.10.orig/src/cli/TextStream.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/TextStream.h	2025-07-14 11:37:09.870257149 -0700
@@ -38,10 +38,17 @@ class TextStream : public QTextStream
 public:
     TextStream();
     explicit TextStream(QIODevice* device);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    explicit TextStream(FILE* fileHandle, QIODeviceBase::OpenMode openMode = QIODeviceBase::ReadWrite);
+    explicit TextStream(QString* string, QIODeviceBase::OpenMode openMode = QIODeviceBase::ReadWrite);
+    explicit TextStream(QByteArray* array, QIODeviceBase::OpenMode openMode = QIODeviceBase::ReadWrite);
+    explicit TextStream(const QByteArray& array, QIODeviceBase::OpenMode openMode = QIODeviceBase::ReadOnly);
+#else
     explicit TextStream(FILE* fileHandle, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
     explicit TextStream(QString* string, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
     explicit TextStream(QByteArray* array, QIODevice::OpenMode openMode = QIODevice::ReadWrite);
     explicit TextStream(const QByteArray& array, QIODevice::OpenMode openMode = QIODevice::ReadOnly);
+#endif
 
     void write(const char* str);
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Utils.cpp keepassxc-2.7.10/src/cli/Utils.cpp
--- keepassxc-2.7.10.orig/src/cli/Utils.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Utils.cpp	2025-07-14 11:37:09.870396261 -0700
@@ -47,6 +47,37 @@ namespace Utils
     UINT origOutputCodePage;
 #endif
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    void setDefaultTextStreams()
+    {
+        auto fd = new QFile();
+        fd->open(stdout, QIODeviceBase::WriteOnly);
+        STDOUT.setDevice(fd);
+
+        fd = new QFile();
+        fd->open(stderr, QIODeviceBase::WriteOnly);
+        STDERR.setDevice(fd);
+
+        fd = new QFile();
+        fd->open(stdin, QIODeviceBase::ReadOnly);
+        STDIN.setDevice(fd);
+
+        fd = new QFile();
+#  ifdef Q_OS_WIN
+        fd->open(fopen("nul", "w"), QIODeviceBase::WriteOnly);
+#  else
+        fd->open(fopen("/dev/null", "w"), QIODeviceBase::WriteOnly);
+#  endif
+        DEVNULL.setDevice(fd);
+
+#  ifdef Q_OS_WIN
+        // On Windows, we ask via keepassxc-cli.exe.manifest to use UTF-8,
+        // but the console code-page isn't automatically changed to match.
+        SetConsoleCP(GetACP());
+        SetConsoleOutputCP(GetACP());
+#  endif
+    }
+#else // QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
     void setDefaultTextStreams()
     {
         auto fd = new QFile();
@@ -62,14 +93,14 @@ namespace Utils
         STDIN.setDevice(fd);
 
         fd = new QFile();
-#ifdef Q_OS_WIN
+#  ifdef Q_OS_WIN
         fd->open(fopen("nul", "w"), QIODevice::WriteOnly);
-#else
+#  else
         fd->open(fopen("/dev/null", "w"), QIODevice::WriteOnly);
-#endif
+#  endif
         DEVNULL.setDevice(fd);
 
-#ifdef Q_OS_WIN
+#  ifdef Q_OS_WIN
         origCodePage = GetConsoleCP();
         origOutputCodePage = GetConsoleOutputCP();
 
@@ -77,8 +108,9 @@ namespace Utils
         // but the console code-page isn't automatically changed to match.
         SetConsoleCP(GetACP());
         SetConsoleOutputCP(GetACP());
-#endif
+#  endif
     }
+#endif
 
     void resetTextStreams()
     {
@@ -127,22 +159,22 @@ namespace Utils
 
         QFileInfo dbFileInfo(databaseFilename);
         if (dbFileInfo.canonicalFilePath().isEmpty()) {
-            err << QObject::tr("Failed to open database file %1: not found").arg(databaseFilename) << endl;
+            err << QObject::tr("Failed to open database file %1: not found").arg(databaseFilename) << Qt::endl;
             return {};
         }
 
         if (!dbFileInfo.isFile()) {
-            err << QObject::tr("Failed to open database file %1: not a plain file").arg(databaseFilename) << endl;
+            err << QObject::tr("Failed to open database file %1: not a plain file").arg(databaseFilename) << Qt::endl;
             return {};
         }
 
         if (!dbFileInfo.isReadable()) {
-            err << QObject::tr("Failed to open database file %1: not readable").arg(databaseFilename) << endl;
+            err << QObject::tr("Failed to open database file %1: not readable").arg(databaseFilename) << Qt::endl;
             return {};
         }
 
         if (isPasswordProtected) {
-            err << QObject::tr("Enter password to unlock %1: ").arg(databaseFilename) << flush;
+            err << QObject::tr("Enter password to unlock %1: ").arg(databaseFilename) << Qt::flush;
             QString line = Utils::getPassword(quiet);
             auto passwordKey = QSharedPointer<PasswordKey>::create();
             passwordKey->setPassword(line);
@@ -154,7 +186,7 @@ namespace Utils
             QString errorMessage;
             // LCOV_EXCL_START
             if (!fileKey->load(keyFilename, &errorMessage)) {
-                err << QObject::tr("Failed to load key file %1: %2").arg(keyFilename, errorMessage) << endl;
+                err << QObject::tr("Failed to load key file %1: %2").arg(keyFilename, errorMessage) << Qt::endl;
                 return {};
             }
 
@@ -162,7 +194,7 @@ namespace Utils
                 err << QObject::tr("WARNING: You are using an old key file format which KeePassXC may\n"
                                    "stop supporting in the future.\n\n"
                                    "Please consider generating a new key file.")
-                    << endl;
+                    << Qt::endl;
             }
             // LCOV_EXCL_STOP
 
@@ -179,20 +211,20 @@ namespace Utils
             slot = parts[0].toInt(&ok);
 
             if (!ok || (slot != 1 && slot != 2)) {
-                err << QObject::tr("Invalid YubiKey slot %1").arg(parts[0]) << endl;
+                err << QObject::tr("Invalid YubiKey slot %1").arg(parts[0]) << Qt::endl;
                 return {};
             }
 
             if (parts.size() > 1) {
                 serial = parts[1].toUInt(&ok, 10);
                 if (!ok) {
-                    err << QObject::tr("Invalid YubiKey serial %1").arg(parts[1]) << endl;
+                    err << QObject::tr("Invalid YubiKey serial %1").arg(parts[1]) << Qt::endl;
                     return {};
                 }
             }
 
             QObject::connect(YubiKey::instance(), &YubiKey::userInteractionRequest, [&] {
-                err << QObject::tr("Please present or touch your YubiKey to continue.") << "\n\n" << flush;
+                err << QObject::tr("Please present or touch your YubiKey to continue.") << "\n\n" << Qt::flush;
             });
 
             auto key = QSharedPointer<ChallengeResponseKey>(new ChallengeResponseKey({serial, slot}));
@@ -209,7 +241,7 @@ namespace Utils
         if (db->open(databaseFilename, compositeKey, &error)) {
             return db;
         } else {
-            err << error << endl;
+            err << error << Qt::endl;
             return {};
         }
     }
@@ -234,7 +266,7 @@ namespace Utils
         setStdinEcho(false);
         QString line = in.readLine();
         setStdinEcho(true);
-        out << endl;
+        out << Qt::endl;
 
         return line;
 #endif // __AFL_COMPILER
@@ -264,7 +296,7 @@ namespace Utils
             if (ans.toLower().startsWith("y")) {
                 passwordKey = QSharedPointer<PasswordKey>::create("");
             }
-            err << endl;
+            err << Qt::endl;
         } else {
             err << QObject::tr("Repeat password: ");
             err.flush();
@@ -273,7 +305,7 @@ namespace Utils
             if (password == repeat) {
                 passwordKey = QSharedPointer<PasswordKey>::create(password);
             } else {
-                err << QObject::tr("Error: Passwords do not match.") << endl;
+                err << QObject::tr("Error: Passwords do not match.") << Qt::endl;
             }
         }
 
@@ -319,7 +351,11 @@ namespace Utils
             QScopedPointer<QProcess> clipProcess(new QProcess(nullptr));
 
             // Skip empty parts, otherwise the program may clip the empty string
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            QStringList progArgs = prog.second.split(" ", Qt::SkipEmptyParts);
+#else
             QStringList progArgs = prog.second.split(" ", QString::SkipEmptyParts);
+#endif
 
             clipProcess->start(prog.first, progArgs);
             clipProcess->waitForStarted();
@@ -441,13 +477,13 @@ namespace Utils
             fileKey->create(path, &error);
 
             if (!error.isEmpty()) {
-                err << QObject::tr("Creating KeyFile %1 failed: %2").arg(path, error) << endl;
+                err << QObject::tr("Creating KeyFile %1 failed: %2").arg(path, error) << Qt::endl;
                 return false;
             }
         }
 
         if (!fileKey->load(path, &error)) {
-            err << QObject::tr("Loading KeyFile %1 failed: %2").arg(path, error) << endl;
+            err << QObject::tr("Loading KeyFile %1 failed: %2").arg(path, error) << Qt::endl;
             return false;
         }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/Utils.h keepassxc-2.7.10/src/cli/Utils.h
--- keepassxc-2.7.10.orig/src/cli/Utils.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/Utils.h	2025-07-14 11:37:09.870580380 -0700
@@ -18,6 +18,9 @@
 #ifndef KEEPASSXC_UTILS_H
 #define KEEPASSXC_UTILS_H
 
+#include <QList>
+#include <QSharedPointer>
+#include <QString>
 #include <QTextStream>
 
 class CompositeKey;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/cli/keepassxc-cli.cpp keepassxc-2.7.10/src/cli/keepassxc-cli.cpp
--- keepassxc-2.7.10.orig/src/cli/keepassxc-cli.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/cli/keepassxc-cli.cpp	2025-07-14 11:37:09.870694730 -0700
@@ -49,12 +49,21 @@ public:
 class SimpleLineReader : public LineReader
 {
 public:
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    SimpleLineReader()
+        : inStream(stdin, QIODeviceBase::ReadOnly)
+        , outStream(stdout, QIODeviceBase::WriteOnly)
+        , finished(false)
+    {
+    }
+#else
     SimpleLineReader()
         : inStream(stdin, QIODevice::ReadOnly)
         , outStream(stdout, QIODevice::WriteOnly)
         , finished(false)
     {
     }
+#endif
 
     QString readLine(QString prompt) override
     {
@@ -154,7 +163,7 @@ int enterInteractiveMode(const QStringLi
 
         auto cmd = Commands::getCommand(args[0]);
         if (!cmd) {
-            err << QObject::tr("Unknown command %1").arg(args[0]) << endl;
+            err << QObject::tr("Unknown command %1").arg(args[0]) << Qt::endl;
             continue;
         } else if (cmd->name == "quit" || cmd->name == "exit") {
             break;
@@ -218,13 +227,13 @@ int main(int argc, char** argv)
     if (parser.positionalArguments().empty()) {
         if (parser.isSet("version")) {
             // Switch to parser.showVersion() when available (QT 5.4).
-            out << KEEPASSXC_VERSION << endl;
+            out << KEEPASSXC_VERSION << Qt::endl;
             return EXIT_SUCCESS;
         }
 
         if (parser.isSet(debugInfoOption)) {
             QString debugInfo = Tools::debugInfo().append("\n").append(Crypto::debugInfo());
-            out << debugInfo << endl;
+            out << debugInfo << Qt::endl;
             return EXIT_SUCCESS;
         }
         // showHelp exits the application immediately.
@@ -238,7 +247,7 @@ int main(int argc, char** argv)
 
     auto command = Commands::getCommand(commandName);
     if (!command) {
-        err << QObject::tr("Invalid command %1.").arg(commandName) << endl;
+        err << QObject::tr("Invalid command %1.").arg(commandName) << Qt::endl;
         err << parser.helpText();
         return EXIT_FAILURE;
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/Clock.cpp keepassxc-2.7.10/src/core/Clock.cpp
--- keepassxc-2.7.10.orig/src/core/Clock.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/Clock.cpp	2025-07-14 11:37:09.870818231 -0700
@@ -30,8 +30,13 @@ QDateTime Clock::currentDateTime()
 
 uint Clock::currentSecondsSinceEpoch()
 {
-    // TODO: change to toSecsSinceEpoch() when min Qt >= 5.8
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    qint64 current_s64 = instance().currentDateTimeImpl().toSecsSinceEpoch();
+    uint current_u32 = static_cast<uint>(current_s64);
+    return current_u32;
+#else
     return instance().currentDateTimeImpl().toTime_t();
+#endif
 }
 
 qint64 Clock::currentMilliSecondsSinceEpoch()
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/Database.cpp keepassxc-2.7.10/src/core/Database.cpp
--- keepassxc-2.7.10.orig/src/core/Database.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/Database.cpp	2025-07-14 11:37:09.870969397 -0700
@@ -139,12 +139,21 @@ bool Database::open(const QString& fileP
 
     // Don't autodetect read-only mode, as it triggers an upstream bug.
     // See https://github.com/keepassxreboot/keepassxc/issues/803
+//#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    // if (!readOnly && !dbFile.open(QIODeviceBase::ReadWrite)) {
+//#else
     // if (!readOnly && !dbFile.open(QIODevice::ReadWrite)) {
+//#endif
     //     readOnly = true;
     // }
     //
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    // if (!dbFile.isOpen() && !dbFile.open(QIODeviceBase::ReadOnly)) {
+    if (!dbFile.open(QIODeviceBase::ReadOnly)) {
+#else
     // if (!dbFile.isOpen() && !dbFile.open(QIODevice::ReadOnly)) {
     if (!dbFile.open(QIODevice::ReadOnly)) {
+#endif
         if (error) {
             *error = tr("Unable to open file %1.").arg(filePath);
         }
@@ -361,7 +370,11 @@ bool Database::performSave(const QString
     switch (action) {
     case Atomic: {
         QSaveFile saveFile(filePath);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (saveFile.open(QIODeviceBase::WriteOnly)) {
+#else
         if (saveFile.open(QIODevice::WriteOnly)) {
+#endif
             HashingStream hashingStream(&saveFile, QCryptographicHash::Md5, kFileBlockToHashSizeBytes);
             if (!hashingStream.open(QIODevice::WriteOnly)) {
                 return false;
@@ -440,7 +453,11 @@ bool Database::performSave(const QString
     case DirectWrite: {
         // Open the original database file for direct-write
         QFile dbFile(filePath);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (dbFile.open(QIODeviceBase::WriteOnly | QIODeviceBase::Truncate)) {
+#else
         if (dbFile.open(QIODevice::WriteOnly | QIODevice::Truncate)) {
+#endif
             HashingStream hashingStream(&dbFile, QCryptographicHash::Md5, kFileBlockToHashSizeBytes);
             if (!hashingStream.open(QIODevice::WriteOnly)) {
                 return false;
@@ -464,7 +481,11 @@ bool Database::performSave(const QString
     return false;
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+bool Database::writeDatabase(QIODevice* device, QString* error)
+#else
 bool Database::writeDatabase(QIODevice* device, QString* error)
+#endif
 {
     Q_ASSERT(m_data.key);
     Q_ASSERT(m_data.transformedDatabaseKey);
@@ -517,7 +538,11 @@ bool Database::import(const QString& xml
 {
     KdbxXmlReader reader(KeePass2::FILE_VERSION_4);
     QFile file(xmlExportPath);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    file.open(QIODeviceBase::ReadOnly);
+#else
     file.open(QIODevice::ReadOnly);
+#endif
 
     reader.readDatabase(&file, this);
 
@@ -822,7 +847,11 @@ void Database::updateTagList()
         }
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_tagList = QList<QString>(tagSet.begin(), tagSet.end());
+#else
     m_tagList = tagSet.toList();
+#endif
     m_tagList.sort();
     emit tagListUpdated();
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/Entry.cpp keepassxc-2.7.10/src/core/Entry.cpp
--- keepassxc-2.7.10.orig/src/core/Entry.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/Entry.cpp	2025-07-14 11:37:09.871308526 -0700
@@ -458,7 +458,11 @@ int Entry::size() const
     size += autoTypeAssociations()->associationsSize();
     size += attachments()->attachmentsSize();
     size += customData()->dataSize();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    for (const QString& tag : tags().split(TagDelimiterRegex, Qt::SkipEmptyParts)) {
+#else
     for (const QString& tag : tags().split(TagDelimiterRegex, QString::SkipEmptyParts)) {
+#endif
         size += tag.toUtf8().size();
     }
 
@@ -698,14 +702,23 @@ void Entry::setOverrideUrl(const QString
 
 void Entry::setTags(const QString& tags)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto taglist = tags.split(TagDelimiterRegex, Qt::SkipEmptyParts);
+#else
     auto taglist = tags.split(TagDelimiterRegex, QString::SkipEmptyParts);
+#endif
     // Trim whitespace before/after tag text
     for (auto& tag : taglist) {
         tag = tag.trimmed();
     }
     // Remove duplicates
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto tagSet = QSet<QString>(taglist.begin(), taglist.end());
+    taglist = QList<QString>(tagSet.begin(), tagSet.end());
+#else
     auto tagSet = QSet<QString>::fromList(taglist);
     taglist = tagSet.toList();
+#endif
     // Sort alphabetically
     taglist.sort();
     set(m_data.tags, taglist);
@@ -1055,11 +1068,21 @@ QString Entry::resolveMultiplePlaceholde
     int capEnd = 0;
     while (matches.hasNext()) {
         const auto match = matches.next();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QString t = QString(str);
+        const QChar *u = &t[capEnd];
+        result += QStringView(u, match.capturedStart() - capEnd);
+#else
         result += str.midRef(capEnd, match.capturedStart() - capEnd);
+#endif
         result += resolvePlaceholderRecursive(match.captured(), maxDepth);
         capEnd = match.capturedEnd();
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    result += QStringView{str}.right(str.length() - capEnd);
+#else
     result += str.rightRef(str.length() - capEnd);
+#endif
     return result;
 }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/EntryAttachments.cpp keepassxc-2.7.10/src/core/EntryAttachments.cpp
--- keepassxc-2.7.10.orig/src/core/EntryAttachments.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/EntryAttachments.cpp	2025-07-14 11:37:09.871554018 -0700
@@ -51,7 +51,12 @@ bool EntryAttachments::hasKey(const QStr
 
 QSet<QByteArray> EntryAttachments::values() const
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QList<QByteArray> listAttachmentValues = asConst(m_attachments).values();
+    return QSet<QByteArray>(listAttachmentValues.begin(), listAttachmentValues.end());
+#else
     return asConst(m_attachments).values().toSet();
+#endif
 }
 
 QByteArray EntryAttachments::value(const QString& key) const
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/EntryAttachments.h keepassxc-2.7.10/src/core/EntryAttachments.h
--- keepassxc-2.7.10.orig/src/core/EntryAttachments.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/EntryAttachments.h	2025-07-14 11:37:09.871668344 -0700
@@ -21,12 +21,18 @@
 #include "core/FileWatcher.h"
 #include "core/ModifiableObject.h"
 
+#include <QtGlobal>
 #include <QHash>
 #include <QMap>
 #include <QObject>
 #include <QSharedPointer>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QString>
+#endif
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
 class QStringList;
+#endif
 
 class EntryAttachments : public ModifiableObject
 {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/EntryAttributes.cpp keepassxc-2.7.10/src/core/EntryAttributes.cpp
--- keepassxc-2.7.10.orig/src/core/EntryAttributes.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/EntryAttributes.cpp	2025-07-14 11:37:09.871775598 -0700
@@ -261,7 +261,15 @@ void EntryAttributes::copyCustomKeysFrom
 bool EntryAttributes::areCustomKeysDifferent(const EntryAttributes* other)
 {
     // check if they are equal ignoring the order of the keys
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QList<QString> listKeys = keys();
+    QList<QString> listOtherKeys = other->keys();
+    QSet<QString> setKeys(listKeys.begin(), listKeys.end());
+    QSet<QString> setOtherKeys(listOtherKeys.begin(), listOtherKeys.end());
+    if (setKeys != setOtherKeys) {
+#else
     if (keys().toSet() != other->keys().toSet()) {
+#endif
         return true;
     }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/EntrySearcher.cpp keepassxc-2.7.10/src/core/EntrySearcher.cpp
--- keepassxc-2.7.10.orig/src/core/EntrySearcher.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/EntrySearcher.cpp	2025-07-14 11:37:09.871900122 -0700
@@ -203,7 +203,11 @@ bool EntrySearcher::searchEntryImpl(cons
         case Field::Is:
             if (term.word.startsWith("expired", Qt::CaseInsensitive)) {
                 auto days = 0;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+                auto parts = term.word.split("-", Qt::SkipEmptyParts);
+#else
                 auto parts = term.word.split("-", QString::SkipEmptyParts);
+#endif
                 if (parts.length() >= 2) {
                     days = parts[1].toInt();
                 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/Group.cpp keepassxc-2.7.10/src/core/Group.cpp
--- keepassxc-2.7.10.orig/src/core/Group.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/Group.cpp	2025-07-14 11:37:09.872063007 -0700
@@ -846,7 +846,12 @@ QList<QString> Group::usernamesRecursive
 
     // Take first topN usernames if set
     QList<QString> usernames;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    int sortedUsernamesSize = static_cast<int>(sortedUsernames.size());
+    int actualUsernames = topN < 0 ? sortedUsernames.size() : std::min(topN, sortedUsernamesSize);
+#else
     int actualUsernames = topN < 0 ? sortedUsernames.size() : std::min(topN, sortedUsernames.size());
+#endif
     for (int i = 0; i < actualUsernames; i++) {
         usernames.append(sortedUsernames[i].first);
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/HibpDownloader.cpp keepassxc-2.7.10/src/core/HibpDownloader.cpp
--- keepassxc-2.7.10.orig/src/core/HibpDownloader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/HibpDownloader.cpp	2025-07-14 11:37:09.872231161 -0700
@@ -60,7 +60,13 @@ namespace
         }
 
         // Extract the count, remove remaining whitespace, and convert to int
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QString t = QString(hibpResult);
+        const QChar *hibpResultFirst = &t[pos];
+        return QStringView(hibpResultFirst, end - pos).trimmed().toInt();
+#else
         return hibpResult.midRef(pos, end - pos).trimmed().toInt();
+#endif
     }
 } // namespace
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/MacPasteboard.cpp keepassxc-2.7.10/src/core/MacPasteboard.cpp
--- keepassxc-2.7.10.orig/src/core/MacPasteboard.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/MacPasteboard.cpp	2025-07-14 11:37:09.872344927 -0700
@@ -78,7 +78,12 @@ QVariant MacPasteboard::convertToMime(co
     } else if (flavor == QLatin1String("org.nspasteboard.ConcealedType")) {
         ret = QString::fromUtf8(firstData);
     } else if (flavor == QLatin1String("public.utf16-plain-text")) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        auto toUtf16 = QStringDecoder(QStringDecoder::Utf16);
+        ret = toUtf16(firstData);
+#else
         ret = QTextCodec::codecForName("UTF-16")->toUnicode(firstData);
+#endif
     } else {
         qWarning("QMime::convertToMime: unhandled mimetype: %s", qPrintable(mimetype));
     }
@@ -94,6 +99,12 @@ QList<QByteArray> MacPasteboard::convert
     else if (flavor == QLatin1String("org.nspasteboard.ConcealedType"))
         ret.append(string.toUtf8());
     else if (flavor == QLatin1String("public.utf16-plain-text"))
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        auto toUtf16 = QStringEncoder(QStringDecoder::Utf16);
+        QByteArray baUtf16 = toUtf16(string)
+        ret.append(baUtf16)
+#else
         ret.append(QTextCodec::codecForName("UTF-16")->fromUnicode(string));
+#endif
     return ret;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/MacPasteboard.h keepassxc-2.7.10/src/core/MacPasteboard.h
--- keepassxc-2.7.10.orig/src/core/MacPasteboard.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/MacPasteboard.h	2025-07-14 11:37:09.872443208 -0700
@@ -19,7 +19,11 @@
 #define KEEPASSXC_MACPASTEBOARD_H
 
 #include <QObject>
-#include <QTextCodec>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QStringConverter>
+#else
+#  include <QTextCodec>
+#endif
 #include <QtMacExtras/QMacPasteboardMime>
 
 class MacPasteboard : public QObject, public QMacPasteboardMime
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/Merger.cpp keepassxc-2.7.10/src/core/Merger.cpp
--- keepassxc-2.7.10.orig/src/core/Merger.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/Merger.cpp	2025-07-14 11:37:09.872573815 -0700
@@ -576,7 +576,15 @@ Merger::ChangeList Merger::mergeDeletion
 
     while (!groups.isEmpty()) {
         auto* group = groups.takeFirst();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QList<Group*> listChildren = group->children();
+        QList<Group*> listGroups = groups;
+        QSet<Group*> setChildren = QSet<Group*>(listChildren.begin(), listChildren.end());
+        QSet<Group*> setGroups = QSet<Group*>(listGroups.begin(), listGroups.end());
+        if (!(setChildren & setGroups).isEmpty()) {
+#else
         if (!(group->children().toSet() & groups.toSet()).isEmpty()) {
+#endif
             // we need to finish all children before we are able to determine if the group can be removed
             groups << group;
             continue;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/PassphraseGenerator.cpp keepassxc-2.7.10/src/core/PassphraseGenerator.cpp
--- keepassxc-2.7.10.orig/src/core/PassphraseGenerator.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/PassphraseGenerator.cpp	2025-07-14 11:37:09.872746917 -0700
@@ -19,6 +19,9 @@
 
 #include <QFile>
 #include <QSet>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QRegularExpression>
+#endif
 #include <QTextStream>
 #include <cmath>
 
@@ -66,13 +69,21 @@ void PassphraseGenerator::setWordList(co
     QSet<QString> wordset;
 
     QFile file(path);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!file.open(QIODeviceBase::ReadOnly | QIODeviceBase::Text)) {
+#else
     if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
+#endif
         qWarning("Couldn't load passphrase wordlist: %s", qPrintable(path));
         return;
     }
 
     QTextStream in(&file);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    in.setEncoding(QStringConverter::Utf8);
+#else
     in.setCodec("UTF-8");
+#endif
     QString line = in.readLine();
     bool isSigned = line.startsWith("-----BEGIN PGP SIGNED MESSAGE-----");
     if (isSigned) {
@@ -80,7 +91,11 @@ void PassphraseGenerator::setWordList(co
             line = in.readLine();
         }
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QRegularExpression rx("^[0-9]+(-[0-9]+)*\\s+([^\\s]+)$");
+#else
     QRegExp rx("^[0-9]+(-[0-9]+)*\\s+([^\\s]+)$");
+#endif
     while (!line.isNull()) {
         if (isSigned && line.startsWith("-----BEGIN PGP SIGNATURE-----")) {
             break;
@@ -97,7 +112,11 @@ void PassphraseGenerator::setWordList(co
         line = in.readLine();
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_wordlist = QList<QString>(wordset.begin(), wordset.end());
+#else
     m_wordlist = wordset.toList();
+#endif
 
     if (m_wordlist.size() < m_minimum_wordlist_length) {
         qWarning("Wordlist is less than minimum acceptable size: %s", qPrintable(path));
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/PasswordGenerator.cpp keepassxc-2.7.10/src/core/PasswordGenerator.cpp
--- keepassxc-2.7.10.orig/src/core/PasswordGenerator.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/PasswordGenerator.cpp	2025-07-14 11:37:09.872865875 -0700
@@ -132,7 +132,7 @@ QVector<PasswordGroup> PasswordGenerator
                 continue;
             }
 
-            group.append(i);
+            group.append(QChar(i));
         }
 
         passwordGroups.append(group);
@@ -146,7 +146,7 @@ QVector<PasswordGroup> PasswordGenerator
                 continue;
             }
 
-            group.append(i);
+            group.append(QChar(i));
         }
 
         passwordGroups.append(group);
@@ -159,7 +159,7 @@ QVector<PasswordGroup> PasswordGenerator
                 continue;
             }
 
-            group.append(i);
+            group.append(QChar(i));
         }
 
         passwordGroups.append(group);
@@ -168,12 +168,12 @@ QVector<PasswordGroup> PasswordGenerator
         PasswordGroup group;
 
         // ()[]{}
-        group.append(40);
-        group.append(41);
-        group.append(91);
-        group.append(93);
-        group.append(123);
-        group.append(125);
+        group.append(QChar(40));
+        group.append(QChar(41));
+        group.append(QChar(91));
+        group.append(QChar(93));
+        group.append(QChar(123));
+        group.append(QChar(125));
 
         passwordGroups.append(group);
     }
@@ -181,10 +181,10 @@ QVector<PasswordGroup> PasswordGenerator
         PasswordGroup group;
 
         // .,:;
-        group.append(44);
-        group.append(46);
-        group.append(58);
-        group.append(59);
+        group.append(QChar(44));
+        group.append(QChar(46));
+        group.append(QChar(58));
+        group.append(QChar(59));
 
         passwordGroups.append(group);
     }
@@ -192,8 +192,8 @@ QVector<PasswordGroup> PasswordGenerator
         PasswordGroup group;
 
         // "'
-        group.append(34);
-        group.append(39);
+        group.append(QChar(34));
+        group.append(QChar(39));
 
         passwordGroups.append(group);
     }
@@ -201,12 +201,12 @@ QVector<PasswordGroup> PasswordGenerator
         PasswordGroup group;
 
         // -/\_|
-        group.append(45);
-        group.append(47);
-        group.append(92);
-        group.append(95);
+        group.append(QChar(45));
+        group.append(QChar(47));
+        group.append(QChar(92));
+        group.append(QChar(95));
         if (!(m_flags & ExcludeLookAlike)) {
-            group.append(124); // "|"
+            group.append(QChar(124)); // "|"
         }
 
         passwordGroups.append(group);
@@ -215,13 +215,13 @@ QVector<PasswordGroup> PasswordGenerator
         PasswordGroup group;
 
         // !*+<=>?
-        group.append(33);
-        group.append(42);
-        group.append(43);
-        group.append(60);
-        group.append(61);
-        group.append(62);
-        group.append(63);
+        group.append(QChar(33));
+        group.append(QChar(42));
+        group.append(QChar(43));
+        group.append(QChar(60));
+        group.append(QChar(61));
+        group.append(QChar(62));
+        group.append(QChar(63));
 
         passwordGroups.append(group);
     }
@@ -230,13 +230,13 @@ QVector<PasswordGroup> PasswordGenerator
 
         // #$%&
         for (int i = 35; i <= 38; i++) {
-            group.append(i);
+            group.append(QChar(i));
         }
         // @^`~
-        group.append(64);
-        group.append(94);
-        group.append(96);
-        group.append(126);
+        group.append(QChar(64));
+        group.append(QChar(94));
+        group.append(QChar(96));
+        group.append(QChar(126));
 
         passwordGroups.append(group);
     }
@@ -246,14 +246,14 @@ QVector<PasswordGroup> PasswordGenerator
         // [U+0080, U+009F] are C1 control characters,
         // U+00A0 is non-breaking space
         for (int i = 161; i <= 172; i++) {
-            group.append(i);
+            group.append(QChar(i));
         }
         // U+00AD is soft hyphen (format character)
         for (int i = 174; i <= 255; i++) {
             if ((m_flags & ExcludeLookAlike) && (i == 249)) { // "﹒"
                 continue;
             }
-            group.append(i);
+            group.append(QChar(i));
         }
 
         passwordGroups.append(group);
@@ -262,8 +262,8 @@ QVector<PasswordGroup> PasswordGenerator
         PasswordGroup group;
 
         for (const auto& ch : m_custom) {
-            if (!group.contains(ch)) {
-                group.append(ch);
+            if (!group.contains(QChar(ch))) {
+                group.append(QChar(ch));
             }
         }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/PasswordHealth.cpp keepassxc-2.7.10/src/core/PasswordHealth.cpp
--- keepassxc-2.7.10.orig/src/core/PasswordHealth.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/PasswordHealth.cpp	2025-07-14 11:37:09.873032277 -0700
@@ -171,8 +171,13 @@ QSharedPointer<PasswordHealth> HealthChe
     if (entry->isExpired()) {
         health->setScore(0);
         health->addScoreReason(QObject::tr("Password has expired"));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        health->addScoreDetails(QObject::tr("Password expiry was %1")
+                                    .arg(QLocale().toString(entry->timeInfo().expiryTime(), QLocale::ShortFormat)));
+#else
         health->addScoreDetails(QObject::tr("Password expiry was %1")
                                     .arg(entry->timeInfo().expiryTime().toString(Qt::DefaultLocaleShortDate)));
+#endif
     } else if (entry->timeInfo().expires()) {
         const int days = QDateTime::currentDateTime().daysTo(entry->timeInfo().expiryTime());
         if (days <= 30) {
@@ -186,8 +191,13 @@ QSharedPointer<PasswordHealth> HealthChe
             }
 
             health->adjustScore((30 - days) * -2);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            health->addScoreDetails(QObject::tr("Password expires on %1")
+                                        .arg(QLocale().toString(entry->timeInfo().expiryTime(), QLocale::ShortFormat)));
+#else
             health->addScoreDetails(QObject::tr("Password expires on %1")
                                         .arg(entry->timeInfo().expiryTime().toString(Qt::DefaultLocaleShortDate)));
+#endif
             if (days <= 2) {
                 health->addScoreReason(QObject::tr("Password is about to expire"));
             } else if (days <= 10) {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/SignalMultiplexer.cpp keepassxc-2.7.10/src/core/SignalMultiplexer.cpp
--- keepassxc-2.7.10.orig/src/core/SignalMultiplexer.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/SignalMultiplexer.cpp	2025-07-14 11:37:09.873146553 -0700
@@ -18,6 +18,7 @@
 #include "SignalMultiplexer.h"
 
 #include "core/Global.h"
+#include <QObject>
 
 SignalMultiplexer::SignalMultiplexer()
 {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/SignalMultiplexer.h keepassxc-2.7.10/src/core/SignalMultiplexer.h
--- keepassxc-2.7.10.orig/src/core/SignalMultiplexer.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/SignalMultiplexer.h	2025-07-14 11:37:09.873234988 -0700
@@ -18,6 +18,7 @@
 #ifndef KEEPASSX_SIGNALMULTIPLEXER_H
 #define KEEPASSX_SIGNALMULTIPLEXER_H
 
+#include <QObject>
 #include <QPointer>
 
 class SignalMultiplexer
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/Tools.cpp keepassxc-2.7.10/src/core/Tools.cpp
--- keepassxc-2.7.10.orig/src/core/Tools.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/Tools.cpp	2025-07-14 11:37:09.873369741 -0700
@@ -222,11 +222,19 @@ namespace Tools
     bool isBase64(const QByteArray& ba)
     {
         constexpr auto pattern = R"(^(?:[a-z0-9+/]{4})*(?:[a-z0-9+/]{3}=|[a-z0-9+/]{2}==)?$)";
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QRegularExpression regexp(QRegularExpression::anchoredPattern(pattern), QRegularExpression::CaseInsensitiveOption);
+
+        QString base64 = QString::fromLatin1(ba.constData(), ba.size());
+
+        return regexp.match(base64).hasMatch();
+#else
         QRegExp regexp(pattern, Qt::CaseInsensitive, QRegExp::RegExp2);
 
         QString base64 = QString::fromLatin1(ba.constData(), ba.size());
 
         return regexp.exactMatch(base64);
+#endif
     }
 
     bool isAsciiString(const QString& str)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/core/UrlTools.cpp keepassxc-2.7.10/src/core/UrlTools.cpp
--- keepassxc-2.7.10.orig/src/core/UrlTools.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/core/UrlTools.cpp	2025-07-14 11:37:09.873507298 -0700
@@ -70,6 +70,7 @@ QString UrlTools::getBaseDomainFromUrl(c
         return host;
     }
 
+    // Support https://.r2.r1.r0
     // Remove the top level domain part from the hostname, e.g. https://another.example.co.uk -> https://another.example
     host.chop(tld.length() + 1);
     // Split the URL and select the last part, e.g. https://another.example -> example
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/crypto/Crypto.cpp keepassxc-2.7.10/src/crypto/Crypto.cpp
--- keepassxc-2.7.10.orig/src/crypto/Crypto.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/crypto/Crypto.cpp	2025-07-14 11:37:09.873627967 -0700
@@ -24,6 +24,7 @@
 #include "crypto/SymmetricCipher.h"
 
 #include <botan/version.h>
+#include <QObject>
 
 namespace
 {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/crypto/SymmetricCipher.cpp keepassxc-2.7.10/src/crypto/SymmetricCipher.cpp
--- keepassxc-2.7.10.orig/src/crypto/SymmetricCipher.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/crypto/SymmetricCipher.cpp	2025-07-14 11:37:09.873755211 -0700
@@ -25,6 +25,9 @@
 
 bool SymmetricCipher::init(Mode mode, Direction direction, const QByteArray& key, const QByteArray& iv)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_cipher_ready = false;
+#endif
     m_mode = mode;
     if (mode == InvalidMode) {
         m_error = QObject::tr("SymmetricCipher::init: Invalid cipher mode.");
@@ -60,12 +63,19 @@ bool SymmetricCipher::init(Mode mode, Di
         return false;
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_cipher_ready = true;
+#endif
     return true;
 }
 
 bool SymmetricCipher::isInitalized() const
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    return m_cipher_ready;
+#else
     return m_cipher;
+#endif
 }
 
 bool SymmetricCipher::process(char* data, int len)
@@ -123,6 +133,7 @@ void SymmetricCipher::reset()
     m_error.clear();
     if (isInitalized()) {
         m_cipher.reset();
+        m_cipher_ready = false;
     }
 }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/crypto/SymmetricCipher.h keepassxc-2.7.10/src/crypto/SymmetricCipher.h
--- keepassxc-2.7.10.orig/src/crypto/SymmetricCipher.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/crypto/SymmetricCipher.h	2025-07-14 11:37:09.873864753 -0700
@@ -78,6 +78,9 @@ private:
     QString m_error;
     Mode m_mode;
     QSharedPointer<Botan::Cipher_Mode> m_cipher;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    bool m_cipher_ready;
+#endif
 
     Q_DISABLE_COPY(SymmetricCipher)
 };
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/fdosecrets/CMakeLists.txt keepassxc-2.7.10/src/fdosecrets/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/fdosecrets/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/fdosecrets/CMakeLists.txt	2025-07-14 11:37:09.873994673 -0700
@@ -30,5 +30,13 @@ if(WITH_XC_FDOSECRETS)
         objects/Prompt.cpp
         dbus/DBusTypes.cpp
     )
-    target_link_libraries(fdosecrets Qt5::Core Qt5::Widgets Qt5::DBus ${BOTAN_LIBRARIES})
+    if(WITH_QT6 AND WITH_QT5COMPAT)
+        add_definitions(-DUSE_QT5COMPAT)
+        find_package(Qt6 REQUIRED COMPONENTS Core5Compat)
+        target_link_libraries(fdosecrets Qt6::Core Qt6::Core5Compat Qt6::Widgets Qt6::DBus ${BOTAN_LIBRARIES})
+    elseif(WITH_QT6)
+        target_link_libraries(fdosecrets Qt6::Core Qt6::Widgets Qt6::DBus ${BOTAN_LIBRARIES})
+    elseif(WITH_QT5)
+        target_link_libraries(fdosecrets Qt5::Core Qt5::Widgets Qt5::DBus ${BOTAN_LIBRARIES})
+    endif()
 endif()
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/fdosecrets/FdoSecretsSettings.cpp keepassxc-2.7.10/src/fdosecrets/FdoSecretsSettings.cpp
--- keepassxc-2.7.10.orig/src/fdosecrets/FdoSecretsSettings.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/fdosecrets/FdoSecretsSettings.cpp	2025-07-14 11:37:09.874087650 -0700
@@ -96,7 +96,7 @@ namespace FdoSecrets
 
     QUuid FdoSecretsSettings::exposedGroup(Database* db) const
     {
-        return {db->metadata()->customData()->value(CustomData::FdoSecretsExposedGroup)};
+        return QUuid::fromString(QStringView(db->metadata()->customData()->value(CustomData::FdoSecretsExposedGroup)));
     }
 
     void FdoSecretsSettings::setExposedGroup(Database* db, const QUuid& group)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/fdosecrets/dbus/DBusDispatch.cpp keepassxc-2.7.10/src/fdosecrets/dbus/DBusDispatch.cpp
--- keepassxc-2.7.10.orig/src/fdosecrets/dbus/DBusDispatch.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/fdosecrets/dbus/DBusDispatch.cpp	2025-07-14 11:37:09.874208033 -0700
@@ -48,15 +48,27 @@ namespace FdoSecrets
             }
 
             // we need at least one conversion, allocate a slot in auxParams
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            auxParams.append(QVariant(QMetaType(id), nullptr));
+#else
             auxParams.append(QVariant(id, nullptr));
+#endif
             auto& out = auxParams.last();
             // first handle QDBusArgument to wire types
             if (arg.userType() == qMetaTypeId<QDBusArgument>()) {
                 auto wireId = typeToWireType(id).dbusTypeId;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+                out = QVariant(QMetaType(wireId), nullptr);
+#else
                 out = QVariant(wireId, nullptr);
+#endif
 
                 const auto& in = arg.value<QDBusArgument>();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+                if (!QDBusMetaType::demarshall(in, QMetaType(wireId), out.data())) {
+#else
                 if (!QDBusMetaType::demarshall(in, wireId, out.data())) {
+#endif
                     qDebug() << "Internal error: failed QDBusArgument conversion from" << arg << "to type"
                              << QMetaType::typeName(wireId) << wireId;
                     return false;
@@ -357,7 +369,11 @@ namespace FdoSecrets
         // prepare output args
         outputArgs.reserve(outputArgs.size() + method.outputTypes.size());
         for (const auto& outputType : asConst(method.outputTypes)) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            outputArgs.append(QVariant(QMetaType(outputType), nullptr));
+#else
             outputArgs.append(QVariant(outputType, nullptr));
+#endif
             params.append(const_cast<void*>(outputArgs.last().constData()));
         }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/fdosecrets/dbus/DBusMgr.cpp keepassxc-2.7.10/src/fdosecrets/dbus/DBusMgr.cpp
--- keepassxc-2.7.10.orig/src/fdosecrets/dbus/DBusMgr.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/fdosecrets/dbus/DBusMgr.cpp	2025-07-14 11:37:09.874352793 -0700
@@ -186,7 +186,11 @@ namespace FdoSecrets
 
         // /proc/pid/stat gives ppid, name
         QFile stat(QStringLiteral("/proc/%1/stat").arg(pid));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (stat.open(QIODeviceBase::ReadOnly)) {
+#else
         if (stat.open(QIODevice::ReadOnly)) {
+#endif
             auto line = stat.readAll();
             // find comm field without looking in what's inside as it's user controlled
             auto commStart = line.indexOf('(');
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/fdosecrets/objects/Collection.cpp keepassxc-2.7.10/src/fdosecrets/objects/Collection.cpp
--- keepassxc-2.7.10.orig/src/fdosecrets/objects/Collection.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/fdosecrets/objects/Collection.cpp	2025-07-14 11:37:09.874519535 -0700
@@ -648,7 +648,11 @@ namespace FdoSecrets
         // groupPath can't be empty here, because otherwise it will match m_exposedGroup and was returned above
         Q_ASSERT(!groupPath.isEmpty());
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        auto groups = groupPath.split('/', Qt::SkipEmptyParts);
+#else
         auto groups = groupPath.split('/', QString::SkipEmptyParts);
+#endif
         auto groupName = groups.takeLast();
 
         // create parent group
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/fdosecrets/objects/Item.cpp keepassxc-2.7.10/src/fdosecrets/objects/Item.cpp
--- keepassxc-2.7.10.orig/src/fdosecrets/objects/Item.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/fdosecrets/objects/Item.cpp	2025-07-14 11:37:09.874680495 -0700
@@ -28,7 +28,13 @@
 
 #include <QMimeDatabase>
 #include <QSet>
-#include <QTextCodec>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && defined(USE_QT5COMPAT)
+#  include <QtCore5Compat/QTextCodec>
+#elif QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QStringConverter>
+#else
+#  include <QTextCodec>
+#endif
 
 namespace FdoSecrets
 {
@@ -400,7 +406,11 @@ namespace FdoSecrets
         Q_ASSERT(group);
 
         // root group is represented by a single slash, thus adding an empty component.
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        pathComponents.prepend(QLatin1String(""));
+#else
         pathComponents.prepend(QLatin1Literal(""));
+#endif
 
         return pathComponents.join('/');
     }
@@ -414,6 +424,71 @@ namespace FdoSecrets
         auto mimeType = db.mimeTypeForName(mimeName);
 
         // find a suitable codec
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && !defined(USE_QT5COMPAT)
+	bool supportedCodec = true;
+        QStringConverter::Encoding codec = QStringConverter::System;
+        static const QRegularExpression charsetPattern(QStringLiteral(R"re(charset=(?<encode>.+)$)re"));
+        auto match = charsetPattern.match(contentType);
+        if (match.hasMatch()) {
+            QString codecName = match.captured(QStringLiteral("encode"));
+            if (codecName.toLatin1().compare(QByteArray("ascii"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Latin1;
+            else if (codecName.toLatin1().compare(QByteArray("cp1252"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::System;
+            else if (codecName.toLatin1().compare(QByteArray("iso_8859-1"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Latin1;
+            else if (codecName.toLatin1().compare(QByteArray("iso-8859-1"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Latin1;
+            else if (codecName.toLatin1().compare(QByteArray("iso88591"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Latin1;
+            else if (codecName.toLatin1().compare(QByteArray("latin1"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Latin1;
+            else if (codecName.toLatin1().compare(QByteArray("utf-8"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Utf8;
+            else if (codecName.toLatin1().compare(QByteArray("utf8"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Utf8;
+            else if (codecName.toLatin1().compare(QByteArray("utf-16be"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Utf16BE;
+            else if (codecName.toLatin1().compare(QByteArray("unicode"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Utf16LE;
+            else if (codecName.toLatin1().compare(QByteArray("utf-16"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Utf16LE;
+            else if (codecName.toLatin1().compare(QByteArray("utf-16le"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::Utf16LE;
+            else if (codecName.toLatin1().compare(QByteArray("windows-1252"), Qt::CaseInsensitive) == 0)
+                codec = QStringConverter::System;
+            else
+                supportedCodec = false;
+// iso-8859-1 < windows-1252 in terms of set size.
+#warning "FdoSecrets::setEntrySecret():  Windows-1252 for charset is not supported for Qt6 across ports.  Enable WITH_QT5COMPAT cmake option for support for Windows-1252."
+        } else {
+            codec = QStringConverter::Utf8;
+        }
+
+        if (!mimeType.isValid() || !mimeType.inherits(QStringLiteral("text/plain")) || !supportedCodec) {
+            if (EntryAttributes::matchReference(contentType).hasMatch()) {
+                return QDBusError::InvalidArgs;
+            }
+            // we can't handle this content type, save the data as attachment, and clear the password field
+            entry->setPassword("");
+            entry->attachments()->set(FDO_SECRETS_DATA, data);
+            entry->attributes()->set(FDO_SECRETS_CONTENT_TYPE, contentType);
+        } else {
+            auto toUtf16 = QStringDecoder(codec);
+            auto password = toUtf16(data);
+            if (EntryAttributes::matchReference(password).hasMatch()) {
+                return QDBusError::InvalidArgs;
+            }
+            // save the data to password field
+            entry->setPassword(password);
+            if (entry->attachments()->hasKey(FDO_SECRETS_DATA)) {
+                entry->attachments()->remove(FDO_SECRETS_DATA);
+            }
+            if (entry->attributes()->hasKey(FDO_SECRETS_CONTENT_TYPE)) {
+                entry->attributes()->remove(FDO_SECRETS_CONTENT_TYPE);
+            }
+        }
+#else
         QTextCodec* codec = nullptr;
         static const QRegularExpression charsetPattern(QStringLiteral(R"re(charset=(?<encode>.+)$)re"));
         auto match = charsetPattern.match(contentType);
@@ -445,6 +520,7 @@ namespace FdoSecrets
                 entry->attributes()->remove(FDO_SECRETS_CONTENT_TYPE);
             }
         }
+#endif
         return {};
     }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/fdosecrets/widgets/AccessControlDialog.cpp keepassxc-2.7.10/src/fdosecrets/widgets/AccessControlDialog.cpp
--- keepassxc-2.7.10.orig/src/fdosecrets/widgets/AccessControlDialog.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/fdosecrets/widgets/AccessControlDialog.cpp	2025-07-14 11:37:09.874882780 -0700
@@ -206,7 +206,11 @@ QHash<Entry*, AuthDecision> AccessContro
 AccessControlDialog::EntryModel::EntryModel(QList<Entry*> entries, QObject* parent)
     : QAbstractTableModel(parent)
     , m_entries(std::move(entries))
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    , m_selected(QSet<Entry*>(m_entries.begin(), m_entries.end()))
+#else
     , m_selected(QSet<Entry*>::fromList(m_entries))
+#endif
 {
 }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/fdosecrets/widgets/AccessControlDialog.h keepassxc-2.7.10/src/fdosecrets/widgets/AccessControlDialog.h
--- keepassxc-2.7.10.orig/src/fdosecrets/widgets/AccessControlDialog.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/fdosecrets/widgets/AccessControlDialog.h	2025-07-14 11:37:09.874999511 -0700
@@ -31,6 +31,11 @@
 
 class Entry;
 
+#ifndef OPAQUE_PTR_Entry
+  #define OPAQUE_PTR_Entry
+  Q_DECLARE_OPAQUE_POINTER(Entry*)
+#endif // OPAQUE_PTR_Entry
+
 namespace Ui
 {
     class AccessControlDialog;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/BitwardenReader.cpp keepassxc-2.7.10/src/format/BitwardenReader.cpp
--- keepassxc-2.7.10.orig/src/format/BitwardenReader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/BitwardenReader.cpp	2025-07-14 11:37:09.875115492 -0700
@@ -90,10 +90,13 @@ namespace
                     // Change from UUID to base64 byte array
                     const auto credentialIdValue = passkey.value("credentialId").toString();
                     if (!credentialIdValue.isEmpty()) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+                        const auto credentialUuid = Tools::uuidToHex(QUuid(credentialIdValue));
+#else
                         const auto credentialUuid = Tools::uuidToHex(credentialIdValue);
+#endif
                         const auto credentialIdArray = QByteArray::fromHex(credentialUuid.toUtf8());
-                        const auto credentialId =
-                            credentialIdArray.toBase64(QByteArray::Base64UrlEncoding | QByteArray::OmitTrailingEquals);
+                        const auto credentialId = credentialIdArray.toBase64(QByteArray::Base64UrlEncoding | QByteArray::OmitTrailingEquals);
                         entry->attributes()->set(EntryAttributes::KPEX_PASSKEY_CREDENTIAL_ID, credentialId, true);
                     }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/CsvExporter.cpp keepassxc-2.7.10/src/format/CsvExporter.cpp
--- keepassxc-2.7.10.orig/src/format/CsvExporter.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/CsvExporter.cpp	2025-07-14 11:37:09.875245615 -0700
@@ -25,7 +25,11 @@
 bool CsvExporter::exportDatabase(const QString& filename, const QSharedPointer<const Database>& db)
 {
     QFile file(filename);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!file.open(QIODeviceBase::WriteOnly | QIODeviceBase::Truncate)) {
+#else
     if (!file.open(QIODevice::WriteOnly | QIODevice::Truncate)) {
+#endif
         m_error = file.errorString();
         return false;
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/CsvParser.cpp keepassxc-2.7.10/src/format/CsvParser.cpp
--- keepassxc-2.7.10.orig/src/format/CsvParser.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/CsvParser.cpp	2025-07-14 11:37:09.875372216 -0700
@@ -19,7 +19,11 @@
 #include "CsvParser.h"
 
 #include <QFile>
-#include <QTextCodec>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QStringConverter>
+#elif QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#  include <QTextCodec>
+#endif
 
 #include "core/Tools.h"
 
@@ -33,8 +37,13 @@ CsvParser::CsvParser()
     reset();
     m_csv.setBuffer(&m_array);
     m_ts.setDevice(&m_csv);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_csv.open(QIODeviceBase::ReadOnly);
+    m_ts.setEncoding(QStringConverter::Utf8);
+#else
     m_csv.open(QIODevice::ReadOnly);
     m_ts.setCodec("UTF-8");
+#endif
 }
 
 CsvParser::~CsvParser()
@@ -72,7 +81,11 @@ bool CsvParser::readFile(QIODevice* devi
         device->close();
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    device->open(QIODeviceBase::ReadOnly);
+#else
     device->open(QIODevice::ReadOnly);
+#endif
     if (!Tools::readAllFromDevice(device, m_array)) {
         appendStatusMsg(QObject::tr("error reading from device"), true);
         m_isFileLoaded = false;
@@ -92,7 +105,7 @@ bool CsvParser::readFile(QIODevice* devi
 
 void CsvParser::reset()
 {
-    m_ch = 0;
+    m_ch = QChar(0);
     m_currCol = 1;
     m_currRow = 1;
     m_isEof = false;
@@ -349,7 +362,18 @@ void CsvParser::setComment(const QChar&
 
 void CsvParser::setCodec(const QString& s)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (s.toLocal8Bit().compare(QByteArray("UTF-8"), Qt::CaseInsensitive) == 0)
+        m_ts.setEncoding(QStringConverter::Utf8);
+    else if (s.toLocal8Bit().compare(QByteArray("Windows-1252"), Qt::CaseInsensitive) == 0)
+        m_ts.setEncoding(QStringConverter::System);
+    else if (s.toLocal8Bit().compare(QByteArray("UTF-16"), Qt::CaseInsensitive) == 0)
+        m_ts.setEncoding(QStringConverter::Utf16);
+    else if (s.toLocal8Bit().compare(QByteArray("UTF-16LE"), Qt::CaseInsensitive) == 0)
+        m_ts.setEncoding(QStringConverter::Utf16LE);
+#else
     m_ts.setCodec(QTextCodec::codecForName(s.toLocal8Bit()));
+#endif
 }
 
 void CsvParser::setFieldSeparator(const QChar& c)
@@ -396,8 +420,7 @@ void CsvParser::appendStatusMsg(const QS
         m_statusMsg.append("\n");
     }
 
-    m_statusMsg +=
-        QObject::tr("%1, row: %2, column: %3").arg(s, QString::number(m_currRow), QString::number(m_currCol));
+    m_statusMsg += QObject::tr("%1, row: %2, column: %3").arg(s, QString::number(m_currRow), QString::number(m_currCol));
 
     m_isGood = !isCritical;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/HtmlExporter.cpp keepassxc-2.7.10/src/format/HtmlExporter.cpp
--- keepassxc-2.7.10.orig/src/format/HtmlExporter.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/HtmlExporter.cpp	2025-07-14 11:37:09.875496158 -0700
@@ -100,7 +100,11 @@ bool HtmlExporter::exportDatabase(const
                                   bool ascending)
 {
     QFile file(filename);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!file.open(QIODeviceBase::WriteOnly | QIODeviceBase::Truncate)) {
+#else
     if (!file.open(QIODevice::WriteOnly | QIODevice::Truncate)) {
+#endif
         m_error = file.errorString();
         return false;
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/Kdbx3Reader.cpp keepassxc-2.7.10/src/format/Kdbx3Reader.cpp
--- keepassxc-2.7.10.orig/src/format/Kdbx3Reader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/Kdbx3Reader.cpp	2025-07-14 11:37:09.875618720 -0700
@@ -70,7 +70,11 @@ bool Kdbx3Reader::readDatabaseImpl(QIODe
         raiseError(cipherStream.errorString());
         return false;
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!cipherStream.open(QIODeviceBase::ReadOnly)) {
+#else
     if (!cipherStream.open(QIODevice::ReadOnly)) {
+#endif
         raiseError(cipherStream.errorString());
         return false;
     }
@@ -84,7 +88,11 @@ bool Kdbx3Reader::readDatabaseImpl(QIODe
     }
 
     HashedBlockStream hashedStream(&cipherStream);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!hashedStream.open(QIODeviceBase::ReadOnly)) {
+#else
     if (!hashedStream.open(QIODevice::ReadOnly)) {
+#endif
         raiseError(hashedStream.errorString());
         return false;
     }
@@ -97,7 +105,11 @@ bool Kdbx3Reader::readDatabaseImpl(QIODe
     } else {
         ioCompressor.reset(new QtIOCompressor(&hashedStream));
         ioCompressor->setStreamFormat(QtIOCompressor::GzipFormat);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (!ioCompressor->open(QIODeviceBase::ReadOnly)) {
+#else
         if (!ioCompressor->open(QIODevice::ReadOnly)) {
+#endif
             raiseError(ioCompressor->errorString());
             return false;
         }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/Kdbx3Writer.cpp keepassxc-2.7.10/src/format/Kdbx3Writer.cpp
--- keepassxc-2.7.10.orig/src/format/Kdbx3Writer.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/Kdbx3Writer.cpp	2025-07-14 11:37:09.875730286 -0700
@@ -66,7 +66,11 @@ bool Kdbx3Writer::writeDatabase(QIODevic
 
     // write header
     QBuffer header;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    header.open(QIODeviceBase::WriteOnly);
+#else
     header.open(QIODevice::WriteOnly);
+#endif
 
     writeMagicNumbers(&header, KeePass2::SIGNATURE_1, KeePass2::SIGNATURE_2, db->formatVersion());
 
@@ -102,14 +106,22 @@ bool Kdbx3Writer::writeDatabase(QIODevic
     // write cipher stream
     SymmetricCipherStream cipherStream(device);
     cipherStream.init(mode, SymmetricCipher::Encrypt, finalKey, encryptionIV);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!cipherStream.open(QIODeviceBase::WriteOnly)) {
+#else
     if (!cipherStream.open(QIODevice::WriteOnly)) {
+#endif
         raiseError(cipherStream.errorString());
         return false;
     }
     CHECK_RETURN_FALSE(writeData(&cipherStream, startBytes));
 
     HashedBlockStream hashedStream(&cipherStream);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!hashedStream.open(QIODeviceBase::WriteOnly)) {
+#else
     if (!hashedStream.open(QIODevice::WriteOnly)) {
+#endif
         raiseError(hashedStream.errorString());
         return false;
     }
@@ -122,7 +134,11 @@ bool Kdbx3Writer::writeDatabase(QIODevic
     } else {
         ioCompressor.reset(new QtIOCompressor(&hashedStream));
         ioCompressor->setStreamFormat(QtIOCompressor::GzipFormat);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (!ioCompressor->open(QIODeviceBase::WriteOnly)) {
+#else
         if (!ioCompressor->open(QIODevice::WriteOnly)) {
+#endif
             raiseError(ioCompressor->errorString());
             return false;
         }
@@ -141,7 +157,11 @@ bool Kdbx3Writer::writeDatabase(QIODevic
     xmlWriter.writeDatabase(outputDevice, db, &randomStream, headerHash);
 
     // Explicitly close/reset streams so they are flushed and we can detect
+//#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    // errors. QIODeviceBase::close() resets errorString() etc.
+//#else
     // errors. QIODevice::close() resets errorString() etc.
+//#endif
     if (ioCompressor) {
         ioCompressor->close();
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/Kdbx4Reader.cpp keepassxc-2.7.10/src/format/Kdbx4Reader.cpp
--- keepassxc-2.7.10.orig/src/format/Kdbx4Reader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/Kdbx4Reader.cpp	2025-07-14 11:37:09.875867173 -0700
@@ -80,7 +80,11 @@ bool Kdbx4Reader::readDatabaseImpl(QIODe
         return false;
     }
     HmacBlockStream hmacStream(device, hmacKey);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!hmacStream.open(QIODeviceBase::ReadOnly)) {
+#else
     if (!hmacStream.open(QIODevice::ReadOnly)) {
+#endif
         raiseError(hmacStream.errorString());
         return false;
     }
@@ -95,7 +99,11 @@ bool Kdbx4Reader::readDatabaseImpl(QIODe
         raiseError(cipherStream.errorString());
         return false;
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!cipherStream.open(QIODeviceBase::ReadOnly)) {
+#else
     if (!cipherStream.open(QIODevice::ReadOnly)) {
+#endif
         raiseError(cipherStream.errorString());
         return false;
     }
@@ -109,7 +117,11 @@ bool Kdbx4Reader::readDatabaseImpl(QIODe
     } else {
         ioCompressor.reset(new QtIOCompressor(&cipherStream));
         ioCompressor->setStreamFormat(QtIOCompressor::GzipFormat);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (!ioCompressor->open(QIODeviceBase::ReadOnly)) {
+#else
         if (!ioCompressor->open(QIODevice::ReadOnly)) {
+#endif
             raiseError(ioCompressor->errorString());
             return false;
         }
@@ -204,7 +216,11 @@ bool Kdbx4Reader::readHeaderField(StoreD
 
     case KeePass2::HeaderFieldID::KdfParameters: {
         QBuffer bufIoDevice(&fieldData);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (!bufIoDevice.open(QIODeviceBase::ReadOnly)) {
+#else
         if (!bufIoDevice.open(QIODevice::ReadOnly)) {
+#endif
             raiseError(tr("Failed to open buffer for KDF parameters in header"));
             return false;
         }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/Kdbx4Writer.cpp keepassxc-2.7.10/src/format/Kdbx4Writer.cpp
--- keepassxc-2.7.10.orig/src/format/Kdbx4Writer.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/Kdbx4Writer.cpp	2025-07-14 11:37:09.876005484 -0700
@@ -68,7 +68,11 @@ bool Kdbx4Writer::writeDatabase(QIODevic
     QByteArray headerData;
     {
         QBuffer header;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        header.open(QIODeviceBase::WriteOnly);
+#else
         header.open(QIODevice::WriteOnly);
+#endif
 
         writeMagicNumbers(&header, KeePass2::SIGNATURE_1, KeePass2::SIGNATURE_2, db->formatVersion());
 
@@ -119,7 +123,11 @@ bool Kdbx4Writer::writeDatabase(QIODevic
     QScopedPointer<SymmetricCipherStream> cipherStream;
 
     hmacBlockStream.reset(new HmacBlockStream(device, hmacKey));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!hmacBlockStream->open(QIODeviceBase::WriteOnly)) {
+#else
     if (!hmacBlockStream->open(QIODevice::WriteOnly)) {
+#endif
         raiseError(hmacBlockStream->errorString());
         return false;
     }
@@ -130,7 +138,11 @@ bool Kdbx4Writer::writeDatabase(QIODevic
         raiseError(cipherStream->errorString());
         return false;
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!cipherStream->open(QIODeviceBase::WriteOnly)) {
+#else
     if (!cipherStream->open(QIODevice::WriteOnly)) {
+#endif
         raiseError(cipherStream->errorString());
         return false;
     }
@@ -143,7 +155,11 @@ bool Kdbx4Writer::writeDatabase(QIODevic
     } else {
         ioCompressor.reset(new QtIOCompressor(cipherStream.data()));
         ioCompressor->setStreamFormat(QtIOCompressor::GzipFormat);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (!ioCompressor->open(QIODeviceBase::WriteOnly)) {
+#else
         if (!ioCompressor->open(QIODevice::WriteOnly)) {
+#endif
             raiseError(ioCompressor->errorString());
             return false;
         }
@@ -174,7 +190,11 @@ bool Kdbx4Writer::writeDatabase(QIODevic
     xmlWriter.writeDatabase(outputDevice, db, &randomStream, headerHash);
 
     // Explicitly close/reset streams so they are flushed and we can detect
+//#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    // errors. QIODeviceBase::close() resets errorString() etc.
+//#else
     // errors. QIODevice::close() resets errorString() etc.
+//#endif
     if (ioCompressor) {
         ioCompressor->close();
     }
@@ -263,7 +283,11 @@ KdbxXmlWriter::BinaryIdxMap Kdbx4Writer:
 bool Kdbx4Writer::serializeVariantMap(const QVariantMap& map, QByteArray& outputBytes)
 {
     QBuffer buf(&outputBytes);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buf.open(QIODeviceBase::WriteOnly);
+#else
     buf.open(QIODevice::WriteOnly);
+#endif
     CHECK_RETURN_FALSE(buf.write(Endian::sizedIntToBytes(KeePass2::VARIANTMAP_VERSION, KeePass2::BYTEORDER)) == 2);
 
     bool ok;
@@ -316,9 +340,9 @@ bool Kdbx4Writer::serializeVariantMap(co
         QByteArray dataLenBytes = Endian::sizedIntToBytes(data.size(), KeePass2::BYTEORDER);
 
         CHECK_RETURN_FALSE(buf.write(typeBytes) == 1);
-        CHECK_RETURN_FALSE(buf.write(nameLenBytes) == 4);
+        CHECK_RETURN_FALSE(buf.write(nameLenBytes, 4) == 4);
         CHECK_RETURN_FALSE(buf.write(nameBytes) == nameBytes.size());
-        CHECK_RETURN_FALSE(buf.write(dataLenBytes) == 4);
+        CHECK_RETURN_FALSE(buf.write(dataLenBytes, 4) == 4);
         CHECK_RETURN_FALSE(buf.write(data) == data.size());
     }
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/KdbxReader.cpp keepassxc-2.7.10/src/format/KdbxReader.cpp
--- keepassxc-2.7.10.orig/src/format/KdbxReader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/KdbxReader.cpp	2025-07-14 11:37:09.876157608 -0700
@@ -73,7 +73,11 @@ bool KdbxReader::readDatabase(QIODevice*
     m_protectedStreamKey.clear();
 
     StoreDataStream headerStream(device);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    headerStream.open(QIODeviceBase::ReadOnly);
+#else
     headerStream.open(QIODevice::ReadOnly);
+#endif
 
     // read KDBX magic numbers
     quint32 sig1, sig2, version;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/KdbxWriter.cpp keepassxc-2.7.10/src/format/KdbxWriter.cpp
--- keepassxc-2.7.10.orig/src/format/KdbxWriter.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/KdbxWriter.cpp	2025-07-14 11:37:09.876267156 -0700
@@ -70,7 +70,11 @@ void KdbxWriter::extractDatabase(QByteAr
 {
     QBuffer buffer;
     buffer.setBuffer(&xmlOutput);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buffer.open(QIODeviceBase::WriteOnly);
+#else
     buffer.open(QIODevice::WriteOnly);
+#endif
     KdbxXmlWriter::BinaryIdxMap idxMap;
     KdbxXmlWriter writer(db->formatVersion(), idxMap);
     writer.disableInnerStreamProtection(true);
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/KdbxXmlReader.cpp keepassxc-2.7.10/src/format/KdbxXmlReader.cpp
--- keepassxc-2.7.10.orig/src/format/KdbxXmlReader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/KdbxXmlReader.cpp	2025-07-14 11:37:09.876423475 -0700
@@ -55,7 +55,11 @@ KdbxXmlReader::KdbxXmlReader(quint32 ver
 QSharedPointer<Database> KdbxXmlReader::readDatabase(const QString& filename)
 {
     QFile file(filename);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    file.open(QIODeviceBase::ReadOnly);
+#else
     file.open(QIODevice::ReadOnly);
+#endif
     return readDatabase(&file);
 }
 
@@ -103,7 +107,7 @@ void KdbxXmlReader::readDatabase(QIODevi
         return;
     }
 
-    if (m_xml.readNextStartElement() && m_xml.name() == "KeePassFile") {
+    if (m_xml.readNextStartElement() && m_xml.name().toUtf8().compare(QByteArray("KeePassFile")) == 0) {
         rootGroupParsed = parseKeePassFile();
     }
 
@@ -120,8 +124,15 @@ void KdbxXmlReader::readDatabase(QIODevi
         qWarning("KdbxXmlReader::readDatabase: found %d invalid entry reference(s)", m_tmpParent->children().size());
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QList<QString> listBinaryPoolKeys = asConst(m_binaryPool).keys();
+    QList<QString> listBinaryMapKeys = asConst(m_binaryMap).keys();
+    const QSet<QString> poolKeys = QSet<QString>(listBinaryPoolKeys.begin(), listBinaryPoolKeys.end());
+    const QSet<QString> entryKeys = QSet<QString>(listBinaryMapKeys.begin(), listBinaryMapKeys.end());
+#else
     const QSet<QString> poolKeys = asConst(m_binaryPool).keys().toSet();
     const QSet<QString> entryKeys = asConst(m_binaryMap).keys().toSet();
+#endif
     const QSet<QString> unmappedKeys = entryKeys - poolKeys;
     const QSet<QString> unusedKeys = poolKeys - entryKeys;
 
@@ -133,7 +144,11 @@ void KdbxXmlReader::readDatabase(QIODevi
         qWarning("KdbxXmlReader::readDatabase: found unused key \"%s\"", qPrintable(key));
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QMultiHash<QString, QPair<Entry*, QString>>::const_iterator i;
+#else
     QHash<QString, QPair<Entry*, QString>>::const_iterator i;
+#endif
     for (i = m_binaryMap.constBegin(); i != m_binaryMap.constEnd(); ++i) {
         const QPair<Entry*, QString>& target = i.value();
         target.first->attachments()->set(target.second, m_binaryPool[i.key()]);
@@ -186,9 +201,13 @@ QString KdbxXmlReader::errorString() con
     return QString();
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+bool KdbxXmlReader::isTrueValue(const QStringView& value)
+#else
 bool KdbxXmlReader::isTrueValue(const QStringRef& value)
+#endif
 {
-    return value.compare(QLatin1String("true"), Qt::CaseInsensitive) == 0 || value == "1";
+    return value.compare(QLatin1String("true"), Qt::CaseInsensitive) == 0 || value.toUtf8().compare(QByteArray("1")) == 0;
 }
 
 void KdbxXmlReader::raiseError(const QString& errorMessage)
@@ -204,18 +223,18 @@ QByteArray KdbxXmlReader::headerHash() c
 
 bool KdbxXmlReader::parseKeePassFile()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "KeePassFile");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("KeePassFile")) == 0);
 
     bool rootElementFound = false;
     bool rootParsedSuccessfully = false;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Meta") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Meta")) == 0) {
             parseMeta();
             continue;
         }
 
-        if (m_xml.name() == "Root") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Root")) == 0) {
             if (rootElementFound) {
                 rootParsedSuccessfully = false;
                 qWarning("Multiple root elements");
@@ -234,72 +253,72 @@ bool KdbxXmlReader::parseKeePassFile()
 
 void KdbxXmlReader::parseMeta()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Meta");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Meta")) == 0);
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Generator") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Generator")) == 0) {
             m_meta->setGenerator(readString());
-        } else if (m_xml.name() == "HeaderHash") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("HeaderHash")) == 0) {
             m_headerHash = readBinary();
-        } else if (m_xml.name() == "DatabaseName") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DatabaseName")) == 0) {
             m_meta->setName(readString());
-        } else if (m_xml.name() == "DatabaseNameChanged") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DatabaseNameChanged")) == 0) {
             m_meta->setNameChanged(readDateTime());
-        } else if (m_xml.name() == "DatabaseDescription") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DatabaseDescription")) == 0) {
             m_meta->setDescription(readString());
-        } else if (m_xml.name() == "DatabaseDescriptionChanged") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DatabaseDescriptionChanged")) == 0) {
             m_meta->setDescriptionChanged(readDateTime());
-        } else if (m_xml.name() == "DefaultUserName") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DefaultUserName")) == 0) {
             m_meta->setDefaultUserName(readString());
-        } else if (m_xml.name() == "DefaultUserNameChanged") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DefaultUserNameChanged")) == 0) {
             m_meta->setDefaultUserNameChanged(readDateTime());
-        } else if (m_xml.name() == "MaintenanceHistoryDays") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("MaintenanceHistoryDays")) == 0) {
             m_meta->setMaintenanceHistoryDays(readNumber());
-        } else if (m_xml.name() == "Color") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("Color")) == 0) {
             m_meta->setColor(readColor());
-        } else if (m_xml.name() == "MasterKeyChanged") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("MasterKeyChanged")) == 0) {
             m_meta->setDatabaseKeyChanged(readDateTime());
-        } else if (m_xml.name() == "MasterKeyChangeRec") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("MasterKeyChangeRec")) == 0) {
             m_meta->setMasterKeyChangeRec(readNumber());
-        } else if (m_xml.name() == "MasterKeyChangeForce") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("MasterKeyChangeForce")) == 0) {
             m_meta->setMasterKeyChangeForce(readNumber());
-        } else if (m_xml.name() == "MemoryProtection") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("MemoryProtection")) == 0) {
             parseMemoryProtection();
-        } else if (m_xml.name() == "CustomIcons") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("CustomIcons")) == 0) {
             parseCustomIcons();
-        } else if (m_xml.name() == "RecycleBinEnabled") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("RecycleBinEnabled")) == 0) {
             m_meta->setRecycleBinEnabled(readBool());
-        } else if (m_xml.name() == "RecycleBinUUID") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("RecycleBinUUID")) == 0) {
             m_meta->setRecycleBin(getGroup(readUuid()));
-        } else if (m_xml.name() == "RecycleBinChanged") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("RecycleBinChanged")) == 0) {
             m_meta->setRecycleBinChanged(readDateTime());
-        } else if (m_xml.name() == "EntryTemplatesGroup") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("EntryTemplatesGroup")) == 0) {
             m_meta->setEntryTemplatesGroup(getGroup(readUuid()));
-        } else if (m_xml.name() == "EntryTemplatesGroupChanged") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("EntryTemplatesGroupChanged")) == 0) {
             m_meta->setEntryTemplatesGroupChanged(readDateTime());
-        } else if (m_xml.name() == "LastSelectedGroup") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("LastSelectedGroup")) == 0) {
             m_meta->setLastSelectedGroup(getGroup(readUuid()));
-        } else if (m_xml.name() == "LastTopVisibleGroup") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("LastTopVisibleGroup")) == 0) {
             m_meta->setLastTopVisibleGroup(getGroup(readUuid()));
-        } else if (m_xml.name() == "HistoryMaxItems") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("HistoryMaxItems")) == 0) {
             int value = readNumber();
             if (value >= -1) {
                 m_meta->setHistoryMaxItems(value);
             } else {
                 qWarning("HistoryMaxItems invalid number");
             }
-        } else if (m_xml.name() == "HistoryMaxSize") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("HistoryMaxSize")) == 0) {
             int value = readNumber();
             if (value >= -1) {
                 m_meta->setHistoryMaxSize(value);
             } else {
                 qWarning("HistoryMaxSize invalid number");
             }
-        } else if (m_xml.name() == "Binaries") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("Binaries")) == 0) {
             parseBinaries();
-        } else if (m_xml.name() == "CustomData") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("CustomData")) == 0) {
             parseCustomData(m_meta->customData());
-        } else if (m_xml.name() == "SettingsChanged") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("SettingsChanged")) == 0) {
             m_meta->setSettingsChanged(readDateTime());
         } else {
             skipCurrentElement();
@@ -309,18 +328,18 @@ void KdbxXmlReader::parseMeta()
 
 void KdbxXmlReader::parseMemoryProtection()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "MemoryProtection");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("MemoryProtection")) == 0);
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "ProtectTitle") {
+        if (m_xml.name().toUtf8().compare(QByteArray("ProtectTitle")) == 0) {
             m_meta->setProtectTitle(readBool());
-        } else if (m_xml.name() == "ProtectUserName") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("ProtectUserName")) == 0) {
             m_meta->setProtectUsername(readBool());
-        } else if (m_xml.name() == "ProtectPassword") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("ProtectPassword")) == 0) {
             m_meta->setProtectPassword(readBool());
-        } else if (m_xml.name() == "ProtectURL") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("ProtectURL")) == 0) {
             m_meta->setProtectUrl(readBool());
-        } else if (m_xml.name() == "ProtectNotes") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("ProtectNotes")) == 0) {
             m_meta->setProtectNotes(readBool());
         } else {
             skipCurrentElement();
@@ -330,10 +349,10 @@ void KdbxXmlReader::parseMemoryProtectio
 
 void KdbxXmlReader::parseCustomIcons()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "CustomIcons");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("CustomIcons")) == 0);
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Icon") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Icon")) == 0) {
             parseIcon();
         } else {
             skipCurrentElement();
@@ -343,7 +362,7 @@ void KdbxXmlReader::parseCustomIcons()
 
 void KdbxXmlReader::parseIcon()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Icon");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Icon")) == 0);
 
     QUuid uuid;
     QByteArray iconData;
@@ -353,15 +372,15 @@ void KdbxXmlReader::parseIcon()
     bool iconSet = false;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "UUID") {
+        if (m_xml.name().toUtf8().compare(QByteArray("UUID")) == 0) {
             uuid = readUuid();
             uuidSet = !uuid.isNull();
-        } else if (m_xml.name() == "Data") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("Data")) == 0) {
             iconData = readBinary();
             iconSet = true;
-        } else if (m_xml.name() == "Name") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("Name")) == 0) {
             name = readString();
-        } else if (m_xml.name() == "LastModificationTime") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("LastModificationTime")) == 0) {
             lastModified = readDateTime();
         } else {
             skipCurrentElement();
@@ -382,10 +401,10 @@ void KdbxXmlReader::parseIcon()
 
 void KdbxXmlReader::parseBinaries()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Binaries");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Binaries")) == 0);
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() != "Binary") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Binary")) != 0) {
             skipCurrentElement();
             continue;
         }
@@ -404,10 +423,10 @@ void KdbxXmlReader::parseBinaries()
 
 void KdbxXmlReader::parseCustomData(CustomData* customData)
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "CustomData");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("CustomData")) == 0);
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Item") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Item")) == 0) {
             parseCustomDataItem(customData);
             continue;
         }
@@ -417,7 +436,7 @@ void KdbxXmlReader::parseCustomData(Cust
 
 void KdbxXmlReader::parseCustomDataItem(CustomData* customData)
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Item");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Item")) == 0);
 
     QString key;
     CustomData::CustomDataItem item;
@@ -425,13 +444,13 @@ void KdbxXmlReader::parseCustomDataItem(
     bool valueSet = false;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Key") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Key")) == 0) {
             key = readString();
             keySet = true;
-        } else if (m_xml.name() == "Value") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("Value")) == 0) {
             item.value = readString();
             valueSet = true;
-        } else if (m_xml.name() == "LastModificationTime") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("LastModificationTime")) == 0) {
             item.lastModified = readDateTime();
         } else {
             skipCurrentElement();
@@ -448,13 +467,13 @@ void KdbxXmlReader::parseCustomDataItem(
 
 bool KdbxXmlReader::parseRoot()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Root");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Root")) == 0);
 
     bool groupElementFound = false;
     bool groupParsedSuccessfully = false;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Group") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Group")) == 0) {
             if (groupElementFound) {
                 groupParsedSuccessfully = false;
                 raiseError(tr("Multiple group elements"));
@@ -469,7 +488,7 @@ bool KdbxXmlReader::parseRoot()
             }
 
             groupElementFound = true;
-        } else if (m_xml.name() == "DeletedObjects") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DeletedObjects")) == 0) {
             parseDeletedObjects();
         } else {
             skipCurrentElement();
@@ -481,14 +500,14 @@ bool KdbxXmlReader::parseRoot()
 
 Group* KdbxXmlReader::parseGroup()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Group");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Group")) == 0);
 
     auto group = new Group();
     group->setUpdateTimeinfo(false);
     QList<Group*> children;
     QList<Entry*> entries;
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "UUID") {
+        if (m_xml.name().toUtf8().compare(QByteArray("UUID")) == 0) {
             QUuid uuid = readUuid();
             if (uuid.isNull()) {
                 if (m_strictMode) {
@@ -501,19 +520,19 @@ Group* KdbxXmlReader::parseGroup()
             }
             continue;
         }
-        if (m_xml.name() == "Name") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Name")) == 0) {
             group->setName(readString());
             continue;
         }
-        if (m_xml.name() == "Notes") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Notes")) == 0) {
             group->setNotes(readString());
             continue;
         }
-        if (m_xml.name() == "Tags") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Tags")) == 0) {
             group->setTags(readString());
             continue;
         }
-        if (m_xml.name() == "IconID") {
+        if (m_xml.name().toUtf8().compare(QByteArray("IconID")) == 0) {
             int iconId = readNumber();
             if (iconId < 0) {
                 if (m_strictMode) {
@@ -525,26 +544,26 @@ Group* KdbxXmlReader::parseGroup()
             group->setIcon(iconId);
             continue;
         }
-        if (m_xml.name() == "CustomIconUUID") {
+        if (m_xml.name().toUtf8().compare(QByteArray("CustomIconUUID")) == 0) {
             QUuid uuid = readUuid();
             if (!uuid.isNull()) {
                 group->setIcon(uuid);
             }
             continue;
         }
-        if (m_xml.name() == "Times") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Times")) == 0) {
             group->setTimeInfo(parseTimes());
             continue;
         }
-        if (m_xml.name() == "IsExpanded") {
+        if (m_xml.name().toUtf8().compare(QByteArray("IsExpanded")) == 0) {
             group->setExpanded(readBool());
             continue;
         }
-        if (m_xml.name() == "DefaultAutoTypeSequence") {
+        if (m_xml.name().toUtf8().compare(QByteArray("DefaultAutoTypeSequence")) == 0) {
             group->setDefaultAutoTypeSequence(readString());
             continue;
         }
-        if (m_xml.name() == "EnableAutoType") {
+        if (m_xml.name().toUtf8().compare(QByteArray("EnableAutoType")) == 0) {
             QString str = readString();
 
             if (str.compare("null", Qt::CaseInsensitive) == 0) {
@@ -558,7 +577,7 @@ Group* KdbxXmlReader::parseGroup()
             }
             continue;
         }
-        if (m_xml.name() == "EnableSearching") {
+        if (m_xml.name().toUtf8().compare(QByteArray("EnableSearching")) == 0) {
             QString str = readString();
 
             if (str.compare("null", Qt::CaseInsensitive) == 0) {
@@ -572,29 +591,29 @@ Group* KdbxXmlReader::parseGroup()
             }
             continue;
         }
-        if (m_xml.name() == "LastTopVisibleEntry") {
+        if (m_xml.name().toUtf8().compare(QByteArray("LastTopVisibleEntry")) == 0) {
             group->setLastTopVisibleEntry(getEntry(readUuid()));
             continue;
         }
-        if (m_xml.name() == "Group") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Group")) == 0) {
             Group* newGroup = parseGroup();
             if (newGroup) {
                 children.append(newGroup);
             }
             continue;
         }
-        if (m_xml.name() == "Entry") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Entry")) == 0) {
             Entry* newEntry = parseEntry(false);
             if (newEntry) {
                 entries.append(newEntry);
             }
             continue;
         }
-        if (m_xml.name() == "CustomData") {
+        if (m_xml.name().toUtf8().compare(QByteArray("CustomData")) == 0) {
             parseCustomData(group->customData());
             continue;
         }
-        if (m_xml.name() == "PreviousParentGroup") {
+        if (m_xml.name().toUtf8().compare(QByteArray("PreviousParentGroup")) == 0) {
             group->setPreviousParentGroupUuid(readUuid());
             continue;
         }
@@ -629,10 +648,10 @@ Group* KdbxXmlReader::parseGroup()
 
 void KdbxXmlReader::parseDeletedObjects()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "DeletedObjects");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("DeletedObjects")) == 0);
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "DeletedObject") {
+        if (m_xml.name().toUtf8().compare(QByteArray("DeletedObject")) == 0) {
             parseDeletedObject();
         } else {
             skipCurrentElement();
@@ -642,12 +661,12 @@ void KdbxXmlReader::parseDeletedObjects(
 
 void KdbxXmlReader::parseDeletedObject()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "DeletedObject");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("DeletedObject")) == 0);
 
     DeletedObject delObj{{}, {}};
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "UUID") {
+        if (m_xml.name().toUtf8().compare(QByteArray("UUID")) == 0) {
             QUuid uuid = readUuid();
             if (uuid.isNull()) {
                 if (m_strictMode) {
@@ -659,7 +678,7 @@ void KdbxXmlReader::parseDeletedObject()
             delObj.uuid = uuid;
             continue;
         }
-        if (m_xml.name() == "DeletionTime") {
+        if (m_xml.name().toUtf8().compare(QByteArray("DeletionTime")) == 0) {
             delObj.deletionTime = readDateTime();
             continue;
         }
@@ -678,7 +697,7 @@ void KdbxXmlReader::parseDeletedObject()
 
 Entry* KdbxXmlReader::parseEntry(bool history)
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Entry");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Entry")) == 0);
 
     auto entry = new Entry();
     entry->setUpdateTimeinfo(false);
@@ -686,7 +705,7 @@ Entry* KdbxXmlReader::parseEntry(bool hi
     QList<StringPair> binaryRefs;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "UUID") {
+        if (m_xml.name().toUtf8().compare(QByteArray("UUID")) == 0) {
             QUuid uuid = readUuid();
             if (uuid.isNull()) {
                 if (m_strictMode) {
@@ -699,7 +718,7 @@ Entry* KdbxXmlReader::parseEntry(bool hi
             }
             continue;
         }
-        if (m_xml.name() == "IconID") {
+        if (m_xml.name().toUtf8().compare(QByteArray("IconID")) == 0) {
             int iconId = readNumber();
             if (iconId < 0) {
                 if (m_strictMode) {
@@ -710,53 +729,53 @@ Entry* KdbxXmlReader::parseEntry(bool hi
             entry->setIcon(iconId);
             continue;
         }
-        if (m_xml.name() == "CustomIconUUID") {
+        if (m_xml.name().toUtf8().compare(QByteArray("CustomIconUUID")) == 0) {
             QUuid uuid = readUuid();
             if (!uuid.isNull()) {
                 entry->setIcon(uuid);
             }
             continue;
         }
-        if (m_xml.name() == "ForegroundColor") {
+        if (m_xml.name().toUtf8().compare(QByteArray("ForegroundColor")) == 0) {
             entry->setForegroundColor(readColor());
             continue;
         }
-        if (m_xml.name() == "BackgroundColor") {
+        if (m_xml.name().toUtf8().compare(QByteArray("BackgroundColor")) == 0) {
             entry->setBackgroundColor(readColor());
             continue;
         }
-        if (m_xml.name() == "OverrideURL") {
+        if (m_xml.name().toUtf8().compare(QByteArray("OverrideURL")) == 0) {
             entry->setOverrideUrl(readString());
             continue;
         }
-        if (m_xml.name() == "Tags") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Tags")) == 0) {
             entry->setTags(readString());
             continue;
         }
-        if (m_xml.name() == "Times") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Times")) == 0) {
             entry->setTimeInfo(parseTimes());
             continue;
         }
-        if (m_xml.name() == "String") {
+        if (m_xml.name().toUtf8().compare(QByteArray("String")) == 0) {
             parseEntryString(entry);
             continue;
         }
-        if (m_xml.name() == "QualityCheck") {
+        if (m_xml.name().toUtf8().compare(QByteArray("QualityCheck")) == 0) {
             entry->setExcludeFromReports(!readBool());
             continue;
         }
-        if (m_xml.name() == "Binary") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Binary")) == 0) {
             QPair<QString, QString> ref = parseEntryBinary(entry);
             if (!ref.first.isEmpty() && !ref.second.isEmpty()) {
                 binaryRefs.append(ref);
             }
             continue;
         }
-        if (m_xml.name() == "AutoType") {
+        if (m_xml.name().toUtf8().compare(QByteArray("AutoType")) == 0) {
             parseAutoType(entry);
             continue;
         }
-        if (m_xml.name() == "History") {
+        if (m_xml.name().toUtf8().compare(QByteArray("History")) == 0) {
             if (history) {
                 raiseError(tr("History element in history entry"));
             } else {
@@ -764,7 +783,7 @@ Entry* KdbxXmlReader::parseEntry(bool hi
             }
             continue;
         }
-        if (m_xml.name() == "CustomData") {
+        if (m_xml.name().toUtf8().compare(QByteArray("CustomData")) == 0) {
             parseCustomData(entry->customData());
 
             // Upgrade pre-KDBX-4.1 password report exclude flag
@@ -775,7 +794,7 @@ Entry* KdbxXmlReader::parseEntry(bool hi
             }
             continue;
         }
-        if (m_xml.name() == "PreviousParentGroup") {
+        if (m_xml.name().toUtf8().compare(QByteArray("PreviousParentGroup")) == 0) {
             entry->setPreviousParentGroupUuid(readUuid());
             continue;
         }
@@ -814,7 +833,11 @@ Entry* KdbxXmlReader::parseEntry(bool hi
     }
 
     for (const StringPair& ref : asConst(binaryRefs)) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        m_binaryMap.insert(ref.first, qMakePair(entry, ref.second));
+#else
         m_binaryMap.insertMulti(ref.first, qMakePair(entry, ref.second));
+#endif
     }
 
     return entry;
@@ -822,7 +845,7 @@ Entry* KdbxXmlReader::parseEntry(bool hi
 
 void KdbxXmlReader::parseEntryString(Entry* entry)
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "String");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("String")) == 0);
 
     QString key;
     QString value;
@@ -831,13 +854,13 @@ void KdbxXmlReader::parseEntryString(Ent
     bool valueSet = false;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Key") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Key")) == 0) {
             key = readString();
             keySet = true;
             continue;
         }
 
-        if (m_xml.name() == "Value") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Value")) == 0) {
             QXmlStreamAttributes attr = m_xml.attributes();
             bool isProtected;
             bool protectInMemory;
@@ -865,7 +888,7 @@ void KdbxXmlReader::parseEntryString(Ent
 
 QPair<QString, QString> KdbxXmlReader::parseEntryBinary(Entry* entry)
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Binary");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Binary")) == 0);
 
     QPair<QString, QString> poolRef;
 
@@ -875,12 +898,12 @@ QPair<QString, QString> KdbxXmlReader::p
     bool valueSet = false;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Key") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Key")) == 0) {
             key = readString();
             keySet = true;
             continue;
         }
-        if (m_xml.name() == "Value") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Value")) == 0) {
             QXmlStreamAttributes attr = m_xml.attributes();
 
             if (attr.hasAttribute("Ref")) {
@@ -914,16 +937,16 @@ QPair<QString, QString> KdbxXmlReader::p
 
 void KdbxXmlReader::parseAutoType(Entry* entry)
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "AutoType");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("AutoType")) == 0);
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Enabled") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Enabled")) == 0) {
             entry->setAutoTypeEnabled(readBool());
-        } else if (m_xml.name() == "DataTransferObfuscation") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DataTransferObfuscation")) == 0) {
             entry->setAutoTypeObfuscation(readNumber());
-        } else if (m_xml.name() == "DefaultSequence") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("DefaultSequence")) == 0) {
             entry->setDefaultAutoTypeSequence(readString());
-        } else if (m_xml.name() == "Association") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("Association")) == 0) {
             parseAutoTypeAssoc(entry);
         } else {
             skipCurrentElement();
@@ -933,17 +956,17 @@ void KdbxXmlReader::parseAutoType(Entry*
 
 void KdbxXmlReader::parseAutoTypeAssoc(Entry* entry)
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Association");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Association")) == 0);
 
     AutoTypeAssociations::Association assoc;
     bool windowSet = false;
     bool sequenceSet = false;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Window") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Window")) == 0) {
             assoc.window = readString();
             windowSet = true;
-        } else if (m_xml.name() == "KeystrokeSequence") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("KeystrokeSequence")) == 0) {
             assoc.sequence = readString();
             sequenceSet = true;
         } else {
@@ -960,12 +983,12 @@ void KdbxXmlReader::parseAutoTypeAssoc(E
 
 QList<Entry*> KdbxXmlReader::parseEntryHistory()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "History");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("History")) == 0);
 
     QList<Entry*> historyItems;
 
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "Entry") {
+        if (m_xml.name().toUtf8().compare(QByteArray("Entry")) == 0) {
             historyItems.append(parseEntry(true));
         } else {
             skipCurrentElement();
@@ -977,23 +1000,23 @@ QList<Entry*> KdbxXmlReader::parseEntryH
 
 TimeInfo KdbxXmlReader::parseTimes()
 {
-    Q_ASSERT(m_xml.isStartElement() && m_xml.name() == "Times");
+    Q_ASSERT(m_xml.isStartElement() && m_xml.name().toUtf8().compare(QByteArray("Times")) == 0);
 
     TimeInfo timeInfo;
     while (!m_xml.hasError() && m_xml.readNextStartElement()) {
-        if (m_xml.name() == "LastModificationTime") {
+        if (m_xml.name().toUtf8().compare(QByteArray("LastModificationTime")) == 0) {
             timeInfo.setLastModificationTime(readDateTime());
-        } else if (m_xml.name() == "CreationTime") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("CreationTime")) == 0) {
             timeInfo.setCreationTime(readDateTime());
-        } else if (m_xml.name() == "LastAccessTime") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("LastAccessTime")) == 0) {
             timeInfo.setLastAccessTime(readDateTime());
-        } else if (m_xml.name() == "ExpiryTime") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("ExpiryTime")) == 0) {
             timeInfo.setExpiryTime(readDateTime());
-        } else if (m_xml.name() == "Expires") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("Expires")) == 0) {
             timeInfo.setExpires(readBool());
-        } else if (m_xml.name() == "UsageCount") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("UsageCount")) == 0) {
             timeInfo.setUsageCount(readNumber());
-        } else if (m_xml.name() == "LocationChanged") {
+        } else if (m_xml.name().toUtf8().compare(QByteArray("LocationChanged")) == 0) {
             timeInfo.setLocationChanged(readDateTime());
         } else {
             skipCurrentElement();
@@ -1154,11 +1177,19 @@ QByteArray KdbxXmlReader::readCompressed
     QByteArray rawData = readBinary();
 
     QBuffer buffer(&rawData);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buffer.open(QIODeviceBase::ReadOnly);
+#else
     buffer.open(QIODevice::ReadOnly);
+#endif
 
     QtIOCompressor compressor(&buffer);
     compressor.setStreamFormat(QtIOCompressor::GzipFormat);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    compressor.open(QIODeviceBase::ReadOnly);
+#else
     compressor.open(QIODevice::ReadOnly);
+#endif
 
     QByteArray result;
     if (!Tools::readAllFromDevice(&compressor, result)) {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/KdbxXmlReader.h keepassxc-2.7.10/src/format/KdbxXmlReader.h
--- keepassxc-2.7.10.orig/src/format/KdbxXmlReader.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/KdbxXmlReader.h	2025-07-14 11:37:09.876944632 -0700
@@ -22,6 +22,11 @@
 #include "core/Metadata.h"
 
 #include <QCoreApplication>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QMultiHash>
+#else
+#  include <QHash>
+#endif
 #include <QXmlStreamReader>
 
 class QIODevice;
@@ -92,7 +97,11 @@ protected:
     virtual Group* getGroup(const QUuid& uuid);
     virtual Entry* getEntry(const QUuid& uuid);
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    virtual bool isTrueValue(const QStringView& value);
+#else
     virtual bool isTrueValue(const QStringRef& value);
+#endif
     virtual void raiseError(const QString& errorMessage);
 
     const quint32 m_kdbxVersion;
@@ -109,7 +118,11 @@ protected:
     QHash<QUuid, Entry*> m_entries;
 
     QHash<QString, QByteArray> m_binaryPool;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QMultiHash<QString, QPair<Entry*, QString>> m_binaryMap;
+#else
     QHash<QString, QPair<Entry*, QString>> m_binaryMap;
+#endif
     QByteArray m_headerHash;
 
     bool m_error = false;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/KdbxXmlWriter.cpp keepassxc-2.7.10/src/format/KdbxXmlWriter.cpp
--- keepassxc-2.7.10.orig/src/format/KdbxXmlWriter.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/KdbxXmlWriter.cpp	2025-07-14 11:37:09.877082170 -0700
@@ -57,7 +57,9 @@ void KdbxXmlWriter::writeDatabase(QIODev
 
     m_xml.setAutoFormatting(true);
     m_xml.setAutoFormattingIndent(-1); // 1 tab
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
     m_xml.setCodec("UTF-8");
+#endif
 
     if (m_kdbxVersion < KeePass2::FILE_VERSION_4) {
         fillBinaryIdxMap();
@@ -81,7 +83,11 @@ void KdbxXmlWriter::writeDatabase(QIODev
 void KdbxXmlWriter::writeDatabase(const QString& filename, Database* db)
 {
     QFile file(filename);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    file.open(QIODeviceBase::WriteOnly | QIODeviceBase::Truncate);
+#else
     file.open(QIODevice::WriteOnly | QIODevice::Truncate);
+#endif
     writeDatabase(&file, db);
 }
 
@@ -235,11 +241,19 @@ void KdbxXmlWriter::writeBinaries()
             m_xml.writeAttribute("Compressed", "True");
 
             QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            buffer.open(QIODeviceBase::ReadWrite);
+#else
             buffer.open(QIODevice::ReadWrite);
+#endif
 
             QtIOCompressor compressor(&buffer);
             compressor.setStreamFormat(QtIOCompressor::GzipFormat);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            compressor.open(QIODeviceBase::WriteOnly);
+#else
             compressor.open(QIODevice::WriteOnly);
+#endif
 
             qint64 bytesWritten = compressor.write(i.value());
             Q_ASSERT(bytesWritten == i.value().size());
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/KeePass1Reader.cpp keepassxc-2.7.10/src/format/KeePass1Reader.cpp
--- keepassxc-2.7.10.orig/src/format/KeePass1Reader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/KeePass1Reader.cpp	2025-07-14 11:37:09.877289251 -0700
@@ -19,7 +19,15 @@
 
 #include <QFile>
 #include <QFileInfo>
-#include <QTextCodec>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && defined(USE_QT5COMPAT)
+#  include <QtCore5Compat/QTextCodec>
+#  include <QRegularExpression>
+#elif QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QRegularExpression>
+#  include <QStringConverter>
+#else
+#  include <QTextCodec>
+#endif
 
 #include "core/Endian.h"
 #include "core/Group.h"
@@ -296,36 +304,54 @@ QString KeePass1Reader::errorString()
 SymmetricCipherStream*
 KeePass1Reader::testKeys(const QString& password, const QByteArray& keyfileData, qint64 contentPos)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && !defined(USE_QT5COMPAT)
+#warning "KeePass1Reader::testKeys():  Windows-1252 is not supported.  Enable the WITH_QT5COMPAT cmake option to add back support."
+    const QList<PasswordEncoding> encodings = {Latin1, UTF8};
+#else
     const QList<PasswordEncoding> encodings = {Windows1252, Latin1, UTF8};
+#endif
 
     QScopedPointer<SymmetricCipherStream> cipherStream;
     QByteArray passwordData;
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0) || defined(USE_QT5COMPAT)
     QTextCodec* codec = QTextCodec::codecForName("Windows-1252");
     QByteArray passwordDataCorrect = codec->fromUnicode(password);
+#endif
 
     for (PasswordEncoding encoding : encodings) {
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0) || defined(USE_QT5COMPAT)
         if (encoding == Windows1252) {
             passwordData = passwordDataCorrect;
-        } else if (encoding == Latin1) {
+        } else
+#endif
+        if (encoding == Latin1) {
             // KeePassX used Latin-1 encoding for passwords until version 0.3.1
             // but KeePass/Win32 uses Windows Codepage 1252.
             passwordData = password.toLatin1();
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && !defined(USE_QT5COMPAT)
+            qWarning("Testing password encoded as Latin-1.");
+#else
             if (passwordData == passwordDataCorrect) {
                 continue;
             } else {
                 qWarning("Testing password encoded as Latin-1.");
             }
+#endif
         } else if (encoding == UTF8) {
             // KeePassX used UTF-8 encoding for passwords until version 0.2.2
             // but KeePass/Win32 uses Windows Codepage 1252.
             passwordData = password.toUtf8();
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && !defined(USE_QT5COMPAT)
+            qWarning("Testing password encoded as UTF-8.");
+#else
             if (passwordData == passwordDataCorrect) {
                 continue;
             } else {
                 qWarning("Testing password encoded as UTF-8.");
             }
+#endif
         }
 
         QByteArray finalKey = key(passwordData, keyfileData);
@@ -343,7 +369,11 @@ KeePass1Reader::testKeys(const QString&
             raiseError(cipherStream->errorString());
             return nullptr;
         }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (!cipherStream->open(QIODeviceBase::ReadOnly)) {
+#else
         if (!cipherStream->open(QIODevice::ReadOnly)) {
+#endif
             raiseError(cipherStream->errorString());
             return nullptr;
         }
@@ -367,7 +397,11 @@ KeePass1Reader::testKeys(const QString&
                 raiseError(cipherStream->errorString());
                 return nullptr;
             }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            cipherStream->open(QIODeviceBase::ReadOnly);
+#else
             cipherStream->open(QIODevice::ReadOnly);
+#endif
             break;
         } else {
             cipherStream.reset();
@@ -701,8 +735,13 @@ Entry* KeePass1Reader::readEntry(QIODevi
 
 void KeePass1Reader::parseNotes(const QString& rawNotes, Entry* entry)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QRegularExpression sequenceRegexp(QRegularExpression::anchoredPattern("Auto-Type(?:-(\\d+))?: (.+)"), QRegularExpression::CaseInsensitiveOption);
+    QRegularExpression windowRegexp(QRegularExpression::anchoredPattern("Auto-Type-Window(?:-(\\d+))?: (.+)"), QRegularExpression::CaseInsensitiveOption);
+#else
     QRegExp sequenceRegexp("Auto-Type(?:-(\\d+))?: (.+)", Qt::CaseInsensitive, QRegExp::RegExp2);
     QRegExp windowRegexp("Auto-Type-Window(?:-(\\d+))?: (.+)", Qt::CaseInsensitive, QRegExp::RegExp2);
+#endif
     QHash<int, QString> sequences;
     QMap<int, QStringList> windows;
 
@@ -713,23 +752,25 @@ void KeePass1Reader::parseNotes(const QS
     for (QString line : rawNotesLines) {
         line.remove("\r");
 
-        if (sequenceRegexp.exactMatch(line)) {
-            if (sequenceRegexp.cap(1).isEmpty()) {
-                entry->setDefaultAutoTypeSequence(sequenceRegexp.cap(2));
+        QRegularExpressionMatch sequenceMatchResults = sequenceRegexp.match(line);
+        QRegularExpressionMatch windowMatchResults = windowRegexp.match(line);
+        if (sequenceMatchResults.hasMatch()) {
+            if (sequenceMatchResults.captured(1).isEmpty()) {
+                entry->setDefaultAutoTypeSequence(sequenceMatchResults.captured(2));
             } else {
-                sequences[sequenceRegexp.cap(1).toInt()] = sequenceRegexp.cap(2);
+                sequences[sequenceMatchResults.captured(1).toInt()] = sequenceMatchResults.captured(2);
             }
 
             lastLineAutoType = true;
-        } else if (windowRegexp.exactMatch(line)) {
+        } else if (windowMatchResults.hasMatch()) {
             int nr;
-            if (windowRegexp.cap(1).isEmpty()) {
+            if (windowMatchResults.captured(1).isEmpty()) {
                 nr = -1; // special number that matches no other sequence
             } else {
-                nr = windowRegexp.cap(1).toInt();
+                nr = windowMatchResults.captured(1).toInt();
             }
 
-            windows[nr].append(windowRegexp.cap(2));
+            windows[nr].append(windowMatchResults.captured(2));
 
             lastLineAutoType = true;
         } else {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/KeePass1Reader.h keepassxc-2.7.10/src/format/KeePass1Reader.h
--- keepassxc-2.7.10.orig/src/format/KeePass1Reader.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/KeePass1Reader.h	2025-07-14 11:37:09.877494169 -0700
@@ -20,6 +20,10 @@
 
 #include <QCoreApplication>
 #include <QSharedPointer>
+#include <QHash>
+#include <QFile>
+#include "core/Group.h"
+#include "core/Entry.h"
 
 class Database;
 class Entry;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/KeePass2Writer.cpp keepassxc-2.7.10/src/format/KeePass2Writer.cpp
--- keepassxc-2.7.10.orig/src/format/KeePass2Writer.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/KeePass2Writer.cpp	2025-07-14 11:37:09.877593923 -0700
@@ -33,7 +33,11 @@
 bool KeePass2Writer::writeDatabase(const QString& filename, Database* db)
 {
     QFile file(filename);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!file.open(QIODeviceBase::WriteOnly | QIODeviceBase::Truncate)) {
+#else
     if (!file.open(QIODevice::WriteOnly | QIODevice::Truncate)) {
+#endif
         raiseError(file.errorString());
         return false;
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/OpVaultReader.cpp keepassxc-2.7.10/src/format/OpVaultReader.cpp
--- keepassxc-2.7.10.orig/src/format/OpVaultReader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/OpVaultReader.cpp	2025-07-14 11:37:09.877712879 -0700
@@ -160,9 +160,18 @@ bool OpVaultReader::processProfileJson(Q
     }
     auto rootGroupTime = rootGroup->timeInfo();
     auto createdAt = static_cast<uint>(profileJson["createdAt"].toInt());
-    rootGroupTime.setCreationTime(QDateTime::fromTime_t(createdAt, Qt::UTC));
     auto updatedAt = static_cast<uint>(profileJson["updatedAt"].toInt());
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    uint createdAt_u32 = createdAt;
+    qint64 createdAt_s64 = static_cast<qint64>(createdAt_u32);
+    rootGroupTime.setCreationTime(QDateTime::fromSecsSinceEpoch(createdAt_s64, Qt::UTC));
+    uint updatedAt_u32 = updatedAt;
+    qint64 updatedAt_s64 = static_cast<qint64>(updatedAt_u32);
+    rootGroupTime.setLastModificationTime(QDateTime::fromSecsSinceEpoch(updatedAt_s64, Qt::UTC));
+#else
+    rootGroupTime.setCreationTime(QDateTime::fromTime_t(createdAt, Qt::UTC));
     rootGroupTime.setLastModificationTime(QDateTime::fromTime_t(updatedAt, Qt::UTC));
+#endif
     rootGroup->setUuid(Tools::hexToUuid(profileJson["uuid"].toString()));
 
     QScopedPointer derivedKeys(deriveKeysFromPassPhrase(salt, password, iterations));
@@ -238,6 +247,22 @@ bool OpVaultReader::processFolderJson(QJ
 
         TimeInfo ti;
         bool timeInfoOk = false;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (folder.contains("created")) {
+            auto createdTime = static_cast<uint>(folder["created"].toInt());
+            uint createdTime_u32 = createdTime;
+            qint64 createdTime_s64 = static_cast<qint64>(createdTime_u32);
+            ti.setCreationTime(QDateTime::fromSecsSinceEpoch(createdTime_s64, Qt::UTC));
+            timeInfoOk = true;
+        }
+        if (folder.contains("updated")) {
+            auto updateTime = static_cast<uint>(folder["updated"].toInt());
+            uint updateTime_u32 = updateTime;
+            qint64 updateTime_s64 = static_cast<qint64>(updateTime_u32);
+            ti.setLastModificationTime(QDateTime::fromSecsSinceEpoch(updateTime_s64, Qt::UTC));
+            timeInfoOk = true;
+        }
+#else
         if (folder.contains("created")) {
             auto createdTime = static_cast<uint>(folder["created"].toInt());
             ti.setCreationTime(QDateTime::fromTime_t(createdTime, Qt::UTC));
@@ -248,6 +273,7 @@ bool OpVaultReader::processFolderJson(QJ
             ti.setLastModificationTime(QDateTime::fromTime_t(updateTime, Qt::UTC));
             timeInfoOk = true;
         }
+#endif
         // "tx" is modified by sync, not by user; maybe a custom attribute?
         if (timeInfoOk) {
             myGroup->setTimeInfo(ti);
@@ -280,7 +306,11 @@ QJsonObject OpVaultReader::readAndAssert
         return QJsonObject();
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!file.open(QIODeviceBase::ReadOnly | QIODeviceBase::Text)) {
+#else
     if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
+#endif
         qCritical() << QString("Unable to open \"%1\" readonly+text").arg(absFilePath);
     }
     filePayload = file.readAll();
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/OpVaultReaderAttachments.cpp keepassxc-2.7.10/src/format/OpVaultReaderAttachments.cpp
--- keepassxc-2.7.10.orig/src/format/OpVaultReaderAttachments.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/OpVaultReaderAttachments.cpp	2025-07-14 11:37:09.877871246 -0700
@@ -37,7 +37,11 @@ bool OpVaultReader::readAttachment(const
                                    QByteArray& payload)
 {
     QFile file(filePath);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!file.open(QIODeviceBase::ReadOnly)) {
+#else
     if (!file.open(QIODevice::ReadOnly)) {
+#endif
         qCritical() << QString("Unable to open \"%s\" for reading").arg(file.fileName());
         return false;
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/OpVaultReaderBandEntry.cpp keepassxc-2.7.10/src/format/OpVaultReaderBandEntry.cpp
--- keepassxc-2.7.10.orig/src/format/OpVaultReaderBandEntry.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/OpVaultReaderBandEntry.cpp	2025-07-14 11:37:09.877995841 -0700
@@ -150,12 +150,24 @@ Entry* OpVaultReader::processBandEntry(c
     bool timeInfoOk = false;
     if (bandEntry.contains("created")) {
         auto createdTime = static_cast<uint>(bandEntry["created"].toInt());
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        uint createdTime_u32 = createdTime;
+        qint64 createdTime_s64 = static_cast<qint64>(createdTime);
+        ti.setCreationTime(QDateTime::fromSecsSinceEpoch(createdTime_s64, Qt::UTC));
+#else
         ti.setCreationTime(QDateTime::fromTime_t(createdTime, Qt::UTC));
+#endif
         timeInfoOk = true;
     }
     if (bandEntry.contains("updated")) {
         auto updateTime = static_cast<uint>(bandEntry["updated"].toInt());
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        uint updatedTime_u32 = updateTime;
+        qint64 updatedTime_s64 = static_cast<qint64>(updatedTime_u32);
+        ti.setLastModificationTime(QDateTime::fromSecsSinceEpoch(updatedTime_s64, Qt::UTC));
+#else
         ti.setLastModificationTime(QDateTime::fromTime_t(updateTime, Qt::UTC));
+#endif
         timeInfoOk = true;
     }
     // "tx" is modified by sync, not by user; maybe a custom attribute?
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/format/OpVaultReaderSections.cpp keepassxc-2.7.10/src/format/OpVaultReaderSections.cpp
--- keepassxc-2.7.10.orig/src/format/OpVaultReaderSections.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/format/OpVaultReaderSections.cpp	2025-07-14 11:37:09.878121512 -0700
@@ -35,10 +35,21 @@ namespace
             auto dateValue = QString::number(value.toInt());
             date = QDateTime::fromString(dateValue, "yyyyMM");
             date.setTimeSpec(Qt::UTC);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        } else if (value.isString()) {
+            uint value_u32 = value.toString().toUInt();
+            qint64 value_s64 = static_cast<qint64>(value_u32);
+            date = QDateTime::fromSecsSinceEpoch(value_s64, Qt::UTC);
+        } else {
+            uint value_u32 = static_cast<uint>(value.toInt());
+            qint64 value_s64 = static_cast<qint64>(value_u32);
+            date = QDateTime::fromSecsSinceEpoch(value_s64, Qt::UTC);
+#else
         } else if (value.isString()) {
             date = QDateTime::fromTime_t(value.toString().toUInt(), Qt::UTC);
         } else {
             date = QDateTime::fromTime_t(value.toInt(), Qt::UTC);
+#endif
         }
         return date;
     }
@@ -120,7 +131,11 @@ void OpVaultReader::fillFromSectionField
         if (kind == "date" || kind == "monthYear") {
             QDateTime date = resolveDate(kind, field.value("v"));
             if (date.isValid()) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+                entry->attributes()->set(attrName, QLocale::system().toString(date, QLocale::ShortFormat));
+#else
                 entry->attributes()->set(attrName, date.toString(Qt::SystemLocaleShortDate));
+#endif
             } else {
                 qWarning()
                     << QString("[%1] Invalid date attribute found: %2 = %3").arg(entry->title(), attrName, attrValue);
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/Application.cpp keepassxc-2.7.10/src/gui/Application.cpp
--- keepassxc-2.7.10.orig/src/gui/Application.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/Application.cpp	2025-07-14 11:37:09.878250307 -0700
@@ -194,7 +194,11 @@ void Application::applyTheme()
         m_darkTheme = osUtils->isDarkMode();
 #endif
         QFile stylesheetFile(":/styles/base/classicstyle.qss");
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (stylesheetFile.open(QIODeviceBase::ReadOnly | QIODeviceBase::Text)) {
+#else
         if (stylesheetFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
+#endif
             setStyleSheet(stylesheetFile.readAll());
             stylesheetFile.close();
         }
@@ -373,7 +377,11 @@ bool Application::sendFileNamesToRunning
     }
 
     QByteArray data;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream out(&data, QIODeviceBase::WriteOnly);
+#else
     QDataStream out(&data, QIODevice::WriteOnly);
+#endif
     out.setVersion(QDataStream::Qt_5_0);
     out << quint32(0); // reserve space for block size
     out << quint32(1); // ID for file name send. TODO: move to enum
@@ -405,7 +413,11 @@ bool Application::sendLockToInstance()
 
     // Send lock signal
     QByteArray data;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream out(&data, QIODeviceBase::WriteOnly);
+#else
     QDataStream out(&data, QIODevice::WriteOnly);
+#endif
     out.setVersion(QDataStream::Qt_5_0);
     out << quint32(0); // reserve space for block size
     out << quint32(2); // ID for database lock. TODO: move to enum
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/DatabaseIcons.h keepassxc-2.7.10/src/gui/DatabaseIcons.h
--- keepassxc-2.7.10.orig/src/gui/DatabaseIcons.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/DatabaseIcons.h	2025-07-14 11:37:09.878383428 -0700
@@ -18,7 +18,9 @@
 #ifndef KEEPASSX_DATABASEICONS_H
 #define KEEPASSX_DATABASEICONS_H
 
+#include <QHash>
 #include <QIcon>
+#include <QString>
 
 enum IconSize
 {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/DatabaseOpenDialog.cpp keepassxc-2.7.10/src/gui/DatabaseOpenDialog.cpp
--- keepassxc-2.7.10.orig/src/gui/DatabaseOpenDialog.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/DatabaseOpenDialog.cpp	2025-07-14 11:37:09.878500104 -0700
@@ -70,6 +70,20 @@ DatabaseOpenDialog::DatabaseOpenDialog(Q
 #ifdef Q_OS_MACOS
     dbTabModifier = Qt::ALT;
 #endif
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto* shortcut = new QShortcut(Qt::CTRL | Qt::Key_PageUp, this);
+    shortcut->setContext(Qt::WidgetWithChildrenShortcut);
+    connect(shortcut, &QShortcut::activated, this, [this]() { selectTabOffset(-1); });
+    shortcut = new QShortcut(dbTabModifier | Qt::SHIFT | Qt::Key_Tab, this);
+    shortcut->setContext(Qt::WidgetWithChildrenShortcut);
+    connect(shortcut, &QShortcut::activated, this, [this]() { selectTabOffset(-1); });
+    shortcut = new QShortcut(Qt::CTRL | Qt::Key_PageDown, this);
+    shortcut->setContext(Qt::WidgetWithChildrenShortcut);
+    connect(shortcut, &QShortcut::activated, this, [this]() { selectTabOffset(1); });
+    shortcut = new QShortcut(dbTabModifier | Qt::Key_Tab, this);
+    shortcut->setContext(Qt::WidgetWithChildrenShortcut);
+    connect(shortcut, &QShortcut::activated, this, [this]() { selectTabOffset(1); });
+#else
     auto* shortcut = new QShortcut(Qt::CTRL + Qt::Key_PageUp, this);
     shortcut->setContext(Qt::WidgetWithChildrenShortcut);
     connect(shortcut, &QShortcut::activated, this, [this]() { selectTabOffset(-1); });
@@ -82,6 +96,7 @@ DatabaseOpenDialog::DatabaseOpenDialog(Q
     shortcut = new QShortcut(dbTabModifier + Qt::Key_Tab, this);
     shortcut->setContext(Qt::WidgetWithChildrenShortcut);
     connect(shortcut, &QShortcut::activated, this, [this]() { selectTabOffset(1); });
+#endif
 }
 
 void DatabaseOpenDialog::showEvent(QShowEvent* event)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/DatabaseTabWidget.cpp keepassxc-2.7.10/src/gui/DatabaseTabWidget.cpp
--- keepassxc-2.7.10.orig/src/gui/DatabaseTabWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/DatabaseTabWidget.cpp	2025-07-14 11:37:09.878655220 -0700
@@ -520,7 +520,11 @@ void DatabaseTabWidget::exportToXML()
     }
 
     QFile file(fileName);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (!file.open(QIODeviceBase::WriteOnly | QIODeviceBase::Truncate)) {
+#else
     if (!file.open(QIODevice::WriteOnly | QIODevice::Truncate)) {
+#endif
         emit messageGlobal(tr("Writing the XML file failed").append("\n").append(file.errorString()),
                            MessageWidget::Error);
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/DatabaseWidget.cpp keepassxc-2.7.10/src/gui/DatabaseWidget.cpp
--- keepassxc-2.7.10.orig/src/gui/DatabaseWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/DatabaseWidget.cpp	2025-07-14 11:37:09.878974185 -0700
@@ -120,7 +120,11 @@ DatabaseWidget::DatabaseWidget(QSharedPo
     tagsWidget->setLayout(tagsLayout);
     tagsLayout->addWidget(tagsTitle);
     tagsLayout->addWidget(m_tagView);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    tagsLayout->setContentsMargins(0, 0, 0, 0);
+#else
     tagsLayout->setMargin(0);
+#endif
 
     m_groupSplitter->setOrientation(Qt::Vertical);
     m_groupSplitter->setChildrenCollapsible(true);
@@ -134,7 +138,11 @@ DatabaseWidget::DatabaseWidget(QSharedPo
 
     auto rightHandSideWidget = new QWidget(m_mainSplitter);
     auto rightHandSideVBox = new QVBoxLayout();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    rightHandSideVBox->setContentsMargins(0, 0, 0, 0);
+#else
     rightHandSideVBox->setMargin(0);
+#endif
     rightHandSideVBox->addWidget(m_searchingLabel);
 #ifdef WITH_XC_KEESHARE
     rightHandSideVBox->addWidget(m_shareLabel);
@@ -2366,8 +2374,13 @@ bool DatabaseWidget::saveAs()
             QDir::toNativeSeparators(FileDialog::getLastDir("db") + "/"
                                      + (defaultFileName.isEmpty() ? tr("Passwords").append(".kdbx") : defaultFileName));
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    const QString newFilePath = fileDialog()->getSaveFileName(
+        this, tr("Save database as"), oldFilePath, tr("KeePass 2 Database").append(" (*.kdbx)"), nullptr);
+#else
     const QString newFilePath = fileDialog()->getSaveFileName(
         this, tr("Save database as"), oldFilePath, tr("KeePass 2 Database").append(" (*.kdbx)"), nullptr, nullptr);
+#endif
 
     bool ok = false;
     if (!newFilePath.isEmpty()) {
@@ -2458,12 +2471,21 @@ bool DatabaseWidget::saveBackup()
                 + (defaultFileName.isEmpty() ? tr("Passwords").append(".kdbx") : defaultFileName));
         }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        const QString newFilePath = fileDialog()->getSaveFileName(this,
+                                                                  tr("Save database backup"),
+                                                                  FileDialog::getLastDir("backup", oldFilePath),
+                                                                  tr("KeePass 2 Database").append(" (*.kdbx)"),
+                                                                  nullptr
+                                                                  );
+#else
         const QString newFilePath = fileDialog()->getSaveFileName(this,
                                                                   tr("Save database backup"),
                                                                   FileDialog::getLastDir("backup", oldFilePath),
                                                                   tr("KeePass 2 Database").append(" (*.kdbx)"),
                                                                   nullptr,
                                                                   nullptr);
+#endif
 
         if (!newFilePath.isEmpty()) {
             // Ensure we don't recurse back into this function
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/EntryPreviewWidget.cpp keepassxc-2.7.10/src/gui/EntryPreviewWidget.cpp
--- keepassxc-2.7.10.orig/src/gui/EntryPreviewWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/EntryPreviewWidget.cpp	2025-07-14 11:37:09.879348715 -0700
@@ -403,8 +403,13 @@ void EntryPreviewWidget::updateEntryGene
     }
 
     const TimeInfo entryTime = m_currentEntry->timeInfo();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    const QString expires =
+        entryTime.expires() ? QLocale().toString(entryTime.expiryTime().toLocalTime(), QLocale::ShortFormat) : tr("Never");
+#else
     const QString expires =
         entryTime.expires() ? entryTime.expiryTime().toLocalTime().toString(Qt::DefaultLocaleShortDate) : tr("Never");
+#endif
     m_ui->entryExpirationLabel->setText(expires);
     m_ui->entryTagsList->tags(m_currentEntry->tagList());
     m_ui->entryTagsList->setReadOnly(true);
@@ -515,8 +520,13 @@ void EntryPreviewWidget::updateGroupGene
     m_ui->groupAutotypeLabel->setText(autotypeText);
 
     const TimeInfo groupTime = m_currentGroup->timeInfo();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    const QString expiresText =
+        groupTime.expires() ? QLocale().toString(groupTime.expiryTime(), QLocale::ShortFormat) : tr("Never");
+#else
     const QString expiresText =
         groupTime.expires() ? groupTime.expiryTime().toString(Qt::DefaultLocaleShortDate) : tr("Never");
+#endif
     m_ui->groupExpirationLabel->setText(expiresText);
 
     if (config()->get(Config::Security_HideNotes).toBool()) {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/IconDownloader.cpp keepassxc-2.7.10/src/gui/IconDownloader.cpp
--- keepassxc-2.7.10.orig/src/gui/IconDownloader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/IconDownloader.cpp	2025-07-14 11:37:09.879516784 -0700
@@ -221,7 +221,11 @@ void IconDownloader::fetchFinished()
 QImage IconDownloader::parseImage(QByteArray& imageBytes) const
 {
     QBuffer buff(&imageBytes);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buff.open(QIODeviceBase::ReadOnly);
+#else
     buff.open(QIODevice::ReadOnly);
+#endif
     QImageReader reader(&buff);
 
     if (reader.imageCount() <= 0) {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/IconDownloader.h keepassxc-2.7.10/src/gui/IconDownloader.h
--- keepassxc-2.7.10.orig/src/gui/IconDownloader.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/IconDownloader.h	2025-07-14 11:37:09.879626390 -0700
@@ -18,6 +18,8 @@
 #ifndef KEEPASSXC_ICONDOWNLOADER_H
 #define KEEPASSXC_ICONDOWNLOADER_H
 
+#include <QtGlobal>
+
 #include <QImage>
 #include <QTimer>
 #include <QUrl>
@@ -60,4 +62,4 @@ private:
     friend class TestIconDownloader;
 };
 
-#endif // KEEPASSXC_ICONDOWNLOADER_H
\ No newline at end of file
+#endif // KEEPASSXC_ICONDOWNLOADER_H
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/Icons.cpp keepassxc-2.7.10/src/gui/Icons.cpp
--- keepassxc-2.7.10.orig/src/gui/Icons.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/Icons.cpp	2025-07-14 11:37:09.879733402 -0700
@@ -308,7 +308,11 @@ QByteArray Icons::saveToBytes(const QIma
 {
     QByteArray ba;
     QBuffer buffer(&ba);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buffer.open(QIODeviceBase::WriteOnly);
+#else
     buffer.open(QIODevice::WriteOnly);
+#endif
     // TODO: check !icon.save()
     image.save(&buffer, "PNG");
     buffer.close();
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/KMessageWidget.cpp keepassxc-2.7.10/src/gui/KMessageWidget.cpp
--- keepassxc-2.7.10.orig/src/gui/KMessageWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/KMessageWidget.cpp	2025-07-14 11:37:09.879871876 -0700
@@ -280,7 +280,11 @@ void KMessageWidget::setMessageType(KMes
     auto closeButtonPixmap = d->closeButtonPixmap;
     QPainter painter;
     painter.begin(&closeButtonPixmap);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    painter.setRenderHints(QPainter::Antialiasing);
+#else
     painter.setRenderHints(QPainter::HighQualityAntialiasing);
+#endif
     painter.setCompositionMode(QPainter::CompositionMode_SourceIn);
     painter.fillRect(QRect(0, 0, 16, 16), fg);
     painter.end();
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/MainWindow.cpp keepassxc-2.7.10/src/gui/MainWindow.cpp
--- keepassxc-2.7.10.orig/src/gui/MainWindow.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/MainWindow.cpp	2025-07-14 11:37:09.880132801 -0700
@@ -269,6 +269,37 @@ MainWindow::MainWindow()
     connect(m_inactivityTimer, SIGNAL(inactivityDetected()), this, SLOT(lockDatabasesAfterInactivity()));
     applySettingsChanges();
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_ui->actionDatabaseNew->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_N);
+    setShortcut(m_ui->actionDatabaseOpen, QKeySequence::Open, Qt::CTRL | Qt::Key_O);
+    setShortcut(m_ui->actionDatabaseSave, QKeySequence::Save, Qt::CTRL | Qt::Key_S);
+    setShortcut(m_ui->actionDatabaseSaveAs, QKeySequence::SaveAs, Qt::CTRL | Qt::SHIFT | Qt::Key_S);
+    setShortcut(m_ui->actionDatabaseClose, QKeySequence::Close, Qt::CTRL | Qt::Key_W);
+    m_ui->actionDatabaseSettings->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_Comma);
+    m_ui->actionReports->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_R);
+    setShortcut(m_ui->actionSettings, QKeySequence::Preferences, Qt::CTRL | Qt::Key_Comma);
+    m_ui->actionLockDatabase->setShortcut(Qt::CTRL | Qt::Key_L);
+    m_ui->actionLockAllDatabases->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_L);
+    setShortcut(m_ui->actionQuit, QKeySequence::Quit, Qt::CTRL | Qt::Key_Q);
+    setShortcut(m_ui->actionEntryNew, QKeySequence::New, Qt::CTRL | Qt::Key_N);
+    m_ui->actionEntryEdit->setShortcut(Qt::CTRL | Qt::Key_E);
+    m_ui->actionEntryDelete->setShortcut(Qt::CTRL | Qt::Key_D);
+    m_ui->actionEntryDelete->setShortcut(Qt::Key_Delete);
+    m_ui->actionEntryClone->setShortcut(Qt::CTRL | Qt::Key_K);
+    m_ui->actionEntryTotp->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_T);
+    m_ui->actionEntryDownloadIcon->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_D);
+    m_ui->actionEntryCopyTotp->setShortcut(Qt::CTRL | Qt::Key_T);
+    m_ui->actionEntryCopyPasswordTotp->setShortcut(Qt::CTRL | Qt::Key_Y);
+    m_ui->actionEntryMoveUp->setShortcut(Qt::CTRL | Qt::ALT | Qt::Key_Up);
+    m_ui->actionEntryMoveDown->setShortcut(Qt::CTRL | Qt::ALT | Qt::Key_Down);
+    m_ui->actionEntryCopyUsername->setShortcut(Qt::CTRL | Qt::Key_B);
+    m_ui->actionEntryCopyPassword->setShortcut(Qt::CTRL | Qt::Key_C);
+    m_ui->actionEntryCopyTitle->setShortcut(Qt::CTRL | Qt::Key_I);
+    m_ui->actionEntryAutoTypeSequence->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_V);
+    m_ui->actionEntryOpenUrl->setShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_U);
+    m_ui->actionEntryCopyURL->setShortcut(Qt::CTRL | Qt::Key_U);
+    m_ui->actionEntryRestore->setShortcut(Qt::CTRL | Qt::Key_R);
+#else
     m_ui->actionDatabaseNew->setShortcut(Qt::CTRL + Qt::SHIFT + Qt::Key_N);
     setShortcut(m_ui->actionDatabaseOpen, QKeySequence::Open, Qt::CTRL + Qt::Key_O);
     setShortcut(m_ui->actionDatabaseSave, QKeySequence::Save, Qt::CTRL + Qt::Key_S);
@@ -298,6 +329,7 @@ MainWindow::MainWindow()
     m_ui->actionEntryOpenUrl->setShortcut(Qt::CTRL + Qt::SHIFT + Qt::Key_U);
     m_ui->actionEntryCopyURL->setShortcut(Qt::CTRL + Qt::Key_U);
     m_ui->actionEntryRestore->setShortcut(Qt::CTRL + Qt::Key_R);
+#endif
 
     // Prevent conflicts with global Mac shortcuts (force Control on all platforms)
 #ifdef Q_OS_MAC
@@ -306,7 +338,11 @@ MainWindow::MainWindow()
     auto modifier = Qt::CTRL;
 #endif
     m_ui->actionEntryAddToAgent->setShortcut(modifier + Qt::Key_H);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_ui->actionEntryRemoveFromAgent->setShortcut(modifier | Qt::SHIFT | Qt::Key_H);
+#else
     m_ui->actionEntryRemoveFromAgent->setShortcut(modifier + Qt::SHIFT + Qt::Key_H);
+#endif
 
 #if QT_VERSION >= QT_VERSION_CHECK(5, 10, 0)
     // Qt 5.10 introduced a new "feature" to hide shortcuts in context menus
@@ -342,6 +378,21 @@ MainWindow::MainWindow()
     connect(m_ui->menuGroups, SIGNAL(aboutToShow()), SLOT(obtainContextFocusLock()));
     connect(m_ui->menuGroups, SIGNAL(aboutToHide()), SLOT(releaseContextFocusLock()));
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    // Control window state
+    new QShortcut(Qt::CTRL | Qt::Key_M, this, SLOT(minimizeOrHide()));
+    new QShortcut(Qt::CTRL | Qt::SHIFT | Qt::Key_M, this, SLOT(hideWindow()));
+    // Control database tabs
+    // Ctrl|Tab is broken on Mac, so use Alt (i.e. the Option key) - https://bugreports.qt.io/browse/QTBUG-8596
+    auto dbTabModifier2 = Qt::CTRL;
+#ifdef Q_OS_MACOS
+    dbTabModifier2 = Qt::ALT;
+#endif
+    new QShortcut(dbTabModifier2 | Qt::Key_Tab, this, SLOT(selectNextDatabaseTab()));
+    new QShortcut(Qt::CTRL | Qt::Key_PageDown, this, SLOT(selectNextDatabaseTab()));
+    new QShortcut(dbTabModifier2 | Qt::SHIFT | Qt::Key_Tab, this, SLOT(selectPreviousDatabaseTab()));
+    new QShortcut(Qt::CTRL | Qt::Key_PageUp, this, SLOT(selectPreviousDatabaseTab()));
+#else // QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
     // Control window state
     new QShortcut(Qt::CTRL + Qt::Key_M, this, SLOT(minimizeOrHide()));
     new QShortcut(Qt::CTRL + Qt::SHIFT + Qt::Key_M, this, SLOT(hideWindow()));
@@ -355,6 +406,7 @@ MainWindow::MainWindow()
     new QShortcut(Qt::CTRL + Qt::Key_PageDown, this, SLOT(selectNextDatabaseTab()));
     new QShortcut(dbTabModifier2 + Qt::SHIFT + Qt::Key_Tab, this, SLOT(selectPreviousDatabaseTab()));
     new QShortcut(Qt::CTRL + Qt::Key_PageUp, this, SLOT(selectPreviousDatabaseTab()));
+#endif
 
     // Tab selection by number, Windows uses Ctrl, macOS uses Command,
     // and Linux uses Alt to emulate a browser-like experience
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/PasswordGeneratorWidget.cpp keepassxc-2.7.10/src/gui/PasswordGeneratorWidget.cpp
--- keepassxc-2.7.10.orig/src/gui/PasswordGeneratorWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/PasswordGeneratorWidget.cpp	2025-07-14 11:37:09.880632365 -0700
@@ -50,10 +50,17 @@ PasswordGeneratorWidget::PasswordGenerat
     m_ui->buttonClose->setShortcut(Qt::Key_Escape);
 
     // Add two shortcuts to save the form CTRL+Enter and CTRL+S
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto shortcut = new QShortcut(Qt::CTRL | Qt::Key_Return, this);
+    connect(shortcut, &QShortcut::activated, this, [this] { applyPassword(); });
+    shortcut = new QShortcut(Qt::CTRL | Qt::Key_S, this);
+    connect(shortcut, &QShortcut::activated, this, [this] { applyPassword(); });
+#else
     auto shortcut = new QShortcut(Qt::CTRL + Qt::Key_Return, this);
     connect(shortcut, &QShortcut::activated, this, [this] { applyPassword(); });
     shortcut = new QShortcut(Qt::CTRL + Qt::Key_S, this);
     connect(shortcut, &QShortcut::activated, this, [this] { applyPassword(); });
+#endif
 
     connect(m_ui->editNewPassword, SIGNAL(textChanged(QString)), SLOT(updateButtonsEnabled(QString)));
     connect(m_ui->editNewPassword, SIGNAL(textChanged(QString)), SLOT(updatePasswordStrength()));
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/csvImport/CsvImportWidget.cpp keepassxc-2.7.10/src/gui/csvImport/CsvImportWidget.cpp
--- keepassxc-2.7.10.orig/src/gui/csvImport/CsvImportWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/csvImport/CsvImportWidget.cpp	2025-07-14 11:37:09.880935425 -0700
@@ -41,7 +41,11 @@ namespace
             return group;
         }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        auto nameList = groupPath.split("/", Qt::SkipEmptyParts);
+#else
         auto nameList = groupPath.split("/", QString::SkipEmptyParts);
+#endif
         // Skip over first group name if root
         if (nameList.first().compare("root", Qt::CaseInsensitive) == 0) {
             nameList.removeFirst();
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/dbsettings/DatabaseSettingsWidgetDatabaseKey.cpp keepassxc-2.7.10/src/gui/dbsettings/DatabaseSettingsWidgetDatabaseKey.cpp
--- keepassxc-2.7.10.orig/src/gui/dbsettings/DatabaseSettingsWidgetDatabaseKey.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/dbsettings/DatabaseSettingsWidgetDatabaseKey.cpp	2025-07-14 11:37:09.881227092 -0700
@@ -61,7 +61,11 @@ DatabaseSettingsWidgetDatabaseKey::Datab
     vbox->addWidget(m_additionalKeyOptions);
     vbox->setSizeConstraint(QLayout::SetMinimumSize);
     m_additionalKeyOptions->setLayout(new QVBoxLayout());
+#if QT_VERSION > QT_VERSION_CHECK(6, 0, 0)
+    m_additionalKeyOptions->layout()->setContentsMargins(0, 0, 0, 0);
+#else
     m_additionalKeyOptions->layout()->setMargin(0);
+#endif
     m_additionalKeyOptions->layout()->setSpacing(20);
     m_additionalKeyOptions->layout()->addWidget(m_keyFileEditWidget);
 #ifdef WITH_XC_YUBIKEY
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/entry/EditEntryWidget.cpp keepassxc-2.7.10/src/gui/entry/EditEntryWidget.cpp
--- keepassxc-2.7.10.orig/src/gui/entry/EditEntryWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/entry/EditEntryWidget.cpp	2025-07-14 11:37:09.881605203 -0700
@@ -1231,7 +1231,15 @@ void EditEntryWidget::updateEntryData(En
     entry->setPassword(m_mainUi->passwordEdit->text());
     entry->setExpires(m_mainUi->expireCheck->isChecked());
     entry->setExpiryTime(m_mainUi->expireDatePicker->dateTime().toUTC());
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QStringList tags = m_mainUi->tagsList->tags();
+    QSet<QString> setTags = QSet<QString>(tags.begin(), tags.end());
+    QList<QString> listTags = QList<QString>(setTags.begin(), setTags.end());
+    QStringList t = QStringList(tags);
+    entry->setTags(t.join(QChar(';'))); // remove repeated tags
+#else
     entry->setTags(m_mainUi->tagsList->tags().toSet().toList().join(";")); // remove repeated tags
+#endif
 
     entry->setNotes(m_mainUi->notesEdit->toPlainText());
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/entry/EntryAttachmentsWidget.cpp keepassxc-2.7.10/src/gui/entry/EntryAttachmentsWidget.cpp
--- keepassxc-2.7.10.orig/src/gui/entry/EntryAttachmentsWidget.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/entry/EntryAttachmentsWidget.cpp	2025-07-14 11:37:09.881902684 -0700
@@ -300,8 +300,13 @@ void EntryAttachmentsWidget::saveSelecte
 
         QFile file(attachmentPath);
         const QByteArray attachmentData = m_entryAttachments->value(filename);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        const bool saveOk = file.open(QIODeviceBase::WriteOnly) && file.setPermissions(QFile::ReadUser | QFile::WriteUser)
+                            && file.write(attachmentData) == attachmentData.size();
+#else
         const bool saveOk = file.open(QIODevice::WriteOnly) && file.setPermissions(QFile::ReadUser | QFile::WriteUser)
                             && file.write(attachmentData) == attachmentData.size();
+#endif
         if (!saveOk) {
             errors.append(QString("%1 - %2").arg(filename, file.errorString()));
         }
@@ -391,7 +396,11 @@ bool EntryAttachmentsWidget::insertAttac
         QByteArray data;
         QFile file(filename);
         const QFileInfo fInfo(filename);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        const bool readOk = file.open(QIODeviceBase::ReadOnly) && Tools::readAllFromDevice(&file, data);
+#else
         const bool readOk = file.open(QIODevice::ReadOnly) && Tools::readAllFromDevice(&file, data);
+#endif
         if (readOk) {
             m_entryAttachments->set(fInfo.fileName(), data);
         } else {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/entry/EntryHistoryModel.cpp keepassxc-2.7.10/src/gui/entry/EntryHistoryModel.cpp
--- keepassxc-2.7.10.orig/src/gui/entry/EntryHistoryModel.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/entry/EntryHistoryModel.cpp	2025-07-14 11:37:09.882242279 -0700
@@ -67,7 +67,11 @@ QVariant EntryHistoryModel::data(const Q
         switch (index.column()) {
         case 0:
             if (role == Qt::DisplayRole) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+                return QLocale::system().toString(lastModified, QLocale::ShortFormat);
+#else
                 return lastModified.toString(Qt::SystemLocaleShortDate);
+#endif
             } else {
                 return lastModified;
             }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/entry/EntryModel.cpp keepassxc-2.7.10/src/gui/entry/EntryModel.cpp
--- keepassxc-2.7.10.orig/src/gui/entry/EntryModel.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/entry/EntryModel.cpp	2025-07-14 11:37:09.882484828 -0700
@@ -36,7 +36,11 @@ EntryModel::EntryModel(QObject* parent)
     : QAbstractTableModel(parent)
     , m_group(nullptr)
     , HiddenContentDisplay(QString("\u25cf").repeated(6))
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    , DateFormat(QLocale::ShortFormat)
+#else
     , DateFormat(Qt::DefaultLocaleShortDate)
+#endif
 {
     connect(config(), &Config::changed, this, &EntryModel::onConfigChanged);
 }
@@ -192,6 +196,23 @@ QVariant EntryModel::data(const QModelIn
                 }
             }
             return result;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        case Expires:
+            // Display either date of expiry or 'Never'
+            result = entry->timeInfo().expires()
+                         ? QLocale::system().toString(entry->timeInfo().expiryTime().toLocalTime(), EntryModel::DateFormat)
+                         : tr("Never");
+            return result;
+        case Created:
+            result = QLocale::system().toString(entry->timeInfo().creationTime().toLocalTime(), EntryModel::DateFormat);
+            return result;
+        case Modified:
+            result = QLocale::system().toString(entry->timeInfo().lastModificationTime().toLocalTime(), EntryModel::DateFormat);
+            return result;
+        case Accessed:
+            result = QLocale::system().toString(entry->timeInfo().lastAccessTime().toLocalTime(), EntryModel::DateFormat);
+            return result;
+#else
         case Expires:
             // Display either date of expiry or 'Never'
             result = entry->timeInfo().expires()
@@ -207,6 +228,7 @@ QVariant EntryModel::data(const QModelIn
         case Accessed:
             result = entry->timeInfo().lastAccessTime().toLocalTime().toString(EntryModel::DateFormat);
             return result;
+#endif
         case Attachments: {
             // Display comma-separated list of attachments
             QList<QString> attachments = entry->attachments()->keys();
@@ -257,7 +279,11 @@ QVariant EntryModel::data(const QModelIn
         }
         case Expires:
             // There seems to be no better way of expressing 'infinity'
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            return entry->timeInfo().expires() ? entry->timeInfo().expiryTime() : QDateTime(QDate(9999, 1, 1), QTime(0, 0));
+#else
             return entry->timeInfo().expires() ? entry->timeInfo().expiryTime() : QDateTime(QDate(9999, 1, 1));
+#endif
         case Created:
             return entry->timeInfo().creationTime();
         case Modified:
@@ -489,7 +515,11 @@ QMimeData* EntryModel::mimeData(const QM
 
     QMimeData* data = new QMimeData();
     QByteArray encoded;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&encoded, QIODeviceBase::WriteOnly);
+#else
     QDataStream stream(&encoded, QIODevice::WriteOnly);
+#endif
 
     QSet<Entry*> seenEntries;
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/entry/EntryModel.h keepassxc-2.7.10/src/gui/entry/EntryModel.h
--- keepassxc-2.7.10.orig/src/gui/entry/EntryModel.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/entry/EntryModel.h	2025-07-14 11:37:09.882719576 -0700
@@ -19,6 +19,7 @@
 #define KEEPASSX_ENTRYMODEL_H
 
 #include <QAbstractTableModel>
+#include <QLocale>
 #include <QPixmap>
 #include <QSet>
 
@@ -95,7 +96,11 @@ private:
     QSet<const Group*> m_allGroups;
 
     const QString HiddenContentDisplay;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    const QLocale::FormatType DateFormat;
+#else
     const Qt::DateFormat DateFormat;
+#endif
 };
 
 #endif // KEEPASSX_ENTRYMODEL_H
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/entry/EntryView.cpp keepassxc-2.7.10/src/gui/entry/EntryView.cpp
--- keepassxc-2.7.10.orig/src/gui/entry/EntryView.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/entry/EntryView.cpp	2025-07-14 11:37:09.882942286 -0700
@@ -19,6 +19,7 @@
 #include "EntryView.h"
 
 #include <QAccessible>
+#include <QActionGroup>
 #include <QDrag>
 #include <QGuiApplication>
 #include <QHeaderView>
@@ -94,7 +95,11 @@ EntryView::EntryView(QWidget* parent)
         emit entrySelectionChanged(currentEntry());
     });
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    new QShortcut(Qt::CTRL | Qt::Key_F10, this, SLOT(contextMenuShortcutPressed()), nullptr, Qt::WidgetShortcut);
+#else
     new QShortcut(Qt::CTRL + Qt::Key_F10, this, SLOT(contextMenuShortcutPressed()), nullptr, Qt::WidgetShortcut);
+#endif
 
     resetViewToDefaults();
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/group/GroupModel.cpp keepassxc-2.7.10/src/gui/group/GroupModel.cpp
--- keepassxc-2.7.10.orig/src/gui/group/GroupModel.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/group/GroupModel.cpp	2025-07-14 11:37:09.883189044 -0700
@@ -225,7 +225,11 @@ bool GroupModel::dropMimeData(const QMim
 
     // decode and insert
     QByteArray encoded = data->data(isGroup ? types.at(0) : types.at(1));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&encoded, QIODeviceBase::ReadOnly);
+#else
     QDataStream stream(&encoded, QIODevice::ReadOnly);
+#endif
 
     Group* parentGroup = groupFromIndex(parent);
 
@@ -335,7 +339,11 @@ QMimeData* GroupModel::mimeData(const QM
 
     QMimeData* data = new QMimeData();
     QByteArray encoded;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&encoded, QIODeviceBase::WriteOnly);
+#else
     QDataStream stream(&encoded, QIODevice::WriteOnly);
+#endif
 
     QSet<Group*> seenGroups;
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/group/GroupView.cpp keepassxc-2.7.10/src/gui/group/GroupView.cpp
--- keepassxc-2.7.10.orig/src/gui/group/GroupView.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/group/GroupView.cpp	2025-07-14 11:37:09.883410998 -0700
@@ -44,6 +44,16 @@ GroupView::GroupView(Database* db, QWidg
     connect(selectionModel(), SIGNAL(currentChanged(QModelIndex,QModelIndex)), SIGNAL(groupSelectionChanged()));
     // clang-format on
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    new QShortcut(Qt::CTRL | Qt::Key_F10, this, SLOT(contextMenuShortcutPressed()), nullptr, Qt::WidgetShortcut);
+
+    // keyboard shortcuts to sort children of a group
+    auto shortcut = new QShortcut(Qt::CTRL | Qt::Key_Down, this);
+    connect(shortcut, &QShortcut::activated, this, [this]() { sortGroups(false); });
+
+    shortcut = new QShortcut(Qt::CTRL | Qt::Key_Up, this);
+    connect(shortcut, &QShortcut::activated, this, [this]() { sortGroups(true); });
+#else
     new QShortcut(Qt::CTRL + Qt::Key_F10, this, SLOT(contextMenuShortcutPressed()), nullptr, Qt::WidgetShortcut);
     new QShortcut(
         Qt::CTRL + Qt::SHIFT + Qt::Key_PageUp, this, SLOT(selectPreviousGroup()), nullptr, Qt::WindowShortcut);
@@ -55,6 +65,7 @@ GroupView::GroupView(Database* db, QWidg
 
     shortcut = new QShortcut(Qt::CTRL + Qt::Key_Up, this, nullptr, nullptr, Qt::WidgetShortcut);
     connect(shortcut, &QShortcut::activated, this, [this]() { sortGroups(true); });
+#endif
 
     modelReset();
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/osutils/nixutils/NixUtils.cpp keepassxc-2.7.10/src/gui/osutils/nixutils/NixUtils.cpp
--- keepassxc-2.7.10.orig/src/gui/osutils/nixutils/NixUtils.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/osutils/nixutils/NixUtils.cpp	2025-07-14 11:37:09.883647782 -0700
@@ -30,7 +30,12 @@
 #include <QStyle>
 #include <QTextStream>
 #ifdef WITH_XC_X11
-#include <QX11Info>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) //xcb xlib
+//#  include <QGuiApplication>
+#  include <QtGui/private/qtx11extras_p.h> // Short term solution
+#else //xkb
+#  include <QX11Info>
+#endif
 
 #include <qpa/qplatformnativeinterface.h>
 
@@ -67,8 +72,17 @@ NixUtils::NixUtils(QObject* parent)
     : OSUtilsBase(parent)
 {
 #ifdef WITH_XC_X11
+#  if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0) && 0
+    // Broken during test
+    auto *x11Application = qGuiApp->nativeInterface<QNativeInterface::QX11Application>(); // Returns nullptr during test
+    dpy = x11Application->display();
+    xcb_connection_t* connection = x11Application->connection();
+    xcb_screen_t* screen = xcb_setup_roots_iterator(xcb_get_setup(connection)).data;
+    rootWindow = screen->root;
+#  else
     dpy = QX11Info::display();
     rootWindow = QX11Info::appRootWindow();
+#  endif
 #endif
 
     // notify about system color scheme changes
@@ -139,7 +153,11 @@ void NixUtils::setLaunchAtStartup(bool e
 #ifndef KEEPASSXC_DIST_FLATPAK
     if (enable) {
         QFile desktopFile(getAutostartDesktopFilename(true));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (!desktopFile.open(QIODeviceBase::WriteOnly)) {
+#else
         if (!desktopFile.open(QIODevice::WriteOnly)) {
+#endif
             qWarning("Failed to create autostart desktop file.");
             return;
         }
@@ -149,7 +167,11 @@ void NixUtils::setLaunchAtStartup(bool e
         const QString executeablePathOrName = isAppImage ? appImagePath : QApplication::applicationName().toLower();
 
         QTextStream stream(&desktopFile);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        stream.setEncoding(QStringConverter::Utf8);
+#else
         stream.setCodec("UTF-8");
+#endif
         stream << QStringLiteral("[Desktop Entry]") << '\n'
                << QStringLiteral("Name=") << QApplication::applicationDisplayName() << '\n'
                << QStringLiteral("GenericName=") << tr("Password Manager") << '\n'
@@ -166,7 +188,7 @@ void NixUtils::setLaunchAtStartup(bool e
                << QStringLiteral("X-GNOME-Autostart-enabled=true") << '\n'
                << QStringLiteral("X-GNOME-Autostart-Delay=2") << '\n'
                << QStringLiteral("X-KDE-autostart-after=panel") << '\n'
-               << QStringLiteral("X-LXQt-Need-Tray=true") << endl;
+               << QStringLiteral("X-LXQt-Need-Tray=true") << Qt::endl;
         desktopFile.close();
     } else if (isLaunchAtStartupEnabled()) {
         QFile::remove(getAutostartDesktopFilename());
@@ -247,7 +269,11 @@ void NixUtils::registerNativeEventFilter
     qApp->installNativeEventFilter(this);
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+bool NixUtils::nativeEventFilter(const QByteArray& eventType, void* message, qintptr *)
+#else
 bool NixUtils::nativeEventFilter(const QByteArray& eventType, void* message, long*)
+#endif
 {
 #ifdef WITH_XC_X11
     if (eventType != QByteArrayLiteral("xcb_generic_event_t")) {
@@ -290,7 +316,11 @@ bool NixUtils::triggerGlobalShortcut(uin
 bool NixUtils::registerGlobalShortcut(const QString& name, Qt::Key key, Qt::KeyboardModifiers modifiers, QString* error)
 {
 #ifdef WITH_XC_X11
+#  if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto keycode = XKeysymToKeycode(dpy, qtToNativeKeyCode(key));
+#  else
     auto keycode = XKeysymToKeycode(dpy, qcharToNativeKeyCode(key));
+#  endif
     auto modifierscode = qtToNativeModifiers(modifiers);
 
     // Check if this key combo is registered to another shortcut
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/osutils/nixutils/NixUtils.h keepassxc-2.7.10/src/gui/osutils/nixutils/NixUtils.h
--- keepassxc-2.7.10.orig/src/gui/osutils/nixutils/NixUtils.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/osutils/nixutils/NixUtils.h	2025-07-14 11:37:09.883920294 -0700
@@ -59,7 +59,11 @@ private:
     explicit NixUtils(QObject* parent = nullptr);
     ~NixUtils() override;
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    bool nativeEventFilter(const QByteArray& eventType, void* message, qintptr *) override;
+#else
     bool nativeEventFilter(const QByteArray& eventType, void* message, long*) override;
+#endif
     QString getAutostartDesktopFilename(bool createDirs = false) const;
 
     bool triggerGlobalShortcut(uint keycode, uint modifiers);
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/reports/ReportsWidgetHibp.cpp keepassxc-2.7.10/src/gui/reports/ReportsWidgetHibp.cpp
--- keepassxc-2.7.10.orig/src/gui/reports/ReportsWidgetHibp.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/reports/ReportsWidgetHibp.cpp	2025-07-14 11:37:09.884119246 -0700
@@ -134,9 +134,15 @@ void ReportsWidgetHibp::makeHibpTable()
     }
 
     // Sort decending by the number the password has been exposed
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    std::sort(items.begin(), items.end(), [](QPair<Entry*, int>& lhs, QPair<Entry*, int>& rhs) {
+        return lhs.second > rhs.second;
+    });
+#else
     qSort(items.begin(), items.end(), [](QPair<Entry*, int>& lhs, QPair<Entry*, int>& rhs) {
         return lhs.second > rhs.second;
     });
+#endif
 
     // Display entries that are marked as "known bad"?
     const auto showExcluded = m_ui->showKnownBadCheckBox->isChecked();
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/reports/ReportsWidgetStatistics.cpp keepassxc-2.7.10/src/gui/reports/ReportsWidgetStatistics.cpp
--- keepassxc-2.7.10.orig/src/gui/reports/ReportsWidgetStatistics.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/reports/ReportsWidgetStatistics.cpp	2025-07-14 11:37:09.884350450 -0700
@@ -88,9 +88,15 @@ void ReportsWidgetStatistics::calculateS
     addStatsRow(tr("Database name"), m_db->metadata()->name());
     addStatsRow(tr("Description"), m_db->metadata()->description());
     addStatsRow(tr("Location"), m_db->filePath());
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    addStatsRow(tr("Database created"),
+                QLocale().toString(m_db->rootGroup()->timeInfo().creationTime(), QLocale::ShortFormat));
+    addStatsRow(tr("Last saved"), QLocale().toString(stats->modified, QLocale::ShortFormat));
+#else
     addStatsRow(tr("Database created"),
                 m_db->rootGroup()->timeInfo().creationTime().toString(Qt::DefaultLocaleShortDate));
     addStatsRow(tr("Last saved"), stats->modified.toString(Qt::DefaultLocaleShortDate));
+#endif
     addStatsRow(tr("Unsaved changes"),
                 m_db->isModified() ? tr("yes") : tr("no"),
                 m_db->isModified(),
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/styles/base/BaseStyle.cpp keepassxc-2.7.10/src/gui/styles/base/BaseStyle.cpp
--- keepassxc-2.7.10.orig/src/gui/styles/base/BaseStyle.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/styles/base/BaseStyle.cpp	2025-07-14 11:37:09.886964693 -0700
@@ -884,7 +884,11 @@ namespace Phantom
         {
             QRect ra = bar->rect;
             QRect rb = ra;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            bool isHorizontal = bar->state & QStyle::State_Horizontal;
+#else
             bool isHorizontal = bar->orientation != Qt::Vertical;
+#endif
             bool isInverted = bar->invertedAppearance;
             bool isIndeterminate = bar->minimum == 0 && bar->maximum == 0;
             bool isForward = !isHorizontal || bar->direction != Qt::RightToLeft;
@@ -1478,13 +1482,21 @@ void BaseStyle::drawPrimitive(PrimitiveE
     }
     case PE_FrameDockWidget: {
         painter->save();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QColor softshadow = option->palette.window().color().darker(120);
+#else
         QColor softshadow = option->palette.background().color().darker(120);
+#endif
         QRect r = option->rect;
         painter->setPen(softshadow);
         painter->drawRect(r.adjusted(0, 0, -1, -1));
         painter->setPen(QPen(option->palette.light(), 1));
         painter->drawLine(QPoint(r.left() + 1, r.top() + 1), QPoint(r.left() + 1, r.bottom() - 1));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        painter->setPen(QPen(option->palette.window().color().darker(120)));
+#else
         painter->setPen(QPen(option->palette.background().color().darker(120)));
+#endif
         painter->drawLine(QPoint(r.left() + 1, r.bottom() - 1), QPoint(r.right() - 2, r.bottom() - 1));
         painter->drawLine(QPoint(r.right() - 1, r.top() + 1), QPoint(r.right() - 1, r.bottom() - 1));
         painter->restore();
@@ -1736,6 +1748,18 @@ void BaseStyle::drawPrimitive(PrimitiveE
             // TODO replace with new code
             const int margin = 6;
             const int offset = r.height() / 2;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            painter->setPen(QPen(option->palette.window().color().darker(110)));
+            painter->drawLine(r.topLeft().x() + margin,
+                              r.topLeft().y() + offset,
+                              r.topRight().x() - margin,
+                              r.topRight().y() + offset);
+            painter->setPen(QPen(option->palette.window().color().lighter(110)));
+            painter->drawLine(r.topLeft().x() + margin,
+                              r.topLeft().y() + offset + 1,
+                              r.topRight().x() - margin,
+                              r.topRight().y() + offset + 1);
+#else
             painter->setPen(QPen(option->palette.background().color().darker(110)));
             painter->drawLine(r.topLeft().x() + margin,
                               r.topLeft().y() + offset,
@@ -1746,6 +1770,7 @@ void BaseStyle::drawPrimitive(PrimitiveE
                               r.topLeft().y() + offset + 1,
                               r.topRight().x() - margin,
                               r.topRight().y() + offset + 1);
+#endif
         }
         break;
     }
@@ -2592,7 +2617,11 @@ void BaseStyle::drawControl(ControlEleme
         QRect r = bar->rect.adjusted(2, 2, -2, -2);
         if (r.isEmpty() || !r.isValid())
             break;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QSize textSize = option->fontMetrics.size(0, bar->text);
+#else
         QSize textSize = option->fontMetrics.size(Qt::TextBypassShaping, bar->text);
+#endif
         QRect textRect = QStyle::alignedRect(option->direction, Qt::AlignCenter, textSize, option->rect);
         textRect &= r;
         if (textRect.isEmpty())
@@ -2766,10 +2795,19 @@ void BaseStyle::drawControl(ControlEleme
         }
 
         // Draw main text and mnemonic text
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QStringView s(menuItem->text);
+#else
         QStringRef s(&menuItem->text);
+#endif
         if (!s.isEmpty()) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            QRect textRect =
+                Ph::menuItemTextRect(metrics, option->direction, itemRect, hasSubMenu, hasIcon, menuItem->reservedShortcutWidth);
+#else
             QRect textRect =
                 Ph::menuItemTextRect(metrics, option->direction, itemRect, hasSubMenu, hasIcon, menuItem->tabWidth);
+#endif
             int t = s.indexOf(QLatin1Char('\t'));
             int text_flags =
                 Qt::AlignLeft | Qt::AlignTop | Qt::TextShowMnemonic | Qt::TextDontClip | Qt::TextSingleLine;
@@ -2839,6 +2877,19 @@ void BaseStyle::drawControl(ControlEleme
 #endif
 
             // Draw mnemonic text
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            if (t >= 0) {
+                QRect mnemonicR =
+                    Ph::menuItemMnemonicRect(metrics, option->direction, itemRect, hasSubMenu, menuItem->reservedShortcutWidth);
+                const QStringView textToDrawView = s.mid(t + 1);
+                const QString unsafeTextToDraw = QString::fromRawData(textToDrawView.constData(), textToDrawView.size());
+                painter->drawText(mnemonicR, text_flags, unsafeTextToDraw);
+                s = s.left(t);
+            }
+            const QStringView textToDrawView = s.left(t);
+            const QString unsafeTextToDraw = QString::fromRawData(textToDrawView.constData(), textToDrawView.size());
+            painter->drawText(textRect, text_flags, unsafeTextToDraw);
+#else
             if (t >= 0) {
                 QRect mnemonicR =
                     Ph::menuItemMnemonicRect(metrics, option->direction, itemRect, hasSubMenu, menuItem->tabWidth);
@@ -2850,6 +2901,7 @@ void BaseStyle::drawControl(ControlEleme
             const QStringRef textToDrawRef = s.left(t);
             const QString unsafeTextToDraw = QString::fromRawData(textToDrawRef.constData(), textToDrawRef.size());
             painter->drawText(textRect, text_flags, unsafeTextToDraw);
+#endif
 
 #if 0
                 painter->restore();
@@ -3284,13 +3336,21 @@ void BaseStyle::drawComplexControl(Compl
         QColor outline = option->palette.dark().color();
 
         QColor titleBarFrameBorder(active ? highlight.darker(180) : outline.darker(110));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QColor titleBarHighlight(active ? highlight.lighter(120) : palette.window().color().lighter(120));
+#else
         QColor titleBarHighlight(active ? highlight.lighter(120) : palette.background().color().lighter(120));
+#endif
         QColor textColor(active ? 0xffffff : 0xff000000);
         QColor textAlphaColor(active ? 0xffffff : 0xff000000);
 
         {
             // Fill title
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            QColor titlebarColor = QColor(active ? highlight : palette.window().color());
+#else
             QColor titlebarColor = QColor(active ? highlight : palette.background().color());
+#endif
             painter->fillRect(option->rect.adjusted(1, 1, -1, 0), titlebarColor);
             // Frame and rounded corners
             painter->setPen(titleBarFrameBorder);
@@ -4167,7 +4227,11 @@ QSize BaseStyle::sizeFromContents(Conten
         bool nullIcon = hdr->icon.isNull();
         int margin = proxy()->pixelMetric(QStyle::PM_HeaderMargin, hdr, widget);
         int iconSize = nullIcon ? 0 : option->fontMetrics.height();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QSize txt = hdr->fontMetrics.size(Qt::TextSingleLine, hdr->text);
+#else
         QSize txt = hdr->fontMetrics.size(Qt::TextSingleLine | Qt::TextBypassShaping, hdr->text);
+#endif
         QSize sz;
         sz.setHeight(margin + qMax(iconSize, txt.height()) + margin);
         sz.setWidth((nullIcon ? 0 : margin) + iconSize + (hdr->text.isNull() ? 0 : margin) + txt.width() + margin);
@@ -4255,7 +4319,11 @@ void BaseStyle::polish(QApplication* app
 
     QString stylesheet;
     QFile baseStylesheetFile(":/styles/base/basestyle.qss");
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (baseStylesheetFile.open(QIODeviceBase::ReadOnly | QIODeviceBase::Text)) {
+#else
     if (baseStylesheetFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
+#endif
         stylesheet = baseStylesheetFile.readAll();
         baseStylesheetFile.close();
     } else {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/styles/dark/DarkStyle.cpp keepassxc-2.7.10/src/gui/styles/dark/DarkStyle.cpp
--- keepassxc-2.7.10.orig/src/gui/styles/dark/DarkStyle.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/styles/dark/DarkStyle.cpp	2025-07-14 11:37:09.889665237 -0700
@@ -105,7 +105,11 @@ QPalette DarkStyle::standardPalette() co
 QString DarkStyle::getAppStyleSheet() const
 {
     QFile extStylesheetFile(QStringLiteral(":/styles/dark/darkstyle.qss"));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (extStylesheetFile.open(QIODeviceBase::ReadOnly | QIODeviceBase::Text)) {
+#else
     if (extStylesheetFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
+#endif
         return extStylesheetFile.readAll();
     }
     qWarning("Failed to load dark theme stylesheet.");
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/gui/styles/light/LightStyle.cpp keepassxc-2.7.10/src/gui/styles/light/LightStyle.cpp
--- keepassxc-2.7.10.orig/src/gui/styles/light/LightStyle.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/gui/styles/light/LightStyle.cpp	2025-07-14 11:37:09.889928748 -0700
@@ -105,7 +105,11 @@ QPalette LightStyle::standardPalette() c
 QString LightStyle::getAppStyleSheet() const
 {
     QFile extStylesheetFile(QStringLiteral(":/styles/light/lightstyle.qss"));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    if (extStylesheetFile.open(QIODeviceBase::ReadOnly | QIODeviceBase::Text)) {
+#else
     if (extStylesheetFile.open(QIODevice::ReadOnly | QIODevice::Text)) {
+#endif
         return extStylesheetFile.readAll();
     }
     qWarning("Failed to load light theme stylesheet.");
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keeshare/CMakeLists.txt keepassxc-2.7.10/src/keeshare/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/keeshare/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keeshare/CMakeLists.txt	2025-07-14 11:37:09.890145792 -0700
@@ -13,6 +13,10 @@ if(WITH_XC_KEESHARE)
         )
 
     add_library(keeshare STATIC ${keeshare_SOURCES})
-    target_link_libraries(keeshare PUBLIC Qt5::Core Qt5::Widgets ${BOTAN_LIBRARIES} ${ZLIB_LIBRARIES} PRIVATE ${MINIZIP_LIBRARIES})
+    if(WITH_QT6)
+        target_link_libraries(keeshare PUBLIC Qt6::Core Qt6::Widgets ${BOTAN_LIBRARIES} ${ZLIB_LIBRARIES} PRIVATE ${MINIZIP_LIBRARIES})
+    elseif(WITH_QT5)
+        target_link_libraries(keeshare PUBLIC Qt5::Core Qt5::Widgets ${BOTAN_LIBRARIES} ${ZLIB_LIBRARIES} PRIVATE ${MINIZIP_LIBRARIES})
+    endif()
     include_directories(${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
 endif(WITH_XC_KEESHARE)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keeshare/KeeShareSettings.cpp keepassxc-2.7.10/src/keeshare/KeeShareSettings.cpp
--- keepassxc-2.7.10.orig/src/keeshare/KeeShareSettings.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keeshare/KeeShareSettings.cpp	2025-07-14 11:37:09.890358805 -0700
@@ -25,7 +25,9 @@
 #include "gui/DatabaseIcons.h"
 
 #include <QDataStream>
-#include <QTextCodec>
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+#  include <QTextCodec>
+#endif
 #include <QXmlStreamWriter>
 
 #include <botan/data_src.h>
@@ -41,7 +43,9 @@ namespace KeeShareSettings
             QString buffer;
             QXmlStreamWriter writer(&buffer);
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
             writer.setCodec(QTextCodec::codecForName("UTF-8"));
+#endif
             writer.writeStartDocument();
             writer.writeStartElement("KeeShare");
             specific(writer);
@@ -53,7 +57,7 @@ namespace KeeShareSettings
         void xmlDeserialize(const QString& raw, std::function<void(QXmlStreamReader& reader)> specific)
         {
             QXmlStreamReader reader(raw);
-            if (!reader.readNextStartElement() || reader.qualifiedName() != "KeeShare") {
+            if (!reader.readNextStartElement() || reader.qualifiedName().toUtf8().compare(QByteArray("KeeShare")) != 0) {
                 return;
             }
             specific(reader);
@@ -106,9 +110,9 @@ namespace KeeShareSettings
     {
         Certificate certificate;
         while (!reader.error() && reader.readNextStartElement()) {
-            if (reader.name() == "Signer") {
+            if (reader.name().toUtf8().compare(QByteArray("Signer")) == 0) {
                 certificate.signer = reader.readElementText();
-            } else if (reader.name() == "Key") {
+            } else if (reader.name().toUtf8().compare(QByteArray("Key")) == 0) {
                 auto rawKey = QByteArray::fromBase64(reader.readElementText().toLatin1());
                 if (!rawKey.isEmpty()) {
                     try {
@@ -200,12 +204,12 @@ namespace KeeShareSettings
         Active active;
         xmlDeserialize(raw, [&](QXmlStreamReader& reader) {
             while (!reader.error() && reader.readNextStartElement()) {
-                if (reader.name() == "Active") {
+                if (reader.name().toUtf8().compare(QByteArray("Active")) == 0) {
                     while (reader.readNextStartElement()) {
-                        if (reader.name() == "Import") {
+                        if (reader.name().toUtf8().compare(QByteArray("Import")) == 0) {
                             active.in = true;
                             reader.skipCurrentElement();
-                        } else if (reader.name() == "Export") {
+                        } else if (reader.name().toUtf8().compare(QByteArray("Export")) == 0) {
                             active.out = true;
                             reader.skipCurrentElement();
                         } else {
@@ -248,9 +252,9 @@ namespace KeeShareSettings
         Own own;
         xmlDeserialize(raw, [&](QXmlStreamReader& reader) {
             while (!reader.error() && reader.readNextStartElement()) {
-                if (reader.name() == "PrivateKey") {
+                if (reader.name().toUtf8().compare(QByteArray("PrivateKey")) == 0) {
                     own.key = Key::deserialize(reader);
-                } else if (reader.name() == "PublicKey") {
+                } else if (reader.name().toUtf8().compare(QByteArray("PublicKey")) == 0) {
                     own.certificate = Certificate::deserialize(reader);
                 } else {
                     qWarning("Unknown KeeShareSettings element %s", qPrintable(reader.name().toString()));
@@ -328,23 +332,23 @@ namespace KeeShareSettings
         Reference reference;
         xmlDeserialize(raw, [&](QXmlStreamReader& reader) {
             while (!reader.error() && reader.readNextStartElement()) {
-                if (reader.name() == "Type") {
+                if (reader.name().toUtf8().compare(QByteArray("Type")) == 0) {
                     while (reader.readNextStartElement()) {
-                        if (reader.name() == "Import") {
+                        if (reader.name().toUtf8().compare(QByteArray("Import")) == 0) {
                             reference.type |= ImportFrom;
                             reader.skipCurrentElement();
-                        } else if (reader.name() == "Export") {
+                        } else if (reader.name().toUtf8().compare(QByteArray("Export")) == 0) {
                             reference.type |= ExportTo;
                             reader.skipCurrentElement();
                         } else {
                             break;
                         }
                     }
-                } else if (reader.name() == "Group") {
+                } else if (reader.name().toUtf8().compare(QByteArray("Group")) == 0) {
                     reference.uuid = QUuid::fromRfc4122(QByteArray::fromBase64(reader.readElementText().toLatin1()));
-                } else if (reader.name() == "Path") {
+                } else if (reader.name().toUtf8().compare(QByteArray("Path")) == 0) {
                     reference.path = QString::fromUtf8(QByteArray::fromBase64(reader.readElementText().toLatin1()));
-                } else if (reader.name() == "Password") {
+                } else if (reader.name().toUtf8().compare(QByteArray("Password")) == 0) {
                     reference.password = QString::fromUtf8(QByteArray::fromBase64(reader.readElementText().toLatin1()));
                 } else {
                     qWarning("Unknown Reference element %s", qPrintable(reader.name().toString()));
@@ -372,7 +376,11 @@ namespace KeeShareSettings
         rsaKey->get_n().binary_encode(rsaN.data());
 
         QByteArray rsaKeySerialized;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QDataStream stream(&rsaKeySerialized, QIODeviceBase::WriteOnly);
+#else
         QDataStream stream(&rsaKeySerialized, QIODevice::WriteOnly);
+#endif
         stream.writeBytes("ssh-rsa", 7);
         stream.writeBytes(reinterpret_cast<const char*>(rsaE.data()), rsaE.size());
         stream.writeBytes(reinterpret_cast<const char*>(rsaN.data()), rsaN.size());
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keeshare/ShareExport.cpp keepassxc-2.7.10/src/keeshare/ShareExport.cpp
--- keepassxc-2.7.10.orig/src/keeshare/ShareExport.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keeshare/ShareExport.cpp	2025-07-14 11:37:09.890597114 -0700
@@ -168,7 +168,11 @@ ShareObserver::Result ShareExport::intoC
         QBuffer buffer;
 
         buffer.setBuffer(&dbData);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        buffer.open(QIODeviceBase::WriteOnly);
+#else
         buffer.open(QIODevice::WriteOnly);
+#endif
 
         KeePass2Writer writer;
         if (!writer.writeDatabase(&buffer, targetDb.data())) {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keys/ChallengeResponseKey.cpp keepassxc-2.7.10/src/keys/ChallengeResponseKey.cpp
--- keepassxc-2.7.10.orig/src/keys/ChallengeResponseKey.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keys/ChallengeResponseKey.cpp	2025-07-14 11:37:09.891088148 -0700
@@ -66,7 +66,11 @@ bool ChallengeResponseKey::challenge(con
 QByteArray ChallengeResponseKey::serialize() const
 {
     QByteArray data;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&data, QIODeviceBase::WriteOnly);
+#else
     QDataStream stream(&data, QIODevice::WriteOnly);
+#endif
     stream << uuid().toRfc4122() << m_keySlot;
     return data;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keys/CompositeKey.cpp keepassxc-2.7.10/src/keys/CompositeKey.cpp
--- keepassxc-2.7.10.orig/src/keys/CompositeKey.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keys/CompositeKey.cpp	2025-07-14 11:37:09.891215860 -0700
@@ -230,7 +230,11 @@ const QList<QSharedPointer<ChallengeResp
 QByteArray CompositeKey::serialize() const
 {
     QByteArray data;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&data, QIODeviceBase::WriteOnly);
+#else
     QDataStream stream(&data, QIODevice::WriteOnly);
+#endif
     // Write Composite Key UUID then each sub-key UUID and data
     stream << uuid().toRfc4122();
     for (auto const& key : m_keys) {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keys/CompositeKey.h keepassxc-2.7.10/src/keys/CompositeKey.h
--- keepassxc-2.7.10.orig/src/keys/CompositeKey.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keys/CompositeKey.h	2025-07-14 11:37:09.891430229 -0700
@@ -19,6 +19,7 @@
 #ifndef KEEPASSX_COMPOSITEKEY_H
 #define KEEPASSX_COMPOSITEKEY_H
 
+#include <QList>
 #include <QSharedPointer>
 
 #include "keys/Key.h"
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keys/FileKey.cpp keepassxc-2.7.10/src/keys/FileKey.cpp
--- keepassxc-2.7.10.orig/src/keys/FileKey.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keys/FileKey.cpp	2025-07-14 11:37:09.891580965 -0700
@@ -173,7 +173,11 @@ void FileKey::setRawKey(const QByteArray
 QByteArray FileKey::serialize() const
 {
     QByteArray data;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&data, QIODeviceBase::WriteOnly);
+#else
     QDataStream stream(&data, QIODevice::WriteOnly);
+#endif
     stream << uuid().toRfc4122() << rawKey() << static_cast<qint32>(m_type) << m_file;
     return data;
 }
@@ -301,7 +305,7 @@ bool FileKey::loadXml(QIODevice* device,
     if (xmlReader.error()) {
         return false;
     }
-    if (xmlReader.readNextStartElement() && xmlReader.name() != "KeyFile") {
+    if (xmlReader.readNextStartElement() && xmlReader.name().toUtf8().compare(QByteArray("KeyFile")) != 0) {
         return false;
     }
 
@@ -313,9 +317,9 @@ bool FileKey::loadXml(QIODevice* device,
     } keyFileData;
 
     while (!xmlReader.error() && xmlReader.readNextStartElement()) {
-        if (xmlReader.name() == "Meta") {
+        if (xmlReader.name().toUtf8().compare(QByteArray("Meta")) == 0) {
             while (!xmlReader.error() && xmlReader.readNextStartElement()) {
-                if (xmlReader.name() == "Version") {
+                if (xmlReader.name().toUtf8().compare(QByteArray("Version")) == 0) {
                     keyFileData.version = xmlReader.readElementText();
                     if (keyFileData.version.startsWith("1.0")) {
                         m_type = KeePass2XML;
@@ -329,9 +333,9 @@ bool FileKey::loadXml(QIODevice* device,
                     }
                 }
             }
-        } else if (xmlReader.name() == "Key") {
+        } else if (xmlReader.name().toUtf8().compare(QByteArray("Key")) == 0) {
             while (!xmlReader.error() && xmlReader.readNextStartElement()) {
-                if (xmlReader.name() == "Data") {
+                if (xmlReader.name().toUtf8().compare(QByteArray("Data")) == 0) {
                     keyFileData.hash = QByteArray::fromHex(xmlReader.attributes().value("Hash").toLatin1());
                     keyFileData.data = xmlReader.readElementText().simplified().replace(" ", "").toLatin1();
 
@@ -362,7 +366,12 @@ bool FileKey::loadXml(QIODevice* device,
 
     bool ok = false;
     if (!xmlReader.error() && !keyFileData.data.isEmpty()) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        int keyFileDataSize = static_cast<int>(keyFileData.data.size());
+        std::memcpy(m_key.data(), keyFileData.data.data(), std::min(SHA256_SIZE, keyFileDataSize));
+#else
         std::memcpy(m_key.data(), keyFileData.data.data(), std::min(SHA256_SIZE, keyFileData.data.size()));
+#endif
         ok = true;
     }
 
@@ -421,7 +430,12 @@ bool FileKey::loadHex(QIODevice* device)
         return false;
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    int dataSize = static_cast<int>(data.size());
+    std::memcpy(m_key.data(), data.data(), std::min(SHA256_SIZE, dataSize));
+#else
     std::memcpy(m_key.data(), data.data(), std::min(SHA256_SIZE, data.size()));
+#endif
     Botan::secure_scrub_memory(data.data(), static_cast<std::size_t>(data.capacity()));
 
     m_type = FixedBinaryHex;
@@ -447,7 +461,12 @@ bool FileKey::loadHashed(QIODevice* devi
     } while (!buffer.isEmpty());
 
     buffer = cryptoHash.result();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    int bufferSize = static_cast<int>(buffer.size());
+    std::memcpy(m_key.data(), buffer.data(), std::min(SHA256_SIZE, bufferSize));
+#else
     std::memcpy(m_key.data(), buffer.data(), std::min(SHA256_SIZE, buffer.size()));
+#endif
     Botan::secure_scrub_memory(buffer.data(), static_cast<std::size_t>(buffer.capacity()));
 
     m_type = Hashed;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keys/PasswordKey.cpp keepassxc-2.7.10/src/keys/PasswordKey.cpp
--- keepassxc-2.7.10.orig/src/keys/PasswordKey.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keys/PasswordKey.cpp	2025-07-14 11:37:09.891820198 -0700
@@ -74,7 +74,11 @@ QSharedPointer<PasswordKey> PasswordKey:
 QByteArray PasswordKey::serialize() const
 {
     QByteArray data;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&data, QIODeviceBase::WriteOnly);
+#else
     QDataStream stream(&data, QIODevice::WriteOnly);
+#endif
     stream << uuid().toRfc4122() << rawKey();
     return data;
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keys/drivers/YubiKey.cpp keepassxc-2.7.10/src/keys/drivers/YubiKey.cpp
--- keepassxc-2.7.10.orig/src/keys/drivers/YubiKey.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keys/drivers/YubiKey.cpp	2025-07-14 11:44:10.668259331 -0700
@@ -24,7 +24,11 @@
 #include <QSet>
 #include <QtConcurrent>
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+QRecursiveMutex YubiKey::s_interfaceMutex;
+#else
 QMutex YubiKey::s_interfaceMutex(QMutex::Recursive);
+#endif
 
 YubiKey::YubiKey()
 {
@@ -73,14 +77,22 @@ bool YubiKey::isInitialized()
 
 bool YubiKey::findValidKeys()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QMutexLocker<QRecursiveMutex> lock(&s_interfaceMutex);
+#else
     QMutexLocker lock(&s_interfaceMutex);
+#endif
 
     findValidKeys(lock);
 
     return !m_usbKeys.isEmpty() || !m_pcscKeys.isEmpty();
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+void YubiKey::findValidKeys(const QMutexLocker<QRecursiveMutex>& locker)
+#else
 void YubiKey::findValidKeys(const QMutexLocker& locker)
+#endif
 {
     // Check QMutexLocker since version 6.4
     Q_UNUSED(locker);
@@ -97,23 +109,39 @@ void YubiKey::findValidKeysAsync()
 
 YubiKey::KeyMap YubiKey::foundKeys()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QMutexLocker<QRecursiveMutex> lock(&s_interfaceMutex);
+    KeyMap foundKeys = m_usbKeys;
+    for (auto it = m_pcscKeys.constBegin(); it != m_pcscKeys.constEnd(); ++it) {
+        foundKeys.insert(it.key(), it.value());
+    }
+#else
     QMutexLocker lock(&s_interfaceMutex);
     KeyMap foundKeys = m_usbKeys;
     foundKeys.unite(m_pcscKeys);
+#endif
 
     return foundKeys;
 }
 
 int YubiKey::connectedKeys()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QMutexLocker<QRecursiveMutex> lock(&s_interfaceMutex);
+#else
     QMutexLocker lock(&s_interfaceMutex);
+#endif
 
     return m_connectedKeys;
 }
 
 QString YubiKey::errorMessage()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QMutexLocker<QRecursiveMutex> lock(&s_interfaceMutex);
+#else
     QMutexLocker lock(&s_interfaceMutex);
+#endif
 
     QString error;
     error.clear();
@@ -150,7 +178,11 @@ QString YubiKey::errorMessage()
  */
 bool YubiKey::testChallenge(YubiKeySlot slot, bool* wouldBlock)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QMutexLocker<QRecursiveMutex> lock(&s_interfaceMutex);
+#else
     QMutexLocker lock(&s_interfaceMutex);
+#endif
 
     if (m_usbKeys.contains(slot)) {
         return YubiKeyInterfaceUSB::instance()->testChallenge(slot, wouldBlock);
@@ -175,7 +207,11 @@ bool YubiKey::testChallenge(YubiKeySlot
 YubiKey::ChallengeResult
 YubiKey::challenge(YubiKeySlot slot, const QByteArray& challenge, Botan::secure_vector<char>& response)
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QMutexLocker<QRecursiveMutex> lock(&s_interfaceMutex);
+#else
     QMutexLocker lock(&s_interfaceMutex);
+#endif
 
     m_error.clear();
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/keys/drivers/YubiKey.h keepassxc-2.7.10/src/keys/drivers/YubiKey.h
--- keepassxc-2.7.10.orig/src/keys/drivers/YubiKey.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/keys/drivers/YubiKey.h	2025-07-14 11:44:15.724269861 -0700
@@ -21,7 +21,11 @@
 
 #include <QHash>
 #include <QMultiMap>
-#include <QMutex>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QRecursiveMutex>
+#else
+#  include <QMutex>
+#endif
 #include <QObject>
 #include <QTimer>
 #include <botan/secmem.h>
@@ -83,7 +87,11 @@ signals:
 private:
     explicit YubiKey();
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    void findValidKeys(const QMutexLocker<QRecursiveMutex>& locker);
+#else
     void findValidKeys(const QMutexLocker& locker);
+#endif
 
     static YubiKey* m_instance;
 
@@ -91,7 +99,11 @@ private:
     bool m_initialized = false;
     QString m_error;
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    static QRecursiveMutex s_interfaceMutex;
+#else
     static QMutex s_interfaceMutex;
+#endif
 
     KeyMap m_usbKeys;
     KeyMap m_pcscKeys;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/main.cpp keepassxc-2.7.10/src/main.cpp
--- keepassxc-2.7.10.orig/src/main.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/main.cpp	2025-07-14 11:37:09.892491686 -0700
@@ -109,9 +109,13 @@ int main(int argc, char** argv)
 
     // Show debug information and then exit
     if (parser.isSet(debugInfoOption)) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        QTextStream out(stdout, QIODeviceBase::WriteOnly);
+#else
         QTextStream out(stdout, QIODevice::WriteOnly);
+#endif
         QString debugInfo = Tools::debugInfo().append("\n").append(Crypto::debugInfo());
-        out << debugInfo << endl;
+        out << debugInfo << Qt::endl;
         return EXIT_SUCCESS;
     }
 
@@ -205,8 +209,12 @@ int main(int argc, char** argv)
         if (pwstdin) {
             // we always need consume a line of STDIN if --pw-stdin is set to clear out the
             // buffer for native messaging, even if the specified file does not exist
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+            QTextStream out(stdout, QIODeviceBase::WriteOnly);
+#else
             QTextStream out(stdout, QIODevice::WriteOnly);
-            out << QObject::tr("Database password: ") << flush;
+#endif
+            out << QObject::tr("Database password: ") << Qt::flush;
             password = Utils::getPassword();
         }
         mainWindow.openDatabase(filename, password, parser.value(keyfileOption));
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/proxy/CMakeLists.txt keepassxc-2.7.10/src/proxy/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/proxy/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/proxy/CMakeLists.txt	2025-07-14 11:37:09.892628090 -0700
@@ -21,10 +21,18 @@ if(WITH_XC_BROWSER)
 
     # Alloc must be defined in a static library to prevent clashing with clang ASAN definitions
     add_library(proxy_alloc STATIC ../core/Alloc.cpp)
-    target_link_libraries(proxy_alloc PRIVATE Qt5::Core ${BOTAN_LIBRARIES})
+    if(WITH_QT6)
+        target_link_libraries(proxy_alloc PRIVATE Qt6::Core ${BOTAN_LIBRARIES})
+    elseif(WITH_QT5)
+        target_link_libraries(proxy_alloc PRIVATE Qt5::Core ${BOTAN_LIBRARIES})
+    endif()
 
     add_executable(keepassxc-proxy ${proxy_SOURCES})
-    target_link_libraries(keepassxc-proxy proxy_alloc Qt5::Core Qt5::Network)
+    if(WITH_QT6)
+        target_link_libraries(keepassxc-proxy proxy_alloc Qt6::Core Qt6::Network)
+    elseif(WITH_QT5)
+        target_link_libraries(keepassxc-proxy proxy_alloc Qt5::Core Qt5::Network)
+    endif()
     install(TARGETS keepassxc-proxy
             BUNDLE DESTINATION . COMPONENT Runtime
             RUNTIME DESTINATION ${PROXY_INSTALL_DIR} COMPONENT Runtime)
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/proxy/NativeMessagingProxy.cpp keepassxc-2.7.10/src/proxy/NativeMessagingProxy.cpp
--- keepassxc-2.7.10.orig/src/proxy/NativeMessagingProxy.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/proxy/NativeMessagingProxy.cpp	2025-07-14 11:37:09.892726665 -0700
@@ -68,7 +68,7 @@ void NativeMessagingProxy::setupStandard
                 QString msg;
                 msg.reserve(length);
                 for (uint i = 0; i < length; ++i) {
-                    msg.append(getchar());
+                    msg.append(QChar(getchar()));
                 }
 
                 if (msg.length() > 0) {
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/qrcode/CMakeLists.txt keepassxc-2.7.10/src/qrcode/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/qrcode/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/qrcode/CMakeLists.txt	2025-07-14 11:37:09.892820022 -0700
@@ -21,4 +21,8 @@ find_package(QREncode REQUIRED)
 
 add_library(qrcode STATIC ${qrcode_SOURCES})
 target_include_directories(qrcode PRIVATE ${QRENCODE_INCLUDE_DIR})
-target_link_libraries(qrcode PUBLIC Qt5::Core Qt5::Svg ${QRENCODE_LIBRARY})
+if(WITH_QT6)
+    target_link_libraries(qrcode PUBLIC Qt6::Core Qt6::Svg ${QRENCODE_LIBRARY})
+elseif(WITH_QT5)
+    target_link_libraries(qrcode PUBLIC Qt5::Core Qt5::Svg ${QRENCODE_LIBRARY})
+endif()
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/sshagent/BinaryStream.cpp keepassxc-2.7.10/src/sshagent/BinaryStream.cpp
--- keepassxc-2.7.10.orig/src/sshagent/BinaryStream.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/sshagent/BinaryStream.cpp	2025-07-14 11:37:09.892920087 -0700
@@ -29,7 +29,11 @@ BinaryStream::BinaryStream(QByteArray* b
     : QObject(parent)
 {
     m_buffer.reset(new QBuffer(ba));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_buffer->open(QIODeviceBase::ReadWrite);
+#else
     m_buffer->open(QIODevice::ReadWrite);
+#endif
 
     m_device = m_buffer.data();
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/sshagent/CMakeLists.txt keepassxc-2.7.10/src/sshagent/CMakeLists.txt
--- keepassxc-2.7.10.orig/src/sshagent/CMakeLists.txt	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/sshagent/CMakeLists.txt	2025-07-14 11:37:09.893009789 -0700
@@ -12,5 +12,9 @@ if(WITH_XC_SSHAGENT)
     )
 
     add_library(sshagent STATIC ${sshagent_SOURCES})
-    target_link_libraries(sshagent Qt5::Core Qt5::Widgets Qt5::Network)
+    if(WITH_QT6)
+        target_link_libraries(sshagent Qt6::Core Qt6::Widgets Qt6::Network)
+    elseif(WITH_QT5)
+        target_link_libraries(sshagent Qt5::Core Qt5::Widgets Qt5::Network)
+    endif()
 endif()
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/sshagent/KeeAgentSettings.cpp keepassxc-2.7.10/src/sshagent/KeeAgentSettings.cpp
--- keepassxc-2.7.10.orig/src/sshagent/KeeAgentSettings.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/sshagent/KeeAgentSettings.cpp	2025-07-14 11:37:09.893125450 -0700
@@ -27,7 +27,11 @@
 #include <QDebug>
 #include <QDir>
 #include <QProcessEnvironment>
-#include <QTextCodec>
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  include <QStringConverter>
+#else
+#  include <QTextCodec>
+#endif
 #include <QXmlStreamReader>
 
 KeeAgentSettings::KeeAgentSettings()
@@ -203,7 +207,7 @@ void KeeAgentSettings::setFileName(const
 bool KeeAgentSettings::readBool(QXmlStreamReader& reader)
 {
     reader.readNext();
-    bool ret = (reader.text().startsWith("t", Qt::CaseInsensitive));
+    bool ret = (reader.text().toString().startsWith("t", Qt::CaseInsensitive));
     reader.readNext(); // tag end
     return ret;
 }
@@ -234,37 +238,37 @@ bool KeeAgentSettings::fromXml(const QBy
         return false;
     }
 
-    if (reader.qualifiedName() != "EntrySettings") {
+    if (reader.qualifiedName().toString().compare(QString("EntrySettings")) == 0) {
         m_error = QCoreApplication::translate("KeeAgentSettings", "Invalid KeeAgent settings file structure.");
         return false;
     }
 
     while (!reader.error() && reader.readNextStartElement()) {
-        if (reader.name() == "AllowUseOfSshKey") {
+        if (reader.name().toString().compare(QString("AllowUseOfSshKey")) == 0) {
             m_allowUseOfSshKey = readBool(reader);
-        } else if (reader.name() == "AddAtDatabaseOpen") {
+        } else if (reader.name().toString().compare(QString("AddAtDatabaseOpen")) == 0) {
             m_addAtDatabaseOpen = readBool(reader);
-        } else if (reader.name() == "RemoveAtDatabaseClose") {
+        } else if (reader.name().toString().compare(QString("RemoveAtDatabaseClose")) == 0) {
             m_removeAtDatabaseClose = readBool(reader);
-        } else if (reader.name() == "UseConfirmConstraintWhenAdding") {
+        } else if (reader.name().toString().compare(QString("UseConfirmConstraintWhenAdding")) == 0) {
             m_useConfirmConstraintWhenAdding = readBool(reader);
-        } else if (reader.name() == "UseLifetimeConstraintWhenAdding") {
+        } else if (reader.name().toString().compare(QString("UseLifetimeConstraintWhenAdding")) == 0) {
             m_useLifetimeConstraintWhenAdding = readBool(reader);
-        } else if (reader.name() == "LifetimeConstraintDuration") {
+        } else if (reader.name().toString().compare(QString("LifetimeConstraintDuration")) == 0) {
             m_lifetimeConstraintDuration = readInt(reader);
-        } else if (reader.name() == "Location") {
+        } else if (reader.name().toString().compare(QString("Location")) == 0) {
             while (!reader.error() && reader.readNextStartElement()) {
-                if (reader.name() == "SelectedType") {
+                if (reader.name().toString().compare(QString("SelectedType")) == 0) {
                     reader.readNext();
                     m_selectedType = reader.text().toString();
                     reader.readNext();
-                } else if (reader.name() == "AttachmentName") {
+                } else if (reader.name().toString().compare(QString("AttachmentName")) == 0) {
                     reader.readNext();
                     m_attachmentName = reader.text().toString();
                     reader.readNext();
-                } else if (reader.name() == "SaveAttachmentToTempFile") {
+                } else if (reader.name().toString().compare(QString("SaveAttachmentToTempFile")) == 0) {
                     m_saveAttachmentToTempFile = readBool(reader);
-                } else if (reader.name() == "FileName") {
+                } else if (reader.name().toString().compare(QString("FileName")) == 0) {
                     reader.readNext();
                     m_fileName = reader.text().toString();
                     reader.readNext();
@@ -293,7 +297,9 @@ QByteArray KeeAgentSettings::toXml() con
     QXmlStreamWriter writer(&ba);
 
     // real KeeAgent can only read UTF-16
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
     writer.setCodec(QTextCodec::codecForName("UTF-16"));
+#endif
     writer.setAutoFormatting(true);
     writer.setAutoFormattingIndent(2);
 
@@ -331,7 +337,15 @@ QByteArray KeeAgentSettings::toXml() con
     writer.writeEndElement(); // EntrySettings
     writer.writeEndDocument();
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto toDecUtf16 = QStringDecoder(QStringConverter::Utf8);
+    QString sUtf16 = toDecUtf16(ba);
+    auto toEncUtf16 = QStringEncoder(QStringEncoder::Utf16);
+    QByteArray baUtf16 = toEncUtf16(sUtf16);
+    return baUtf16;
+#else
     return ba;
+#endif
 }
 
 /**
@@ -464,7 +478,11 @@ bool KeeAgentSettings::toOpenSSHKey(cons
             return false;
         }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (!localFile.open(QIODeviceBase::ReadOnly)) {
+#else
         if (!localFile.open(QIODevice::ReadOnly)) {
+#endif
             m_error = QCoreApplication::translate("KeeAgentSettings", "Failed to open private key");
             return false;
         }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/sshagent/OpenSSHKey.cpp keepassxc-2.7.10/src/sshagent/OpenSSHKey.cpp
--- keepassxc-2.7.10.orig/src/sshagent/OpenSSHKey.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/sshagent/OpenSSHKey.cpp	2025-07-14 11:37:09.896722909 -0700
@@ -160,7 +160,11 @@ void OpenSSHKey::clearPrivate()
 bool OpenSSHKey::extractPEM(const QByteArray& in, QByteArray& out)
 {
     QString pem = QString::fromLatin1(in);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QStringList rows = pem.split(QRegularExpression("(?:\r?\n|\r)"), Qt::SkipEmptyParts);
+#else
     QStringList rows = pem.split(QRegularExpression("(?:\r?\n|\r)"), QString::SkipEmptyParts);
+#endif
 
     if (rows.length() < 3) {
         m_error = tr("Invalid key file, expecting an OpenSSH key");
@@ -240,7 +244,11 @@ bool OpenSSHKey::parsePKCS1PEM(const QBy
             return false;
         }
 
-        if (QString::fromLatin1(magic) != "openssh-key-v1") {
+        // QByteArray adds 00 -> QString drops 00 in toHex() comparison.
+        QString magicTrimmed = QString::fromLatin1(magic);
+        if (magicTrimmed.indexOf(QChar::Null) != -1)
+            magicTrimmed.truncate(magicTrimmed.indexOf(QChar::Null));
+        if (magicTrimmed.compare(QString("openssh-key-v1")) != 0) {
             m_error = tr("Key file magic header id invalid");
             return false;
         }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/streams/LayeredStream.cpp keepassxc-2.7.10/src/streams/LayeredStream.cpp
--- keepassxc-2.7.10.orig/src/streams/LayeredStream.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/streams/LayeredStream.cpp	2025-07-14 11:37:09.896940306 -0700
@@ -34,15 +34,24 @@ bool LayeredStream::isSequential() const
     return true;
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+bool LayeredStream::open(QIODeviceBase::OpenMode mode)
+#else
 bool LayeredStream::open(QIODevice::OpenMode mode)
+#endif
 {
     if (isOpen()) {
         qWarning("LayeredStream::open: Device is already open.");
         return false;
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    bool readMode = (mode & QIODeviceBase::ReadOnly);
+    bool writeMode = (mode & QIODeviceBase::WriteOnly);
+#else
     bool readMode = (mode & QIODevice::ReadOnly);
     bool writeMode = (mode & QIODevice::WriteOnly);
+#endif
 
     if (readMode && writeMode) {
         qWarning("LayeredStream::open: Reading and writing at the same time is not supported.");
@@ -54,16 +63,29 @@ bool LayeredStream::open(QIODevice::Open
         qWarning("LayeredStream::open: Base device is not opened correctly.");
         return false;
     } else {
-        if (mode & QIODevice::Append) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        if (mode & QIODeviceBase::Append) {
+            qWarning("LayeredStream::open: QIODeviceBase::Append is not supported.");
+            mode = mode & ~QIODevice::Append;
+        }
+        if (mode & QIODeviceBase::Truncate) {
+            qWarning("LayeredStream::open: QIODeviceBase::Truncate is not supported.");
+            mode = mode & ~QIODevice::Truncate;
+        }
+
+        mode = mode | QIODeviceBase::Unbuffered;
+#else
+        if (mode & QIODeviceBase::Append) {
             qWarning("LayeredStream::open: QIODevice::Append is not supported.");
             mode = mode & ~QIODevice::Append;
         }
-        if (mode & QIODevice::Truncate) {
+        if (mode & QIODeviceBase::Truncate) {
             qWarning("LayeredStream::open: QIODevice::Truncate is not supported.");
             mode = mode & ~QIODevice::Truncate;
         }
 
-        mode = mode | QIODevice::Unbuffered;
+        mode = mode | QIODeviceBase::Unbuffered;
+#endif
 
         return QIODevice::open(mode);
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/streams/LayeredStream.h keepassxc-2.7.10/src/streams/LayeredStream.h
--- keepassxc-2.7.10.orig/src/streams/LayeredStream.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/streams/LayeredStream.h	2025-07-14 11:37:09.897035307 -0700
@@ -29,7 +29,11 @@ public:
     virtual ~LayeredStream();
 
     bool isSequential() const override;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    bool open(QIODeviceBase::OpenMode mode) override;
+#else
     bool open(QIODevice::OpenMode mode) override;
+#endif
 
 protected:
     qint64 readData(char* data, qint64 maxSize) override;
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/streams/StoreDataStream.cpp keepassxc-2.7.10/src/streams/StoreDataStream.cpp
--- keepassxc-2.7.10.orig/src/streams/StoreDataStream.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/streams/StoreDataStream.cpp	2025-07-14 11:37:09.897128341 -0700
@@ -22,7 +22,11 @@ StoreDataStream::StoreDataStream(QIODevi
 {
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+bool StoreDataStream::open(QIODeviceBase::OpenMode mode)
+#else
 bool StoreDataStream::open(QIODevice::OpenMode mode)
+#endif
 {
     bool result = LayeredStream::open(mode);
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/streams/StoreDataStream.h keepassxc-2.7.10/src/streams/StoreDataStream.h
--- keepassxc-2.7.10.orig/src/streams/StoreDataStream.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/streams/StoreDataStream.h	2025-07-14 11:37:09.897213907 -0700
@@ -26,7 +26,11 @@ class StoreDataStream : public LayeredSt
 
 public:
     explicit StoreDataStream(QIODevice* baseDevice);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    bool open(QIODeviceBase::OpenMode mode) override;
+#else
     bool open(QIODevice::OpenMode mode) override;
+#endif
     QByteArray storedData() const;
 
 protected:
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/streams/SymmetricCipherStream.cpp keepassxc-2.7.10/src/streams/SymmetricCipherStream.cpp
--- keepassxc-2.7.10.orig/src/streams/SymmetricCipherStream.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/streams/SymmetricCipherStream.cpp	2025-07-14 11:37:09.897319030 -0700
@@ -58,7 +58,11 @@ void SymmetricCipherStream::resetInterna
     m_cipher->reset();
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+bool SymmetricCipherStream::open(QIODeviceBase::OpenMode mode)
+#else
 bool SymmetricCipherStream::open(QIODevice::OpenMode mode)
+#endif
 {
     return m_isInitialized && LayeredStream::open(mode);
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/streams/SymmetricCipherStream.h keepassxc-2.7.10/src/streams/SymmetricCipherStream.h
--- keepassxc-2.7.10.orig/src/streams/SymmetricCipherStream.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/streams/SymmetricCipherStream.h	2025-07-14 11:37:09.897416974 -0700
@@ -33,7 +33,11 @@ public:
     ~SymmetricCipherStream();
     bool
     init(SymmetricCipher::Mode mode, SymmetricCipher::Direction direction, const QByteArray& key, const QByteArray& iv);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    bool open(QIODeviceBase::OpenMode mode) override;
+#else
     bool open(QIODevice::OpenMode mode) override;
+#endif
     bool reset() override;
     void close() override;
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/streams/qtiocompressor.cpp keepassxc-2.7.10/src/streams/qtiocompressor.cpp
--- keepassxc-2.7.10.orig/src/streams/qtiocompressor.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/streams/qtiocompressor.cpp	2025-07-14 11:37:09.897532766 -0700
@@ -205,7 +205,11 @@ void QtIOCompressorPrivate::setZlibError
     \code
         QFile file("foo");
         QtIOCompressor compressor(&file);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        compressor.open(QIODeviceBase::WriteOnly);
+#else
         compressor.open(QIODevice::WriteOnly);
+#endif
         compressor.write(QByteArray() << "The quick brown fox");
         compressor.close();
     \endcode
@@ -214,7 +218,11 @@ void QtIOCompressorPrivate::setZlibError
     \code
         QFile file("foo");
         QtIOCompressor compressor(&file);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        compressor.open(QIODeviceBase::ReadOnly);
+#else
         compressor.open(QIODevice::ReadOnly);
+#endif
         const QByteArray text = compressor.readAll();
         compressor.close();
     \endcode
diff '--color=auto' -urp keepassxc-2.7.10.orig/src/updatecheck/UpdateChecker.cpp keepassxc-2.7.10/src/updatecheck/UpdateChecker.cpp
--- keepassxc-2.7.10.orig/src/updatecheck/UpdateChecker.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/src/updatecheck/UpdateChecker.cpp	2025-07-14 11:37:09.897760108 -0700
@@ -49,7 +49,11 @@ void UpdateChecker::checkForUpdates(bool
         return;
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto nextCheck = config()->get(Config::GUI_CheckForUpdatesNextCheck).toLongLong();
+#else
     auto nextCheck = config()->get(Config::GUI_CheckForUpdatesNextCheck).toULongLong();
+#endif
     m_isManuallyRequested = manuallyRequested;
 
     if (m_isManuallyRequested || Clock::currentSecondsSinceEpoch() >= nextCheck) {
@@ -103,8 +107,11 @@ void UpdateChecker::fetchFinished()
         }
 
         // Check again in 7 days
-        // TODO: change to toSecsSinceEpoch() when min Qt >= 5.8
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        config()->set(Config::GUI_CheckForUpdatesNextCheck, Clock::currentDateTime().addDays(7).toSecsSinceEpoch());
+#else
         config()->set(Config::GUI_CheckForUpdatesNextCheck, Clock::currentDateTime().addDays(7).toTime_t());
+#endif
     } else {
         version = ErrorVersion;
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/CMakeLists.txt keepassxc-2.7.10/tests/CMakeLists.txt
--- keepassxc-2.7.10.orig/tests/CMakeLists.txt	2025-07-14 11:36:52.555263922 -0700
+++ keepassxc-2.7.10/tests/CMakeLists.txt	2025-07-14 11:37:09.898219828 -0700
@@ -88,7 +88,11 @@ macro(add_unit_test)
     endif()
 endmacro(add_unit_test)
 
-set(TEST_LIBRARIES keepassx_core Qt5::Test)
+if(WITH_QT6)
+    set(TEST_LIBRARIES keepassx_core Qt6::Test)
+elseif(WITH_QT5)
+    set(TEST_LIBRARIES keepassx_core Qt5::Test)
+endif()
 
 set(testsupport_SOURCES
         modeltest.cpp
@@ -96,7 +100,11 @@ set(testsupport_SOURCES
         mock/MockClock.cpp
         util/TemporaryFile.cpp)
 add_library(testsupport STATIC ${testsupport_SOURCES})
-target_link_libraries(testsupport Qt5::Core Qt5::Concurrent Qt5::Widgets Qt5::Test)
+if(WITH_QT6)
+    target_link_libraries(testsupport Qt6::Core Qt6::Concurrent Qt6::Widgets Qt6::Test)
+elseif(WITH_QT5)
+    target_link_libraries(testsupport Qt5::Core Qt5::Concurrent Qt5::Widgets Qt5::Test)
+endif()
 
 add_unit_test(NAME testgroup SOURCES TestGroup.cpp
         LIBS testsupport ${TEST_LIBRARIES})
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/FailDevice.cpp keepassxc-2.7.10/tests/FailDevice.cpp
--- keepassxc-2.7.10.orig/tests/FailDevice.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/FailDevice.cpp	2025-07-14 11:37:09.898413708 -0700
@@ -25,10 +25,17 @@ FailDevice::FailDevice(int failAfter, QO
 {
 }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+bool FailDevice::open(QIODeviceBase::OpenMode openMode)
+{
+    return QBuffer::open(openMode | QIODeviceBase::Unbuffered);
+}
+#else
 bool FailDevice::open(QIODevice::OpenMode openMode)
 {
     return QBuffer::open(openMode | QIODevice::Unbuffered);
 }
+#endif
 
 qint64 FailDevice::readData(char* data, qint64 len)
 {
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/FailDevice.h keepassxc-2.7.10/tests/FailDevice.h
--- keepassxc-2.7.10.orig/tests/FailDevice.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/FailDevice.h	2025-07-14 11:37:09.898525905 -0700
@@ -26,7 +26,11 @@ class FailDevice : public QBuffer
 
 public:
     explicit FailDevice(int failAfter, QObject* parent = nullptr);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    bool open(QIODeviceBase::OpenMode openMode) override;
+#else
     bool open(QIODevice::OpenMode openMode) override;
+#endif
 
 protected:
     qint64 readData(char* data, qint64 len) override;
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestBase32.cpp keepassxc-2.7.10/tests/TestBase32.cpp
--- keepassxc-2.7.10.orig/tests/TestBase32.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestBase32.cpp	2025-07-14 11:37:09.898725321 -0700
@@ -304,28 +304,41 @@ void TestBase32::testRemovePadding()
 
 void TestBase32::testSanitizeInput()
 {
+    // QByteArray adds 00 -> QString drops 00 in toHex() comparison.
     // sanitize input (white space + missing padding)
     QByteArray encodedData = "JBSW Y3DP EB3W 64TM MQXC 4LQA";
     auto data = Base32::decode(Base32::sanitizeInput(encodedData));
+    QString dataTrimmed = data.toString();
+    if (dataTrimmed.indexOf(QChar::Null) != -1)
+        dataTrimmed.truncate(dataTrimmed.indexOf(QChar::Null));
     QVERIFY(!data.isNull());
-    QCOMPARE(data.toString(), QString("Hello world..."));
+    QCOMPARE(dataTrimmed, QString("Hello world..."));
 
     // sanitize input (typo + missing padding)
     encodedData = "J8SWY3DPE83W64TMMQXC4LQA";
     data = Base32::decode(Base32::sanitizeInput(encodedData));
+    dataTrimmed = data.toString();
+    if (dataTrimmed.indexOf(QChar::Null) != -1)
+        dataTrimmed.truncate(dataTrimmed.indexOf(QChar::Null));
     QVERIFY(!data.isNull());
-    QCOMPARE(data.toString(), QString("Hello world..."));
+    QCOMPARE(dataTrimmed, QString("Hello world..."));
 
     // sanitize input (other illegal characters)
     encodedData = "J8SWY3D[PE83W64TMMQ]XC!4LQA";
     data = Base32::decode(Base32::sanitizeInput(encodedData));
+    dataTrimmed = data.toString();
+    if (dataTrimmed.indexOf(QChar::Null) != -1)
+        dataTrimmed.truncate(dataTrimmed.indexOf(QChar::Null));
     QVERIFY(!data.isNull());
-    QCOMPARE(data.toString(), QString("Hello world..."));
+    QCOMPARE(dataTrimmed, QString("Hello world..."));
 
     // sanitize input (NUL character)
     encodedData = "J8SWY3DPE83W64TMMQXC4LQA";
     encodedData.insert(3, '\0');
     data = Base32::decode(Base32::sanitizeInput(encodedData));
+    dataTrimmed = data.toString();
+    if (dataTrimmed.indexOf(QChar::Null) != -1)
+        dataTrimmed.truncate(dataTrimmed.indexOf(QChar::Null));
     QVERIFY(!data.isNull());
-    QCOMPARE(data.toString(), QString("Hello world..."));
+    QCOMPARE(dataTrimmed, QString("Hello world..."));
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestCli.cpp keepassxc-2.7.10/tests/TestCli.cpp
--- keepassxc-2.7.10.orig/tests/TestCli.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestCli.cpp	2025-07-14 11:37:09.899069188 -0700
@@ -71,10 +71,18 @@ void TestCli::initTestCase()
     Bootstrap::bootstrap();
 
     m_devNull.reset(new QFile());
-#ifdef Q_OS_WIN
-    m_devNull->open(fopen("nul", "w"), QIODevice::WriteOnly);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+#  ifdef Q_OS_WIN
+    m_devNull->open(fopen("nul", "w"), QIODeviceBase::WriteOnly);
+#  else
+    m_devNull->open(fopen("/dev/null", "w"), QIODeviceBase::WriteOnly);
+#  endif
 #else
+#  ifdef Q_OS_WIN
+    m_devNull->open(fopen("nul", "w"), QIODevice::WriteOnly);
+#  else
     m_devNull->open(fopen("/dev/null", "w"), QIODevice::WriteOnly);
+#  endif
 #endif
     Utils::DEVNULL.setDevice(m_devNull.data());
 }
@@ -107,6 +115,19 @@ void TestCli::init()
     m_nonAsciiDbFile.reset(new TemporaryFile());
     m_nonAsciiDbFile->copyFromFile(file.arg("NonAscii.kdbx"));
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    m_stdout.reset(new QBuffer());
+    m_stdout->open(QIODeviceBase::ReadWrite);
+    Utils::STDOUT.setDevice(m_stdout.data());
+
+    m_stderr.reset(new QBuffer());
+    m_stderr->open(QIODeviceBase::ReadWrite);
+    Utils::STDERR.setDevice(m_stderr.data());
+
+    m_stdin.reset(new QBuffer());
+    m_stdin->open(QIODeviceBase::ReadWrite);
+    Utils::STDIN.setDevice(m_stdin.data());
+#else
     m_stdout.reset(new QBuffer());
     m_stdout->open(QIODevice::ReadWrite);
     Utils::STDOUT.setDevice(m_stdout.data());
@@ -118,6 +139,7 @@ void TestCli::init()
     m_stdin.reset(new QBuffer());
     m_stdin->open(QIODevice::ReadWrite);
     Utils::STDIN.setDevice(m_stdin.data());
+#endif
 }
 
 void TestCli::cleanup()
@@ -457,7 +479,11 @@ void TestCli::testAttachmentExport()
     QVERIFY(attachmentExportCmd.getDescriptionLine().contains(attachmentExportCmd.name));
 
     TemporaryFile exportOutput;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    exportOutput.open(QIODeviceBase::WriteOnly);
+#else
     exportOutput.open(QIODevice::WriteOnly);
+#endif
     exportOutput.close();
 
     // Try exporting an attachment of a non-existent entry
@@ -495,7 +521,11 @@ void TestCli::testAttachmentExport()
              QByteArray(qPrintable(QString("Successfully exported attachment %1 of entry %2 to %3.\n")
                                        .arg("Sample attachment.txt", "/Sample Entry", exportOutput.fileName()))));
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    exportOutput.open(QIODeviceBase::ReadOnly);
+#else
     exportOutput.open(QIODevice::ReadOnly);
+#endif
     QCOMPARE(exportOutput.readAll(), QByteArray("Sample content\n"));
 
     // Export an existing attachment to stdout
@@ -687,9 +717,15 @@ void TestCli::testClip()
     // Password with timeout
     setInput("a");
     // clang-format off
-    QFuture<void> future = QtConcurrent::run(&clipCmd,
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QFuture<int> future = QtConcurrent::run(static_cast<int(Clip::*)(const QStringList&)>(&DatabaseCommand::execute),
+                                             &clipCmd,
+                                             QStringList{"clip", m_dbFile->fileName(), "/Sample Entry", "1"});
+#else
+    QFuture<int> future = QtConcurrent::run(&clipCmd,
                                              static_cast<int(Clip::*)(const QStringList&)>(&DatabaseCommand::execute),
                                              QStringList{"clip", m_dbFile->fileName(), "/Sample Entry", "1"});
+#endif
     // clang-format on
 
     QTRY_COMPARE(clipboard->text(), QString("Password"));
@@ -699,9 +735,15 @@ void TestCli::testClip()
 
     // TOTP with timeout
     setInput("a");
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    future = QtConcurrent::run(static_cast<int (Clip::*)(const QStringList&)>(&DatabaseCommand::execute),
+                               &clipCmd,
+                               QStringList{"clip", m_dbFile->fileName(), "/Sample Entry", "1", "-t"});
+#else
     future = QtConcurrent::run(&clipCmd,
                                static_cast<int (Clip::*)(const QStringList&)>(&DatabaseCommand::execute),
                                QStringList{"clip", m_dbFile->fileName(), "/Sample Entry", "1", "-t"});
+#endif
 
     QTRY_VERIFY(isTotp(clipboard->text()));
     QTRY_COMPARE_WITH_TIMEOUT(clipboard->text(), QString(""), 2000);
@@ -1278,7 +1320,11 @@ void TestCli::testExport()
     execCmd(exportCmd, {"export", m_dbFile->fileName()});
 
     TemporaryFile xmlOutput;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    xmlOutput.open(QIODeviceBase::WriteOnly);
+#else
     xmlOutput.open(QIODevice::WriteOnly);
+#endif
     xmlOutput.write(m_stdout->readAll());
     xmlOutput.close();
 
@@ -1295,7 +1341,11 @@ void TestCli::testExport()
     execCmd(exportCmd, {"export", "-f", "xml", "-q", m_dbFile->fileName()});
     QCOMPARE(m_stderr->readAll(), QByteArray());
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    xmlOutput.open(QIODeviceBase::WriteOnly);
+#else
     xmlOutput.open(QIODevice::WriteOnly);
+#endif
     xmlOutput.write(m_stdout->readAll());
     xmlOutput.close();
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestCsvExporter.cpp keepassxc-2.7.10/tests/TestCsvExporter.cpp
--- keepassxc-2.7.10.orig/tests/TestCsvExporter.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestCsvExporter.cpp	2025-07-14 11:37:09.899504127 -0700
@@ -64,7 +64,11 @@ void TestCsvExporter::testExport()
     entry->setIcon(5);
 
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(buffer.open(QIODeviceBase::ReadWrite));
+#else
     QVERIFY(buffer.open(QIODevice::ReadWrite));
+#endif
     m_csvExporter->exportDatabase(&buffer, m_db);
     auto exported = QString::fromUtf8(buffer.buffer());
 
@@ -82,7 +86,11 @@ void TestCsvExporter::testExport()
 void TestCsvExporter::testEmptyDatabase()
 {
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(buffer.open(QIODeviceBase::ReadWrite));
+#else
     QVERIFY(buffer.open(QIODevice::ReadWrite));
+#endif
     m_csvExporter->exportDatabase(&buffer, m_db);
 
     QCOMPARE(QString::fromUtf8(buffer.buffer().constData()), ExpectedHeaderLine);
@@ -102,7 +110,11 @@ void TestCsvExporter::testNestedGroups()
     entry->setTitle("Test Entry Title");
 
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(buffer.open(QIODeviceBase::ReadWrite));
+#else
     QVERIFY(buffer.open(QIODevice::ReadWrite));
+#endif
     m_csvExporter->exportDatabase(&buffer, m_db);
     auto exported = QString::fromUtf8(buffer.buffer());
     QVERIFY(exported.startsWith(
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestCsvParser.cpp keepassxc-2.7.10/tests/TestCsvParser.cpp
--- keepassxc-2.7.10.orig/tests/TestCsvParser.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestCsvParser.cpp	2025-07-14 11:37:09.899672038 -0700
@@ -28,7 +28,11 @@ void TestCsvParser::writeToFile(const QS
         QFAIL("Cannot open temporary file!");
     }
     QTextStream out(file.data());
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    out.setEncoding(QStringConverter::Utf8);
+#else
     out.setCodec("UTF-8");
+#endif
     out << contents;
     out.flush();
     file->close();
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestHashedBlockStream.cpp keepassxc-2.7.10/tests/TestHashedBlockStream.cpp
--- keepassxc-2.7.10.orig/tests/TestHashedBlockStream.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestHashedBlockStream.cpp	2025-07-14 11:37:09.899861839 -0700
@@ -35,13 +35,25 @@ void TestHashedBlockStream::testWriteRea
     QByteArray data = QByteArray::fromHex("603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4");
 
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(buffer.open(QIODeviceBase::ReadWrite));
+#else
     QVERIFY(buffer.open(QIODevice::ReadWrite));
+#endif
 
     HashedBlockStream writer(&buffer, 16);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(writer.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(writer.open(QIODevice::WriteOnly));
+#endif
 
     HashedBlockStream reader(&buffer);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(reader.open(QIODeviceBase::ReadOnly));
+#else
     QVERIFY(reader.open(QIODevice::ReadOnly));
+#endif
 
     QCOMPARE(writer.write(data.left(16)), qint64(16));
     QVERIFY(writer.reset());
@@ -74,10 +86,18 @@ void TestHashedBlockStream::testWriteRea
 void TestHashedBlockStream::testReset()
 {
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(buffer.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(buffer.open(QIODevice::WriteOnly));
+#endif
 
     HashedBlockStream writer(&buffer, 16);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(writer.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(writer.open(QIODevice::WriteOnly));
+#endif
     QCOMPARE(writer.write(QByteArray(8, 'Z')), qint64(8));
     // test if reset() and close() write only one final block
     QVERIFY(writer.reset());
@@ -89,12 +109,20 @@ void TestHashedBlockStream::testReset()
 void TestHashedBlockStream::testWriteFailure()
 {
     FailDevice failDevice(1500);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(failDevice.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(failDevice.open(QIODevice::WriteOnly));
+#endif
 
     QByteArray input(2000, 'Z');
 
     HashedBlockStream writer(&failDevice, 500);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(writer.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(writer.open(QIODevice::WriteOnly));
+#endif
 
     QCOMPARE(writer.write(input.left(900)), qint64(900));
     writer.write(input.left(900));
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestHibp.cpp keepassxc-2.7.10/tests/TestHibp.cpp
--- keepassxc-2.7.10.orig/tests/TestHibp.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestHibp.cpp	2025-07-14 11:37:09.900055306 -0700
@@ -47,7 +47,11 @@ void TestHibp::testBadHibpFormat()
 {
     QByteArray hibpContents(TEST_BAD_HIBP_CONTENTS);
     QBuffer hibpBuffer(&hibpContents);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(hibpBuffer.open(QIODeviceBase::ReadOnly));
+#else
     QVERIFY(hibpBuffer.open(QIODevice::ReadOnly));
+#endif
 
     QList<QPair<const Entry*, int>> findings;
     QString error;
@@ -60,7 +64,11 @@ void TestHibp::testEmpty()
 {
     QByteArray hibpContents(TEST_HIBP_CONTENTS);
     QBuffer hibpBuffer(&hibpContents);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(hibpBuffer.open(QIODeviceBase::ReadOnly));
+#else
     QVERIFY(hibpBuffer.open(QIODevice::ReadOnly));
+#endif
 
     QList<QPair<const Entry*, int>> findings;
     QString error;
@@ -85,7 +93,11 @@ void TestHibp::testPwned()
 {
     QByteArray hibpContents(TEST_HIBP_CONTENTS);
     QBuffer hibpBuffer(&hibpContents);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(hibpBuffer.open(QIODeviceBase::ReadOnly));
+#else
     QVERIFY(hibpBuffer.open(QIODevice::ReadOnly));
+#endif
 
     Group* root = m_db->rootGroup();
 
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestIconDownloader.cpp keepassxc-2.7.10/tests/TestIconDownloader.cpp
--- keepassxc-2.7.10.orig/tests/TestIconDownloader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestIconDownloader.cpp	2025-07-14 11:37:09.900311348 -0700
@@ -80,4 +80,14 @@ void TestIconDownloader::testIconDownloa
     QTest::newRow("Relative path should be preserved")
         << "https://test.com/rel-path/"
         << QStringList{"https://test.com/rel-path/favicon.ico", "https://test.com/favicon.ico"};
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QTest::newRow("India unicode/punycode domain") << "https://रजिस्ट्री.भारत"
+                                      << QStringList{"https://xn--81bg3cc2b2bk5hb.xn--h2brj9c/favicon.ico"};
+    QTest::newRow("Israel left to right unicode/punycode domain") << "https://כולנו.ישראל"
+                                      << QStringList{"https://xn--9dbaqfu.xn--4dbrk0ce/favicon.ico"};
+    QTest::newRow("Emoji #1 domain") << "https://🔑.ws"
+                                      << QStringList{"https://xn--kv8h.ws/favicon.ico"};
+    QTest::newRow("Emoji #2 domain") << "https://login.🔑passxc.org.ws"
+                                      << QStringList{"https://login.xn--passxc-9i64e.org.ws/favicon.ico", "https://xn--passxc-9i64e.org.ws/favicon.ico"};
+#endif
 }
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestKeePass1Reader.cpp keepassxc-2.7.10/tests/TestKeePass1Reader.cpp
--- keepassxc-2.7.10.orig/tests/TestKeePass1Reader.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestKeePass1Reader.cpp	2025-07-14 11:37:09.900446830 -0700
@@ -220,6 +220,7 @@ void TestKeePass1Reader::testTwofish()
     QCOMPARE(db->rootGroup()->children().at(0)->name(), name);
 }
 
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0) || defined(USE_QT5COMPAT)
 void TestKeePass1Reader::testCP1252Password()
 {
     QString name = "CP-1252";
@@ -235,6 +236,7 @@ void TestKeePass1Reader::testCP1252Passw
     QCOMPARE(db->rootGroup()->children().size(), 1);
     QCOMPARE(db->rootGroup()->children().at(0)->name(), name);
 }
+#endif
 
 void TestKeePass1Reader::cleanupTestCase()
 {
@@ -252,7 +254,11 @@ void TestKeePass1Reader::reopenDatabase(
                                         const QString& keyfileName)
 {
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buffer.open(QIODeviceBase::ReadWrite);
+#else
     buffer.open(QIODevice::ReadWrite);
+#endif
 
     KeePass2Writer writer;
     writer.writeDatabase(&buffer, db.data());
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestKeePass1Reader.h keepassxc-2.7.10/tests/TestKeePass1Reader.h
--- keepassxc-2.7.10.orig/tests/TestKeePass1Reader.h	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestKeePass1Reader.h	2025-07-14 11:37:09.900684673 -0700
@@ -39,7 +39,9 @@ private slots:
     void testFileKey_data();
     void testCompositeKey();
     void testTwofish();
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0) || defined(USE_QT5COMPAT)
     void testCP1252Password();
+#endif
     void cleanupTestCase();
 
 private:
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestKeePass2Format.cpp keepassxc-2.7.10/tests/TestKeePass2Format.cpp
--- keepassxc-2.7.10.orig/tests/TestKeePass2Format.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestKeePass2Format.cpp	2025-07-14 11:37:09.901028913 -0700
@@ -434,7 +434,11 @@ void TestKeePass2Format::testXmlInvalidX
     entry->attributes()->set("SurrogateValid2", strSurrogateValid2);
 
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buffer.open(QIODeviceBase::ReadWrite);
+#else
     buffer.open(QIODevice::ReadWrite);
+#endif
     bool hasError;
     QString errorString;
     writeXml(&buffer, dbWrite.data(), hasError, errorString);
@@ -552,7 +556,11 @@ void TestKeePass2Format::testKdbxDeviceF
     entry->attachments()->set("test", attachment);
 
     FailDevice failDevice(512);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(failDevice.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(failDevice.open(QIODevice::WriteOnly));
+#endif
     bool hasError;
     QString errorString;
     writeKdbx(&failDevice, db.data(), hasError, errorString);
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestSSHAgent.cpp keepassxc-2.7.10/tests/TestSSHAgent.cpp
--- keepassxc-2.7.10.orig/tests/TestSSHAgent.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestSSHAgent.cpp	2025-07-14 11:37:09.902389051 -0700
@@ -55,7 +55,11 @@ void TestSSHAgent::initTestCase()
         QSKIP("ssh-agent could not be started");
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    qDebug() << "ssh-agent started as pid" << m_agentProcess.processId();
+#else
     qDebug() << "ssh-agent started as pid" << m_agentProcess.pid();
+#endif
 
     // we need to wait for the agent to open the socket before going into real tests
     QFileInfo socketFileInfo(m_agentSocketFileName);
@@ -226,7 +230,11 @@ void TestSSHAgent::testToOpenSSHKey()
 void TestSSHAgent::cleanupTestCase()
 {
     if (m_agentProcess.state() != QProcess::NotRunning) {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        qDebug() << "Killing ssh-agent pid" << m_agentProcess.processId();
+#else
         qDebug() << "Killing ssh-agent pid" << m_agentProcess.pid();
+#endif
         m_agentProcess.terminate();
         m_agentProcess.waitForFinished();
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestSharing.cpp keepassxc-2.7.10/tests/TestSharing.cpp
--- keepassxc-2.7.10.orig/tests/TestSharing.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestSharing.cpp	2025-07-14 11:37:09.902541034 -0700
@@ -83,7 +83,11 @@ void TestSharing::testKeySerialization()
     writer.writeEndDocument();
     QXmlStreamReader reader(buffer);
     reader.readNextStartElement();
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(reader.name().toString().toUtf8().compare(QByteArray("Key")) == 0);
+#else
     QVERIFY(reader.name() == "Key");
+#endif
     KeeShareSettings::Key restored = KeeShareSettings::Key::deserialize(reader);
 
     QCOMPARE(restored.key->private_key_bits(), original.key->private_key_bits());
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/TestSymmetricCipher.cpp keepassxc-2.7.10/tests/TestSymmetricCipher.cpp
--- keepassxc-2.7.10.orig/tests/TestSymmetricCipher.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/TestSymmetricCipher.cpp	2025-07-14 11:37:09.902673078 -0700
@@ -121,10 +121,18 @@ void TestSymmetricCipher::testEncryption
     QCOMPARE(data.left(16), cipherText.left(16));
 
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buffer.open(QIODeviceBase::WriteOnly);
+#else
     buffer.open(QIODevice::WriteOnly);
+#endif
     SymmetricCipherStream stream(&buffer);
     QVERIFY(stream.init(mode, direction, key, iv));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(stream.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(stream.open(QIODevice::WriteOnly));
+#endif
     QCOMPARE(stream.write(plainText.left(16)), qint64(16));
     stream.close();
     QCOMPARE(buffer.data().left(16), cipherText.left(16));
@@ -171,8 +179,13 @@ void TestSymmetricCipher::testAesCbcPadd
     QBuffer buffer(&cipherTextPadded);
     SymmetricCipherStream stream(&buffer);
     QVERIFY(stream.init(mode, SymmetricCipher::Decrypt, key, iv));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buffer.open(QIODeviceBase::ReadOnly);
+    QVERIFY(stream.open(QIODeviceBase::ReadOnly));
+#else
     buffer.open(QIODevice::ReadOnly);
     QVERIFY(stream.open(QIODevice::ReadOnly));
+#endif
 
     QCOMPARE(stream.read(10), plainText.left(10));
     buffer.reset();
@@ -420,11 +433,19 @@ void TestSymmetricCipher::testPadding()
     QByteArray plainText = QByteArray::fromHex("6bc1bee22e409f96e93d");
 
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    buffer.open(QIODeviceBase::ReadWrite);
+#else
     buffer.open(QIODevice::ReadWrite);
+#endif
 
     SymmetricCipherStream streamEnc(&buffer);
     QVERIFY(streamEnc.init(SymmetricCipher::Aes256_CBC, SymmetricCipher::Encrypt, key, iv));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    streamEnc.open(QIODeviceBase::WriteOnly);
+#else
     streamEnc.open(QIODevice::WriteOnly);
+#endif
     streamEnc.write(plainText);
     streamEnc.close();
     buffer.reset();
@@ -433,7 +454,11 @@ void TestSymmetricCipher::testPadding()
 
     SymmetricCipherStream streamDec(&buffer);
     QVERIFY(streamDec.init(SymmetricCipher::Aes256_CBC, SymmetricCipher::Decrypt, key, iv));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    streamDec.open(QIODeviceBase::ReadOnly);
+#else
     streamDec.open(QIODevice::ReadOnly);
+#endif
     QByteArray decrypted = streamDec.readAll();
     QCOMPARE(decrypted, plainText);
 }
@@ -444,10 +469,18 @@ void TestSymmetricCipher::testStreamRese
     QByteArray iv = QByteArray::fromHex("000102030405060708090a0b0c0d0e0f");
 
     QBuffer buffer;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(buffer.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(buffer.open(QIODevice::WriteOnly));
+#endif
     SymmetricCipherStream writer(&buffer);
     QVERIFY(writer.init(SymmetricCipher::Aes256_CBC, SymmetricCipher::Encrypt, key, iv));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVERIFY(writer.open(QIODeviceBase::WriteOnly));
+#else
     QVERIFY(writer.open(QIODevice::WriteOnly));
+#endif
     QCOMPARE(writer.write(QByteArray(4, 'Z')), qint64(4));
     // test if reset() and close() write only one block
     QVERIFY(writer.reset());
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/gui/TestGui.cpp keepassxc-2.7.10/tests/gui/TestGui.cpp
--- keepassxc-2.7.10.orig/tests/gui/TestGui.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/gui/TestGui.cpp	2025-07-14 11:37:09.902994398 -0700
@@ -1324,7 +1324,11 @@ void TestGui::testDragAndDropEntry()
 
     QMimeData mimeData;
     QByteArray encoded;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&encoded, QIODeviceBase::WriteOnly);
+#else
     QDataStream stream(&encoded, QIODevice::WriteOnly);
+#endif
 
     auto entry = entryView->entryFromIndex(sourceIndex);
     stream << entry->group()->database()->uuid() << entry->uuid();
@@ -2274,7 +2278,7 @@ void TestGui::checkStatusBarText(const Q
 {
     QApplication::processEvents();
     QVERIFY(m_statusBarLabel->isVisible());
-    QTRY_VERIFY2(m_statusBarLabel->text().startsWith(textFragment),
+    QTRY_VERIFY2(m_statusBarLabel->text().toString().startsWith(textFragment),
                  qPrintable(QString("'%1' doesn't start with '%2'").arg(m_statusBarLabel->text(), textFragment)));
 }
 
@@ -2301,7 +2305,11 @@ void TestGui::dragAndDropGroup(const QMo
 
     QMimeData mimeData;
     QByteArray encoded;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QDataStream stream(&encoded, QIODeviceBase::WriteOnly);
+#else
     QDataStream stream(&encoded, QIODevice::WriteOnly);
+#endif
     Group* group = groupModel->groupFromIndex(sourceIndex);
     stream << group->database()->uuid() << group->uuid();
     mimeData.setData("application/x-keepassx-group", encoded);
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/gui/TestGuiFdoSecrets.cpp keepassxc-2.7.10/tests/gui/TestGuiFdoSecrets.cpp
--- keepassxc-2.7.10.orig/tests/gui/TestGuiFdoSecrets.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/gui/TestGuiFdoSecrets.cpp	2025-07-14 11:37:09.903430272 -0700
@@ -170,7 +170,11 @@ void TestGuiFdoSecrets::initTestCase()
 
     // Load the NewDatabase.kdbx file into temporary storage
     QFile sourceDbFile(QStringLiteral(KEEPASSX_TEST_DATA_DIR "/NewDatabase.kdbx"));
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    VERIFY(sourceDbFile.open(QIODeviceBase::ReadOnly));
+#else
     VERIFY(sourceDbFile.open(QIODevice::ReadOnly));
+#endif
     VERIFY(Tools::readAllFromDevice(&sourceDbFile, m_dbData));
     sourceDbFile.close();
 
@@ -404,7 +408,11 @@ void TestGuiFdoSecrets::testServiceSearc
     // to avoid modify the original, copy to a temp file first
     QFile sourceDbFile(QStringLiteral(KEEPASSX_TEST_DATA_DIR "/NewDatabase2.kdbx"));
     QByteArray dbData;
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    VERIFY(sourceDbFile.open(QIODeviceBase::ReadOnly));
+#else
     VERIFY(sourceDbFile.open(QIODevice::ReadOnly));
+#endif
     VERIFY(Tools::readAllFromDevice(&sourceDbFile, dbData));
     sourceDbFile.close();
 
@@ -1248,7 +1256,11 @@ void TestGuiFdoSecrets::testItemReplace(
     {
         DBUS_GET2(unlocked, locked, service->SearchItems({{"application", "fdosecrets-test"}}));
         QSet<QDBusObjectPath> expected{QDBusObjectPath(item1->path()), QDBusObjectPath(item2->path())};
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        COMPARE(QSet<QDBusObjectPath>(unlocked.begin(), unlocked.end()), expected);
+#else
         COMPARE(QSet<QDBusObjectPath>::fromList(unlocked), expected);
+#endif
     }
 
     QSignalSpy spyItemCreated(coll.data(), SIGNAL(ItemCreated(QDBusObjectPath)));
@@ -1265,7 +1277,11 @@ void TestGuiFdoSecrets::testItemReplace(
         // there are still 2 entries
         DBUS_GET2(unlocked, locked, service->SearchItems({{"application", "fdosecrets-test"}}));
         QSet<QDBusObjectPath> expected{QDBusObjectPath(item1->path()), QDBusObjectPath(item2->path())};
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        COMPARE(QSet<QDBusObjectPath>(unlocked.being(), unlocked.end()), expected);
+#else
         COMPARE(QSet<QDBusObjectPath>::fromList(unlocked), expected);
+#endif
 
         VERIFY(waitForSignal(spyItemCreated, 0));
         // there may be multiple changed signals, due to each item attribute is set separately
@@ -1291,7 +1307,11 @@ void TestGuiFdoSecrets::testItemReplace(
             QDBusObjectPath(item2->path()),
             QDBusObjectPath(item4->path()),
         };
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        COMPARE(QSet<QDBusObjectPath>(unlocked.begin(), unlocked.end()), expected);
+#else
         COMPARE(QSet<QDBusObjectPath>::fromList(unlocked), expected);
+#endif
 
         VERIFY(waitForSignal(spyItemCreated, 1));
         {
@@ -1619,7 +1639,12 @@ void TestGuiFdoSecrets::testExposeSubgro
     for (const auto& itemPath : itemPaths) {
         exposedEntries << m_plugin->dbus()->pathToObject<Item>(itemPath)->backend();
     }
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    auto entries = subgroup->entries();
+    COMPARE(exposedEntries, QSet<Entry*>::fromList(entries.begin(), entries.end()));
+#else
     COMPARE(exposedEntries, QSet<Entry*>::fromList(subgroup->entries()));
+#endif
 }
 
 void TestGuiFdoSecrets::testModifyingExposedGroup()
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/modeltest.cpp keepassxc-2.7.10/tests/modeltest.cpp
--- keepassxc-2.7.10.orig/tests/modeltest.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/modeltest.cpp	2025-07-14 11:37:09.903755903 -0700
@@ -452,12 +452,20 @@ void ModelTest::data()
     }
 
     // General Purpose roles that should return a QColor
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    QVariant colorVariant = model->data ( model->index ( 0, 0 ), Qt::BackgroundRole );
+#else
     QVariant colorVariant = model->data ( model->index ( 0, 0 ), Qt::BackgroundColorRole );
+#endif
     if ( colorVariant.isValid() ) {
         QVERIFY( colorVariant.canConvert<QColor>() );
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    colorVariant = model->data ( model->index ( 0, 0 ), Qt::ForegroundRole );
+#else
     colorVariant = model->data ( model->index ( 0, 0 ), Qt::TextColorRole );
+#endif
     if ( colorVariant.isValid() ) {
         QVERIFY( colorVariant.canConvert<QColor>() );
     }
diff '--color=auto' -urp keepassxc-2.7.10.orig/tests/util/TemporaryFile.cpp keepassxc-2.7.10/tests/util/TemporaryFile.cpp
--- keepassxc-2.7.10.orig/tests/util/TemporaryFile.cpp	2025-03-02 14:31:21.000000000 -0800
+++ keepassxc-2.7.10/tests/util/TemporaryFile.cpp	2025-07-14 11:37:09.903921403 -0700
@@ -52,7 +52,11 @@ TemporaryFile::~TemporaryFile()
 
 bool TemporaryFile::open()
 {
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    return QFile::open(QIODeviceBase::ReadWrite);
+#else
     return QFile::open(QIODevice::ReadWrite);
+#endif
 }
 
 bool TemporaryFile::copyFromFile(const QString& otherFileName)
