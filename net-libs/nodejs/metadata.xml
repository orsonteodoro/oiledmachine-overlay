<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild fork on the oiledmachine overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="person">
    <!-- Ebuild originator -->
    <email>jer@gentoo.org</email>
  </maintainer>
  <![CDATA[
  <!--

    oiledmachine-overlay notes:

    This is an ebuild fork for Node.js with SLOT support.

    LTS will allow casual developers and non rolling release cycle packages a
    chance to stay in the ebuild ecosystem.

    More info about LTS versions see:
    https://nodejs.org/en/about/releases/
    https://github.com/nodejs/release#release-schedule

    More info about EOL versions see:
    https://github.com/nodejs/release#end-of-life-releases

    v23 EOL is 2025-06-01
    v22 EOL is 2027-04-30
    v20 EOL is 2026-04-30
    v18 EOL is 2025-04-30
    v16 EOL is 2023-09-11
    v14 EOL is 2023-04-30

    The removal cycle is now delayed to better enjoy the product for those with
    longer compile times.  Minor versions before an announced security release
    or ebuilds older than 2 point releases in the same major version are removed
    without notice.


    Petition for SLOT support at https://bugs.gentoo.org/580698
    It has been an issue since 2016.

    The design is based on a multiplexer wrapper.

    Tentative additional packages:

      app-portage/nodejs (on the oiledmachine-overlay) for includes switch

    NPM packages that require multislot:

      Angular
      Vue.js

    The active implementation selected by app-portage/nodejs is granted
    /usr/lib64/node_modules which is symlinked to one of the directories above.

    It's recommended to install a package to the slot based on lowest required.

    Referencing /usr/includes/node is not multi-emerge or multi-compilation
    safe when packages with differing node_multislot_*  and requires a mutex in
    a new eclass, but runtime use of node is multi-process safe.

    It is save to use the same node_modules with different node but compliation
    must have special treatment.

    Certain USE flags should only be enabled for the highest SLOT; otherwise,
    you will get a merge conflict.  They are noted in the use flag section.

    If you run /usr/bin/node without the environmental variable NODE_VERSION, it
    will default to node the selected active from eselect nodejs (or the major
    version contained in node_version.h from the active symlink.

    The NODE_VERSION valid values are 16, 18 which are the Long Term Support
    (LTS) versions.

    Running NODE_VERSION=16 /usr/bin/node --version will show you node16's version.

    The PGO trainer can be extended with your own customized benchmark to
    optimize for typical use cases.  You must create a folder located at
    ${S}/benchmark/custom and it must have at least a createBenchmark() function
    having all of this created as a per-package user patch.  For additonal
    details, see

https://github.com/nodejs/node/blob/master/doc/guides/writing-and-running-benchmarks.md
https://github.com/nodejs/node/tree/master/benchmark#nodejs-core-benchmarks

    NODEJS_EXCLUDED_TRAINERS is a per-package envvar that can contain a space
    separated string of paths to exclude from testing whenever a broken
    benchmark is encountered or support for that particular benchmark is
    unfinished at the ebuild level.

    An additional user supplied script script called ${S}/pgo-custom-trainer.sh
    can be provided to install locally a per package(s) to run	benchmark for
    that package if it contains one.  All new npm packages to be trained must
    installed in ${S}/node_modules.  If the package doesn't contain a benchmark,
    then it is not suitable for PGO training.

    When selecting a nodejs_pgo_trainers_*, only select those that reflect
    typical use.  Choosing trainers that do not reflect typical use may increase
    unwanted binary size or may cause degraded performance.



    Build time environment variables

    NODEJS_OPENSSL_DEFAULT_LIST_CORE - A colon separated list of ciphers to use for SSL/TLS.
    This can be used to tune the cipher list to the regional needs.

    Default:

    For 23, https://github.com/nodejs/node/blob/v23.6.0/src/node_constants.h#L52
    For 22, https://github.com/nodejs/node/blob/v22.13.0/src/node_constants.h#L52
    For 20, https://github.com/nodejs/node/blob/v20.18.1/src/node_constants.h#L52
    For 18, https://github.com/nodejs/node/blob/v18.20.5/src/node_constants.h#L52
    For 16, https://github.com/nodejs/node/blob/v16.20.2/src/node_constants.h#L52
    For 14, https://github.com/nodejs/node/blob/v14.21.3/src/node_constants.h#L52

    Acceptable values:

    For 23, see https://github.com/nodejs/node/blob/v23.6.0/deps/openssl/openssl/ssl/t1_trce.c#L107
    For 22, see https://github.com/nodejs/node/blob/v22.13.0/deps/openssl/openssl/ssl/t1_trce.c#L107
    For 20, see https://github.com/nodejs/node/blob/v20.18.1/deps/openssl/openssl/ssl/t1_trce.c#L107
    For 18, see https://github.com/nodejs/node/blob/v18.20.5/deps/openssl/openssl/ssl/t1_trce.c#L107
    For 16, see https://github.com/nodejs/node/blob/v16.20.2/deps/openssl/openssl/ssl/t1_trce.c#L107
    For 14, see https://github.com/nodejs/node/blob/v14.21.3/deps/openssl/openssl/ssl/t1_trce.c#L107

    Example:

    NODEJS_OPENSSL_DEFAULT_CIPHER_SUITE="TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA"


    JIT_LEVEL_OVERRIDE - Control both the compile time and runtime performance
    of the v8 JavaScript engine.  This build time tunable applies to only
    Node.js 18 and above.  If this is not set, it will base it off the last
    -Oflag level.

    Acceptable values:
    2 = JIT on, equivalent to -O1 runtime performance and build time.  Mostly consistent performance at 75% but sometimes randomly performs less than 50%.
    3 = JIT on, equivalent to -Oz runtime performance and build time.
    4 = JIT on, equivalent to -Os runtime performance and build time.
    5 = JIT on, equivalent to -O2 runtime performance and build time.  Consistently performs at 90%.
    6 = JIT on, equivalent to -O3 runtime performance and long build time.  Consistently performs at 100%.
    7 = JIT on, equivalent to -Ofast runtime performance and long build time.  Consistenly performs at 100%.

    JIT_LEVEL_OVERRIDE >= 2 is required for corepack or undici

  -->
  ]]>
  <upstream>
    <changelog>
      https://github.com/nodejs/node/blob/main/CHANGELOG.md
    </changelog>
    <remote-id type="github">nodejs/node</remote-id>
    <remote-id type="cpe">cpe:/a:nodejs:nodejs</remote-id>
  </upstream>
  <use>
    <flag name="acorn">
      Install the acorn JavaScript parser.
    </flag>
    <flag name="asm">
      Optimize the cryptographic instructions.

      If enabled, it may bypass automated security hardening in assembly contexts.
      If disabled, it may increase portability and may apply custom security hardening.
    </flag>
    <flag name="custom-optimization">
      Override the default -O3 flag.
    </flag>
    <flag name="doc">
      It installs docs.  It should only be enabled for the highest request slot.
    </flag>
    <flag name="drumbrake">
      Run WebAssembly through an interpreter to avoid JIT based class of attacks.
    </flag>
    <flag name="fips">
      Enable FIPS certified ciphers and module.
    </flag>
    <flag name="inspector">
      Enable the V8 inspector.
    </flag>
    <flag name="man">
      It installs man pages.  It should only be enabled for the highest request
      slot.
    </flag>
    <flag name="mold">
      Use the mold linker.
    </flag>
    <flag name="npm">
      Enable NPM package manager.  It should only be enabled for the highest
      request slot.
    </flag>
    <flag name="pax-kernel">
      Enable building under a PaX enabled kernel.
    </flag>
    <flag name="pointer-compression">
      Enable pointer compression to gain more free memory but will break ABI
      compatibility.  Enabling pointer compression enables the V8 Sandbox in
      Node 20+.  Available only on 64-bit ABIs.

      Disabling may save battery life.
    </flag>
    <flag name="pointer-compression-in-shared-cage">
      Use pointer compression in a shared cage.  Otherwise, use pointer
      compression in a more secure isolate cage which is the default.

      Using a shared cage may allow for 8 GB heap size with a tradeoff
      of lowered security. (EXPERIMENTAL)
    </flag>
    <flag name="pgo">
      Enable profile guided optimization.  It will double build times.
    </flag>
    <flag name="snapshot">
      Enable snapshot creation for faster startup
    </flag>
    <flag name="system-ssl">
      Use system OpenSSL instead of the bundled one.
    </flag>
    <flag name="systemtap">
      Enable SystemTAP/DTrace tracing.
    </flag>
    <flag name="v8-sandbox">
      Enable sandboxing the JavaScript engine for increased security.
    </flag>
  </use>
</pkgmetadata>
