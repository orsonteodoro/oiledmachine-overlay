<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="project">
    <!-- only in this ebuild fork on the oiledmachine overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- originator -->
    <email>gnome@gentoo.org</email>
    <name>Gentoo GNOME Desktop</name>
  </maintainer>
  <longdescription>
    The purpose of this ebuild fork was originally to provide multilib support
    for the ebuild fork for the surf web browser on the oiledmachine-overlay.
    Currently the motivations are to provide latest stable as quickly as possible
    for security reasons and expose more options related to performance or next
    generation of web standards.

    Revision correspondence:

    -r50000 -- GTK 4
    -r41000 -- GTK+3 with libsoup3
            -- GTK+3 with libsoup2


    Ebuild fork details.


    EPGO (Event Based PGO)

    PGO is event based.  You can use gcc or clang.  I call it 1 step PGO (but
    dragged out over time).  EPGO is a more sane approach than what is promoted
    and used by the distro when it comes to packages with very high estimated
    lines of code of 20 EMLOC to +100 EMLOC that imply hours of build time
    cost.

    Motivations to integrate the EPGO technique again are long build times,
    difficult to use auto trainers, vulnerabilities that force rebuilds, 
    questionable headless training culling/cheating possibility (for maybe to
    save battery life), etc.

    The vulnerability one is the biggest one.  We do not want to overinvest time
    on 3 step PGO to end up tossing it out on the same day.

    Status: WIP (Work in Progress)


    Basic info

      PGI is an instrumented build designed to collect information.

      PGT is the training step.

      PGO is the optimized build.  On average 10% performance gains observed
      in many PGOed apps, but may have 40% in some use cases like QPS (queries
      per second) or throughput on rare cases.

      1-2-3 simple right.

      PGI transitions to PGT transitions to PGO.


    PGO training

      The preference is for real world training.  You can use a trainer but it
      should reflect typical use by you.

      Web benchmarks can be found on the web.  These can be used to train.  It
      is preferred not to use them because it can mess up the use efficiency
      of the CPU cache by enlarging code that shouldn't be.  This is why we
      prefer event based real world PGO profiling.


    Events or rules


      If the compilers when entering PGO are not the same as PGI, PGI is
      required.  The reason why is because the compiler may not recognize the
      same profile version.

      If the major and minor is the same between PGI and entering PGO, you may
      be allowed use PGO.

      The minimal required for training is opening a webkit-gtk based
      application.

      Upon re-emerging, sometimes it will say you can do PGO or sometimes it may
      say you need to do PGI.  This means that the ebuilds are on autopilot
      and will think it out for you when PGOing.  No rules have to be
      remembered by you.

      Immediately after every new PGI build, the existing PGI profile is
      wiped.  This is to prevent mixing same versions in the same data profile
      directory.

      A version with a different API versions will have different PGO profiles.
      Reason why is because of the possiblility of different codepaths enabled
      and possibility of different USE flags.

      A PGOed build cannot continue to collect and generate more PGO training
      data.  To restart all over you must wipe the training data, see the
      ebuild for the paths to the PGO training data.

      It is recommended to emerge as normally.  This gives time to enjoy the
      product based on WebKitGTK and at the same time passively train.  The
      state transition period is set by you.  You can push the states
      forward within the same day or 2, or you can wait upon each new release.
      The idea with delayed (per new release) is to do 1 step PGO every time
      instead of 3 step PGO every time you emerge.


    Hypothetical training schedule

 Version      2.36.1    2.36.2    2.36.3    2.36.4   2.37.0   2.37.1

  EPGO           i  t o*  o          o         o        i   t   o

 versus

Traditional      i        i          i         i        i       i
3 step PGO       t        t          t         t        t       t
                 o        o          o         o        o       o

    Key:

      i=instrumented
      t=training
      o=optimized
      *=optional step


Draft training with epgo

# Run trainer in non-root
#!/bin/bash
trainer() {
	# We recommend the ones you visit only.  Examples only:
	timeout 120 minibrowser url_to_search_engine
	timeout 30 minibrowser url_to_social_media
	timeout 30 minibrowser url_to_video_site
	timeout 30 minibrowser url_to_streaming_with_running_video
	timeout 30 minibrowser url_to_live_stream_video
	timeout 30 minibrowser url_to_radio_station
	timeout 30 minibrowser url_to_games
	...
	timeout 30 minibrowser urlN

	# Do multi tabs also
}
trainer
## DONE

# How to build as if like 3 step:
#!/bin/bash
emerge -vuDN "webkit-gtk[epgo,-ebolt]" # PGI
# Run trainer in limited user
emerge -1vO "webkit-gtk[epgo,ebolt]" # PGO, bolt_pgi
# Run trainer in limited user
emerge --config "webkit-gtk[epgo,ebolt]" # PGO + bolt_pgo
## DONE


    Additional sources

    For PGO trainers, see contents of

      https://github.com/WebKit/WebKit/tree/main/PerformanceTests

    for description for what they do.


    For details on w32 PGO see:

      https://github.com/WebKit/WebKit/commit/790a01a3ec741d8752990a809d1ab489d9637e3d

  </longdescription>
  <use>
    <flag name="alsa">
      Enables ALSA sound support.
    </flag>
    <flag name="avif">
      Enables AVIF image support.
    </flag>
    <flag name="bmalloc">
      Uses a mmap based page allocator to improve overall performance.  Disable
      to use the system allocator.
    </flag>
    <flag name="cache-partitioning">
      Enable cache parititioning to block third party tracking
    </flag>
    <flag name="coverage">
      Enable code coverage support
    </flag>
    <flag name="eme">
      Enable Encrypted Media Extensions support (ClearKey CDM only).
    </flag>
    <flag name="egl">
      Enable EGL support.
    </flag>
    <flag name="epgo">
      Performs 1 step Profile Guided Optimization (PGO) per patch release.
    </flag>
    <flag name="examples">
      Install the MiniBrowser example application.
    </flag>
    <flag name="dfg-jit">
      Builds with the teir that does the bulk of the optimizing.
    </flag>
    <flag name="ftl-jit">
      Builds an additional tier for JIT used for optimizing run-time performance
      marginally at the expense of faster load times or delayed execution time.
    </flag>
    <flag name="gamepad">
      Enable gamepad input support via <pkg>dev-libs/libmanette</pkg>.
    </flag>
    <flag name="geolocation">
      Enable geolocation support through <pkg>app-misc/geoclue</pkg>.
    </flag>
    <flag name="gles2">
      Enable GLESv2 support.
    </flag>
    <flag name="gstreamer">
      Enables gstreamer support for video and audio playback.

      Using this flag allows access to VA-API hardware encoding or decoding if
      supported by the GPU.
    </flag>
    <flag name="gstwebrtc">
      Uses GstWebRTC as the backend for WebRTC.  Disabled by default through
      web view settings.
    </flag>
    <flag name="journald">
      Enables Journald logging
    </flag>
    <flag name="hardened">
      Ensures less problems with hardened build.
    </flag>
    <flag name="jit">
      Enables JIT support for JavaScriptCore for significantly faster code
      execution.  Disable for increased compatibility on alternative ARCHs and
      ABIs.
    </flag>
    <flag name="libsoup3">
      Link to libsoup3.  It consequently enables HTTP/2 by default when libsoup3
      is 2.99.8 or newer.
    </flag>
    <flag name="libwebrtc">
      Uses libwebrtc as a backend for WebRTC.
    </flag>
    <flag name="mediarecorder">
      Enables support for MediaRecorder API
    </flag>
    <flag name="mediastream">
      Enables support for MediaStream API (IN DEVELOPMENT / DRAFT).
    </flag>
    <flag name="nsplugin">
      Enable full nsplugin support (GTK2 plugins).
    </flag>
    <flag name="openmp">
      Use OpenMP to accelerate SVG filters.
    </flag>
    <flag name="pulseaudio">
      Adds PulseAudio and microphone support.

      You may need <pkg>media-sound/pulseaudio-daemon[alsa]</pkg> to hear sound.
    </flag>
    <flag name="thunder">
      Links to a framework with pluginable CDM (content decryption module) support.
    </flag>
    <flag name="unified-build">
      Reduces the build time by half by parsing the headers once
    </flag>
    <flag name="v4l">
      Adds and checks for proper v4l camera support.
    </flag>
    <flag name="variation-fonts">
      Check dependencies for variation font support.
    </flag>
    <flag name="webgl">
      Build support for the WebGL HTML API using <pkg>virtual/opengl</pkg>.
    </flag>
    <flag name="webassembly">
      Enables support for WebAssembly used for example in web games.  Disable to
      decrease the attack surface.
    </flag>
    <flag name="webdriver">
      Enable WebDriver support for Selenium.  This allows for automated testing,
      customized PGO training, controlling the web browser through scripting.
    </flag>
    <flag name="webassembly-b3-jit">
      Enables the B3 JIT support that does additional optimizations beyond
      ftl-jit.
    </flag>
    <flag name="webcrypto">
      Enables WebCrypto SubtleCrypto API support for low level cryptographic
      fuctions.
    </flag>
    <flag name="webm-eme">
      Enable support for decrypting protected WebM files.  (It may require a
      license, the proprietary SDK, and a corresponding proprietary OCDM plugin.)
    </flag>
    <flag name="webxr">
      Builds WebXR support.  (EXPERIMENTAL / IN DEVELOPMENT)
    </flag>
    <flag name="webvtt">
      Checks and pulls in dependencies required for full WebVTT support.
    </flag>
    <flag name="webrtc">
      Enables WebRTC support for audio or video communication.  (WebKitGTK
      EXPERIMENTAL, WebKit supported)
    </flag>
    <flag name="woff2">
      Builds support for WOFF2 Web Fonts
    </flag>
    <flag name="yarr-jit">
      Enables JIT regex support.  Otherwise, it falls back to interpretive.
    </flag>

    <!-- Codecs -->
    <flag name="a52">
      Support for decoding AC-3 audio.
    </flag>
    <flag name="aac">
      Support for decoding AAC audio.
    </flag>
    <flag name="aom">
      Support for CPU based AV1 video encoding and fallback as a decoder.

      This reference implementation is not recommended for decoding.
    </flag>
    <flag name="dav1d">
      Fallback support for CPU based AV1 video decoding.

      Recommended as the fallback for AV1 decoding.
    </flag>
    <flag name="flac">
      Support for decoding FLAC audio.
    </flag>
    <flag name="g722">
      Support for G722 encoding for GstWebRTC audio streams.
    </flag>
    <flag name="openh264">
      Support for CPU based H.264 decoding.
    </flag>
    <flag name="libde265">
      Fallback support for the CPU based H.265 video decoder using libde265.
    </flag>
    <flag name="mp3">
      Support for decoding MP1/2/3 audio.
    </flag>
    <flag name="ogg">
      Support for Ogg container files.
    </flag>
    <flag name="opus">
      Support for encoding or decoding Opus audio and for GstWebRTC RTP audio
      streams.
    </flag>
    <flag name="speex">
      Support for decoding Speex speech files.

      You may consider adding ogg container support (via USE=ogg) if a website
      uses ogg files containing speex encoded content.
    </flag>
    <flag name="theora">
      Support for decoding Theora video.
    </flag>
    <flag name="x264">
      Use x264 as a fallback CPU based H.264 video encoder.
    </flag>
    <flag name="vaapi-stateless-decoding">
      Use stateless VA-API decoding only support to avoid rendering issues.
    </flag>
    <flag name="vaapi">
      Use VA-API for hardware accelerated encoding if supported.

      If USE=-vaapi-stateless-decoding, then use the legacy plugin for hardware
      accelerated decoding.  Otherwise, use VA-API stateless decoding.
    </flag>
    <flag name="vorbis">
      Support for encoding and decoding Vorbis audio.
    </flag>
    <flag name="vpx">
      Use vpx as a fallback CPU based VP8/9 video encoder or decoder.
    </flag>
  </use>
  <slots>
    <slot name="4">
      Built with GTK+3 or GTK+2
    </slot>
    <slot name="5">
      Built with GTK 4
    </slot>
    <subslots>
      Corresponds to SOVERSION-API_VERSION.

      API correspondence:
      API version 4.0 - GTK+3 with libsoup2
      API version 4.1 - GTK+3 with libsoup3
      API version 5.0 - GTK 4 with libsoup3
      API version 6.0 - GTK 4 with libsoup3
    </subslots>
  </slots>
</pkgmetadata>
