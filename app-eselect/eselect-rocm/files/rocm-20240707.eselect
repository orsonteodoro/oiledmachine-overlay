# -*-eselect-*-  vim: ft=eselect
# Copyright 2019-2024 Orson Teodoro
# Copyright 2005-2012 Gentoo Foundation
# Distributed under the terms of the GNU GPL version 2 or later

DESCRIPTION="Manages the ROCm multslot symlinks"
MAINTAINER="orsonteodoro@hotmail.com"
VERSION="20270707"
PN="rocm"
EPREFIX="@EPREFIX@"
LIBDIR="@LIBDIR@"

find_rocm_slots() {
	local L=(
		$(realpath "${EPREFIX}/opt/rocm-"* 2>/dev/null)
	)
	echo ${L[@]##*/} | tr " " "\n"
}

# remove the ROCm symlinks before switch
remove_symlinks() {
    local x
    IFS=$'\n'
    for x in $(ls "${EPREFIX}/opt/rocm-"*"/bin/"*) ; do
        if [[ -e "/usr/bin/${x}" ]] ; then
            rm -f "/usr/bin/${x}"
        fi
    done

    local L=(
        "/etc/OpenCL/vendors/amdocl64.icd"
        "/usr/${LIBDIR}/libamdocl64.so"
        "/usr/${LIBDIR}/libcltrace.so"
    )

    local path
    for path in "${L[@]}" ; do
        if [[ -L "${path}" ]] ; then
            x=$(realpath "${path}")
            if [[ "${x}" =~ "/rocm/" ]] ; then
                rm -f "${path}"
            fi
        fi
    done

    IFS=$' \t\n'
}

BLACKLISTED_EXES=(
    "hipcc.bat"
)

is_blacklisted_exe() {
    local exe="$1"
    local x
    for x in ${BLACKLISTED_EXES[@]} ; do
        if [[ "${x}" == "${exe}" ]] ; then
            return 0
        fi
    done
    return 1
}

add_rocm_opencl_runtime_symlinks() {
    local ROWS=(
        "${EPREFIX}/opt/rocm-${slot}/etc/OpenCL/vendors/amdocl64.icd:/etc/OpenCL/vendors/amdocl64.icd"
        "${EPREFIX}/opt/rocm-${slot}/${LIBDIR}/libamdocl64.so:/usr/${LIBDIR}/libamdocl64.so"
        "${EPREFIX}/opt/rocm-${slot}/${LIBDIR}/libcltrace.so:/usr/${LIBDIR}/libcltrace.so"
    )

    local row
    IFS=$'\n'
    for row in "${ROWS[@]}" ; do
        local src="${row%:*}" # left
        local dest="${row#*:}" # right
        if [[ -e "${src}" ]] ; then
            mkdir -p $(dirname "${dest}")
            echo "linking ${src} -> ${dest}"
            ln -sf "${src}" "${dest}"
        fi
    done
    IFS=$' \t\n'
}

add_bin_symlinks() {
    local x
    cd /usr/bin
    IFS=$'\n'
    for x in $(ls "${EPREFIX}/opt/rocm-${slot}/bin/"*) ; do
        local bn=$(basename "${x}")
        is_blacklisted_exe "${bn}" && continue
        local src=$(realpath "${EPREFIX}/opt/rocm-${slot}/bin/${bn}")
        echo "linking ${src} -> /usr/bin/${bn}"
        ln -sf "${src}" "/usr/bin/${bn}"
    done
    IFS=$' \t\n'
}

# set the ROCm symlinks
set_symlink() {
    local target=$1

    local rocm_slots=(
	$(find_rocm_slots)
    )

    # Target is either an integer from the UI or a version string
    if is_number "${target}"; then
        local targets=( $(find_rocm_slots) )
        local i=$((${target}-1))
        target=${targets[${i}]} # low to high order

        slot="${target}"

        add_bin_symlinks
        add_rocm_opencl_runtime_symlinks
    elif [[ "${target}" =~ ^[0-9]+[.][0-9]+$ ]] ; then
        slot="${target}"

        add_bin_symlinks
        add_rocm_opencl_runtime_symlinks
    else
        echo "Failed to set symlink and is now gone."
        return
    fi
}

### show action ###

describe_show() {
    echo "Show the current ROCm symlinks"
}

do_show() {
    write_list_start "Current ROCm symlinks:"

    local rocm_slots=(
	$(find_rocm_slots)
    )

    local k_cython_src=""

    local found=0
    local rocm_slot
    local target
    local x
    if [[ -L "/usr/bin/hipcc" ]] ; then
        x=$(realpath "/usr/bin/hipcc")
        x=$(dirname "${x}") # ${EPREFIX}/opt/rocm-5.5.1/bin
        x=$(dirname "${x}") # ${EPREFIX}/opt/rocm-5.5.1
        x=$(basename "${x}") # rocm-5.5.1
        x="${x#*-}" # 5.5.1
        target="${x}"
    fi
    IFS=$'\n'
    for x in $(ls "${EPREFIX}/opt/rocm-${target}/bin/"* 2>/dev/null) ; do
        local bn=$(basename "${x}")
        found=1
        local k_hipcc_src="/usr/bin/${bn}"
        local k_hipcc_dest=$(canonicalise "/usr/bin/${bn}")
        is_blacklisted_exe "${bn}" && continue
        write_kv_list_entry "${k_hipcc_src%/} ->" "${k_hipcc_dest%/}"
    done

    local L=(
        "/etc/OpenCL/vendors/amdocl64.icd"
        "/usr/${LIBDIR}/libamdocl64.so"
        "/usr/${LIBDIR}/libcltrace.so"
    )

    local path
    for path in "${L[@]}" ; do
        if [[ -L "${path}" ]] ; then
            x=$(realpath "${path}")
            if [[ "${x}" =~ "/rocm/" ]] ; then
                local k_ocl_src="${path}"
                local k_ocl_dest=$(canonicalise "${path}")
                write_kv_list_entry "${k_ocl_src%/} ->" "${k_ocl_dest%/}"
            fi
        fi
    done
    IFS=$' \t\n'


    if (( ${found} == 0 )) ; then
        write_kv_list_entry "(unset)" ""
    fi
}

### list action ###

describe_list() {
    echo "List available ROCm symlink targets"
}

do_list() {
    local i targets=( $(find_rocm_slots) )
    local x

    local rocm_slots=(
	$(find_rocm_slots)
    )

    local slot
    for rocm_slot in ${rocm_slots[@]} ; do
        x=$(realpath "/usr/bin/hipcc")
        x=$(dirname "${x}") # ${EPREFIX}/opt/rocm-5.5.1/bin
        x=$(dirname "${x}") # ${EPREFIX}/opt/rocm-5.5.1
        x=$(basename "${x}") # rocm-5.5.1
        slot="${x#*-}" # 5.5.1
    done

    write_list_start "Available ROCm symlink targets:"
    IFS=$'\n'
    for (( i = 0; i < ${#targets[@]}; i++ )); do
        # highlight the target where the symlink is pointing to
        if [[ -L /usr/bin/hipcc ]] ; then
            if [[ ${targets[${i}]} =~ "${slot}" ]] ; then
                # show blue asterisk at index
                targets[${i}]=$(highlight_marker "${targets[${i}]}")
            else
                targets[${i}]="${targets[${i}]}"
            fi
        fi
    done
    IFS=$' \t\n'
    write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
    echo "Set a new ROCm symlink target"
}

describe_set_parameters() {
    echo "<target>"
}

describe_set_options() {
    echo "target : Target name or number (from 'list' action)"
}

do_set() {
    [[ -z $1 ]] && die -q "You didn't tell me what to set the symlink to"
    [[ $# -gt 1 ]] && die -q "Too many parameters"

    if [[ -L /usr/bin/hipcc ]]; then
        # existing symlink
        remove_symlinks || die -q "Couldn't remove existing symlink"
        set_symlink "$1" || die -q "Couldn't set a new symlink"
    elif [[ -e /usr/bin/hipcc ]]; then
        # we have something strange
        die -q "/usr/bin/hipcc exists but is not a symlink.  Emerge hip from the oiledmachine-overlay"
    else
        set_symlink "$1" || die -q "Couldn't set a new symlink"
    fi
}

### remove action

describe_remove() {
    echo "Completely remove ROCm symlinks"
}

# Remove all symlinks containing /rocm/ in path even third party ones.
do_remove() {
    local x
    IFS=$'\n'
    for x in $(find /usr/bin/ -maxdepth 1 -type l) ; do
        local path=$(realpath "${x}" 2>/dev/null)
        if echo "${path}" | grep -q "/rocm/" ; then
            rm -vf "${x}"
        fi
    done

    local L=(
        "/etc/OpenCL/vendors/amdocl64.icd"
        "/usr/${LIBDIR}/libamdocl64.so"
        "/usr/${LIBDIR}/libcltrace.so"
    )

    local path
    for path in "${L[@]}" ; do
        if [[ -L "${path}" ]] ; then
            x=$(realpath "${path}")
            if [[ "${x}" =~ "/rocm/" ]] ; then
                rm -vf "${path}"
            fi
        fi
    done
    IFS=$' \t\n'
}
