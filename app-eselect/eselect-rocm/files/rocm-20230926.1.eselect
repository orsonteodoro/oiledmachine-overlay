# -*-eselect-*-  vim: ft=eselect
# Copyright 2019-2023 Orson Teodoro
# Copyright 2005-2012 Gentoo Foundation
# Distributed under the terms of the GNU GPL version 2 or later

DESCRIPTION="Manages the ROCm multslot symlinks"
MAINTAINER="orsonteodoro@hotmail.com"
VERSION="20230926.1"
PN="rocm"
EPREFIX="@EPREFIX@"

find_rocm_slots() {
	local L=(
		$(realpath "${EPREFIX}/usr/"*"/rocm/"* 2>/dev/null)
	)
	echo ${L[@]##*/} | tr " " "\n"
}

# remove the ROCm symlinks
remove_symlinks() {
    IFS=$'\n'
    for x in $(ls "${EPREFIX}/usr/"*"/rocm/"*"/bin/"*) ; do
        if [[ -e "/usr/bin/${x}" ]] ; then
            rm -f "/usr/bin/${x}"
        fi
    done
    IFS=$'\t\n'
}

BLACKLISTED_EXES=(
    "hipcc.bat"
)

is_blacklisted_exe() {
    local exe="$1"
    local x
    for x in ${BLACKLISTED_EXES[@]} ; do
        if [[ "${x}" == "${exe}" ]] ; then
            return 0
        fi
    done
    return 1
}

# set the ROCm symlinks
set_symlink() {
    local target=$1

    local rocm_slots=(
	$(find_rocm_slots)
    )

    # Target is either an integer from the UI or a version string
    if is_number "${target}"; then
        local targets=( $(find_rocm_slots) )
        local i=$((${target}-1))
        target=${targets[${i}]} # low to high order

        slot="${target}"

        cd /usr/bin
        IFS=$'\n'
        for x in $(ls "${EPREFIX}/usr/"*"/rocm/${slot}/bin/"*) ; do
            local bn=$(basename "${x}")
            is_blacklisted_exe "${bn}" && continue
            local src=$(realpath "${EPREFIX}/usr/"*"/rocm/${slot}/bin/${bn}")
            ln -sf "${src}" "/usr/bin/${bn}"
        done
        IFS=$' \t\n'
    elif [[ "${target}" =~ ^[0-9]+[.][0-9]+$ ]] ; then
        slot="${target}"

        cd /usr/bin
        IFS=$'\n'
        for x in $(ls "${EPREFIX}/usr/"*"/rocm/${slot}/bin/"*) ; do
            local bn=$(basename "${x}")
            is_blacklisted_exe "${bn}" && continue
            local src=$(realpath "${EPREFIX}/usr/"*"/rocm/${slot}/bin/${bn}")
            ln -sf "${src}" "/usr/bin/${bn}"
        done
        IFS=$' \t\n'
    else
        echo "Failed to set symlink and is now gone."
        return
    fi
}

### show action ###

describe_show() {
    echo "Show the current ROCm symlinks"
}

do_show() {
    write_list_start "Current ROCm symlinks:"

    local rocm_slots=(
	$(find_rocm_slots)
    )

    local k_cython_src=""

    local found=0
    local rocm_slot
    local target
    for rocm_slot in ${rocm_slots[@]} ; do
        if [[ -L "/usr/bin/hipcc" ]] ; then
            local x=$(realpath "/usr/bin/hipcc")
            x=$(dirname "${x}") # ${EPREFIX}/usr/@LIBDIR@/rocm/5.5/bin
            x=$(dirname "${x}") # ${EPREFIX}/usr/@LIBDIR@/rocm/5.5
            x=$(basename "${x}") # 5.5
            target="${x}"
        fi
    done
    IFS=$'\n'
    for x in $(ls "${EPREFIX}/usr/"*"/rocm/${target}/bin/"* 2>/dev/null) ; do
        local bn=$(basename "${x}")
        found=1
        local k_hipcc_src="/usr/bin/${bn}"
        local k_hipcc_dest=$(canonicalise "/usr/bin/${bn}")
        is_blacklisted_exe "${bn}" && continue
        write_kv_list_entry "${k_hipcc_src%/} ->" "${k_hipcc_dest%/}"
    done
    IFS=$' \t\n'

    if (( ${found} == 0 )) ; then
        write_kv_list_entry "(unset)" ""
    fi
}

### list action ###

describe_list() {
    echo "List available ROCm symlink targets"
}

do_list() {
    local i targets=( $(find_rocm_slots) )

    local rocm_slots=(
	$(find_rocm_slots)
    )

    write_list_start "Available ROCm symlink targets:"
    IFS=$'\n'
    for (( i = 0; i < ${#targets[@]}; i++ )); do
        # highlight the target where the symlink is pointing to
        for rocm_slot in ${rocm_slots[@]} ; do
            if [[ -L /usr/bin/hipcc ]] ; then
                local x=$(realpath /usr/bin/hipcc)
                if [[ ${targets[i]} =~ "${x}" ]] ; then
                    targets[i]=$(highlight_marker "${targets[i]}")
                else
                    targets[i]="${targets[i]}"
                fi
            fi
        done
    done
    IFS=$' \t\n'
    write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
    echo "Set a new ROCm symlink target"
}

describe_set_parameters() {
    echo "<target>"
}

describe_set_options() {
    echo "target : Target name or number (from 'list' action)"
}

do_set() {
    [[ -z $1 ]] && die -q "You didn't tell me what to set the symlink to"
    [[ $# -gt 1 ]] && die -q "Too many parameters"

    if [[ -L /usr/bin/hipcc ]]; then
        # existing symlink
        remove_symlinks || die -q "Couldn't remove existing symlink"
        set_symlink "$1" || die -q "Couldn't set a new symlink"
    elif [[ -e /usr/bin/hipcc ]]; then
        # we have something strange
        die -q "/usr/bin/hipcc exists but is not a symlink.  Emerge hip from the oiledmachine-overlay"
    else
        set_symlink "$1" || die -q "Couldn't set a new symlink"
    fi
}

### remove action

describe_remove() {
    echo "Remove symlinks"
}

do_remove() {
    for x in $(find /usr/bin/ -maxdepth 1 -type l) ; do
        local path=$(realpath "${x}" 2>/dev/null)
        if echo "${path}" | grep -q "/rocm/" ; then
            rm -vf "${x}"
        fi
    done
}
