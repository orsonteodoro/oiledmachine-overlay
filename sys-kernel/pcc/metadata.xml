<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild only on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <![CDATA[
  <!--

    oiledmachine-overlay notes:

    Performance-oriented Congestion Control (PCC) is a congestion control
    algorithm.  This ebuild only offers the kernel module version for TCP/IP.

    PCC uses the following ideas:

    * Empiricalism - performing send rate tests in real time with A/B testing
      and collecting and measuring of RTT (latency), dropped packet rate,
      throughput.
    * Utility function - a scoring function.
    * Gradent ascent - finding the instantaneous maxima which is the reward (aka
      the utility value) which can be done in a simple comparison of two utility
      values (which is the same as comparing two rewards corresponding to the
      two send rates tested).
    * Online learning - means converging at the sending rate equilibrium while
      avoiding the incast (or half or more throughput lost because of packet
      loss).  This is in contrast to the "hardwired mapping" approach by
      previous TCP CC designers.  The project claims that wrong assumptions in
      complex conditions lead to harmful actions. [This is not the best reason
      from the course/fine grain perspective of the Orca project.]
    * Self-clocking - The rates of sending rate and receiving rates are the
      same.  [This is not discussed in their paper or presentation.  They often
      mention "sending rate".  The utility function is supposed to
      model/replicate it.]

      - PCC Allegro:
        * It uses a sigmoid function.
          (The sigmoid function behaves similarly to a horizontal tangent but
           capped typically at 0 and 1, but in this implementation it is scaled
           up to sender's throughput sampled at an interval.  It's used for
           maybe for normalization or saturation [aka value cap].  [Like in the
           online learning above, the wrong assumption by them led to the next
           iteration.])
        * u_i = f(T_i, r_i, L_i)
          * It has three variable inputs -- throughput, send rate, packet loss rate
          * The reward is the send rate.
          * The punishments are packet loss.
          * The output is just an artibrary utility value.
        * This version has a design flaw or less intelligent that it ignores
          latency.  They claim that latency is associated with bufferbloat.
        * Bigger internal latency in LTE (rapidly changing networks in
          smartphone Internet).
        * Single or double digit throughput benefits compared to cubic, hybla,
          illinois.
        * Increasing packet loss with larger buffers.
      - PCC Vivace:
        * It uses a concave function, for modeling rapid change to take in
          consideration the LTE scenario and to improve that sitation.
        * u_i = f(r_i, d(RTT_i)/d(T), L_i)
          * Three variable inputs -- send rate, packet loss rate,
            the RTT gradient d(RTT_i)/d(T).
          * The reward is send rate.
          * The punishments are packet loss, RTT latency.
          * The output is just an arbitary utility value.
        * Small buffers now have 90% utilization, addressing bufferbloat on
          that scale in particular LTE scenario.
        * Lower internal latencies in LTE (rapidly changing networks in
          smartphone Internet).  This is important for reducing jitter in
          VoIP or live streaming.
        * Each sender (or socket listed in `ss -i`) will get their own
          independent utility function.
        * The throughput is similar to PCC Allegro.

    [Using Computer Science AI, the utility function is the analog to the
     threshold function and the utility value is the analog to threshold value.
     The ultimate goal is to maximize utility value (aka benefit).  The
     threshold function is typically a linear combo; but in this TCP CC, they
     used non-linear functions and their reasons are discussed above and their
     paper.  The range of the threshold/utility function is arbitrary but
     should fit in the variable's range without overflowing/underflowing.]

    Pre-merge configuration

    You must define PCC_KERNELS in /etc/portage/make.conf or as a
    per-package environment variable."

    Examples:

      PCC_KERNELS=\"5.4.^-builder 5.15.^-builder\" # for latest installed point release
      PCC_KERNELS=\"5.4.*-builder 5.15.*-builder\" # for all installed point releases
      PCC_KERNELS=\"5.4.261-builder 5.15.139-builder\" # for exact point releases
      PCC_KERNELS=\"5.4.261-builder 5.15.^-builder 6.1.*-builder\" # for all three cases releases

    This is to allow to support LTS, stable, and live kernels at the same time."

  -->
  ]]>
  <upstream>
    <bugs-to>https://github.com/PCCproject/PCC-Kernel/issues</bugs-to>
    <remote-id type="github">PCCproject/PCC-Kernel</remote-id>
  </upstream>
  <use>
    <flag name="allegro">
      Loss rate based.  2015 edition.
    </flag>
    <flag name="custom-kernel">
      Allow to build for a different kernel without vendor lock-in.
    </flag>
    <flag name="vivace">
      Loss rate and latency based with RTT probing.  2018 edition.
      Safer version.
    </flag>
  </use>
</pkgmetadata>
