diff -urp kpatch-0.9.2.orig/kpatch-build/kpatch-build kpatch-0.9.2/kpatch-build/kpatch-build
--- kpatch-0.9.2.orig/kpatch-build/kpatch-build	2020-09-15 08:09:05.000000000 -0700
+++ kpatch-0.9.2/kpatch-build/kpatch-build	2020-10-09 05:56:07.534963781 -0700
@@ -42,6 +42,9 @@ ARCH="$(uname -m)"
 CPUS="$(getconf _NPROCESSORS_ONLN)"
 CACHEDIR="${CACHEDIR:-$HOME/.kpatch}"
 SRCDIR="$CACHEDIR/src"
+SANDBOXED_SRCDIR=$(mktemp -d) # \`patch -R\` is bugged so use a sandbox
+SANDBOXED_SRCDIR_DISTRO=$(mktemp -d)
+DISTRO_MODDED=0
 RPMTOPDIR="$CACHEDIR/buildroot"
 VERSIONFILE="$CACHEDIR/version"
 TEMPDIR="$CACHEDIR/tmp"
@@ -119,34 +122,20 @@ apply_patches() {
 	local patch
 
 	for patch in "${PATCH_LIST[@]}"; do
-		patch -N -p1 --dry-run < "$patch" 2>&1 | logger || die "$patch file failed to apply"
 		patch -N -p1 < "$patch" 2>&1 | logger || die "$patch file failed to apply"
 		(( APPLIED_PATCHES++ ))
 	done
 }
 
-remove_patches() {
-	local patch
-	local idx
-
-	for (( ; APPLIED_PATCHES>0; APPLIED_PATCHES-- )); do
-		idx=$(( APPLIED_PATCHES - 1))
-		patch="${PATCH_LIST[$idx]}"
-		patch -p1 -R -d "$SRCDIR" < "$patch" &> /dev/null
-	done
-
-	# If $SRCDIR was a git repo, make sure git actually sees that
-	# we've reverted our patch(es).
-	[[ -d "$SRCDIR/.git" ]] && (cd "$SRCDIR" && git update-index -q --refresh)
-}
-
 cleanup() {
-	rm -f "$SRCDIR/.scmversion"
-
-	remove_patches
+	echo "Called cleanup() trap callback"
 
-	# restore original vmlinux if it was overwritten by sourcedir build
-	[[ -e "$TEMPDIR/vmlinux" ]] && mv -f "$TEMPDIR/vmlinux" "$SRCDIR/"
+	if [[ -d "${SANDBOXED_SRCDIR}" ]] ; then
+		rm -rf "${SANDBOXED_SRCDIR}"
+	fi
+	if [[ -d "${SANDBOXED_SRCDIR_DISTRO}" ]] ; then
+		rm -rf "${SANDBOXED_SRCDIR_DISTRO}"
+	fi
 
 	[[ "$DEBUG" -eq 0 ]] && rm -rf "$TEMPDIR"
 	rm -rf "$RPMTOPDIR"
@@ -603,6 +592,10 @@ fi
 
 [[ -z "$TARGETS" ]] && TARGETS="vmlinux modules"
 
+# We need to use a sandbox and only make changes to that sandbox from the start.
+echo "Setting up sandbox for non-destructive edits."
+cp -aT "${SRCDIR}" "${SANDBOXED_SRCDIR}" || die
+
 # Don't check external file.
 # shellcheck disable=SC1090
 [[ -f "$RELEASE_FILE" ]] && source "$RELEASE_FILE"
@@ -636,7 +629,7 @@ if [[ -n "$USERSRCDIR" ]]; then
 	echo "Using source directory at $USERSRCDIR"
 
 	# save original vmlinux before it gets overwritten by sourcedir build
-	if [[ -z "$OOT_MODULE" ]] && [[ "$VMLINUX" -ef "$SRCDIR"/vmlinux ]]; then
+	if [[ -z "$OOT_MODULE" ]] && [[ "$VMLINUX" -ef "${SANDBOXED_SRCDIR}"/vmlinux ]]; then
 		cp -f "$VMLINUX" "$TEMPDIR/vmlinux"
 		VMLINUX="$TEMPDIR/vmlinux"
 	fi
@@ -646,8 +639,8 @@ if [[ -n "$USERSRCDIR" ]]; then
 		CONFIGFILE="/boot/config-${ARCHVERSION}"
 	fi
 
-elif [[ -e "$SRCDIR"/.config ]] && [[ -e "$VERSIONFILE" ]] && [[ "$(cat "$VERSIONFILE")" = "$ARCHVERSION" ]]; then
-	echo "Using cache at $SRCDIR"
+elif [[ -e "${SANDBOXED_SRCDIR}"/.config ]] && [[ -e "$VERSIONFILE" ]] && [[ "$(cat "$VERSIONFILE")" = "$ARCHVERSION" ]]; then
+	echo "Using cache at ${SANDBOXED_SRCDIR}"
 
 else
 	if [[ "$DISTRO" = fedora ]] || [[ "$DISTRO" = rhel ]] || [[ "$DISTRO" = ol ]] || [[ "$DISTRO" = centos ]]; then
@@ -673,20 +666,21 @@ else
 		rpmbuild -D "_topdir $RPMTOPDIR" -bp --nodeps "--target=$(uname -m)" "$RPMTOPDIR"/SPECS/kernel$ALT.spec 2>&1 | logger ||
 			die "rpmbuild -bp failed.  you may need to run 'yum-builddep kernel' first."
 
-		mv "$RPMTOPDIR"/BUILD/kernel-*/linux-* "$SRCDIR" 2>&1 | logger || die
+		mv "$RPMTOPDIR"/BUILD/kernel-*/linux-* "${SANDBOXED_SRCDIR}" 2>&1 | logger || die
 		rm -rf "$RPMTOPDIR"
-		rm -rf "$SRCDIR/.git"
+		rm -rf "${SANDBOXED_SRCDIR}/.git"
 
 		if [[ "$ARCHVERSION" == *-* ]]; then
-			echo "-${ARCHVERSION##*-}" > "$SRCDIR/localversion" || die
+			echo "-${ARCHVERSION##*-}" > "${SANDBOXED_SRCDIR}/localversion" || die
 		fi
 
 		echo "$ARCHVERSION" > "$VERSIONFILE" || die
 
-		[[ -z "$CONFIGFILE" ]] && CONFIGFILE="$SRCDIR/configs/kernel$ALT-$KVER-$ARCH.config"
+		[[ -z "$CONFIGFILE" ]] && CONFIGFILE="${SANDBOXED_SRCDIR}/configs/kernel$ALT-$KVER-$ARCH.config"
 
-		(cd "$SRCDIR" && make mrproper 2>&1 | logger) || die
+		(cd "${SANDBOXED_SRCDIR}" && make mrproper 2>&1 | logger) || die
 
+		DISTRO_MODDED=1
 	elif [[ "$DISTRO" = ubuntu ]] || [[ "$DISTRO" = debian ]]; then
 
 		echo "Debian/Ubuntu distribution detected"
@@ -714,24 +708,25 @@ else
 		echo "Downloading and unpacking the kernel source for $ARCHVERSION"
 		# Download source deb pkg
 		(dget -u "$url/${pkgname}/${dscname}" 2>&1) | logger || die "dget: Could not fetch/unpack $url/${pkgname}/${dscname}"
-		mv "${pkgname}-$KVER" "$SRCDIR" || die
+		mv "${pkgname}-$KVER" "${SANDBOXED_SRCDIR}" || die
 		[[ -z "$CONFIGFILE" ]] && CONFIGFILE="/boot/config-${ARCHVERSION}"
 		if [[ "$ARCHVERSION" == *-* ]]; then
-			echo "-${ARCHVERSION#*-}" > "$SRCDIR/localversion" || die
+			echo "-${ARCHVERSION#*-}" > "${SANDBOXED_SRCDIR}/localversion" || die
 		fi
 		# for some reason the Ubuntu kernel versions don't follow the
 		# upstream SUBLEVEL; they are always at SUBLEVEL 0
-		sed -i "s/^SUBLEVEL.*/${sublevel}/" "$SRCDIR/Makefile" || die
+		sed -i "s/^SUBLEVEL.*/${sublevel}/" "${SANDBOXED_SRCDIR}/Makefile" || die
 		echo "$ARCHVERSION" > "$VERSIONFILE" || die
 
+		DISTRO_MODDED=1
 	else
 		die "Unsupported distribution"
 	fi
 fi
 
-[[ -z "$CONFIGFILE" ]] && CONFIGFILE="$SRCDIR"/.config
+[[ -z "$CONFIGFILE" ]] && CONFIGFILE="${SANDBOXED_SRCDIR}"/.config
 [[ ! -e "$CONFIGFILE" ]] && die "can't find config file"
-[[ ! "$CONFIGFILE" -ef "$SRCDIR"/.config ]] && cp -f "$CONFIGFILE" "$SRCDIR/.config"
+[[ ! "$CONFIGFILE" -ef "${SANDBOXED_SRCDIR}"/.config ]] && cp -f "$CONFIGFILE" "${SANDBOXED_SRCDIR}/.config"
 
 # kernel option checking
 grep -q "CONFIG_DEBUG_INFO=y" "$CONFIGFILE" || die "kernel doesn't have 'CONFIG_DEBUG_INFO' enabled"
@@ -778,11 +773,25 @@ grep -q "CONFIG_DEBUG_INFO_SPLIT=y" "$CO
 grep -q "CONFIG_GCC_PLUGIN_LATENT_ENTROPY=y" "$CONFIGFILE" && die "kernel option 'CONFIG_GCC_PLUGIN_LATENT_ENTROPY' not supported"
 grep -q "CONFIG_GCC_PLUGIN_RANDSTRUCT=y" "$CONFIGFILE" && die "kernel option 'CONFIG_GCC_PLUGIN_RANDSTRUCT' not supported"
 
+if (( ${DISTRO_MODDED} == 1 )) ; then
+	echo "Cloning distro modded sandbox"
+	cp -aT "${SANDBOXED_SRCDIR}" "${SANDBOXED_SRCDIR_DISTRO}"
+fi
+
 echo "Testing patch file(s)"
-cd "$SRCDIR" || die
+cd "${SANDBOXED_SRCDIR}" || die
 verify_patch_files
 apply_patches
-remove_patches
+echo "Clearing sandbox"
+rm -rf "${SANDBOXED_SRCDIR}" || die
+echo "Preparing a new clean sandbox"
+mkdir -p "${SANDBOXED_SRCDIR}" || die
+if (( ${DISTRO_MODDED} == 1 )) ; then
+	cp -aT "${SANDBOXED_SRCDIR_DISTRO}" "${SANDBOXED_SRCDIR}" || die
+else
+	cp -aT "${SRCDIR}" "${SANDBOXED_SRCDIR}" || die
+fi
+cd "${SANDBOXED_SRCDIR}" || die
 
 cp -LR "$DATADIR/patch" "$TEMPDIR" || die
 
@@ -808,14 +817,14 @@ unset KPATCH_GCC_TEMPDIR
 CROSS_COMPILE="$TOOLSDIR/kpatch-gcc " make "-j$CPUS" $TARGETS 2>&1 | logger || die
 
 # Save original module symvers
-cp "$SRCDIR/Module.symvers" "$TEMPDIR/Module.symvers"
+cp "${SANDBOXED_SRCDIR}/Module.symvers" "$TEMPDIR/Module.symvers"
 
 echo "Building patched source"
 apply_patches
 mkdir -p "$TEMPDIR/orig" "$TEMPDIR/patched"
 KPATCH_GCC_TEMPDIR="$TEMPDIR"
 export KPATCH_GCC_TEMPDIR
-KPATCH_GCC_SRCDIR="$SRCDIR"
+KPATCH_GCC_SRCDIR="${SANDBOXED_SRCDIR}"
 export KPATCH_GCC_SRCDIR
 # $TARGETS used as list, no quotes.
 # shellcheck disable=SC2086
@@ -834,7 +843,7 @@ if [[ ! -e "$TEMPDIR/changed_objs" ]]; t
 	die "no changed objects found"
 fi
 
-[[ -n "$OOT_MODULE" ]] || grep -q vmlinux "$SRCDIR/Module.symvers" || die "truncated $SRCDIR/Module.symvers file"
+[[ -n "$OOT_MODULE" ]] || grep -q vmlinux "${SANDBOXED_SRCDIR}/Module.symvers" || die "truncated ${SANDBOXED_SRCDIR}/Module.symvers file"
 
 if [[ "$CONFIG_MODVERSIONS" -eq 1 ]]; then
     while read -ra sym_line; do
@@ -844,7 +853,7 @@ if [[ "$CONFIG_MODVERSIONS" -eq 1 ]]; th
 
         sym=${sym_line[1]}
 
-        read -ra patched_sym_line <<< "$(grep "\s$sym\s" "$SRCDIR/Module.symvers")"
+        read -ra patched_sym_line <<< "$(grep "\s$sym\s" "${SANDBOXED_SRCDIR}/Module.symvers")"
         if [[ ${#patched_sym_line[@]} -lt 4 ]]; then
             die "Malformed symbol entry for ${sym} in ${SRCDIR}/Module.symvers file"
         fi
@@ -864,7 +873,7 @@ fi
 for i in $(cat "$TEMPDIR/changed_objs")
 do
 	mkdir -p "$TEMPDIR/patched/$(dirname "$i")" || die
-	cp -f "$SRCDIR/$i" "$TEMPDIR/patched/$i" || die
+	cp -f "${SANDBOXED_SRCDIR}/$i" "$TEMPDIR/patched/$i" || die
 done
 
 echo "Extracting new and modified ELF sections"
@@ -900,7 +909,7 @@ ERROR=0
 # Prepare OOT module symvers file
 if [[ -n "$OOT_MODULE" ]]; then
     BUILDDIR="/lib/modules/$ARCHVERSION/build/"
-    cp "$SRCDIR/Module.symvers" "$TEMPDIR/Module.symvers"
+    cp "${SANDBOXED_SRCDIR}/Module.symvers" "$TEMPDIR/Module.symvers"
     awk '{ print $1 "\t" $2 "\t" $3 "\t" $4}' "${BUILDDIR}/Module.symvers" >> "$TEMPDIR/Module.symvers"
 fi
 
@@ -914,7 +923,7 @@ for i in $FILES; do
 	[[ "$i" = usr/initramfs_data.o ]] && continue
 
 	mkdir -p "output/$(dirname "$i")"
-	cd "$SRCDIR" || die
+	cd "${SANDBOXED_SRCDIR}" || die
 	find_kobj "$i"
 	cd "$TEMPDIR" || die
 	if [[ -e "orig/$i" ]]; then
@@ -922,7 +931,7 @@ for i in $FILES; do
 			KOBJFILE_NAME=vmlinux
 			KOBJFILE_PATH="$VMLINUX"
 			SYMTAB="${TEMPDIR}/${KOBJFILE_NAME}.symtab"
-			SYMVERS_FILE="$SRCDIR/Module.symvers"
+			SYMVERS_FILE="${SANDBOXED_SRCDIR}/Module.symvers"
 		elif [[ "$(basename "$KOBJFILE")" = "$(basename "$OOT_MODULE")" ]]; then
 			KOBJFILE_NAME="$(basename --suffix=.ko "$OOT_MODULE")"
 			KOBJFILE_PATH="$OOT_MODULE"
@@ -933,7 +942,7 @@ for i in $FILES; do
 			KOBJFILE_NAME="${KOBJFILE_NAME//-/_}"
 			KOBJFILE_PATH="${TEMPDIR}/module/$KOBJFILE"
 			SYMTAB="${KOBJFILE_PATH}.symtab"
-			SYMVERS_FILE="$SRCDIR/Module.symvers"
+			SYMVERS_FILE="${SANDBOXED_SRCDIR}/Module.symvers"
 		fi
 
 		readelf -s --wide "$KOBJFILE_PATH" > "$SYMTAB"
@@ -986,7 +995,7 @@ if [[ -z "$USERSRCDIR" ]] && [[ "$DISTRO
 	# UBUNTU: add UTS_UBUNTU_RELEASE_ABI to utsrelease.h after regenerating it
 	UBUNTU_ABI="${ARCHVERSION#*-}"
 	UBUNTU_ABI="${UBUNTU_ABI%-*}"
-	echo "#define UTS_UBUNTU_RELEASE_ABI $UBUNTU_ABI" >> "$SRCDIR"/include/generated/utsrelease.h
+	echo "#define UTS_UBUNTU_RELEASE_ABI $UBUNTU_ABI" >> "${SANDBOXED_SRCDIR}"/include/generated/utsrelease.h
 fi
 
 cd "$TEMPDIR/output" || die
@@ -1009,7 +1018,7 @@ fi
 
 cd "$TEMPDIR/patch" || die
 if [[ -z "$OOT_MODULE" ]]; then
-	KPATCH_BUILD="$SRCDIR"
+	KPATCH_BUILD="${SANDBOXED_SRCDIR}"
 else
 	KPATCH_BUILD="/lib/modules/$ARCHVERSION/build"
 fi
Only in kpatch-0.9.2/kpatch-build: kpatch-build.orig
Only in kpatch-0.9.2/kpatch-build: kpatch-build.rej
