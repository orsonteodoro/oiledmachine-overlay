<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <longdescription>
    ot-sources is a customizable patchset compilation package that applies
    patches for performance, encryption, and security.

    The package prefers to unbundle patchsets, in preference for the
    version of the feature that was released directly from original author,
    but sometimes prefers the bundled repackaged version for the major.minor
    series especially if they are difficult to maintain between major.minor
    series.

    Power users can choose either the BMQ, PDS, MuQSS CPU schedulers.  These
    schedulers focus on normal non-realtime tasks.

    CFS, used as the stock CPU scheduler, uses red-black trees.  The Red-black
    tree is O(log n) search, O(log n) task insert, O(log n) task removal.
    CFS does not use runqueues but red-black trees instead ordered by time.
    
    PDS is multiple run queues per CPU with backend skiplists.  Tries to
    balance throughput with latency.

    BMQ design tries to resume tasks faster for unfinished timeslices and
    uses PDS plus another scheduler design.  FIFO for non-rt and priority
    queue for rt tasks.

    MuQSS uses O(1) task removal. O(log n) task insertion. O(k) next task
    execution, with k CPU cores.  Each core has it's own runqueue of
    array of doubly linked lists arranged as a skip list.  Tasks are ordered
    by priority class and virtual deadline.  MuQSS tries to improve upon
    BFS with faster next task lookup from O(log n) to O(k) and choose between
    improved latency (single queue runqueue) or throughput (multiqueue runqueue).
    MuQSS was End Of Life (EOL) with 5.12 series.

    BMQ has been renamed to Project C.  Project C merged both PDS and
    BMQ allowing to choose either scheduler.  C means cross.

    In layman terms, O(1) is faster than O(log n).  O(log n) is faster than
    O(n).

    The zen-kernel's MuQSS is a forward port of MuQSS fork is MuQSS with changes
    to interactivity.  These changes drops the round robin time for task
    switches from 6 to 4 and lowers the cpu percentage from 75% to 25%
    to run as real time in the isochronous process class when using zen
    interactive tunables.  To keep it like vanilla just disable zen interactive
    or patch without zen interactive.

    Multi-Gen LRU is a redesign of the current LRU design with
    more complex and accurate separation into multiple lists (aka generations)
    instead of the current LRU design of 2 which may be too coarse and result in
    inefficient reclamation.  The recommended tunings address mobile, cloud,
    desktop usage and should be customized or considered if not desktop which
    may differ from the defaults.

    The TRESOR patch provides increased mitigation from cold boot resistant
    attacks.  TRESOR is vulnerable to a DMA attack side-channel attack.  All
    older hardware that does not have IOMMU VT-d / AMD-Vi and not using it is
    vulnerable.  DMA attack is used to extract keys.  See
    https://en.wikipedia.org/wiki/List_of_IOMMU-supporting_hardware
    for a list of hardware supporting IOMMU.

    Compiler based optimizations are provided by GraySky2's
    kernel_compiler_patch.

    The O3 patch allows for O3 compiler optimiation is provided by the
    zen kernel.

    Older point releases are removed to eliminate some of the previously
    announced 0-day exploits.

    4.14.x kernel series is kept around for vanilla TRESOR.
    TRESOR for 5.x is experimental.  Only CBC mode is only recommended
    and should only be used.

    Using TRESOR with fscrypt is currently not supported.  The ebuild
    developer is currently working towards that goal.  Changing the key
    in the middle of writing may result in data loss, meaning half the
    data may be encrypted with two different keys.  The fscrypt version
    with TRESOR support will address this problem.

    Only Long Term Support (LTS) kernel and those marked stable
    in kernel.org are kept.  However, feature patchsets typically do not
    backport updates, so the latest stable should be used if you want updates
    or bugfixes for patchsets.  For reliable working builds, use the
    LTS series.

    Kernel series | Patchset | 			     | LTS [1,2]
    4.14 (LTS)						Y
		    -ck / MuQSS				N
		    -rt (RT_PREEMPT)			Y
		    genpatches				Y
		    kernel_compiler_patch 		N
		    O3 [6]				N
		    PDS					N
		    TRESOR (AES-NI) [3,4,6]		t
		    TRESOR (x86) [3,4,6]		t
		    TRESOR (x86-64) [3,6]		Y
		    UKSM [5]				N

    5.4	(LTS)						Y
		    -ck / MuQSS				N
		    -rt	(RT_PREEMPT)			Y
		    BMQ					N
		    futex (futex-wait-multiple) [6]	N
		    genpatches				Y
		    kernel_compiler_patch		N
		    TRESOR (AES-NI) [6]			t
		    TRESOR (x86) [6]			t
		    TRESOR (x86-64) [6]			Y
		    UKSM [5]				N
		    zen-muqss				N
		    zen-sauce				N

    5.10 (LTS)						Y
		    -ck / MuQSS				N
		    -rt	(RT_PREEMPT)			Y
		    BMQ					N
		    futex (futex-wait-multiple) [6]	N
		    genpatches				Y
		    kernel_compiler_patch		N
		    Project C				N
		    TCP BBR v2				N
		    TRESOR (AES-NI) [6]			t
		    TRESOR (x86) [6]			t
		    TRESOR (x86-64) [6]			Y
		    UKSM [5]				N
		    zen-muqss				N
		    zen-sauce				N

    5.15 (LTS)						Y
		    -rt	(RT_PREEMPT)			A
		    CFI					A
		    Clang PGO				E
		    futex (futex-wait-multiple)	[6]	E
		    futex2				E
		    kernel_compiler_patch		A
		    genpatches				A
		    multigen_lru			N
		    Project C				A
		    TCP BBR v2 [6]			E
		    TRESOR (AES-NI) [6]			D
		    TRESOR (x86) [6]			D
		    TRESOR (x86-64) [6]			D
		    UKSM [5]				Y
		    zen-multigen_lru			N
		    zen-sauce				N
						
    5.16 (Stable)					N
		    -rt	(RT_PREEMPT)			A
		    CFI					E
		    Clang PGO				E
		    genpatches				A
		    kernel_compiler_patch		A
		    multigen_lru			N
		    TCP BBR v2 [6]			E
		    TRESOR (AES-NI) [6]			D
		    TRESOR (x86) [6]			D
		    TRESOR (x86-64) [6]			D
		    zen-multigen_lru			N
		    zen-sauce				N

    5.17 (Mainline)					N
		    -rt	(RT_PREEMPT)			A
		    CFI					E
		    Clang PGO				E
		    genpatches				A
		    kernel_compiler_patch		A
		    multigen_lru			A
		    TCP BBR v2 [6]			E
		    TRESOR (AES-NI) [6]			D
		    TRESOR (x86) [6]			D
		    TRESOR (x86-64) [6]			D
		    zen-multigen_lru			A
		    zen-sauce				A

    [1] Kernel LTS provides security updates and bugfixes, but doesn't extend to
        third party patchsets
    [2] Third party patchset LTS has provided updates
    [3] only from the oiledmachine-overlay repo
    [4] without correctness verification, due to lack of hardware or
        configuration.  Correctness and build fixes extends only to device
        agnostic independent code.
    [5] updates usually only once, which may indicate bugs or lack of
        sufficient testing.  No versioning system between patch fixes.
    [6] backported or forwardported, but not intended for this series, but build
        time fixes are provided by the ebuild maintainer
    [7] backported or forwardported, but not intended for this series, but build
        time fixes are provided by others if it is a recent new kernel
        series.

    A - currently actively updatable
    D - USE flag should be disabled since there is no release for this minor
        version yet.
    N - under the Patchset LTS indicates that the patchset is EOL or likely
        EOL for that version which means that bug fixes and security updates
        will not be provided.  This indicates a feature freeze, but
        build time failures will be fixed by the ebuild maintainer.
    E - No upstream release for this major minor version but maintained by
        ebuild maintainer or third party
    I - inactive due to changing API, but future support depends on motivation
    S - upstream indicated support
    T - patch is undergoing testing
    t - only patch/building testing but without correctness verification
    ? - unknown status

    EOL (End Of Life) stable kernels get dropped next update cycle which is
    typically a week.  The virtual/ot-sources-stable ebuild-package
    should handle the transition gracefully.

    Use virtual/ot-sources-lts or virtual/ot-sources-stable to track and
    update releases instead of emerging sys-kernel/ot-sources directly.
    It's recommended to use the ot-sources-lts if you have binary only kernel
    modules.  For those without binary only modules, use ot-sources-stable
    package.


    
    Using the build USE flag (without PGO)

    The build USE flag can be used to build the kernel.  It comes with extra
    environment variables that can be placed in the per extraversion env file.

    The build USE flag was necessary to increase the security of the -rt patchset
    with a more customized limited config.

    It also speeds up deployment time to decrease the security update lag.

    The following steps need to be taken:

      0. Mount the boot partition
      1. Emerge with the build USE flag
      2. Run etc-update
      3. Build and install initramfs
      4. Update the bootloader
      5. Reboot



    The PGO (Profile Guided Optimization) progression diagram:

      start -&gt;  PGI -&gt; PGT -&gt; PGO -&gt; end

    (&gt; is the greater than symbol in HTML)

    PGI = Build as instrumented
    PGT = Train with actual typical use, or simulation script that replays or mimics typical use, or benchmarks
    PGO = Build as optimized



    Using the build USE flag with the pgo USE flag

    The following steps need to be taken:

      0. Mount the boot partition
      1. Emerge with the build and pgo USE flags
      2. Run etc-update
      3. Build and install initramfs
      4. Update the bootloader
      5. Reboot
      6. Train the kernel with the gen_pgo.sh script or your own simulation script
      7. Re-emerge the package with the build and pgo USE flag for an optimized build



    Resetting PGO

    The PGO progression state can be reset by deleting the
    /var/lib/ot-sources/${PV} folder or the .pgophase file.



    PGO state files:

    /var/lib/ot-sources/${PV}/${extraversion}-${arch}.pgophase -- The PGO
      phase progression state file that contains the current step.
      {PGI,PGT,PGO,DONE} are the states in the FSM.
    /var/lib/ot-sources/${PV}/${extraversion}-${arch}.profraw -- The profraw
      captured before conversion.
    /var/lib/ot-sources/${PV}/${extraversion}-${arch}.profdata -- The merged
      profdata PGO profile.  It is used when building an optimized build.



    LLVM versions supported for Clang PGO:

    * 15.0.0.9999 - with the latest commit
    * 14.0.0.9999 - with the latest commit
    * 14.0.0_rc1
    * 13.0.1
    * 13.0.0 
    * 12.0.1 
    * 11.1.0

    Versions that are not *exactly* the ones listed above are not supported.
    The PGO profraw format used is sensitive to point version changes and even
    in the live ebuilds, and it's the reason why exact versions are only
    supported up and including profraw version 8.



    Using gen_pgo.sh, aka the automated PGO trainer script

    It becomes tedious or too repetitive to manually train the kernel.
    This is why an automated trainer script gen_pgo.sh (also found in the modded
    genkernel) is provided to automatically train the kernel.  You can of course
    write your own automated script.  The script can be extended with
    pgo_custom.sh in the same directory or modded directly.  Using pgo_custom.sh
    is recommended to preserve changes between installs.  It should be ran only
    as a non-root user.  It also has additional package requirements listed in
    the pgo_trainer_* sections in the link below:

https://github.com/orsonteodoro/oiledmachine-overlay/blob/6de2332092a475bc2bc4f4aff350c36fce8f4c85/sys-kernel/genkernel/genkernel-4.2.6-r2.ebuild#L279


    The config file-directory structure

    The tree structure is as follows in abstract form:

         /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/env
         /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/patches

    K_MAJOR_MINOR will be expanded to either 4.14, 5.4, 5.10, 5.15, or 5.16.

    extraversion will be expanded to ot, rt, or a custom name.

    arch will expand to one of the folder names in the arches folder in
    /usr/src/linux/arch.

    Example:

         /etc/portage/ot-sources/5.16/ot/x86_64/env

    Files:

         /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/env
         Contains all environment variables for this buildconfig.  The
         per package extraversion and per package buildconfig are synonymous
         for this file.

    Directories (In planning):

         /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/patches
         Contains extra user patches to apply per buildconfig.



    An example env file located in /etc/portage/ot-sources/5.16/ot/x86_64/env:

CRYPTSETUP_CIPHERS="aes anubis camellia cast6 twofish serpent"
CRYPTSETUP_MODES="adiantum cbc ctr ofb xts"
OT_KERNEL_ARCH="x86_64"
OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS=1
OT_KERNEL_BOOT_DECOMPRESSOR="zstd"
OT_KERNEL_BUILD="1"
OT_KERNEL_CONFIG="/etc/kernels/kernel-config-5.16-ot-x86_64"
OT_KERNEL_CPU_SCHED="cfs"
OT_KERNEL_EXTRAVERSION="ot"
OT_KERNEL_FIRMWARE="regulatory"
OT_KERNEL_HARDENING_LEVEL="untrusted"
OT_KERNEL_LSMS="auto"
OT_KERNEL_MODULES_COMPRESSOR="zstd"
OT_KERNEL_MENUCONFIG_FRONTEND="menuconfig"
OT_KERNEL_PKGFLAGS_ACCEPT="05309e2 351365c"
OT_KERNEL_TARGET_TRIPLE="x86_64-pc-linux-gnu"
OT_KERNEL_WORK_PROFILE="workstation"
OT_KERNEL_ZSWAP_ALLOCATOR="z3fold"
OT_KERNEL_ZSWAP_COMPRESSOR="zstd"
OT_KERNEL_BOOT_ARGS="delayacct nohz_full=1-7"



    Environment variables overview:

    The purpose of some of these environment variables is to change primarily
    the default profile a little bit so that it skips the menuconfig step all
    together in the build before install with the build USE flag.



    Environment variables required:

      OT_KERNEL_ARCH
      OT_KERNEL_EXTRAVERSION


    
    Environment variables:

    DISABLE_DEBUG_EXCLUDES -- A space delimited list of kernel config symbols
    to ignore.



    OT_KERNEL_ADD_KEY_TO_MOK -- Auto adds the provided key to MOK if not found.



    OT_KERNEL_ARCH -- The native ABI of the kernel to build using one of the
    names of the folders in /usr/src/linux/arch.



    OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS -- Auto edit the kernel .config
    for installed packages.  What this means is that certain @world packages
    have additional kernel .config requirements and sometimes too complex
    or too long ago to remember to apply.  These missing or conflicting
    flags will be added or removed so that the @world package works properly.
    Acceptable values:  1 to enable, 0 to disable.  By default, it is
    disabled meaning that manual editing is required or preferred.  For
    some select security packages, this is environment variable is
    unconditionally ignored implying to always apply the kernel changes.



    OT_KERNEL_BLACKLIST_FIRMWARE_PATHS -- A space separated list of firmware
    relative paths to not include in CONFIG_EXTRA_FIRMWARE.



    OT_KERNEL_BOOT_ARGS -- Set and embed the kernel command line into the
    kernel instead of the bootloader.



    OT_KERNEL_BOOT_DECOMPRESSOR -- chooses the main boot decompressor for both
    kernel decompression and initramfs decompression.  If not chosen, it will
    choose either the previous manual setting, or if it is a new kernel config
    defaults which will choose gzip for the kernel and all decompressors for
    initramfs.  Acceptable values:  GZIP, BZIP2, LZ4, LZO, LZMA, XZ, ZSTD,
    default, manual,
    UNCOMPRESSED.  It is recommended to use lz4 or zstd.  However, if you are
    using x32 ABI bzip2 works but do not use lzma.  If empty, it will choose
    manual.  ZSTD is only allowed in 5.10+.



    OT_KERNEL_BUILD -- It be 0, 1, true, false, yes, no, nobuild, build, not
    set.  Most are aliases, but it means to build or not build the kernel.  If
    not set it will try to guestimate based on the build flag.



    OT_KERNEL_COLD_BOOT_MITIGATIONS -- changes the kernel config to mitigate
    against coldboot or DMA attacks.  By default, this is enabled in the
    ebuild.  Acceptable values:  0 for do not apply any mitigations,
    1 for level 1 mitigations, 2 for level 2 mitigations.

    - Level 1 mitigations are changes balance the convenience and the security.
    - Level 2 mitigations are changes that severely place security over
    convenience which may take away ability to use certain hardware or have
    severe performance degration.



    OT_KERNEL_CONFIG -- Points to the absolute path of the kernel config. (This
    can be not set but then defaults to
    /etc/kernels/kernel-config-${PV}-${extraversion}-$(uname -m))



    OT_KERNEL_CPU_SCHED -- can be one of the below depending on the kernel version.

		4.14: cfs, muqss, pds
		5.10: cfs, muqss, prjc, prjc-bmq, prjc-pds
		5.15: cfs, prjc, prjc-bmq, prjc-pds
		5.16: cfs, prjc, prjc-bmq, prjc-pds

		The reason why for this flexibility is to allow for multiple
		configurations that are not mutual exclusive, meaning you can
		use the rt kernel with cfs but still choose muqss for a
		gaming client kernel.

		This field can be not set which would default to using cfs.

		* cfs is preferred for server kernels and bug-less experience.
		* muqss and prjc are better suited for audio production.
		* The rt extraversion can only use the cfs scheduler.

		The default timeslices:

		bmq: 4 ms server/desktop, 2 ms with low latency desktop
		cfs: variable length
		muqss:  6 ms
		pds: 6 ms
		prjc-bmq: 4 ms
		prjc-pds: 4 ms
		zen-muqss: 4 ms with zen interactive, 6 ms without zen interactive

		Some of these timeslice values be adjustable.



    OT_KERNEL_EXTRAVERSION -- initials or name of the kernel.  Using the rt
    extraversion will apply the rt patchset to only that copy.



    OT_KERNEL_EXTERNAL_MODULES -- prepares the kernel for out-of-tree
    modules.  The kernel needs to expose these for packages that build
    kernel drivers outside this package.
    Acceptable values:  1, unset.  Unset means auto detect.



    OT_KERNEL_FIRMWARE -- a space separated list of keywords matching the
    firmware relative to inside /lib/firmware.  Wildcards (denoted by "*") are
    accepted as well as relative paths.  Wildcards are implied before and after
    the pattern.  These patterns are case sensitive meaning there is a
    difference between model and MODEL.  There is a possibility of driver
    writers adding and removing files without notice which is why simple
    keyword matching containing the model name and number without adding
    specific ICs details is recommended.  Keeping this value not set is the
    same as manually editing or reusing the previous value in the .config
    file.  Using this environment variable has advantages of auto adding
    and auto removing firmware references.

    The X in the environment variable name corresponds to the kernel *arch*
    in buildconfigs that is uppercase.  The kernel arch is not exactly the
    same as the distro arch.

    The Y in the environment variable name corresponds to the extraversion
    in buildconfigs that is uppercase.  Both the X and Y values make it
    possible to not apply firmware to virtual machine guest kernels or for
    specific to cross compile kernels.  Any hyphen (-) should be replaced
    with the underscore character (_).

    The following are recognized patterns:
	1. Add by wildcard.  model*.bin model* dir* d*r
	2. Add by literal.  model model123.bin dir/model dir1/dir2/model.bin

    When you use OT_KERNEL_FIRMWARE envvar, it is implied it will wipe the
    previous setting.



    OT_KERNEL_FORCE_APPLY_DISABLE_DEBUG -- force the applying disable debug
    globally to remove config symbols containing the following keywords:

      DEBUG, TRACE, VERBOSE, LOG, PRINT

    Acceptable values:  1 to apply disable_debug, 0 to halt if there is a
    conflict between a kernel flag set and disable_debug.



    OT_KERNEL_HARDENING_LEVEL -- sets the hardening level based on the level
    of trust.  In these ebuilds and eclasses, both CFI and ShadowCallStack (SCS)
    are determined by the hardening level.  In other words, if a user chooses to
    use the trust level, CFI or SCS would be disabled.
    Acceptable values:  trust, untrusted, untrusted-distant, custom, manual, unset.
    Meanings:
    custom - customize hardening.  (same as manual and unset)
    trusted - no hardening applied.  Used for single user presentation,
         LAN tournaments, pure performance like in house renderfarm setups.
    untrusted - full hardening.  Used for multiuser computer not in locked room
         such as on the road or traveling. 
    untrusted-distant - some hardening except physical access mitigation.
         Used for multiuser computer in locked room or www setups.



    OT_KERNEL_HAVE_CRYPTO_DEV_AES
    OT_KERNEL_HAVE_CRYPTO_DEV_ANUBIS
    OT_KERNEL_HAVE_CRYPTO_DEV_BLAKE2B
    OT_KERNEL_HAVE_CRYPTO_DEV_BLAKE2S
    OT_KERNEL_HAVE_CRYPTO_DEV_CAMELLIA
    OT_KERNEL_HAVE_CRYPTO_DEV_CAST6
    OT_KERNEL_HAVE_CRYPTO_DEV_CHACHA20
    OT_KERNEL_HAVE_CRYPTO_DEV_CRC32
    OT_KERNEL_HAVE_CRYPTO_DEV_CRC32C
    OT_KERNEL_HAVE_CRYPTO_DEV_CURVE25519
    OT_KERNEL_HAVE_CRYPTO_DEV_DES
    OT_KERNEL_HAVE_CRYPTO_DEV_DES3_EDE
    OT_KERNEL_HAVE_CRYPTO_DEV_GCM
    OT_KERNEL_HAVE_CRYPTO_DEV_MD5
    OT_KERNEL_HAVE_CRYPTO_DEV_NHPOLY1305
    OT_KERNEL_HAVE_CRYPTO_DEV_POLY1305
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA1
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA256
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA512
    OT_KERNEL_HAVE_CRYPTO_DEV_SERPENT
    OT_KERNEL_HAVE_CRYPTO_DEV_TWOFISH
    Acceptable values:  1 for have, 0 do not have (optional), unset.  Unset is
    equivalent to 0.
    These will skip adding additional CPU optimized ciphers or hash algorithms
    in preference for the hardware accelerated crypto device implementation.
    While setting this flag, you still need to manually configure the kernel
    config to use the accelerated crypto device.  These should be set to 1
    if the accelerated crypto device supports the algorithm.  If not present,
    it will fall back to the CPU optimized or the generic non-optimized
    algorithm.



    OT_KERNEL_LSMS -- Enable and set the order for LSM (Linux Security Modules)

    Acceptable multi values: apparmor, bpf, integrity, landlock, loadpin,
    lockdown safesetid, selinux, smack, tomoyo, yama.

    Acceptable general values:  auto, default, manual
      auto -- adds LSMs based on packages installed with default subsettings
      default -- Uses "integrity,selinux,bpf" with default subsettings
        equivalent to upstream defaults
      manual -- Uses previously manually set settings

    The "acceptable multi values" and "acceptable general values" are mutually
    exclusive.  In acceptable multi values listing, the LSMs needs to be comma
    separated and mutiple LSMs can be used.  In acceptable general values
    only one value can be used which are associated with a precreated
    listing.

    For a newly generated kernel .config with not set OT_KERNEL_LSMS, it will
    apply auto setting.  For previous installs with OT_KERNEL_LSMS is not set,
    it will apply manual.



    OT_KERNEL_MODULES_COMPRESSOR (optional) -- compresses the kernel
    modules.
    Acceptable values:  NONE, GZIP, XZ, ZSTD.  If not set, it will use the
    manual setting.
    NONE and ZSTD are only allowed with 5.15+.  When a new kernel config
    is generated, module compression is disabled; but can be overrided
    by explicitly setting it to one of the acceptable values.



    OT_KERNEL_PKGFLAGS_ACCEPT -- is a list of auto apply-able kernel
    config symbols to accept per package-wise.  They should be listed as
    space separated.



    OT_KERNEL_PKGFLAGS_REJECT -- is a list of auto apply-able kernel config
    symbols to reject.  These sets of flags are identified (id) with a 7 digit
    hash code and used to either skip the config and apply the config
    manually or permit a disable_debug conflict to priorize disable_debug
    removal of debug keyworded kernel config symbols. They should be listed as
    space separated.



    OT_KERNEL_PRIMARY_EXTRAVERSION (optional) -- sets the primary extraversion
    for the symlink USE flag.  If not set, it defaults to ot.



    OT_KERNEL_PRIMARY_EXTRAVERSION_WITH_TRESOR (optional) -- sets the primary
    extraversion for tresor_sysfs USE flag.  If not set, it defaults to ot.



    OT_KERNEL_PRIVATE_KEY -- The absolute path to a .pem private key file
    used for module signing.  This should only be set in the command line
    not saved in any make.conf, any per package configuration file, any
    env.  When done the variable should be overritten a new string and
    then not set.

         Example:

# Scramble path if possible: \
OT_KERNEL_PRIVATE_KEY=$(dd if=/dev/urandom of=/dev/stdout bs=255 count=1 \
	status=none \
	| base64 | tr "\n" " " | sed -e "s| ||g")

# Remove the variable from memory: \
unset OT_KERNEL_PRIVATE_KEY



    OT_KERNEL_PROCESSOR_CLASS -- sets the type of cpu class for used in this
    kernel.  This will precisely will reduce the amount of latency.  Otherwise,
    it will increase it.
    Acceptable values:  uniprocessor, unicore, multicore, smp, smp-unicore,
    smp-legacy, multicore, numa-multicore, numa-unicore, custom, manual, unset



    OT_KERNEL_SIGN_MODULES (optional) -- signs kernel modules with sha384
    or sha512.
    Acceptable values:  sha384, sha512, unset, 1, 0, manual.
    If setting to 1, it will use sha384.  Setting to unset will assume manual.
    Setting to 0 will disable module signing and disable module sign
    verification.

    When a new kernel config is generated, module signing is disabled; but it
    can be signed by setting this to 1.  If module signing is enabled,
    it is recommended to sign external modules or these modules may no
    longer work.  External module signing is especially important especially
    for kernel graphics modules if module signing is enabled.  It is not
    forced default on to prevent any unprepared disruption.  See
    OT_KERNEL_PRIVATE_KEY section also.

         IMPORTANT:

         When OT_KERNEL_SIGN_MODULES is enabled, if the OT_KERNEL_PRIVATE_KEY
         and OT_KERNEL_SHARED_KEY are not specified, the kernel will
         autogenerate keys in the certs folder of the kernel sources.  These
         keys will be installed but the private key should be copied to a
         secure place such a encrypted store contained in a keychain or by
         steganography; and then the installed private key .pem file in the
         certs folder should be cryptographically securely destroyed with shred
         (or any secure delete program).  This is to prevent recovery and reuse
         of the private key by an untrusted user.  The private key temporarily
         stored in the certs folder should be destroyed in within 24 hours.
         Each build configuration with have a unique private-shared keys if
         using autogenerated, so all keys need to be stored and properly labeled
         to prevent mixup.



    OT_KERNEL_SIGN_KERNEL (WIP) -- Cryptographically sign the kernel for the
    type of system and install the kernel to the EFI partition if possible.
    Acceptable values: uefi, efi, kexec, none, not set.



    OT_KERNEL_SHARED_KEY -- The absolute path to a .x509 shared key file
    used for module signing.



    OT_KERNEL_SWAP -- Enable or disable use of swap.
    Acceptable values:  0, 1, y, n, manual, unset
    0 means disable and 1 means enable.  Unset is the same as manual.  It is
    recommended to use swap if the peak memory exceeds the RAM.  Otherwise,
    it should be disabled.  Peak memory is usually around 12 GB.



    OT_KERNEL_TARGET_TRIPLE -- The target triple (CHOST) to use when
    cross-compiling.  Use the expanded CHOST value.  (This can be not set but
    then defaults to ${CHOST}.)  If you put just CHOST or just CBUILD it will
    expand for each case.



    OT_KERNEL_USB_AUTOSUSPEND -- Set to -1 to disable, or set to a whole number
    to set the delay.  Some OT_KERNEL_WORK_PROFILE will automatically set it
    to -1 for gaming or digital-audio-workstations work profiles.
    


    OT_KERNEL_USE -- Per build env USE flags.  If not set, it will use the same
    USE flags set.  The scope of OT_KERNEL_USE is partially in src_prepare,
    src_configure, src_compile, partially in src_install.  The normal USE flags
    are valid in global scope, fetching and unpacking, and in the remaining
    phases.  This per build env gives more control over some patches applied and
    configuration.



    OT_KERNEL_USE_LSM_UPSTREAM_ORDER -- Use the upstream init order
    for LSM modules.
    Accepted values: 1 to use upstream order, 0 to use custom order.
    The custom order (0) can optionally apply to "acceptable multi values"
    configation and auto in acceptable general values.



    OT_KERNEL_VERBOSITY=N (optional) -- presentation of compiler and build
    invocation.
    Acceptable values for N:  0 for minimal output, 1 for showing compiler
    flags, 2 for reasons for rebuild.



    OT_KERNEL_WORK_PROFILE -- sets the power-performance profile while taking
    in consideration productivity and latency requirements.  This value can
    be unset which is equivalent to manual.
    Acceptable values:

      arcade
      cryptocurrency-miner-dedicated
      cryptocurrency-miner-workstation
      casual-gaming-laptop
      custom
      digital-audio-workstation
      distributed-computing-dedicated
      distributed-computing-workstation
      pro-gaming
      casual-gaming
      file-server
      gamedev
      gpu-gaming-laptop
      jukebox
      lan-tournament
      laptop
      mainstream-desktop
      manual
      media-player
      multimedia-server
      presentation
      remote-tournament
      renderfarm-dedicated
      renderfarm-workstation
      smartphone
      streamer-desktop
      solar-desktop
      solar-gaming
      tablet
      video-smartphone
      video-tablet
      web-server
      workstation



    OT_KERNEL_ZSWAP_ALLOCATOR -- chooses the swap allocator which tries to fit
    the number of compressed pages while aiming to reduce fragmentation.
    Acceptable values: zsmalloc, zbud, z3fold, x1, x2, x3, unset, manual, auto
    If unset, it assumes manual.  x1 is an alias for zsmalloc; x2 is a alias
    for zbud; x3 is an alias for z3fold.  auto is an alias for zbud.  It is
    recommended to use x3 for less than 12 GB of RAM.  For 12 GB and above, it
    should be unset.  The 12 GB is arbitrary and based on worst case peak
    memory.



    OT_KERNEL_ZSWAP_COMPRESSOR -- chooses a swap page algorithm
    Acceptable values: deflate, lzo, 842, lz4, lz4hc, zstd, unset, manual, auto
    If unset, it assumes manual.  auto is an alias for lzo.  It is recommended
    to use lz4 or zstd (or any algorithm that can achieve 2:1 compression
    ratio) for less than 12 GB of ram.  For 12 GB and above, it should be unset.
    The 12 GB is arbitrary and based on worst case peak memory.



    Kernel pkgflags environment variables:

    The pkgflags come mostly from the ebuilds' themselves.  The current
    trend is to decentralize these settings and have users to manually
    edit the kernel.  This ebuild package will do the opposite by
    centralizing these settings for purposes of a semi autoconfigured
    kernel.

    By default kernel pkgflags module is not enabled.  To enable it, set
    OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS=1 in the per buildconfig env
    file (ex. /etc/portage/ot-sources/4.16/ot/x86_64/env).

    One may reject or accept kernel settings by setting
    OT_KERNEL_PKGFLAGS_ACCEPT or OT_KERNEL_PKGFLAGS_REJECT with a space
    separated 7 digit id.  One may use the reject to manually apply
    settings for that package.

         Examples:

              OT_KERNEL_PKGFLAGS_REJECT="1ee4e36"
              OT_KERNEL_PKGFLAGS_REJECT="1ee4e36 155d9fc"
              OT_KERNEL_PKGFLAGS_REJECT="1ee4e36 155d9fc 27ea6ce"

    Most variables below have values 0 for off and 1 for on.  Not set implies
    the eclass defaults.



    Pkgflags environment variables

    These should be specified in the per buildconfig env file.  These
    environment variables are only valid if the package is installed.
    0 means off and 1 means on.

    ALSA_PC_SPEAKER - Use the ALSA speaker driver for PC speaker.
    Valid values 0 (default), 1.

    CRYPTSETUP_CIPHERS - Space separated list block ciphers.
    Valid values:  aes, anubis, camellia, cast6, serpent, twofish.  If
    unset, it adds aes.

    CRYPTSETUP_INTEGRITIES - Space separated of AEAD ciphers used for
    additional encryption with data integrity.  Only for LUKS2.
    Valid values:  aead, poly1305, hmac-sha256, hmac-sha512.  Unset by
    default.  See
https://gitlab.com/cryptsetup/cryptsetup/-/blob/main/docs/v2.0.0-ReleaseNotes
    for limited set of settings allowed and weaknesses.  See
https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/dm-integrity.html
    for info and consequences if integrity is compromised or data corruption
    is encountered.

    CRYPTSETUP_IVS - Space separated list for IV generation.
    Valid values:  essiv, random, plain64.  If unset, it adds essiv, plain64.

    CRYPTSETUP_MODES - Space separated list for cipher modes of operation.
    Valid values:  adiantum, cbc, cfb, ctr, cts, ofb, xts.  If unset, it adds
    adiantum, cbc, xts.

    CRYPTSETUP_HASHES - Space separated list for password pseudorandomness.
    Valid values:  blake2b, blake2s, rmd160, sha256, sha512, sha3, sm3, wp512.
    If unset, it adds rmd160, sha256.

    CRYPTSETUP_TCRYPT - Add support for tcrypt.
    Valid values 0, 1 (default).

    HPLIP_PARPORT - Add support for the parallel port.
    Valid values 0 (default), 1.

    HPLIP_USB - Add support for USB.
    Valid values 0, 1 (default).

    IPTABLES_CLIENT - Add support for iptables client.
    Valid values 0, 1 (default).

    IPTABLES_ROUTER - Add support for iptables router.
    Valid values 0 (default), 1.

    MDADM_RAID - Add support for software RAID.
    Valid values 0, 1 (default).

    NFS_CLIENT - Add support for nfs client.
    Valid values 0, 1 (default).

    NFS_SERVER - Add support for nfs server.
    Valid values 0, 1 (default).

    OSS - Force add support for OSS sound.
    Valid values 0 (default), 1.

    OSS_MIDI - Force add support for OSS MIDI.
    Valid values 0 (default), 1.

    SANE_SCSI - Add support for SCSI scanners.
    Valid values 0 (default), 1.

    SANE_USB - Add support for USB scanners.
    Valid values 0, 1 (default).

    STD_PC_SPEAKER - Add support for the PC speaker with the standard PC speaker
    driver.  Valid values 0, 1 (default).

    QEMU_GUEST_LINUX - Add support for a QEMU Linux guests.
    Valid values 0, 1 (default).

    VIRTUALBOX_GUEST_LINUX - Add support for VirtualBox Linux guests.
    Valid values 0, 1 (default).

    VSYSCALL_MODE - Select vsyscall mode.
    Valid values:  full, emulate (default).

    XEN_PCI_PASSTHROUGH - Add support for PCI passthrough.
    Valid values 0 (default), 1.



    disable_debug environment variables:

    PERMIT_NETFILTER_SYMBOL_REMOVAL -- Remove extra symbols containing names
    with those keywords.  Note, some of these symbols may be beneficial to
    netfilter and not be related to debugging.  By default, this is disabled.
    Acceptable values:  1 to remove symbols, 0 to not remove symbols.



    Environment variables for genpatches:
    
    GENPATCHES_BLACKLIST -- a space separated list of genpatches to ban.
    See the genpatches website for the number to patch correspondance.

         Examples:

              GENPATCHES_BLACKLIST="2500"
              GENPATCHES_BLACKLIST="2500 2600"



    Environment variables for zen-sauce:

    ZENSAUCE_BLACKLIST -- a space separated list of zen-sauce commit ids to ban.
    ZENSAUCE_WHITELIST -- a space separated list of zen-sauce commit ids to apply.

    Both 7 and 40 digit commit IDs are accepted.

         Examples:

              ZENSAUCE_BLACKLIST="19be35c 1baa02f"
              ZENSAUCE_BLACKLIST="1baa02fbd7a419fdd0e484ba31ba82c90c7036cf ef12d902c1323bbbeacc3babc91aae15976474ca 56f6f4315aedbbcbef8ad61f187347c20a270e49"
              ZENSAUCE_WHITELIST="4b03a1c 613d2ac"

    For a full list of commits, see the commit history.

    For 4.19, see:
    https://github.com/torvalds/linux/compare/v4.19...zen-kernel:4.19/misc

    For 5.4, see:
    https://github.com/torvalds/linux/compare/v5.4...zen-kernel:5.4/zen-sauce

    For 5.10, see:
    https://github.com/torvalds/linux/compare/v5.10...zen-kernel:5.10/zen-sauce

    For 5.15, see:
    https://github.com/torvalds/linux/compare/v5.15...zen-kernel:5.15/zen-sauce

    For 5.16, see:
    https://github.com/torvalds/linux/compare/v5.16...zen-kernel:5.16/zen-sauce

    For 5.17, see:
    https://github.com/torvalds/linux/compare/v5.17...zen-kernel:5.17/zen-sauce

    Use the O3, zen-sauce, kernel-compiler-patch USE flags instead of passing their
    Zen commit IDs equivalents.



    Environment variables for the cve_hotfix USE flag.

    Several global env vars can be used to control this flag that
    you set in your per extraversion env file:

    CVE_ALLOW_CRASH_PREVENTION - is set to 1 to accept (default), 0 to reject
         if to apply commits that prevent crashes, memory leaks, overflows, and
         also adds data validations checks surrounding a fix for a CVE.
    CVE_ALLOW_RISKY_BACKPORTS - is set to 0 (default) to not apply, 1 to apply
         risky backport.  Risky backports are untested and may lead to data loss
         or data corruption, non functioning driver/device, or irreversible
         damage.
    CVE_ALLOW_UNTAGGED_PATCHES - is set to 0 to not accept, 1 to accept
         (default).  This is used to inspect patches or commits for viable
         official fix from kernel.org or github.com/torvals if a url is not
         marked Patch or Vendor Advisory.
    CVE_BLACKLIST_FIXES - is a string of CVE ids to reject fixes indended if
         runtime or compile time failure occurs.
    CVE_DELAY - is set to 1 (default) to enable or 0 to disable the 30 second
         delay per entry in the report.
    CVE_FIX_REJECT_DISPUTED - is set to 0 to not reject (default), 1 to reject
         to applying a CVE fix marked as disputed.
    CVE_FIX_TRUST_LEVEL - an "inclusive or" bit mask that controls classes of 
         cve hotfixes to accept.  See ot-kernel-cve.eclass for acceptable
         values.  You will need to use the hex value equivalent since these
         identifier constants are not initialized in the
         env file.
    CVE_LANG - Report language (default:  en)
    CVE_MAX_BULK_CONNECTIONS - maximum large downloads at a time, 5 is default
    CVE_MAX_PATCH_CONNECTIONS - maximum patch downloads at a time, 100 is
         default
    CVE_MIN_YEAR - starting patching-download-drytest year, default is 1999.

    See the ot-kernel-cve eclass for details.

         Examples:

              CVE_FIX_TRUST_LEVEL=0x00050000 # Same as 0x00010000 | 0x00040000
              CVE_BLACKLIST_FIXES="CVE-2019-14814 CVE-2019-14895"
              CVE_DELAY=0
              CVE_ALLOW_RISKY_BACKPORTS=1


    Please read the metadata.xml comments for more info.
  </longdescription>
  <upstream>
    <!-- for this ebuild, eclasses, cve_hotfix, disable_debug, tresor_x86_64,
         tresor_x86_64-256-bit-key-support -->
    <bugs-to>
      https://github.com/orsonteodoro/oiledmachine-overlay/issues
    </bugs-to>

    <!-- for TCP BBR v2 support and documentation, see
https://github.com/google/bbr
    -->

    <maintainer status="active" type="person">
      <!-- for BMQ, PDS, Project C -->
      <email>cchalpha@gmail.com</email>
      <name>Alfred Chen</name>
    </maintainer>

    <!-- for CFI maintainers, see
https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/tree/MAINTAINERS?h=for-next/clang/pgo&id=3bc68891829b776b9a5dd9174de05e69138af7b6#n4439
    -->

    <maintainer status="active" type="project">
      <!-- for genpatches -->
      <email>kernel@gentoo.org</email>
      <name>Gentoo Kernel Project</name>
    </maintainer>

    <!-- for futex (FUTEX_WAIT_MULTIPLE), futex2, see
https://gitlab.collabora.com/tonyk/linux/-/commits/futex-proton-v3
https://gitlab.collabora.com/tonyk/linux/-/commits/futex2
https://gitlab.collabora.com/tonyk/linux/-/commits/futex2-proton
    -->

    <maintainer status="active" type="person">
      <!-- for kernel_compiler_patches -->
      <email>graysky AT archlinux DOT us</email>
      <name>graysky</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for the Linux kernel -->
      <name>Linus Torvalds</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for MuQSS -->
      <email>kernel at kolivas dot org</email>
      <name>Con Kolivas</name>
    </maintainer>

    <!-- for PGO maintainers, see
https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/tree/MAINTAINERS?h=for-next/clang/pgo&id=3bc68891829b776b9a5dd9174de05e69138af7b6#n14390
    -->

    <!-- for -rt -->
    <bugs-to>
      https://wiki.linuxfoundation.org/realtime/communication/bugreport
    </bugs-to>
    <doc lang="en">
      https://wiki.linuxfoundation.org/realtime/documentation/start
    </doc>

    <!-- for UKSM, see
https://github.com/dolohow/uksm
    -->

    <maintainer status="active" type="person">
      <!-- for TRESOR AES-NI and i386, 2010 -->
      <email>tilo.mueller@informatik.uni-erlangen.de</email>
      <name>Tilo Mueller</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for TRESOR (aes-128) i386, 2012 -->
      <email>johannes@jgoetzfried.de</email>
      <name>Johannes Goetzfried</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for the zen patchset -->
      <email>jan.steffens@gmail.com</email>
      <name>Jan Alexander Steffens</name>
      <!-- aka heftig -->
    </maintainer>
  </upstream>
  <use>
    <flag name="bbrv2">Patches the kernel with BBRv2 TCP congestion control for
      improved goodput, which is the actual useful data over time alone, than
      its predecessor with around less than 5 percent retransmission comparable
      to Cubic but trading off ~5-10 MBps raw throughput, which includes data
      retransmissions and overhead.</flag>
    <flag name="bfq-mq">Update the BFQ IO scheduler from single queue to
      multi-queue in 4.14.x series only.  The multi-queue design was utilized
      in later kernels.  Updating may present IO related problems, or have
      hidden unfixed bugs</flag>
    <flag name="bmq">Patches the kernel to use BMQ CPU scheduler, a more
      simple scheduler.</flag>
    <flag name="bmq-quick-fix">Patches the kernel with fixes to BMQ.</flag>
    <flag name="cfi">Ensures that the toolchain is ready for CFI support
      (for arm64 in production, and for x86_64 in development).  Control
      Flow Integrity (CFI) is mitigation against forward edge attacks and
      backward edge attacks (through the shadowcallstack USE flag) to
      mitigate against arbitrary code execution.</flag>
    <flag name="cfs">Uses the CFS (Completely Fair Scheduling) CPU scheduler
      and not apply any third-party CPU scheduler.</flag>
    <flag name="clang">This is a stronger check for those prefer Clang over
      GCC and to make sure the prerequisites are met. </flag>
    <flag name="clang-pgo">Adds experimental Clang PGO support.</flag>
    <flag name="cve_hotfix">Applies patches to resolve CVEs (Common 
      Vulnerabilities and Exposures).  Not enabled by default.

      Currently, not all patch fixes under code review, custom kernel vendors
      from mobile hardware manufacturers, or major distro advisories,
      get applied.

      Newer CVE fixes should be automatically added and applied per emerge.

      It uses an external script from https://github.com/orsonteodoro/tuxparoni

      This USE flag is experimental.
      </flag>
    <flag name="disable_debug">Installs scripts to disable debugging, tracing,
      verbose output or related code paths.</flag>
    <flag name="genpatches">Applies the genkernel patch set.</flag>
    <flag name="genpatches_1510">Applies the genkernel patch 1510 for
      protected hardlinks and symlinks during early boot.  Disabled because it
      may cause indefinte lock up during OOM (or very high memory use) or
      cause failures in different software during runtime.  Enabling it reverts
https://github.com/torvalds/linux/commit/561ec64ae67ef25cac8d72bb9c4bfc955edfd415
    </flag>
    <flag name="futex">Patches the kernel with FUTEX_WAIT_MULTIPLE futex syscall
      option which may be used in the proton, proton-wine, experimental-wine
      version 5 or above packages.  It may reduce CPU usage by less than
      5%.</flag>
    <flag name="futex2">Patches the kernel with older futex2 syscall
      specification.  This may reduce the CPU usage by less than 5%.  It is
      recommended to combine this USE flag with the futex2-proton USE flag as
      well since no known software uses the syscall's original data
      structures.</flag>
    <flag name="futex2-proton">Modifies the syscall data structures to be
      compatible with experimental-wine version 5.13 or above.  This will
      break compatibility.</flag>
    <flag name="kernel-compiler-patch">Patches the kernel for more CPU
      microarchitectures.  If using cross-compiling or distcc, do not use the
      native option but the microarchitecture kernel config option instead.
      </flag>
    <flag name="kernel-compiler-patch-cortex-a72">Patches the kernel for the
      Cortex A72 used in the Raspberry Pi 4.</flag>
    <flag name="kernel-compiler-patch-zen3">Patches the kernel for the Zen 3
      microarchitecture and ensures the toolchain requirements are in
      place.</flag>
    <flag name="kernel-compiler-patch-cooper_lake">Patches the kernel for the
      Cooper Lake microarchitecture and ensures the toolchain requirements are
      in place.</flag>
    <flag name="kernel-compiler-patch-tiger_lake">Patches the kernel for the
      Tiger Lake microarchitecture and ensures the toolchain requirements are
      in place.</flag>
    <flag name="kernel-compiler-patch-sapphire_rapids">Patches the kernel for the
      Sapphire Rapids microarchitecture and ensures the toolchain requirements
      are in place.</flag>
    <flag name="kernel-compiler-patch-rocket_lake">Patches the kernel for the
      Rocket Lake microarchitecture and ensures the toolchain requirements
      are in place.</flag>
    <flag name="kernel-compiler-patch-alder_lake">Patches the kernel for the
      Alder Lake microarchitecture and ensures the toolchain requirements
      are in place.</flag>
    <flag name="lto">Fulfills the ThinLTO requirements.</flag>
    <flag name="multigen_lru">Applies the vanilla Multi-Gen LRU patch for
      improved page reclamation.</flag>
    <flag name="muqss">Patches the kernel with Con Kolivas patchset and
      includes his skiplist based MuQSS CPU scheduler.</flag>
    <flag name="O3">Patches the kernel with more experimental O3
      compiler optimizations and adds them to the zen-sauce white list.</flag>
    <flag name="pds">Patches the kernel with an alternative skiplist
      based scheduler.</flag>
    <flag name="prjc">Applies the Project C CPU scheduler.</flag>
    <flag name="rt">Patches the kernel with the PREEMPT_RT patch which tries
      to minimize non-preemptible parts of the kernel.  It's experimental when
      combined with other USE flags and patchsets.  Realtime
      is not recommended for desktop use but for dedicated and isolated
      setups.  Never give untrusted apps realtime access.  The rt patchset
      is used by music producers that require low latency audio.</flag>
    <flag name="shadowcallstack">Ensures that shadow call stack dependencies
      are installed.  Protects from ROP back edge attacks from arbitary
      code execution.</flag>
    <flag name="symlink">Updates the the /usr/src/linux symlink for every
      newer release.</flag>
    <flag name="tresor">Controls application of TRESOR, a cold boot resistant
      AES cipher.  AES keys are stored in registers instead of RAM.  It only
      supports one device at a time but supports 128-, 192-, 256- bit keys.
      </flag>
    <flag name="tresor_aesni">Patches the kernel with cold boot resistant
      AES hardware accelerated AES-NI support.</flag>
    <flag name="tresor_i686">Patches the kernel with cold boot resistant
      AES using SSE for 32 bit systems.</flag>
    <flag name="tresor_prompt">Enables the TRESOR prompt in the kernel
      config.</flag>
    <flag name="tresor_sysfs">Builds the external key setting program.</flag>
    <flag name="tresor_x86_64">Patches the kernel with cold boot
      resistant AES using SSE for 64 bit systems.</flag>
    <flag name="tresor_x86_64-256-bit-key-support">Adds 192- and 256-bit
      AES key support to the 64-bit sse2 version of TRESOR.</flag>
    <flag name="uksm">Patches the kernel with the Ultra Kernel Samepage
      Merging, a type of memory page deduper algorithm.

      Using it may be insecure.  For details, see
      https://en.wikipedia.org/wiki/Kernel_same-page_merging#Security_risks</flag>
    <flag name="zen-multigen_lru">Enables and sets default time interval between
      0.1 to 1 second [based on the timer frequency selected] for preventing
      certain working sets from being OOM-killed via the zen-kernel patchset.
      The vanilla Multi-Gen LRU patch does not enable time based OOM-kill
      prevention by default.  For 5.15, it adds the le9ec patch for size based
      thrash prevention and livelock prevention when clean pages are
      exausted.</flag>
    <flag name="zen-muqss">Apply the zen-kernel's version of MuQSS</flag>
    <flag name="zen-sauce">Patches the kernel with selected Zen kernel.
      The zen-sauce set contains patches that add drivers or functionality
      related to gaming, laptops, optimizations, etc.
     </flag>
    <flag name="zen-sauce-all">Blanket whitelist all zen-sauce commits</flag>
    <flag name="zen-tune">Patches the kernel with some Zen Interactive
      Tuning, particularly those marked INTERACTIVE.
    </flag>
  </use>
</pkgmetadata>
