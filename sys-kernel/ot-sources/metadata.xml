<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <longdescription>
    ot-sources is a customizable patchset compilation package that applies
    patches for performance, encryption, and security to the Linux kernel.

    The package prefers to unbundle patchsets, in preference for the
    version of the feature that was released directly from original author,
    but sometimes prefers the bundled repackaged version for the major.minor
    series especially if they are difficult to maintain between major.minor
    series.

    Power users can choose either the BMQ, PDS, MuQSS CPU schedulers.  These
    schedulers focus on normal non-realtime tasks.

    Multi-Gen LRU is a redesign of the current LRU design with
    more complex and accurate separation into multiple lists (aka generations)
    instead of the current LRU design of 2 which may be too coarse and result in
    inefficient reclamation.  The recommended tunings address mobile, cloud,
    desktop usage and should be customized or considered if not desktop which
    may differ from the defaults.

    The TRESOR patch provides increased mitigation from cold boot resistant
    attacks.  TRESOR is vulnerable to a DMA attack side-channel attack.  All
    older hardware that does not have IOMMU VT-d / Vi and not using it is
    vulnerable.  DMA attack is used to extract keys.  See
    https://en.wikipedia.org/wiki/List_of_IOMMU-supporting_hardware
    for a list of hardware supporting IOMMU.

    Compiler based optimizations are provided by GraySky2's
    kernel_compiler_patch.  If you would like to apply this patch, simply add
    -march=native or -march=SUBARCH or -mcpu=SUBARCH.  If using cross-compiling
    or distcc, do not use the native option but the microarchitecture kernel
    config option instead.

    The O3 patch allows for O3 compiler optimiation is provided by the
    zen kernel.  Using it requires adding CFLAGS="${CFLAGS} -O3"
    equivalent to per-package USE flags.

    Older point releases are removed to eliminate some of the previously
    announced 0-day exploits.

    4.14.x kernel series is kept around for vanilla TRESOR.
    TRESOR for 5.x is experimental.  Only CBC mode is only recommended
    and should only be used.

    Using TRESOR with fscrypt is currently not supported.  The ebuild
    developer is currently working towards that goal.  Changing the key
    in the middle of writing may result in data loss, meaning half the
    data may be encrypted with two different keys.  The fscrypt version
    with TRESOR support will address this problem.

    Only Long Term Support (LTS) kernel and those marked stable
    in kernel.org are kept.  However, feature patchsets typically do not
    backport updates, so the latest stable should be used if you want updates
    or bugfixes for patchsets.  For reliable working builds, use the
    LTS series.

    Kernel series | Patchset | 			     | LTS [1,2]
    4.14 (LTS)						Y
		    -ck / MuQSS				N
		    -rt (RT_PREEMPT)			Y
		    genpatches				Y
		    kernel_compiler_patch 		N
		    O3 [5]				N
		    PDS					N
		    TRESOR (AES-NI) [3,4,5]		t
		    TRESOR (x86) [3,4,5]		t
		    TRESOR (x86-64) [3,5]		Y
		    UKSM				R

    5.4	(LTS)						Y
		    -ck / MuQSS				N
		    -rt	(RT_PREEMPT)			Y
		    BMQ					N
		    futex (futex-wait-multiple) [5]	N
		    genpatches				Y
		    kernel_compiler_patch		N
		    TRESOR (AES-NI) [5]			t
		    TRESOR (x86) [5]			t
		    TRESOR (x86-64) [5]			Y
		    UKSM				R
		    zen-muqss				N
		    zen-sauce				N

    5.10 (LTS)						Y
		    -ck / MuQSS				N
		    -rt	(RT_PREEMPT)			Y
		    BMQ					N
		    futex (futex-wait-multiple) [5]	N
		    genpatches				Y
		    kernel_compiler_patch		N
		    Project C				N
		    TCP BBR v2				N
		    TRESOR (AES-NI) [5]			t
		    TRESOR (x86) [5]			t
		    TRESOR (x86-64) [5]			Y
		    UKSM				R
		    zen-muqss				N
		    zen-sauce				N

    5.15 (LTS)						Y
		    -rt	(RT_PREEMPT)			A
		    CFI					A
		    Clang PGO				E
		    futex (futex-wait-multiple)	[5]	E
		    futex2				E
		    kernel_compiler_patch		A
		    genpatches				A
		    multigen_lru			N
		    Project C				N
		    TCP BBR v2 [5]			E
		    TRESOR (AES-NI) [5]			D
		    TRESOR (x86) [5]			D
		    TRESOR (x86-64) [5]			D
		    UKSM				R
		    zen-multigen_lru			N
		    zen-sauce				N
						
    6.0 (Stable)					N
		    -rt	(RT_PREEMPT)			A
		    CFI					E
		    Clang PGO				E
		    genpatches				A
		    KCFI				A
		    kernel_compiler_patch		A
		    multigen_lru			R
		    Project C				A
		    TCP BBR v2 [5]			E
		    TRESOR (AES-NI) [5]			D
		    TRESOR (x86) [5]			D
		    TRESOR (x86-64) [5]			D
		    UKSM				N
		    zen-multigen_lru			N
		    zen-sauce				A

    6.1 (Stable)					N
		    -rt	(RT_PREEMPT)			A
		    CFI					?
		    Clang PGO				?
		    genpatches				A
		    KCFI				A
		    kernel_compiler_patch		A
		    multigen_lru			A
		    Project C				A
		    TCP BBR v2 [5]			E
		    TRESOR (AES-NI) [5]			D
		    TRESOR (x86) [5]			D
		    TRESOR (x86-64) [5]			D
		    UKSM				?
		    zen-multigen_lru			A
		    zen-sauce				A

    [1] Kernel LTS provides security updates and bugfixes, but doesn't extend to
        third party patchsets
    [2] Third party patchset LTS has provided updates
    [3] only from the oiledmachine-overlay repo
    [4] without correctness verification, due to lack of hardware or
        configuration.  Correctness and build fixes extends only to device
        agnostic independent code.
    [5] backported or forwardported, but not intended for this series, but build
        time fixes are provided by the ebuild maintainer
    [6] backported or forwardported, but not intended for this series, but build
        time fixes are provided by others if it is a recent new kernel
        series.

    A - Currently actively updatable
    R - Released only for major.minor usually no futher updates for patch versions
    D - USE flag should be disabled since there is no release for this minor
        version yet.
    N - Under the Patchset LTS indicates that the patchset is EOL or likely
        EOL for that version which means that bug fixes and security updates
        will not be provided.  This indicates a feature freeze, but
        build time failures will be fixed by the ebuild maintainer.
    E - No upstream release for this major minor version but maintained by
        ebuild maintainer or third party
    I - Inactive due to changing API, but future support depends on motivation
    S - Upstream indicated support
    T - Patch is undergoing testing
    t - Only patch/building testing but without correctness verification
    ? - Unknown status

    EOL (End Of Life) stable kernels get dropped next update cycle which is
    typically a week.  The virtual/ot-sources-stable ebuild-package
    should handle the transition gracefully.

    Use virtual/ot-sources-lts or virtual/ot-sources-stable to track and
    update releases instead of emerging sys-kernel/ot-sources directly.
    It's recommended to use the ot-sources-lts if you have binary only kernel
    modules.  For those without binary only modules, use ot-sources-stable
    package.


    
    CFLAGS and HOSTCFLAGS

    CFLAGS, CXXFLAGS, LDFLAGS are applied to the kernel CHOST or target machine.

    HOSTCFLAGS, HOSTCXXFLAGS, HOSTLDFLAGS are applied to CBUILD programs.

    If HOSTCFLAGS is not set, it uses CFLAGS.  Same is true with the other
    pairs.

    The above CFLAGS should be added to the per build profile.  If not added,
    it will use the *FLAGS provided by /etc/portage/make.conf.

    Currently X86_MICROARCH_OVERRIDE will override the -march or -mcpu for
    CFLAGS.  Consideration for simplification of -march and
    X86_MICROARCH_OVERRIDE is open at this time with likely the removal of the
    latter envvar.  So both should be set at this time to the same
    -march/-mcpu to avoid confusion.



    Using the build USE flag (without PGO)

    The build USE flag can be used to build the kernel.  It comes with extra
    environment variables that can be placed in the per extraversion env file.

    The build USE flag was necessary to increase the security of the -rt patchset
    with a more customized limited config.

    It also speeds up deployment time to decrease the security update lag.

    The following steps need to be taken:

      0. Mount the boot partition
      1. Emerge with the build USE flag
      2. Run etc-update
      3. Build and install initramfses per each built kernel
      4. Update the bootloader
      5. Reboot


    Signed kernel modules corresponding to a build and that build's private key
    require multiple runs of "genkernel ... initramfs".  This means that N build
    profiles each having a unique private key required N kernel initramfs
    invocations.  If you built 5 profiles you need 5 corresponding
    initramfs updates.


    The PGO (Profile Guided Optimization) progression diagram:

      start ➡️  PGI ➡️  PGT ➡️  PGO ➡️  end

    (➡️  is the right emoji symbol)

    PGI = Build as instrumented
    PGT = Train with actual typical use, or simulation script that replays or mimics typical use, or benchmarks
    PGO = Build as optimized



    Using the build USE flag with the pgo USE flag

    The following steps need to be taken:

      0. Mount the boot partition
      1. Emerge with the build and pgo USE flags
      2. Run etc-update
      3. Build and install initramfs
      4. Update the bootloader
      5. Reboot
      6. Train the kernel with the gen_pgo.sh script or your own simulation script
      7. Re-emerge the package with the build and pgo USE flag for an optimized build



    Resetting PGO

    The PGO progression state can be reset by deleting the
    /var/lib/ot-sources/${PV} folder or the .pgophase file.



    PGO state files:

    /var/lib/ot-sources/${PV}/${extraversion}-${arch}.pgophase -- The PGO
      phase progression state file that contains the current step.
      {PGI,PGT,PGO,DONE} are the states in the FSM.
    /var/lib/ot-sources/${PV}/${extraversion}-${arch}.profraw -- The profraw
      captured before conversion.
    /var/lib/ot-sources/${PV}/${extraversion}-${arch}.profdata -- The merged
      profdata PGO profile.  It is used when building an optimized build.

    Important:  If a change to the PGO patch has been made, the
    /var/lib/ot-sources/${PV} folder and the files in it should be manually
    removed to restart the PGO process.


    LLVM versions supported for Clang PGO:

    * 15.0.0.9999 - with the latest commit
    * 14.0.0.9999 - with the latest commit
    * 14.0.0_rc1
    * 13.0.1
    * 13.0.0 
    * 12.0.1 
    * 11.1.0

    Versions that are not *exactly* the ones listed above are not supported.
    The PGO profraw format used is sensitive to point version changes and even
    in the live ebuilds, and it's the reason why exact versions are only
    supported up and including profraw version 8.



    Using gen_pgo.sh, aka the automated PGO trainer script

    It becomes tedious or too repetitive to manually train the kernel.
    This is why an automated trainer script pgo-trainer.sh (also found in the modded
    genkernel) is provided to automatically train the kernel.  You can of course
    write your own automated script.  The script can be extended with
    pgo_custom.sh in the same directory or modded directly.  Using pgo_custom.sh
    is recommended to preserve changes between installs.  It should be ran only
    as a non-root user.



    The config file-directory structure

    The tree structure is as follows in abstract form:

      /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/env
      /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/patches

    K_MAJOR_MINOR will be expanded to either 4.14, 5.4, 5.10, 5.15, 6.0.

    extraversion will be expanded to ot, rt, or a custom name.

    arch will expand to one of the folder names in the arches folder in
    /usr/src/linux/arch.

    Example:

      /etc/portage/ot-sources/5.16/ot/x86_64/env

    Files:

      /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/env
      Contains all environment variables for this buildconfig.  The
      per package extraversion and per package buildconfig are synonymous
      for this file.

    Directories (In planning):

      /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/patches
      Contains extra user patches to apply per buildconfig.



    An example env file located in /etc/portage/ot-sources/5.16/ot/x86_64/env:

CRYPTSETUP_CIPHERS="aes anubis camellia cast6 twofish serpent"
CRYPTSETUP_MODES="adiantum cbc ctr ofb xts"
OT_KERNEL_ARCH="x86_64"
OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS="1"
OT_KERNEL_BOOT_ARGS="delayacct nohz_full=1-7"
OT_KERNEL_BOOT_DECOMPRESSOR="zstd"
OT_KERNEL_BOOT_SUBSYSTEMS_APPEND="drivers/char/agp drivers/gpu drivers/video"	# For early KMS.  Disable line if using external kernel driver package.
OT_KERNEL_BUILD="1"
OT_KERNEL_BUILD_ALL_MODULES_AS="y"
OT_KERNEL_CONFIG="/etc/kernels/kernel-config-5.16-ot-x86_64"
OT_KERNEL_CPU_MICROCODE="1"
OT_KERNEL_CPU_SCHED="cfs"
OT_KERNEL_DISABLE="0"
OT_KERNEL_EXTRAVERSION="ot"
OT_KERNEL_FIRMWARE="regulatory"
OT_KERNEL_HARDENING_LEVEL="untrusted"
OT_KERNEL_LSMS="auto"
OT_KERNEL_MODULES_SUPPORT="1"
OT_KERNEL_MODULES_COMPRESSOR="zstd"
OT_KERNEL_MENUCONFIG_EXTRAVERSION="ot"
OT_KERNEL_MENUCONFIG_RUN_AT="pre"
OT_KERNEL_MENUCONFIG_UI="disabled"
OT_KERNEL_PKGFLAGS_ACCEPT="05309e2 351365c"
OT_KERNEL_SIGN_MODULES="1"
OT_KERNEL_TARGET_TRIPLE="x86_64-pc-linux-gnu"
OT_KERNEL_WORK_PROFILE="workstation"
OT_KERNEL_ZSWAP_ALLOCATOR="zsmalloc"
OT_KERNEL_ZSWAP_COMPRESSOR="zstd"



    Environment variables overview:

    The purpose of some of these environment variables is to change primarily
    the default profile a little bit so that it skips the menuconfig step all
    together in the build before install with the build USE flag.  1 means yes.
    0 means no.  Auto assumes native build.  Due to the possibly of dependent
    options, 0 may also mean custom or previous settings.



    USE flags versus OT_KERNEL_USE:

    The USE flags control downloading patches but the OT_KERNEL_USE allow
    controlling per profile details.  The USE flags will be used as a
    fallback if OT_KERNEL_USE is not utilized.

    See also:

      OT_KERNEL_USE



    Environment variables required:

      OT_KERNEL_ARCH
      OT_KERNEL_EXTRAVERSION


    
    Environment variables:

    DISABLE_DEBUG_EXCLUDES -- A space delimited list of kernel config symbols
    to ignore.



    OT_KERNEL_5_LEVEL_PAGING -- set 5 level paging for supercomputers

    Acceptable values:

      1, 0, auto, unset

    Unset implies manual setting or previous setting.



    OT_KERNEL_ABIS -- Adds support for ABIS especially cross compiling but only
    if the kernel arch supports it.  You many only choose one kernel arch per
    buildconfig env.  If unset, it will use auto settings.  Users are still
    responsible for editing the kernel config for details such as the
    microarchiecture, integrated circuits (ICs), or details relating to ABI.
    For endianess, you must set the CHOST variable in the per build env
    file.  (EXPERIMENTAL)

    Acceptable values:

      auto					; Autodetect and auto-enable ABIs
      manual					; Previous settings
      arm					; For the arm
      arm64					; For the arm64
      o32, n32, n64				; For the mips
      ppc, ppc64				; For the powerpc
      lp64d, lp64, ilp32d, ilp32		; For the risc
      s390, s390x				; For the s390
      sparc32, sparc64				; For the sparc
      x86, amd64, x32				; For the x86_64



    OT_KERNEL_ADD_KEY_TO_MOK -- Auto adds the provided key to MOK if not found.



    OT_KERNEL_ARCH -- The native ABI of the kernel to build using one of the
    names of the folders in /usr/src/linux/arch.  This package assumes that both
    x86_64 and arm64 are recognized as 64 with possibly 32 compatibility, but
    x86 and arm are recognized as strictly 32-bit.
    Both the folder path (${arch} in
    /etc/portage/ot-sources/${K_MAJOR_MINOR}/${extraversion}/${arch}/env) and
    the OT_KERNEL_ARCH need to be the same.

    Acceptable values:

      arm, arm64, mips, powerpc, riscv, s390, sparc, x86



    OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS -- Auto edit the kernel .config
    for installed packages.  What this means is that certain @world packages
    have additional kernel .config requirements and sometimes too complex
    or too long ago to remember to apply.  These missing or conflicting
    flags will be added or removed so that the @world package works properly.

    Acceptable values:

      1 to enable, 0 to disable

    By default, it is disabled meaning that manual editing is required or
    preferred.  For some select security packages, this is environment variable
    is unconditionally ignored implying to always apply the kernel changes.



    OT_KERNEL_BLACKLIST_FIRMWARE_PATHS -- A space separated list of firmware
    relative paths to not include in CONFIG_EXTRA_FIRMWARE.



    OT_KERNEL_BOOT_ARGS -- Set and embed the kernel command line into the
    kernel instead of the bootloader.

    iotop users:  You may remove delayacct from the kernel command line if you
    decide not to keep the app.

    See also

      KVM_ADD_IGNORE_MSRS_EQ_1
      KVMGT



    OT_KERNEL_BOOT_ARGS_LOCKDOWN -- Prevent bootloader from overriding
    the internal kernel cmdline.

    Certain security options may auto enable this if they happen to use
    the kernel command line.

    Acceptable values:

      1 - enable
      0 - disable
      unset - manual settings



    OT_KERNEL_BOOT_DECOMPRESSOR -- chooses the main boot decompressor for both
    kernel decompression and initramfs decompression.  If not chosen, it will
    choose either the previous manual setting, or if it is a new kernel config
    defaults which will choose gzip for the kernel and all decompressors for
    initramfs.

    Acceptable values:

      GZIP, BZIP2, LZ4, LZO, LZMA, XZ, ZSTD, default, manual, UNCOMPRESSED

    It is recommended to use lz4 or zstd.  However, if you are
    using x32 ABI bzip2 works but do not use lzma.  If empty, it will choose
    manual.  ZSTD is only allowed in 5.10+.



    OT_KERNEL_BUILD -- It be 0, 1, true, false, yes, no, nobuild, build, not
    set.  Most are aliases, but it means to build or not build the kernel.  If
    not set it will try to guestimate based on the build flag.

    See also:

      OT_KERNEL_BUILD_CHECK_MOUNTED
      OT_KERNEL_KERNEL_DIR



    OT_KERNEL_BUILD_CHECK_MOUNTED -- Check if the boot directory referenced
    by OT_KERNEL_KERNEL_DIR is mounted.

    Acceptable values:

      1 - check
      0 - don't check
      unset - check

    See also:

      OT_KERNEL_KERNEL_DIR



    OT_KERNEL_BUILD_ALL_MODULES_AS -- Choose how to build options capable of
    being built as modules.  You can choose to convert kernel config
    options as mostly modules (m) or all builtins (y).  One may choose to
    build everything as builtins to prevent loading of hacked drivers or to
    speed up init time.  One may also choose mostly modules to load drivers
    on demand.  This option depends on OT_KERNEL_MODULES_SUPPORT=y.
    (EXPERIMENTAL, TESTING)

    Acceptable values:

      m, y, manual

    Unset is equivalent to manual.

    See also:

      OT_KERNEL_BOOT_KOPTIONS_APPEND
      OT_KERNEL_BOOT_SUBSYSTEMS
      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND
      OT_KERNEL_MODULES_SUPPORT



    OT_KERNEL_BOOT_KOPTIONS -- A space separated list of CONFIG_... options to
    be built as builtins instead as modules.  This setting is optional.  This
    option depends on OT_KERNEL_BUILD_ALL_MODULES_AS="m".  This option focuses
    on specific devices.  This information can be found in help "defined at"
    section in "make menuconfig".

    Example:

      OT_KERNEL_BOOT_KOPTIONS="CONFIG_KEYBOARD_ATKBD CONFIG_USB_EHCI_HCD CONFIG_USB_STORAGE"

    See also:

      OT_KERNEL_BOOT_KOPTIONS_APPEND
      OT_KERNEL_BOOT_SUBSYSTEMS
      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND



    OT_KERNEL_BOOT_KOPTIONS_APPEND -- A space separated list of CONFIG_...
    options to be built as builtins instead of modules added after auto boot
    option discovery.  This option depends on OT_KERNEL_BUILD_ALL_MODULES_AS="m"

    See also:

      OT_KERNEL_BOOT_KOPTIONS
      OT_KERNEL_BOOT_SUBSYSTEMS
      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND



    OT_KERNEL_BOOT_SUBSYSTEMS -- A space separated list of subsystems required
    to boot as builtins instead of modules used to replace the defaults.
    This information can be found in the help "defined at"
    section in in "make menuconfig".  Early KMS requires drivers/char/agp,
    drivers/gpu, and drivers/video to be added.

    Example:

      OT_KERNEL_BOOT_SUBSYSTEMS="drivers/input/keyboard drivers/hid drivers/ata fs drivers/scsi drivers/block"

    See also:

      OT_KERNEL_BOOT_KOPTIONS
      OT_KERNEL_BOOT_KOPTIONS_APPEND
      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND



    OT_KERNEL_BOOT_SUBSYSTEMS_APPEND -- An additional space separated list of
    subsystems required to boot as builtins appended to the default set of boot
    required subsystems.  Early KMS requires drivers/char/agp
    and drivers/gpu to be added.

    Example:

      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND="drivers/spi drivers/mmc drivers/char/agp drivers/gpu drivers/video drivers/char/tpm"

    See also:

      OT_KERNEL_BOOT_KOPTIONS
      OT_KERNEL_BOOT_KOPTIONS_APPEND
      OT_KERNEL_BOOT_SUBSYSTEMS



    OT_KERNEL_COLD_BOOT_MITIGATIONS -- changes the kernel config to mitigate
    against cold boot attacks.

    Acceptable values:

      0 for do not apply any mitigations
      1 for applying mitigations

    See also

      OT_KERNEL_DMA_ATTACK_MITIGATIONS
      OT_KERNEL_IMA



    OT_KERNEL_CONFIG -- Points to the absolute path of the kernel config. (This
    can be not set but then defaults to
    /etc/kernels/kernel-config-${PV}-${extraversion}-$(uname -m))



    OT_KERNEL_CPU_SCHED -- can be one of the below depending on the kernel version.

      4.14: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, muqss, pds
      5.10: cfs, cfs-throghhput, cfs-interactive, cfs-autogroup, muqss, prjc, prjc-bmq, prjc-pds
      5.15: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, prjc, prjc-bmq, prjc-pds
      6.0: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, prjc, prjc-bmq, prjc-pds

      The reason why for this flexibility is to allow for multiple
      configurations that are not mutual exclusive, meaning you can use the rt
      patchset with CFS but still choose MuQSS for a gaming client kernel.

      This field can be not set which would default to using cfs.

      Misc notes:

      * cfs is preferred for server kernels and bug-less experience.
      * cfs by default disables autogroup or uses previous settings
      * cfs-interactive is an alias for cfs-autogroup
      * autogroup will be disabled in all other schedulers.
      * muqss and pds-mq are better suited for audio production for the
        ISO priority class.
      * The rt USE/OT_KERNEL_USE flag can only use the cfs scheduler.
      * Anagolus to driving with manual and automatic gears, using autogroup or
        bmq can interfere with controlling individual task placement.
      * For better manual control of individual task placement use either cfs,
        cfs-throughput, muqss, or pds or the sysfs to adjust the weights
        of autogroup.
      * BMQ has been renamed to Project C.  Project C merged both PDS and
        BMQ allowing to choose either scheduler.  C means cross.
      * Project C's version of PDS is not the same as PDS-mq.

      The following is discussed in great detail because it affects use of
      scheduling apps that only discuss or assume CFS.  These small details
      relate to security and performance.

      The default timeslices:

        BMQ: 4 ms server/desktop, 2 ms with low latency desktop
        CFS: variable length
        MuQSS:  6 ms
        PDS: 6 ms
        Project C (BMQ/PDS): 4 ms
        Zen MuQSS: 4 ms with zen interactive, 6 ms without zen interactive

        Some of these timeslice values may be adjustable.

      Summary of nice:

        (IMPORTANT:  Not all nice are created equal!)

        CFS                     - weights used in the task's virtual runtime
                                  ("physical time"/weight) proportional to 1024
                                  (nice 0)
        Project C (BMQ/PDS)     - task placement in skiplist, with 0 highest
                                  priority and 39 lowest
        PDS-mq/MuQSS            - virtual deadlines in NORMAL and IDLE

      Summary of nice formulas:

        CFS                     - 1024 * (1.25 ** nice)
                                  [** is expodential and not to be confused with ^ bitwise xor]

        MuQSS                   - prio_ratio[0] = 128
                                  for i in 0 to 39:
                                    # 11/10 is 110% of previous prio_ratio
                                    prio_ratio[i] = prio_ratio[i-1] * 11/10
                                  # (see above in default timeslices) but can be tuned
                                  rr_time = 6 ms # is the default timeslice
                                                 # mentioned above
                                  # shiftleft is the bitshift shift operator in C
                                  virtual_deadline = now + prio_ratio[nice + 20] * rr_time * (1 shiftleft 20) / 128

        PDS-mq                  - deadline[nice + 20] # The documentation and
                                  sourcing of the deadline lookup table is
                                  undocumented.

        Project C (BMQ/PDS)     - nice + 20
                                  boost is +- 7 of current scheduling priority of a task (BMQ only)

      Summary of scheduling policies/classes

        (The priority class implies additional rules such as aging, preemption)

                                NORMAL  IDLE   BATCH   ISO  RT_RR    RT_FIFO  DEADLINE
        CFS                       y      y       y      n     y       y         y
        MuQSS                     y      y       y(*1)  y(*3) y(*4)   y(*4)     n(*5)
        Project C (BMQ/PDS)       y      y(*1)   y(*1)  n     y(*2)   y(*2)     y(*6)
        PDS-mq                    y      y       y(*1)  y(*3) y(*4)   y(*4)     n(*5)

        y - supported
        n - not supported

        *1 - Same as NORMAL.  cfs treats BATCH as potentially unpreemptable, but
             BMQ/PDS breaks this assumption.
        *2 - BMQ/PDS uses a single queue
        *3 - It is pseudo RT_RR with iso budget but demoted to NORMAL when budget
             exausted.
             It is unpremptable by NORMAL meaning it will not skip processing
             during it's time window.
             The budget is a percent of all CPUs over 5 seconds.
             It can be used by non-root users.
             It has it's own iso tick timer.
             The original will use 75% of all CPUs but zen-MuQSS will use 25% when
             zen-interactive is enabled.
        *4 - Using the same skiplist
        *5 - Uses RT_RR in self-test.
        *6 - Uses RT_RR in self-test, translates into RT_FIFO during __set_setscheduler.
             However, the queue is not dedicated but shared.

      Summary of maximum task limits:

        CFS                  - No limit
        PDS-mq/muqss         - CPUs * 64k tasks
        Project C (pds/bmq)  - No limit

      Summary of data structure

        CFS                     - time ordered red-black tree (for BATCH, NORMAL, IDLE)
                                  array of doubly linked lists used in RT_RR, RT_FIFO
        MuQSS                   - 8 level doubly linked skiplist
        PDS-mq                  - 8 level doubly linked skiplist
        Project C (BMQ/PDS) and - circularly doubly linked lists used as FIFO for NORMAL \
         BMQ (5.7 and earlier)    array of doubly linked lists used in RT_RR, RT_FIFO
                                  to implement a priority queue

      Summary of data structure for policies that SHARE data structures with other policies

                                        NORMAL   BATCH  IDLE   ISO   RT_RR   RT_FIFO   DEADLINE
        CFS                               y        y(*3)  y(*3) -      y        y         n
        MuQSS                             y        y(*2)  y(*2) y(*2)  y        y         -
        PDS-mq                            y        y(*2)  y(*2) y(*2)  y        y         y(*1)
        Project C (BMQ/PDS) and           y        y(*4)  y(*4) -      y        y         y(*1)
         BMQ (5.7 and earlier)  

        y = shared
        n = not shared
        - = does not exist
        (*1) with FIFO
        (*2) with NORMAL so same skiplist
        (*3) with NORMAL so same rbtree
        (*4) with NORMAL so same circular doubly linked-list

      Summary of data structure efficency for tasks (worst case)

                                   Search[*4]          Insert          Delete
        CFS                         O(n)[*5]            O(log n)        O(log n)
        CFS-rt                      O(n)                O(1)            O(1)
        Project C (BMQ/PDS)         O(1)/O(n)[*3]       O(1)            O(1)
        PDS-mq                      O(1)[*1]            O(k)            O(k)[*2]
        MuQSS                       O(1)[*1]            O(k)            O(k)[*2]

      Summary of data structure efficency for tasks (amortized [meaning over time])

                                   Search[*4]          Insert          Delete
        CFS                         O(1)[*5]            O(1)            O(1)
        Project C (BMQ/PDS)         O(1)/O(n)[*3]       O(1)            O(1)
        PDS-mq                      O(1)[*1]            O(1)            O(1)[*2]
        MuQSS                       O(1)[*1]            O(1)            O(1)[*2]

      (Applies to both worst case and amortized summaries)

        [*1]For single task in RT_RR or RT_FIFO, it is O(1)
        [*2]k levels with max 8 which is simply O(1).  The original design of
          the skiplist is O(log n) for insertions but has been changed in this
          implementation
        [*3]O(1) for normal, O(n) for RT_RR or RT_FIFO.
        [*4]The next task to execute is always the head but for RT it usually
            has to scan the the array in some implementations.
        [*5]The O(1) is amortized.

        In layman terms, O(1) is faster than O(log n).  O(log n) is faster than
        O(n).

      Summary of task auto-boosting:

        cfs               - no (by default), yes (with autogroup, deprived task
                            groups rewarded with more percent execution time)
        cfs-throughput    - no
        cfs-interactive   - yes (with autogroup, deprived task groups rewarded
                            with more percent execution time)
        Project C (BMQ)   - yes, upon unblocking
        Project C (PDS)   - no
        PDS-mq            - no
        MuQSS             - no

      Summary of task auto-demotion:

        cfs               - yes, if autogroup enabled, burners give percent cpu
                            to deprived task groups.
        cfs-interactive   - yes, with autogroup, burners give percent cpu to
                            deprived task groups.
        MuQSS             - yes, upon fork it is RT becomes NORMAL
                            yes, ISO becomes NORMAL after budget expires
        Project C (BMQ)   - yes, timeslice burners get demoted to lower
                            level of priority

      Summary of use cases and micro-grading:

        Report based on design, source code, and documentation review.

                             Gaming           Multimedia       Multi-tasking(*4)
        CFS                    C                  C                   B+(*3)
        Project C (BMQ)        C(*2)              B                   B-(*5)
        Project C (PDS)        B                  C                   C
        PDS-mq                 B                  B                   C
        MuQSS for 5.4+         B+(*10)            A(*10)              C-(*18)

                          Home server(*11)  SMP (cluster)(*14)    NUMA (HPC)(*14)
        CFS                    D(*12)             B                   A
        Project C (BMQ)        C+(*13)            F                   F
        Project C (PDS)        C+(*13)            F                   F
        PDS-mq                 C+(*13)            C                   F
        MuQSS for 5.4+         C+(*13)            C                   C

                          Embedded(*1)   LTS (Long term support)   Security
        CFS                    C-                 A                 A(*7)
        Project C (BMQ)        B                  F                 F(*17)
        Project C (PDS)        A                  F                 F(*17)
        PDS-mq                 C-                 F                 F
        MuQSS for 5.4+         C-                 F                 F(*6)(*8)

                           Multicore(*20)        EOL
        CFS                   C/A(*19)            n
        Project C (BMQ)       C/F(*16)            n
        Project C (PDS)       C/F(*16)            n
        PDS-mq                C/F(*16)            y
        MuQSS for 5.4+        A/F(*15)            y (since 5.12)
        Zen MuQSS                                 y

        A = best
        B = better
        C = supports and all around good
        D = supports but not so well
        F = no support
        (*1) In terms of fewest lines of code and efficiency which indirectly
            connects to power
        (*2) While the smaller round robin looks great for corresponding higher
          monitor HZ, the auto-boosting may nerf the AAA game.
        (*3) Only if autogroup is enabled, without it not so good from experience.
        (*4) Interactivity under heavy load or just plain desktop use.
        (*5) Usually more smoother under heavy resource use but likely requires
          restart.  It is unknown if this issue is outside of this scheduler
          or the scheduler itself.
        (*6) SCHED_ISO may be abused.  No use caps or timeout cooldown observed.
        (*7) Autogroup cpu burner protections and core scheduling mitigations
          allowed.
        (*8) May increase trashing in older version.  (Memory leak?, related to *18)
        (*9) No CI and no fuzz history.  Precaution should be taken when using
          this under secure scenarios.
        (*10) The nice formulas and virtual deadlines show consistency in SYNC
          with Hz, RTT, etc, but also indicate a weakness in catching up with
          newer hardware.  This means that the formula needs an updated.   All
          other schedulers fail in the nice-time consistency or nice-time
          scaling.
        (*11) Assumes software codec transcoding and distcc running, N users,
          N core.  Based on design and thought experiment.
        (*12) Only if enabled autogroup.  Each user is satisfied to receive
          some work but all were angry at the production rate.
        (*13) Some users may feel great that work was delivered faster than
          the if rendered alone, but some may feel disapointed due to the
          poor production rate.  Because that resource was freed up faster
          than usual, the other too felt it was faster.
        (*14) Assumes more than enough hardware resources but source code
          and design indicated effort in addressing this scenario.
        (*15) Provides many tunables for tuning for throughput or latency on
          different MC/SMP/NMA configurations, bad on SMT/HT security
          update or lacks review on risk assessment with SMT side-channels
          or compatibility review of core scheduling.
        (*16) May have latency issues in some configurations.
        (*17) Disables core scheduling which disables some/all mitigation against
          SMT side-channel attacks (by flawed processor design).
          SCHED_CORE was available since 5.14.  An alternative is to
          disable HT or replace with new processor design.
        (*18) Usually slower or unstable when forward-ported to later point
          releases.
        (*19) 
        (*20) left is performance, right is security

    See also

      HT



    OT_KERNEL_CPU_MICROCODE - Auto includes CPU firmware to fix CPU bugs
    and mitigate against some security vulnerabilities.

    There is a risk when updating CPU microcode.  Some well known sites and
    distros have measured or reported performance penalties [in some cases
    single digit frames per second loss] with past microcode updates.

    This option depends on OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS=1.
    The firmware or microcode packages must be installed first.

    Valid values:
      0 (default), 1, path, unset
      1 - auto adds CPU microcode based on /proc/cpuinfo
      path - auto adds CPU microcode based on path to a /proc/cpuinfo snapshot
      Unset is the same as 0 which means manual settings.

    Examples:
      OT_KERNEL_CPU_MICROCODE="1"
      OT_KERNEL_CPU_MICROCODE="/etc/portage/ot-sources/5.15/ot/x86_64/cpu_info"

    See also:
      MICROCODE_BLACKLIST
      MICROCODE_SIGNATURES



    OT_KERNEL_DISABLE - Disable processing this extraversion or profile.

    Acceptable values:

      0 - Do not disable this extraversion.
      1 - Disable this extraversion.
      unset - Do not disable this extraversion.



    OT_KERNEL_DMA_ATTACK_MITIGATIONS - changes the kernel config to mitigate
    against DMA attacks.  By default, this is enabled in the ebuild.

    Acceptable values:

      0 for do not apply any mitigations
      1 for level 1 mitigations
      1.5 for level 1.5 mitigations
      2 for level 2 mitigations

    - Level 1 mitigations are changes balance the convenience and the security.
    - Level 1.5 mitigations are changes increase mitigation without disabling
      of use of hardware with additional performance penalty.
    - Level 2 mitigations are changes that severely place security over
    convenience which may take away ability to use certain hardware or have
    severe performance degration.

    See also

      OT_KERNEL_COLD_BOOT_MITIGATIONS
      OT_KERNEL_IMA
      OT_KERNEL_KEXEC



    OT_KERNEL_DMESG -- Allow the use of early printk and dmesg.  Setting this
    may affect features that may depend on it.  Setting it off may increase
    security.

    Acceptable values:

      1 - Turn on
      0 - Turn off
      default - Turn on with default buffer sizes
      unset - Unset will use manual or previous settings.

    The ebuild will override the user choice in order for certain features to
    work properly.  The following are overrides with top most overrides
    higher priority.

    For the PGI (profile guided instrumentation) step, it is default
      temporarily.
    For enabled OT_KERNEL_COLD_BOOT_MITIGATIONS, it is disabled.
    For userland Clang CFI development, it is recommended to use default temporarily
      if performing tests for segfault detection, but disable it ASAP.



    OT_KERNEL_EARLY_KMS -- enable early KMS for graphics improvement.
    This setting fixes early kms problem with OT_KERNEL_BOOT_SUBSYSTEMS="m".
    For out-of-tree Direct Rendering Manager DKMS graphics drivers, this should
    be 0 to load these drivers as modules.

    Acceptable values:

      1, 0, y, n, unset

    Unset is equivalent to 1.



    OT_KERNEL_EP800 -- adds and enables the ep800 webcam driver.

    It is used for testing driver breakage between LTS versions and stable for
    the media-video/epcam package.

    Acceptable values:

      1, 0, unset



    OT_KERNEL_EXTRAVERSION -- initials or name of the kernel.

    See also:

      OT_KERNEL_PRIMARY_EXTRAVERSION
      OT_KERNEL_PRIMARY_EXTRAVERSION_WITH_TRESOR



    OT_KERNEL_EXTERNAL_MODULES -- prepares the kernel for out-of-tree
    modules.  The kernel needs to expose these for packages that build
    kernel drivers outside this package.

    Acceptable values:

      1, unset.  Unset means auto detect.



    OT_KERNEL_FAST_INSTALL -- install kernel sources in the fastest way
    without permissions sanitization.

    Acceptable values:

      1 - fast install without permissions sanitization.
      unset - slow install with permissions sanitation.  (default)



    OT_KERNEL_FIRMWARE -- a space separated list of keywords matching the
    firmware relative to inside /lib/firmware.  Wildcards (denoted by "*") are
    accepted as well as relative paths.  Wildcards are implied before and after
    the pattern.  These patterns are case sensitive meaning there is a
    difference between model and MODEL.  There is a possibility of driver
    writers adding and removing files without notice which is why simple
    keyword matching containing the model name and number without adding
    specific ICs details is recommended.  Keeping this value not set is the
    same as manually editing or reusing the previous value in the .config
    file.  Using this environment variable has advantages of auto adding
    and auto removing firmware references.

    The X in the environment variable name corresponds to the kernel *arch*
    in buildconfigs that is uppercase.  The kernel arch is not exactly the
    same as the distro arch.

    The Y in the environment variable name corresponds to the extraversion
    in buildconfigs that is uppercase.  Both the X and Y values make it
    possible to not apply firmware to virtual machine guest kernels or for
    specific to cross compile kernels.  Any hyphen (-) should be replaced
    with the underscore character (_).

    The following are recognized patterns:

      1. Add by wildcard.  model*.bin model* dir* d*r
      2. Add by literal.  model model123.bin dir/model dir1/dir2/model.bin

    When you use OT_KERNEL_FIRMWARE envvar, it is implied it will wipe the
    previous setting.

    See also:

      OT_KERNEL_CPU_MICROCODE



    OT_KERNEL_FORCE_APPLY_DISABLE_DEBUG -- force the applying disable debug
    globally to remove config symbols containing the following keywords:

      DEBUG, TRACE, VERBOSE, LOG, PRINT

    Acceptable values:

      1 to apply disable_debug, 0 to halt if there is a conflict between a
      kernel flag set and disable_debug.

    See also:

      DISABLE_DEBUG_EXCLUDES



    OT_KERNEL_FPS -- Set to the frames per second based on recording standard.
    It can be a multiple of 30 (corresponding to 300 HZ), or multiple of 25
    (corresponding to 250 HZ).  This matters because some archs cannot use
    300 HZ.  This may help reduce the number of frames dropped in older
    processors or designs if set properly.
    See
    https://en.wikipedia.org/wiki/List_of_broadcast_video_formats
    https://en.wikipedia.org/wiki/PAL#/media/File:PAL-NTSC-SECAM.svg



    OT_KERNEL_HARDENING_LEVEL -- sets the hardening level based on the level
    of trust.  In these ebuilds and eclasses, both CFI and ShadowCallStack (SCS)
    are determined by the hardening level.  In other words, if a user chooses to
    use the trust level, CFI or SCS would be disabled.

    Acceptable values:

      trusted, untrusted, untrusted-distant, custom, manual, unset.

    Meanings:

      custom - customize hardening.  (same as manual and unset)

      trusted - no hardening applied.  Used for single user presentation,
        LAN tournaments, pure performance like in house renderfarm setups.

      untrusted - full hardening.  Used for multiuser computer not in locked room
        such as on the road or traveling. 

      untrusted-distant - some hardening except physical access mitigation.
        Used for multiuser computer in locked room or www setups.

    See also:

      HT



    OT_KERNEL_HAVE_CRYPTO_DEV_AES
    OT_KERNEL_HAVE_CRYPTO_DEV_ANUBIS
    OT_KERNEL_HAVE_CRYPTO_DEV_BLAKE2B
    OT_KERNEL_HAVE_CRYPTO_DEV_BLAKE2S
    OT_KERNEL_HAVE_CRYPTO_DEV_CAMELLIA
    OT_KERNEL_HAVE_CRYPTO_DEV_CAST6
    OT_KERNEL_HAVE_CRYPTO_DEV_CHACHA20
    OT_KERNEL_HAVE_CRYPTO_DEV_CRC32
    OT_KERNEL_HAVE_CRYPTO_DEV_CRC32C
    OT_KERNEL_HAVE_CRYPTO_DEV_CURVE25519
    OT_KERNEL_HAVE_CRYPTO_DEV_DES
    OT_KERNEL_HAVE_CRYPTO_DEV_DES3_EDE
    OT_KERNEL_HAVE_CRYPTO_DEV_GCM
    OT_KERNEL_HAVE_CRYPTO_DEV_MD5
    OT_KERNEL_HAVE_CRYPTO_DEV_NHPOLY1305
    OT_KERNEL_HAVE_CRYPTO_DEV_POLY1305
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA1
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA256
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA3
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA512
    OT_KERNEL_HAVE_CRYPTO_DEV_SERPENT
    OT_KERNEL_HAVE_CRYPTO_DEV_TWOFISH

    Acceptable values:

      1 for have, 0 do not have (optional), unset.  Unset is equivalent to 0.

    These will skip adding additional CPU optimized ciphers or hash algorithms
    in preference for the hardware accelerated crypto device implementation.
    While setting this flag, you still need to manually configure the kernel
    config to use the accelerated crypto device.  These should be set to 1
    if the accelerated crypto device supports the algorithm.  If not present,
    it will fall back to the CPU optimized or the generic non-optimized
    algorithm.

    IMPORTANT:

    Do not assume that the hardware algorithm is secure especially if
    obtained from or provided by a stranger or backdoored.

    The preference for hardware implementations of ciphers, hashes, RNG
    generators, end of life (EOL) compilers, etc is not endorsed by the ebuild
    maintainer.  This is due to most of these implementations being not
    transparent as in not open source hardware.  You should always check to see
    if the crypto integrated circut (IC) or CPU has reported hardware
    side-channels or design flaws.  If the hardware does have a flaw, consider
    replacing the hardware from a trusted vendor who can verify authenticity of
    that unit or use the software open source implementation from trusted vetted
    developers.

    See also

    https://en.wikipedia.org/wiki/Bullrun_(decryption_program)
    CONFIG_RANDOM_TRUST_CPU - https://github.com/torvalds/linux/blob/v6.1/drivers/char/Kconfig#L426
    CONFIG_RANDOM_TRUST_BOOTLOADER - https://github.com/torvalds/linux/blob/v6.1/drivers/char/Kconfig#L444
    https://en.wikipedia.org/wiki/Evil_maid_attack
    Lucky winner attack (trojan horse hardware) - https://en.wikipedia.org/wiki/Social_engineering_(security)#Baiting
    https://en.wikipedia.org/wiki/Backdoor_(computing)
    https://en.wikipedia.org/wiki/Hardware_backdoor
    https://nvd.nist.gov/vuln/detail/CVE-2019-15847


    OT_KERNEL_HDD -- Set if HDD drive is present for this kernel build.

    Acceptable values:

      1 - yes, a rotational hard drive is present
      0 - no HHD exists
      auto - autodetect via sysfs (default)
      unset - auto

    See also:

      OT_KERNEL_SSD



    OT_KERNEL_HWRAID -- Set if SATA hardware raid is being used.  This may
    improve the throughput with the BFQ I/O scheduler.

    Acceptable values:

      1 - have hardware raid
      0 - no hardware raid
      unset - no hardware raid



    OT_KERNEL_IMA -- Sets the mode for IMA.  IMA will essentially ensure
    system integrity with the use of hashing and filesystem metadata.
    IMA requires 2 steps -- measurement and appraisal.  Measurement
    is done by hashing files.  Appraisal is done by comparing hashes.

    These kernel configs will be built in so the kernel needs to be rebuilt
    whenever it changes.

    Simplified progression diagram:

      start ➡️  rebuild with fix ➡️  reboot ➡️  rebuild with enforce ➡️  reboot ➡️  end

    (➡️  is the right emoji symbol)

    Acceptable values:

      fix - update the IMA hashes
      enforce - protect
      off - disables IMA
      unset - manual



    OT_KERNEL_IMA_HASH_ALG -- Sets the default hashing algorithm

    Acceptable values:

      sha1, sha256, sha512, wp512, default, manual, unset

    sha1 is the default.  If unset, it will choose manual.



    OT_KERNEL_IMA_POLICIES -- A space separated list of IMA policies.

    Acceptable values:

      critical_data - hash kernel critical data
      fail_securely - force signature failure on untrusted filesystems
      tcb - default hash of opened root files, modules, firmware, policy
      tcb_appraise - default apprasial of tcb set
      secure_boot - check module, firmware, policy, and signed kexec kernels
      unset - use manual setting

    Examples:

      OT_KERNEL_IMA_POLICIES="tcb"
      OT_KERNEL_IMA_POLICIES="tcb tcb_appraise"
      OT_KERNEL_IMA_POLICIES="tcb tcb_appraise secure_boot"



    OT_KERNEL_IOMMU -- Sets the default IOMMU domain type upon initalization.
    Setting this has implications with security and performance tradeoff.

    The OT_KERNEL_COLD_BOOT_MITIGATIONS have higher precedence when this
    option is used which allow only for lazy or strict.

    Acceptable values:

      manual - Use previous settings
      custom - Use previous settings
      disable - Disable the IOMMU.  Benefits tourney host level gaming.
      lazy - Restrict memory access.  Use delayed batch TLB invalidation.
        Throughput still significantly drops.
      strict - Restrict memory access.  Use slowest synchronous TLB
        invalidation.  Throughput significantly drops.
      pt - Trusted devices are given unrestricted memory access.  Option
        used by people that use virtual machines with near baremetal
        performance.  Passthrough reduces the VM overhead.

    See also:

      OT_KERNEL_IRQ_REMAP
      XEN_PCI_PASSTHROUGH



    OT_KERNEL_IOSCHED_OPENRC - Generate the OpenRC init script(s) to
    autoset the kernel I/O scheduler per device.  If you do not generate
    and enable it, you are responsible to manually setting the I/O
    scheduler.

    Acceptable values

      1 - generate
      0 - don't generate
      unset - generate

    See also:

      OT_KERNEL_HWRAID



    OT_KERNEL_IOSCHED - A I/O scheduler list for the custom work profile
    (either OT_KERNEL_WORK_PROFILE="custom" or OT_KERNEL_WORK_PROFILE="manual").
    The first I/O scheduler corresponds to the I/O scheduler to apply to SSDs.
    The second I/O scheduler corresponds to the I/O scheduler to apply to HDDs.

    Examples:

      OT_KERNEL_IOSCHED="none none"
      OT_KERNEL_IOSCHED="noop mq-deadline"
      OT_KERNEL_IOSCHED="noop mq-deadline"
      OT_KERNEL_IOSCHED="kyber bfq-throughput"
    
    Acceptable values:

      bfq - Alias for bfq-low-latency.  Virtual latency guarantees for
      interactive and soft-real-time (SRT) and weighted proportional throughput.
      By default, more weight is given to interactive/SRT and sequential I/O
      requests.

      bfq-low-latency - Variation optimized for interactive or soft-real-time
      I/O such as seeking for media players.  Has observed benefits in startup
      time.  This option does automatic weight adjustments with interatives, but
      can still be inferior in some scenarios.  For manual, weight adjustments
      use bfq-custom-interactive instead.

      bfq-custom-interactive - Variation optimized for precise interactivity
      under high I/O.  This option requires the use of ionice to manually adjust
      the weights manipulating the priority class (-c in ionice) and the class
      data (-n in ionice).  Work profiles notorious for high I/O such as
      builder-interactive will be assigned this.

      Beneficial one liners for bfq-custom-interactive:

        ionice -c 3 -p $(pgrep -G portage) # puts emerge in the idle class
        ionice -c 3 -p $(pgrep sah) # puts sah in the idle class
        ionice -c 2 -n 0 -p $(pgrep uzbl) # web browser
        ionice -c 2 -n 0 -p $(pgrep mplayer) # streaming service
        # ionice -c 3 means idle and heaviest I/O programs should use this value.
        # ionice -c 2 means best effort to be used by interactive.
        # ionice -n 0 is highest priority in that priority class in the best effort class.
        # ionice -n 7 is low priority in that priority class in the best effort class.

      The recommendations above may change or better solution provided later.
      See also PORTAGE_IONICE_COMMAND in "man make.conf".

      bfq-streaming - Same as bfq-low-latency but designed to prevent dropped
      video frames at the expense of throughput.  This option uses automatic
      weight adjustments.

      bfq-throughput - Variation to maximize MB/s disabling boosting weights
      for interactive processes.

      cfq - Round robin fairness with timeslices (4.14 only)

      kyber - Ensures that the queues meets latency goals

      mq-deadline - Sorted I/O with grouped deployment

      none - Disables I/O scheduling

      noop - FIFO I/O scheduling with request merging (4.14 only)

    See also:

      OT_KERNEL_IOSCHED_OVERRIDE
      OT_KERNEL_HWRAID



    OT_KERNEL_IOSCHED_OVERRIDE - A space delimited list of id;iosched.  The id
    is obtained from the basename in "ls -l /dev/disk/by-id".  The id should
    be the device itself not a partition.  The reason for this is that
    the kernel may mistakenly flag USB flash disks as rotational.  This also
    allows for USB rotational and USB flash to be precisely given the proper
    scheduler or to override the auto applied values if you need latency
    guarantees.

    Examples:

      OT_KERNEL_IOSCHED_OVERRIDE="ata-XXX_XXXXXXXX-XXXXXXX_XX-XXXXXXXXXXXX;bfq-low-latency"
      OT_KERNEL_IOSCHED_OVERRIDE="ata-XXX_XXXXXXXX-XXXXXXX_XX-XXXXXXXXXXXX;bfq-throughput usb-XXXXXXXX_XXXX_XXXX_XXXXXXXXXXXXXXXXXXXXXXXX-0:0;none"
      OT_KERNEL_IOSCHED_OVERRIDE="usb-YYYYYYYY_YYYY_YYYY_YYYYYYYYYYYYYYYYYYYYYYYY-0:0;hdd usb-XXXXXXXX_XXXX_XXXX_XXXXXXXXXXXXXXXXXXXXXXXX-0:0;flash"
      OT_KERNEL_IOSCHED_OVERRIDE="ata-XXX_XXXXXXXX-XXXXXXX_XX-XXXXXXXXXXXX;rotational"

    Acceptable values for iosched

      All acceptable values listed in OT_KERNEL_IOSCHEDS

      hdd - Large mechanical platter type
      ssd - Large NAND memory storage 
      flash - NAND memory storage for use by USB or cameras (alias for ssd)
      rotational - alias for HDD

    See also:

      OT_KERNEL_IOSCHED



    OT_KERNEL_IRQ_REMAP -- Sets IRQ remapping for virtual machine hypervisors
    or hosts to prevent malicious MSIs.  This option enables use of x2APIC
    mode.

    Acceptable values:

      1 (default when iommu is pt, lazy, or strict), 0, unset

    Unset is the same as manual.



    OT_KERNEL_KERNEL_DIR -- Sets and overrides the install location to install
    the kernel.

    Acceptable values:
      path - It must be an absolute path.
      unset - Sets to /boot



    OT_KERNEL_KEXEC -- Sets kexec config to allow to reboot into a new kernel
    instantly.  Booting into a poorly configured destination kernel can lead to
    severe security holes.  It is not recommended to use this feature unless the
    destination kernels are signed and updated daily.

    The OT_KERNEL_DMA_ATTACK_MITIGATIONS has higher priority and may
    override this choice.

    Acceptable values:

      1 - Enables kexec support
      0 - Disables kexec support
      unset - Use manual settings

    See also:

      OT_KERNEL_IMA
      OT_KERNEL_IMA_POLICIES



    OT_KERNEL_LSMS -- Enable and set the order for LSM (Linux Security Modules)

    Acceptable multi values: apparmor, bpf, integrity, landlock, loadpin,
    lockdown, safesetid, selinux, smack, tomoyo, yama.

    Acceptable general values:  auto, default, manual

    * auto -- Adds LSMs based on packages installed with default subsettings
    * default -- Uses "integrity,selinux,bpf" with default subsettings
      equivalent to upstream defaults
    * manual -- Uses previously manually set settings

    The "acceptable multi values" and "acceptable general values" are mutually
    exclusive.  In acceptable multi values listing, the LSMs needs to be comma
    separated and mutiple LSMs can be used.  In acceptable general values
    only one value can be used which are associated with a precreated
    listing.

    For a newly generated kernel .config with not set OT_KERNEL_LSMS, it will
    apply auto setting.  For previous installs with OT_KERNEL_LSMS is not set,
    it will apply manual.



    OT_KERNEL_N_CPUS -- Sets the max number of CPUs.



    OT_KERNEL_MENUCONFIG_COLORS -- Sets the colors for menuconfig.

    Acceptable values:

      mono - black and white
      blackbg - black with colored borders
      classic - similiar to default but with yellow text
      bluetitle - default colored with black text designed for LCDs



    OT_KERNEL_MENUCONFIG_EXTRAVERSION -- Tells the ebuild scripts to
    halt when this extraversion config is being configured.  If unset,
    it sets it to the current extraversion.



    OT_KERNEL_MENUCONFIG_RUN_AT -- Sets the location to run the menuconfig
    wrapper.

    Acceptable values:

      pre - Allow the user to run menuconfig wrapper before ebuild changes.
        This is suitable for enabling just drivers and minor edits.
      post - Allow the user to run menuconfig wrapper after ebuild changes.
        This is suitable for manual edits or mistakes by the ebuild itself.



    OT_KERNEL_MENUCONFIG_UI -- Select the menu to use when running the
    wrapper.  When this value is set to a UI, the emerge will prematurely quit
    to allow to configure it using a wrapper script.  Due to interactive bugs,
    this workaround is used instead.

    Valid values:

      config - Use line-by-line prompt frontend
      menuconfig - Use lxdialog menu frontend using ncurses
      nconfig - Use ncurses frontend
      gconfig - Use GTK+2 frontend
      xconfig - Use Qt5 frontend
      disable - disables menuconfig
      none - disables menuconfig

    If unset, it assumes disabled.

    For the full list, see
    https://github.com/torvalds/linux/blob/master/scripts/kconfig/Makefile#L118



    OT_KERNEL_MODULES_SUPPORT -- Enables or disable modules support.
    For unsigned kernel modules, this will prevent loading hacked modules.
    If a option is still a module and modules support is disable, it will
    convert all modules into builtins.

    Acceptable values:

      1, 0, y, n, unset

    Unset is equivalent to maunal or previous settings if using previous config,
    or default config if new config.



    OT_KERNEL_MODULES_COMPRESSOR (optional) -- compresses the kernel
    modules.

    Acceptable values:

      NONE, GZIP, XZ, ZSTD

    If not set, it will use the manual setting.  NONE and ZSTD are only allowed
    with 5.15+.  When a new kernel config is generated, module compression is
    disabled; but can be overrided by explicitly setting it to one of the
    acceptable values.



    OT_KERNEL_PA_BITS -- the address space of the dynamic memory (e.g. RAM).
    PA_BITS correspond to N in the 2^N physical address space.

    Acceptable values:

      a number (e.g. 32, 48, etc.), auto, unset, max

    max uses the max size.  auto will auto configure but requires obtaining
    data from full built so two rebuilts.  unset is the same as manual.

    See also:

      OT_KERNEL_PAGE_SIZE
      OT_KERNEL_VA_BITS



    OT_KERNEL_PAGE_SIZE -- memory block transferred between hard drive and
    physical memory.  All transfers must be page sized.  The page size
    is architecture dependent.  Small page sizes store memory in physical more
    efficiently.  Large page sizes reduce page faults (fetching from storage).

    Acceptable values:

      a number (e.g. 4, 16, 64, etc.) in KiB, auto, unset, max, min, mid

    max uses the maximum page size.  min uses minimum page size,  mid uses
    the middle value.  auto will auto configure but requires obtaining data
    from full built so two rebuilds.  Unset is the same as upstream defaults.

    See also:

      OT_KERNEL_PA_BITS
      OT_KERNEL_VA_BITS



    OT_KERNEL_PCIE_MPS -- sets the Maximum Paylond Size (MPS) and Max Read
    Request Size (MRRS).  This setting may improve performance by reducing
    overhead and packets transferred.

    Acceptable values:

      bios - use bios defaults
      default - use PCIe bridge value
      hotplug-optimal - alias for default
      hotplug-safe - MPS lowered for compatibility to prevent hotplug fail
      p2p-safe - MPS lowered for compatibility with PCIe-to-PCIe to prevent fail
      performance - use max parent MPS and increase MRRS to no more than MPS
      safe - max MPS common to all devices at boot
      unset - use manual settings



    OT_KERNEL_PKGFLAGS_ACCEPT -- is a list of auto apply-able kernel
    config symbols to accept per package-wise.  They should be listed as
    space separated.

    See also:

      Kernel pkgflags environment variables



    OT_KERNEL_PKGFLAGS_REJECT -- is a list of auto apply-able kernel config
    symbols to reject.  These sets of flags are identified (id) with a 7 digit
    hash code and used to either skip the config and apply the config
    manually or permit a disable_debug conflict to priorize disable_debug
    removal of debug keyworded kernel config symbols. They should be listed as
    space separated.

    Currently, this does not unset the kernel config flags but means that it
    will not apply the set of kernel configs.  One must manually unset these
    options.  The reason why it is not so easy to automate unsetting is
    because some of these settings may have multiple dependence on a kernel
    config.
    
    See also:

      Kernel pkgflags environment variables



    OT_KERNEL_PKU -- enables PKU (Memory Protection Keys) for supported
    hardware.

    Acceptable values:

      1, 0, auto, unset

    Unset is the same as auto.



    OT_KERNEL_PRIMARY_EXTRAVERSION (optional) -- sets the primary extraversion
    for the symlink USE flag.  If not set, it defaults to ot.



    OT_KERNEL_PRIMARY_EXTRAVERSION_WITH_TRESOR (optional) -- sets the primary
    extraversion for tresor_sysfs USE flag.  If not set, it defaults to ot.



    OT_KERNEL_PRIVATE_KEY -- The absolute path to a .pem private key file
    used for module signing.  This should only be set in the command line
    not saved in any make.conf, any per package configuration file, any
    env.  When done the variable should be overritten a new string and
    then not set.

    * Example:

# Scramble path if possible: \
OT_KERNEL_PRIVATE_KEY=$(dd if=/dev/urandom of=/dev/stdout bs=255 count=1 \
	status=none \
	| base64 | tr "\n" " " | sed -e "s| ||g")

# Remove the variable from memory: \
unset OT_KERNEL_PRIVATE_KEY



    OT_KERNEL_PROCESSOR_CLASS -- sets the type of CPU class for used in this
    kernel.  This will reduce or increase latency.  If you do not see separate
    memory banks per socket, it probably means it is not designed for NUMA.
    Setting this may change the memory allocator which may affect the network
    TPS (throughput).

    Acceptable values:

      uniprocessor, unicore, multicore, smp, smp-unicore, smp-legacy, multicore,
      numa-multicore, numa-unicore, auto, custom, manual, unset

    Unset is equivalent to manual.

    See also:

      OT_KERNEL_SLAB_ALLOCATOR



    OT_KERNEL_SATA_LPM_MAX -- Set the SATA link power management policy for max performance. (Default:  1)
    OT_KERNEL_SATA_LPM_MID -- Set the SATA link power management policy for mid performance. (Default:  0)
    OT_KERNEL_SATA_LPM_MIN -- Set the SATA link power management policy for power saving. (Default:  0)

    Acceptable values:

      0 - firmware default
      1 - maximum performance
      2 - medium performance
      3 - medium performance with initiated power management by device
      4 - minimal power use

    Using 3-4 may cause data loss that manifest as freezes.
    Using 4 may cause disk corruption with certain disks.



    OT_KERNEL_SATELLITE_INTERNET -- Set this to optimize satellite internet.

    Acceptable values:

      1, 0, unset

    Unset is equivalent to manual.



    OT_KERNEL_SLAB_ALLOCATOR -- Set the slab allocator

    Acceptable values:
      auto - Auto detect based on kernel config
      custom - Use previous settings.
      manual - Use previous settings.
      slab - Use old allocator.  Recommended for networked computers for ~10%
        more network TPS (throughput) and systems with ~2 % lower CPU usage
        (and energy consumed).  However, this may slow down the emerge unpack
        phase.
      slob - Use allocator for embedded (e.g. gadgets, mp3 players).
      slub - Use allocator for super computers and upstream default with SMP
        systems.  It has lower GiB overhead compared to slab in 1000+ processor
        systems.
      unset - It uses auto

    See also:

      OT_KERNEL_PROCESSOR_CLASS



    OT_KERNEL_SGX -- sets SGX (Software Guard eXtensions) support for supported
    hardware.

    Acceptable values:

      1, 0, auto, unset

    Unset is the same as auto.



    OT_KERNEL_SIGN_MODULES (optional) -- signs kernel modules with sha384
    or sha512.  This option is dependent on OT_KERNEL_MODULES_SUPPORT=y.

    Acceptable values:

      sha384, sha512, unset, 1, 0, manual

    If setting to 1, it will use sha384.  Setting to unset will assume manual.
    Setting to 0 will disable module signing and disable module sign
    verification.

    When a new kernel config is generated, module signing is disabled; but it
    can be signed by setting this to 1.  If module signing is enabled,
    it is recommended to sign external modules or these modules may no
    longer work.  External module signing is especially important especially
    for kernel graphics modules if module signing is enabled.  It is not
    forced default on to prevent any unprepared disruption.  See
    OT_KERNEL_PRIVATE_KEY section also.

    IMPORTANT:

      When OT_KERNEL_SIGN_MODULES is enabled, if the OT_KERNEL_PRIVATE_KEY
      and OT_KERNEL_SHARED_KEY are not specified, the kernel will
      autogenerate keys in the certs folder of the kernel sources.  These
      keys will be installed but the private key should be copied to a
      secure place such a encrypted store contained in a keychain or by
      steganography; and then the installed private key .pem file in the
      certs folder should be cryptographically securely destroyed with shred
      (or any secure delete program).  This is to prevent recovery and reuse
      of the private key by an untrusted user.  The private key temporarily
      stored in the certs folder should be destroyed in within 24 hours.
      Each build configuration will have a unique private-shared keys if
      using autogenerated, so all keys need to be stored and properly labeled
      to prevent mixup.



    OT_KERNEL_SIGN_KERNEL (WIP) -- Cryptographically sign the kernel for the
    type of system and install the kernel to the EFI partition if possible.

    Acceptable values:

      uefi, efi, kexec, none, not set



    OT_KERNEL_SHARED_KEY -- The absolute path to a .x509 shared key file
    used for module signing.



    OT_KERNEL_SME -- allow support for Secure Memory Encryption for
    supported hardware.  This feature is not enabled by default due to
    possible boot failure.  To test, set OT_KERNEL_SME to 1 and bootloader
    with mem_encrypt=on.  If it works after testing, you must set
    OT_KERNEL_SME_DEFAULT_ON=1 to complete protection.

    Acceptable values:

      1, 0, auto, unset

    Unset is the same as auto.



    OT_KERNEL_SME_DEFAULT_ON -- sets SME ON at boot.  This requires
    OT_KERNEL_BOOT_ARGS to have all kernel args that would be normally
    specified in the bootline to be builtin.  It will automatically add
    mem_encrypt=on and the kernel commandline provided by the bootloader
    is ignored to mitigate against an evil maid attack.

    Acceptable values:

      1, 0, unset

    Unset means 0 meaning SME is off unless mem_encrypt=on in the kernel
    command line.

    See also:

      OT_KERNEL_BOOT_ARGS



    OT_KERNEL_SSD -- Set if SSD drive is present for this kernel build.

    Acceptable values:

      1 - yes, a non-rotational hard drive is present
      0 - no SSD exists
      auto - autodetect via sysfs (default)
      unset - auto

    See also:

      OT_KERNEL_HHD



    OT_KERNEL_SWAP -- Enable or disable use of swap.

    Acceptable values:

      0, 1, y, n, manual, unset

    0 means disable and 1 means enable.  Unset is the same as manual.  It is
    recommended to use swap if the peak memory exceeds the RAM.  Otherwise,
    it should be disabled.  Peak memory is usually around 12 GB.



    OT_KERNEL_TARGET_TRIPLE -- The target triple (CHOST) to use when
    cross-compiling.  Use the expanded CHOST value.  (This can be not set but
    then defaults to ${CHOST}.)  If you put just CHOST or just CBUILD it will
    expand for each case.



    OT_KERNEL_USB_AUTOSUSPEND -- Set to -1 to disable, or set to a whole number
    to set the delay.  Some OT_KERNEL_WORK_PROFILE will automatically set it
    to -1 for gaming or digital-audio-workstations work profiles.
    


    OT_KERNEL_USE -- Per build env USE flags.  If not set, it will use the same
    USE flags set.  The scope of OT_KERNEL_USE is partially in src_prepare,
    src_configure, src_compile, partially in src_install.  The normal USE flags
    are valid in global scope, fetching and unpacking, and in the remaining
    phases.  This per build env gives more control over some patches applied,
    features allowed, reducing the attack surface of unfuzzed patchsets by
    not applying them.



    OT_KERNEL_USE_LSM_UPSTREAM_ORDER -- Use the upstream init order
    for LSM modules.
    Accepted values: 1 to use upstream order, 0 to use custom order.
    The custom order (0) can optionally apply to "acceptable multi values"
    configation and auto in acceptable general values.



    OT_KERNEL_VA_BITS -- the address space of the virtual memory (which includes
    RAM + SWAP).  PB_BITS correspond to N in the 2^N virtual address space.

    Acceptable values:

      a number (e.g. 32, 48, etc.), auto, unset, max

    full uses the max size.  auto will auto configure but requires obtaining
    data from full built.  unset is the same as manual.

    See also:

      OT_KERNEL_PA_BITS
      OT_KERNEL_PAGE_SIZE



    OT_KERNEL_VERBOSITY=N (optional) -- presentation of compiler and build
    invocation.

    Acceptable values for N:

      0 for minimal output, 1 for showing compiler flags, 2 for reasons for
      rebuild.



    OT_KERNEL_WORK_PROFILE -- sets the power-performance profile while taking
    in consideration productivity and latency requirements.  This value can
    be unset which is equivalent to manual.

    Acceptable values:

      arcade
      builder-dedicated
      builder-interactive
      cryptocurrency-miner-dedicated
      cryptocurrency-miner-workstation
      casual-gaming
      casual-gaming-laptop
      custom
      digital-audio-workstation
      distributed-computing-server
      distributed-computing-client
      desktop-guest-vm
      dvr
      file-server
      gamedev
      gaming-guest-vm
      gpu-gaming-laptop
      green-hpc
      green-pc
      greenest-hpc
      greenest-pc
      hpc
      jukebox
      lan-tournament
      laptop
      mainstream-desktop
      manual
      media-player
      media-server
      presentation
      pro-gaming
      remote-tournament
      renderfarm-dedicated
      renderfarm-workstation
      sbc
      smartphone
      streamer-desktop
      solar-desktop
      solar-gaming
      tablet
      touchscreen-laptop
      video-smartphone
      video-tablet
      web-server
      workstation

    Notes:

      Some profiles are conveniently aliases.
      builder* are used for emerging.

      The OT_KERNEL_WORK_PROFILE is disjoint from OT_KERNEL_HARDENING_LEVEL to
      provide flexibility.

      You can only use one OT_KERNEL_WORK_PROFILE per profile/extraversion.

      It's recommended to have a separate profile/extraversion per profile.

      Examples:

      # For gaming without user generated content
      /etc/portage/ot-sources/5.16/gaming/x86_64/env:
      OT_KERNEL_EXTRAVERSION="gaming"
      OT_KERNEL_WORK_PROFILE="pro-gaming"
      OT_KERNEL_HARDENING_LEVEL="trusted"
      ...

      # For general use or web browsing
      /etc/portage/ot-sources/5.16/web/x86_64/env:
      OT_KERNEL_EXTRAVERSION="web"
      OT_KERNEL_WORK_PROFILE="mainstream-desktop"
      OT_KERNEL_HARDENING_LEVEL="untrusted"
      ...

    See also:

      OT_KERNEL_HARDENING_LEVEL



    OT_KERNEL_ZSWAP_ALLOCATOR -- chooses the swap allocator which tries to fit
    the number of compressed pages while aiming to reduce fragmentation.

    Acceptable values:

      zsmalloc, zbud, z3fold, x2, x3, xn, unset, manual, auto

    If unset, it assumes manual.  xn is an alias for zsmalloc; x2 is a alias
    for zbud; x3 is an alias for z3fold.  auto is an alias for zszmalloc.  It is
    recommended to use xn for less than 12 GB of RAM.  For 12 GB and above, it
    should be unset.  The 12 GB is arbitrary and based on worst case peak
    memory.



    OT_KERNEL_ZSWAP_COMPRESSOR -- chooses a swap page algorithm

    Acceptable values:

      deflate, lzo, 842, lz4, lz4hc, zstd, unset, manual, auto

    If unset, it assumes manual.  auto is an alias for lzo.  It is recommended
    to use lz4 or zstd (or any algorithm that can achieve 2:1 compression
    ratio) for less than 12 GB of ram.  For 12 GB and above, it should be unset.
    The 12 GB is arbitrary and based on worst case peak memory.



    Kernel pkgflags environment variables:

    The pkgflags come mostly from the ebuilds' themselves.  The current
    trend is to decentralize these settings and have users to manually
    edit the kernel.  This ebuild package will do the opposite by
    centralizing these settings for purposes of a semi autoconfigured
    kernel.

    By default kernel pkgflags module is not enabled.  To enable it, set
    OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS=1 in the per buildconfig env
    file (ex. /etc/portage/ot-sources/4.16/ot/x86_64/env).

    One may reject or accept kernel settings by setting
    OT_KERNEL_PKGFLAGS_ACCEPT or OT_KERNEL_PKGFLAGS_REJECT with a space
    separated 7 digit id.  One may use the reject to manually apply
    settings for that package.

    Examples:

      OT_KERNEL_PKGFLAGS_REJECT="1ee4e36"
      OT_KERNEL_PKGFLAGS_REJECT="1ee4e36 155d9fc"
      OT_KERNEL_PKGFLAGS_REJECT="1ee4e36 155d9fc 27ea6ce"

    Most variables below have values 0 for off and 1 for on.  Not set implies
    the eclass defaults.



    Pkgflags environment variables

    These should be specified in the per buildconfig env file.  These
    environment variables are only valid if the package is installed.
    0 means off and 1 means on.

    ALSA_PC_SPEAKER - Use the ALSA speaker driver for PC speaker.

    Valid values:

      0 (default), 1

    CDROM - Support for CDROM, CD-R, CD-RW
    Valid values:  0, 1 (default)
    See also:  DVD

    CRYPTSETUP_CIPHERS - Space separated list block ciphers.

    Valid values:

      aes, anubis, camellia, cast6, serpent, twofish.

    If unset, it adds aes.

    CPU_MFG - The manufacturer of the CPU.  It is used to override the portable
    autodetect solution especially if producing a prebuilt kernel package.  This
    affects the following:

      IOMMU
      kernel_compiler_patch native option
      KVM
      PMU events
      OpenRGB

    Examples:

      CPU_MFG="amd"
      CPU_MFG="intel"

    CRYPTSETUP_INTEGRITIES - Space separated of AEAD ciphers used for
    additional encryption with data integrity.  Only for LUKS2.

    Valid values:

      poly1305, hmac-sha256, hmac-sha512

    Unset by default.  (Restricted pairings: chacha20 with poly1305,
    aes-xts-plain64 with hmac-sha256 or hmac-sha512.)  For weaknesses, see
https://gitlab.com/cryptsetup/cryptsetup/-/blob/main/docs/v2.0.0-ReleaseNotes#L261
    For consequences of compromised integrity or data corruption, see
https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/dm-integrity.html

    CRYPTSETUP_IVS - Space separated list for IV generation.
    Valid values:  essiv, random, plain64.  If unset, it adds essiv, plain64.

    CRYPTSETUP_MODES - Space separated list for cipher modes of operation.
    Valid values:  adiantum, cbc, cfb, ctr, cts, ofb, xts.  If unset, it adds
    adiantum, cbc, xts.

    CRYPTSETUP_HASHES - Space separated list for password pseudorandomness.
    Valid values:  blake2b, blake2s, rmd160, sha256, sha512, sha3, wp512.
    If unset, it adds rmd160, sha256.

    CRYPTSETUP_TCRYPT - Add support for tcrypt.
    Valid values:  0, 1 (default).

    DVD - Support for DVD, DVD-R, DVD-RW, DVD+R, DVD+RW, Blu-Ray
    Valid values:  0, 1 (default)
    See also:  CDROM

    E300C3 - Add support for PMU performance counters for e300c3.
    E300C4 - Add support for PMU performance counters for e300c4.
    Valid values:  0 (default), 1

    EXT4_ENCRYPTION - Add support for ext4 encryption
    Valid values:  0, 1 (default).

    HT - Add mitigations against HT (for building cross kernels) side-channel
    attacks.
    Valid values: 0, 1, 2, unset.
    0 - manual setting
    1 - weak mitigations
    2 - strongest available mitigations (HT off; not implemented in the eclass
        yet)
    Unset means custom.
    (Auto detection would be nice, but may be counter productive if hardware
    already fixed or feature disabled.  This is why it is a manual setting.)

    IPTABLES_CLIENT - Add support for iptables client.
    Valid values:  0, 1 (default).

    IPTABLES_ROUTER - Add support for iptables router.
    Valid values:  0 (default), 1.

    KVM_ADD_IGNORE_MSRS_EQ_1 - Adds the kvm.ignore_msrs=1 to the kernel command
    line to fix virtual machine crashes as a result of accessing unsupported
    MSR registers.  You must may remove kvm.ignore_msrs=1 from the kernel
    config if you decide to disable it.
    Valid values:  0 (default), 1.

    KVM_GUEST_MEM_HOTPLUG - Add support for hotplugging dynamic memory.
    Valid values:  0 (default), 1.

    KVM_GUEST_PCI_HOTPLUG - Add support to dynamically remove a PCI device
    and / or a disk.  Hot plugging disks with this option is not a mistake.
    Valid values:  0 (default), 1.

    KVM_GUEST_VIRTIO_BALLOON - Add support to dynamic adjustment of the dynamic memory
    of the guest.
    Valid values:  0 (default), 1.

    KVM_GUEST_VIRTIO_CONSOLE - Add support for piping data between guest and host.
    Valid values:  0 (default), 1.

    KVM_GUEST_VIRTIO_MEM - Add support for virtio-mem.  This is more secure than
    the other kernel virtio memory hotplug drivers.
    Valid values:  0, 1 (default).

    KVMGT - Add support for KVMGT with GVT-g.  You may manually remove i915.enable_gvt=1
    from the kernel kernel config if you decide to disable it.
    Valid values:  0 (default), 1.
    See also: KVM_ADD_IGNORE_MSRS_EQ_1

    LM_SENSORS_MODULES - Add modules for lm-sensors.
    Valid values:  0 (default), 1.

    MDADM_RAID - Add support for software RAID.
    Valid values:  0, 1 (default).

    NFS_CLIENT - Add support for nfs client.
    Valid values:  0, 1 (default).

    NFS_SERVER - Add support for nfs server.
    Valid values:  0, 1 (default).

    MEMCARD_MMC - Build all MMC (MultiMediaCard) modules.
    Valid values:  0 (default), 1.
    See also:  MEMCARD_SD, MEMCARD_SDIO, USB_MASS_STORAGE

    MEMCARD_SD - Build all SD (Secure Digital / SD Card) modules.
    Valid values:  0 (default), 1.
    See also:  MEMCARD_MMC, MEMCARD_SDIO, USB_MASS_STORAGE

    MEMCARD_SDIO - Build all SD (Secure Digital Input Output) modules.
    Valid values:  0 (default), 1.
    See also:  MEMCARD_MMC, MEMCARD_SD, USB_MASS_STORAGE

    MICROCODE_SIGNATURES -- Whitelist processor signatures.  If changed, it will
      replace the ebuild defaults.  Requires OT_KERNEL_CPU_MICROCODE=1.
    Valid values:
      See iucode_tool man page for details.
    Examples:
      MICROCODE_SIGNATURES="-S" # Equivalent to --scan-system=auto ; Not recommended for multisocket mobos.
      MICROCODE_SIGNATURES="--scan-system=exact" # Recommended for multisocket, server.  Ebuild default.
      MICROCODE_SIGNATURES="-s 0x000306c3"

    MICROCODE_BLACKLIST -- Blacklist processor signatures.
      Requires OT_KERNEL_CPU_MICROCODE=1.
    Valid values:
      See iucode_tool man page for details.
    Examples:
      MICROCODE_BLACKLIST="-s !0x000406f1"

    OPENRGB_RESOLVE_ACPI_SMBUS_CONFLICT - Add additional kernel command line
    args to fix ACPI and SMBUS conficts.
    Valid values:  0 (default), 1.

    OSS - Force add support for OSS sound.
    Valid values:  0 (default), 1.

    OSS_MIDI - Force added support for OSS MIDI.
    Valid values:  0 (default), 1.

    SANE_SCSI - Add support for SCSI scanners.
    Valid values:  0 (default), 1.

    SANE_USB - Add support for USB scanners.
    Valid values:  0, 1 (default).

    STD_PC_SPEAKER - Add support for the PC speaker with the standard PC speaker
    driver.
    Valid values:  0, 1 (default).

    TPM - Force added support for TPM (Trusted Platform Module).
    Valid values:  0 (default), 1.

    QEMU_HOST - Add support for QEMU Linux host.
    Valid values:  0, 1 (default).

    QEMU_GUEST_LINUX - Add support for QEMU Linux guests.
    Valid values:  0 (default), 1.

    QEMU_ETHERNET_BRIDGING - Add support for ethernet bridging.
    Valid values:  0 (default), 1.

    USB_FLASH_EXT2 - Add support for ext2 USB flash disks (aka USB thumb drive)
    Valid values:  0 (default), 1.

    USB_FLASH_EXT4 - Add support for ext4 USB flash disks (aka USB thumb drive)
    Valid values:  0, 1 (default).

    USB_FLASH_F2FS - Add support for F2FS USB flash disks (aka USB thumb drive)
    Valid values:  0 (default), 1.

    USB_FLASH_UDF - Add support for UDF USB flash disks (aka USB thumb drive)
    Valid values:  0 (default), 1.

    USB_MASS_STORAGE - Build all USB mass storage drivers which includes
    USB hard disks drivers, CD writers, MP3 player storage, CompactFlash,
    SmartMedia support
    Valid values:  0 (default), 1.
    See also:  MEMCARD_MMC, MEMCARD_SD, MEMCARD_SDIO

    USE_SUID_SANDBOX - Force adding SUID sandbox support for Blink based apps
    or web browsers.
    Valid values:  0 (default), 1.

    VIRTUALBOX_GUEST_LINUX - Add support for VirtualBox Linux guests.
    Valid values:  0, 1 (default).

    VSYSCALL_MODE - Select vsyscall mode.
    Valid values:  full, emulate (default).

    YUBIKEY - Force added support for YubiKey.
    Valid values: 0 (default), 1

    X86_MICROARCH_OVERRIDE - Override the -march=native or -march=generic.  With
    the help of the kernel_compiler_patch, more march values are exposed based
    on compiler support.  Setting to a specific microarchitecture is useful for
    prebuilt kernel packages.  For the greatest portablility, use GENERIC_CPU.
    For autodetection, use a MNATIVE* option.  However, the MNATIVE* option
    only works when the builder machine (CBUILD) is the same as the target
    or host machine (CTARGET/CHOST) to run the kernel.  The environment variable
    only valid in x86 and x86_64.  STATUS:  This setting may be removed in the
    future.

    If unset, it will use a MNATIVE* or GENERIC_CPU matching the
    march equivalent.  The MNATIVE* name changes depending if you are using
    the 4.14 series.

    The custom or manual value is provided to use previously set values.

    The availability of some options or spelling below may depend on
    the version of the compiler and the version of the kernel_compiler_patch.
    See arch/x86/Kconfig.cpu for details.  It is not necessary to use the
    kernel_compiler_patch, but this environment variable also works with
    the vanilla unpatch set.

    Examples:

      X86_MICROARCH_OVERRIDE="GENERIC_CPU"
      X86_MICROARCH_OVERRIDE="MATOM"
      X86_MICROARCH_OVERRIDE="manual"

    ZEN_DOM0 - Use the Domain 0 (privileged, backend, host) kernel config.  Both
    ZEN_DOM0 and ZEN_DOMU are mutually exclusive.
    Valid values: 0, 1 (default)

    ZEN_DOMU - Use the Domain U (unprivileged, frontend, guest) kernel config.
    Both ZEN_DOM0 and ZEN_DOMU are mutually exclusive.
    Valid values: 0 (default), 1



    disable_debug environment variables:

    PERMIT_NETFILTER_SYMBOL_REMOVAL -- Remove extra symbols containing names
    with those keywords.  Note, some of these symbols may be beneficial to
    netfilter and not be related to debugging.  By default, this is disabled.

    Acceptable values:

      1 to remove symbols, 0 to not remove symbols.



    Environment variables for genpatches:
    
    GENPATCHES_BLACKLIST -- a space separated list of genpatches to ban.
    See the genpatches website for the number to patch correspondance.

    Examples:

      GENPATCHES_BLACKLIST="2500"
      GENPATCHES_BLACKLIST="2500 2600"



    Environment variables for zen-sauce:

    ZENSAUCE_BLACKLIST -- a space separated list of zen-sauce commit ids to ban.
    ZENSAUCE_WHITELIST -- a space separated list of zen-sauce commit ids to apply.

    Both 7 and 40 digit commit IDs are accepted.

    Examples:

      ZENSAUCE_BLACKLIST="19be35c 1baa02f"
      ZENSAUCE_BLACKLIST="1baa02fbd7a419fdd0e484ba31ba82c90c7036cf ef12d902c1323bbbeacc3babc91aae15976474ca 56f6f4315aedbbcbef8ad61f187347c20a270e49"
      ZENSAUCE_WHITELIST="4b03a1c 613d2ac"

    For a full list of commits, see the commit history.

    For 4.19, see:
    https://github.com/torvalds/linux/compare/v4.19...zen-kernel:4.19/misc

    For 5.4, see:
    https://github.com/torvalds/linux/compare/v5.4...zen-kernel:5.4/zen-sauce

    For 5.10, see:
    https://github.com/torvalds/linux/compare/v5.10...zen-kernel:5.10/zen-sauce

    For 5.15, see:
    https://github.com/torvalds/linux/compare/v5.15...zen-kernel:5.15/zen-sauce

    For 6.0, see:
    https://github.com/torvalds/linux/compare/v6.0...zen-kernel:6.0/zen-sauce

    Use the zen-sauce USE flags instead of passing their Zen commit IDs
    equivalents.



    Environment variables for the cve_hotfix USE flag.

    Several global env vars can be used to control this flag that
    you set in your per extraversion env file:

    CVE_ALLOW_CRASH_PREVENTION - is set to 1 to accept (default), 0 to reject
         if to apply commits that prevent crashes, memory leaks, overflows, and
         also adds data validations checks surrounding a fix for a CVE.
    CVE_ALLOW_RISKY_BACKPORTS - is set to 0 (default) to not apply, 1 to apply
         risky backport.  Risky backports are untested and may lead to data loss
         or data corruption, non functioning driver/device, or irreversible
         damage.
    CVE_ALLOW_UNTAGGED_PATCHES - is set to 0 to not accept, 1 to accept
         (default).  This is used to inspect patches or commits for viable
         official fix from kernel.org or github.com/torvals if a url is not
         marked Patch or Vendor Advisory.
    CVE_BLACKLIST_FIXES - is a string of CVE ids to reject fixes indended if
         runtime or compile time failure occurs.
    CVE_DELAY - is set to 1 (default) to enable or 0 to disable the 30 second
         delay per entry in the report.
    CVE_FIX_REJECT_DISPUTED - is set to 0 to not reject (default), 1 to reject
         to applying a CVE fix marked as disputed.
    CVE_FIX_TRUST_LEVEL - an "inclusive or" bit mask that controls classes of 
         cve hotfixes to accept.  See ot-kernel-cve.eclass for acceptable
         values.  You will need to use the hex value equivalent since these
         identifier constants are not initialized in the
         env file.
    CVE_LANG - Report language (default:  en)
    CVE_MAX_BULK_CONNECTIONS - maximum large downloads at a time, 5 is default
    CVE_MAX_PATCH_CONNECTIONS - maximum patch downloads at a time, 100 is
         default
    CVE_MIN_YEAR - starting patching-download-drytest year, default is 1999.

    See the ot-kernel-cve eclass for details.

    Examples:

      CVE_FIX_TRUST_LEVEL=0x00050000 # Same as 0x00010000 | 0x00040000
      CVE_BLACKLIST_FIXES="CVE-2019-14814 CVE-2019-14895"
      CVE_DELAY=0
      CVE_ALLOW_RISKY_BACKPORTS=1


    Please read the metadata.xml comments for more info.
  </longdescription>
  <upstream>
    <!--

      For this ebuild, eclasses, cve_hotfix, disable_debug, tresor_x86_64,
      tresor_x86_64-256-bit-key-support

    -->
    <bugs-to>
      https://github.com/orsonteodoro/oiledmachine-overlay/issues
    </bugs-to>

    <!--

      For TCP BBR v2 support and documentation, see

      https://github.com/google/bbr

    -->

    <maintainer status="active" type="person">
      <!-- For BMQ, PDS, Project C -->
      <email>cchalpha@gmail.com</email>
      <name>Alfred Chen</name>
    </maintainer>

    <!--

      For CFI maintainers, see

https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/tree/MAINTAINERS?h=for-next/clang/pgo&id=3bc68891829b776b9a5dd9174de05e69138af7b6#n4439

    -->

    <maintainer status="active" type="project">
      <!-- For genpatches -->
      <email>kernel@gentoo.org</email>
      <name>Gentoo Kernel Project</name>
    </maintainer>

    <!--

      For futex (FUTEX_WAIT_MULTIPLE), futex2, see

https://gitlab.collabora.com/tonyk/linux/-/commits/futex-proton-v3
https://gitlab.collabora.com/tonyk/linux/-/commits/futex2
https://gitlab.collabora.com/tonyk/linux/-/commits/futex2-proton

    -->

    <maintainer status="active" type="person">
      <!-- For kernel_compiler_patches -->
      <email>graysky AT archlinux DOT us</email>
      <name>graysky</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- For the Linux kernel -->
      <name>Linus Torvalds</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- For MuQSS -->
      <email>kernel at kolivas dot org</email>
      <name>Con Kolivas</name>
    </maintainer>

    <!--

    For PGO maintainers, see

https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/tree/MAINTAINERS?h=for-next/clang/pgo&id=3bc68891829b776b9a5dd9174de05e69138af7b6#n14390

    -->

    <!-- For -rt -->
    <bugs-to>
      https://wiki.linuxfoundation.org/realtime/communication/bugreport
    </bugs-to>
    <doc lang="en">
      https://wiki.linuxfoundation.org/realtime/documentation/start
    </doc>

    <!--

      For UKSM, see

https://github.com/dolohow/uksm

    -->

    <maintainer status="active" type="person">
      <!-- For TRESOR AES-NI and i386, 2010 -->
      <email>tilo.mueller@informatik.uni-erlangen.de</email>
      <name>Tilo Mueller</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- For TRESOR (aes-128) i386, 2012 -->
      <email>johannes@jgoetzfried.de</email>
      <name>Johannes Goetzfried</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- For the zen patchset -->
      <email>jan.steffens@gmail.com</email>
      <name>Jan Alexander Steffens</name>
      <!-- AKA heftig -->
    </maintainer>
  </upstream>
  <use>
    <flag name="bbrv2">
      Patches the kernel with BBRv2 TCP congestion control for improved goodput,
      which is the actual useful data over time alone, than its predecessor with
      around less than 5 percent retransmission comparable to Cubic but trading
      off ~5-10 MBps raw throughput, which includes data retransmissions and
      overhead.
    </flag>
    <flag name="bfq-mq">
      Update the BFQ IO scheduler from single queue to multi-queue in 4.14.x
      series only.  The multi-queue design was utilized in later kernels.
      Updating may present IO related problems, or have hidden unfixed bugs
    </flag>
    <flag name="bmq">
      Patches the kernel to use BMQ CPU scheduler, a more simple scheduler.
    </flag>
    <flag name="bmq-quick-fix">
      Patches the kernel with fixes to BMQ.
    </flag>
    <flag name="bzip2">
      Add support for bzip compression
    </flag>
    <flag name="cfi">
      Ensures that the toolchain is ready for CFI support (for arm64 in
      production, and for x86_64 in development).  Control Flow Integrity (CFI)
      is mitigation against forward edge attacks and backward edge attacks
      (through the shadowcallstack USE flag) to mitigate against arbitrary code
      execution.
    </flag>
    <flag name="cfs">
      Uses the CFS (Completely Fair Scheduling) CPU scheduler and not apply
      any third-party CPU scheduler.
    </flag>
    <flag name="clang">
      This is a stronger check for those prefer Clang over GCC and to make sure
      the prerequisites are met.
    </flag>
    <flag name="clang-pgo">
      Adds experimental Clang PGO support.
    </flag>
    <flag name="cve_hotfix">
      Applies patches to resolve CVEs (Common Vulnerabilities and Exposures).
      Not enabled by default.

      Currently, not all patch fixes under code review, custom kernel vendors
      from mobile hardware manufacturers, or major distro advisories,
      get applied.

      Newer CVE fixes should be automatically added and applied per emerge.

      It uses an external script from https://github.com/orsonteodoro/tuxparoni

      This USE flag is experimental.
    </flag>
    <flag name="disable_debug">
      Installs scripts to disable debugging, tracing, verbose output or related
      code paths.
    </flag>
    <flag name="exfat">
      Enables or removes exFAT
    </flag>
    <flag name="genpatches">
      Applies the genkernel patch set.
    </flag>
    <flag name="genpatches_1510">
      Applies the genkernel patch 1510 for protected hardlinks and symlinks
      during early boot.  Disabled because it may cause indefinte lock up during
      OOM (or very high memory use) or cause failures in different software
      during runtime.  Enabling it reverts
https://github.com/torvalds/linux/commit/561ec64ae67ef25cac8d72bb9c4bfc955edfd415
    </flag>
    <flag name="gtk">
      Add support for gconfig, the GTK+2 kernel config editor
    </flag>
    <flag name="gzip">
      Add support for gzip compression
    </flag>
    <flag name="futex">
      Patches the kernel with FUTEX_WAIT_MULTIPLE futex syscall option which may
      be used in the proton, proton-wine, experimental-wine version 5 or above
      packages.  It may reduce CPU usage by less than 5%.
    </flag>
    <flag name="futex2">
      Patches the kernel with older futex2 syscall specification.  This may
      reduce the CPU usage by less than 5%.  It is recommended to combine this
      USE flag with the futex2-proton USE flag as well since no known software
      uses the syscall's original data structures.
    </flag>
    <flag name="futex2-proton">
      Modifies the syscall data structures to be compatible with
      experimental-wine version 5.13 or above.  This will break compatibility.
    </flag>
    <flag name="kcfi">
      Apply KCFI sanitization for forward edge control flow integrity but
      limited to only indirect calls.

      It requires the KCFI sanitizer patch (D119296) applied to both
      sys-devel/clang-15 or newer and sys-devel/llvm-15+ or newer.  The kcfi
      feature is still under code review.

      See also https://wiki.gentoo.org/wiki//etc/portage/patches
    </flag>
    <flag name="lto">
      Fulfills the ThinLTO requirements.
    </flag>
    <flag name="lz4">
      Add support for lz4 compression
    </flag>
    <flag name="lzma">
      Add support for lzma compression
    </flag>
    <flag name="lzo">
      Add support for lzo compression
    </flag>
    <flag name="multigen_lru">
      Applies the vanilla Multi-Gen LRU patch for improved page reclamation.
    </flag>
    <flag name="muqss">
      Patches the kernel with Con Kolivas patchset and includes his skiplist
      based MuQSS CPU scheduler.
    </flag>
    <flag name="ncurses">
      Add support for nconfig and menuconfig, the ncurses kernel config editors
    </flag>
    <flag name="openssl">
      Add support for signing modules and kernels
    </flag>
    <flag name="pds">
      Patches the kernel with an alternative skiplist based scheduler.
    </flag>
    <flag name="prjc">
      Applies the Project C CPU scheduler.
    </flag>
    <flag name="qt5">
      Add support for xconfig, the Qt5 kernel config editor
    </flag>
    <flag name="rt">
      Patches the kernel with the PREEMPT_RT patch which tries to minimize
      non-preemptible parts of the kernel.  It's experimental when combined with
      other USE flags and patchsets.  Realtime is not recommended for desktop
      use but for dedicated and isolated setups.  Never give untrusted apps
      realtime access.  The rt patchset is used by music producers that require
      low latency audio.
    </flag>
    <flag name="shadowcallstack">
      Ensures that shadow call stack dependencies are installed.  Protects from
      ROP back edge attacks from arbitary code execution.
    </flag>
    <flag name="symlink">
      Updates the the /usr/src/linux symlink for every newer release.
    </flag>
    <flag name="tresor">
      Controls application of TRESOR, a cold boot resistant AES cipher.  AES
      keys are stored in registers instead of RAM.  It only supports one device
      at a time but supports 128-, 192-, 256- bit keys.
    </flag>
    <flag name="tresor_aesni">
      Patches the kernel with cold boot resistant AES hardware accelerated
      AES-NI support.
    </flag>
    <flag name="tresor_i686">
      Patches the kernel with cold boot resistant AES using SSE for 32 bit
      systems.
    </flag>
    <flag name="tresor_prompt">
      Enables the TRESOR prompt in the kernel config.
    </flag>
    <flag name="tresor_sysfs">
      Builds the external key setting program.
    </flag>
    <flag name="tresor_x86_64">
      Patches the kernel with cold boot resistant AES using SSE for 64 bit
      systems.
    </flag>
    <flag name="tresor_x86_64-256-bit-key-support">
      Adds 192- and 256-bit AES key support to the 64-bit sse2 version of
      TRESOR.
    </flag>
    <flag name="uksm">
      Patches the kernel with the Ultra Kernel Samepage Merging, a type of
      memory page deduper algorithm.

      Using it may be insecure.  For details, see
      https://en.wikipedia.org/wiki/Kernel_same-page_merging#Security_risks
    </flag>
    <flag name="xz">
      Add support for xz compression
    </flag>
    <flag name="zen-multigen_lru">
      Enables and sets default time interval between 0.1 to 1 second [based on
      the timer frequency selected] for preventing certain working sets from
      being OOM-killed via the zen-kernel patchset.  The vanilla Multi-Gen LRU
      patch does not enable time based OOM-kill prevention by default.  For
      5.15, it adds the le9ec patch for size based thrash prevention and
      livelock prevention when clean pages are exausted.
    </flag>
    <flag name="zen-muqss">
      Apply the zen-kernel's version of MuQSS
    </flag>
    <flag name="zen-sauce">
      Patches the kernel with selected Zen kernel.  The zen-sauce set contains
      patches that add drivers or functionality related to gaming, laptops,
      optimizations, etc.
    </flag>
    <flag name="zen-sauce-all">
      Blanket whitelist all zen-sauce commits
    </flag>
    <flag name="zen-tune">
      Patches the kernel with some Zen Interactive Tuning, particularly those
      marked INTERACTIVE.
    </flag>
    <flag name="zstd">
      Add support for zstd compression
    </flag>
  </use>
</pkgmetadata>
