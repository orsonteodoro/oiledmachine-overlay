<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <longdescription>
    ot-sources is a customizable patchset compilation package that applies
    patches for performance, encryption, and security to the Linux kernel.
  </longdescription>
  <![CDATA[
  <!--

    oiledmachine-overlay notes:

    The package prefers to unbundle patchsets, in preference for the
    version of the feature that was released directly from original author,
    but sometimes prefers the bundled repackaged version for the major.minor
    series especially if they are difficult to maintain between major.minor
    series.

    Power users can choose either the BMQ, PDS, MuQSS CPU schedulers.  These
    schedulers focus on normal non-realtime tasks.

    Multi-Gen LRU is a redesign of the current LRU design with
    more complex and accurate separation into multiple lists (aka generations)
    instead of the current LRU design of 2 which may be too coarse and result in
    inefficient reclamation.  The recommended tunings address mobile, cloud,
    desktop usage and should be customized or considered if not desktop which
    may differ from the defaults.

    The TRESOR patch provides increased mitigation from cold boot resistant
    attacks.  TRESOR is vulnerable to a DMA attack side-channel attack.  All
    older hardware that does not have IOMMU VT-d / Vi and not using it is
    vulnerable.  DMA attack is used to extract keys.  See

      https://en.wikipedia.org/wiki/List_of_IOMMU-supporting_hardware

    for a list of hardware supporting IOMMU.

    Compiler based optimizations are provided by GraySky2's
    kernel_compiler_patch.  If you would like to apply this patch, simply add
    -march=native or -march=SUBARCH or -mcpu=SUBARCH.  If using cross-compiling
    or distcc, do not use the native option but the microarchitecture kernel
    config option instead.

    The O3 patch allows for O3 compiler optimiation is provided by the
    zen kernel.  Using it requires adding CFLAGS="${CFLAGS} -O3"
    equivalent to per-package USE flags.

    Older point releases are removed to eliminate some of the previously
    announced 0-day exploits.

    4.14.x kernel series is kept around for vanilla TRESOR.
    TRESOR for 5.x is experimental.  Only CBC mode is only recommended
    and should only be used.

    Using TRESOR with fscrypt is currently not supported.  The ebuild
    developer is currently working towards that goal.  Changing the key
    in the middle of writing may result in data loss, meaning half the
    data may be encrypted with two different keys.  The fscrypt version
    with TRESOR support will address this problem.

    Only Long Term Support (LTS) kernel and those marked stable
    in kernel.org are kept.  However, feature patchsets typically do not
    backport updates, so the latest stable should be used if you want updates
    or bugfixes for patchsets.  For reliable working builds, use the
    LTS series.

    Kernel series | Patchset  			     | LTS [1,2]

    5.4	(LTS)						Y
		    -ck / MuQSS				N
		    -rt	(RT_PREEMPT)			Y
		    BMQ					N
		    genpatches				N
		    kernel_compiler_patch		N
		    TRESOR (AES-NI) [5]			b
		    TRESOR (x86) [5]			b
		    TRESOR (x86-64) [5]			E
		    UKSM				R
		    zen-muqss				N
		    zen-sauce				N

    5.10 (LTS)						Y
		    -ck / MuQSS				N
		    -rt	(RT_PREEMPT)			Y
		    BMQ					N
		    genpatches				Y
		    kernel_compiler_patch		N
		    Project C				N
		    TCP BBR v2				N
		    TRESOR (AES-NI) [5]			b
		    TRESOR (x86) [5]			b
		    TRESOR (x86-64) [5]			E
		    UKSM				R
		    zen-muqss				N
		    zen-sauce				N

    5.15 (LTS)						Y
		    -rt	(RT_PREEMPT)			A
		    CFI					N
		    Clang PGO				E
		    kernel_compiler_patch		A
		    genpatches				A
		    multigen_lru			N
		    Nest				R
		    Project C				N
		    TCP BBR v2 [5]			E
		    TRESOR (AES-NI) [5]			b
		    TRESOR (x86) [5]			b
		    TRESOR (x86-64) [5]			E
		    UKSM				R
		    zen-multigen_lru			N
		    zen-sauce				N
						
    6.1 (LTS)						Y
		    -rt	(RT_PREEMPT)			A
		    Clang PGO				E
		    genpatches				A
		    kernel_compiler_patch		A
		    Nest				E
		    Project C				N
		    TCP BBR v2 [5]			E
		    TRESOR (AES-NI) [5]			b
		    TRESOR (x86) [5]			b
		    TRESOR (x86-64) [5]			E
		    zen-sauce				N

    6.6 (LTS)						A
		    -rt	(RT_PREEMPT)			A
		    Clang PGO				E
		    Clear Linux patchset		N
		    genpatches				A
		    kernel_compiler_patch		X
		    Nest				R
		    Project C				N
		    TCP BBR v2 [5]			E
		    TCP BBR v3 [5]			E
		    TRESOR (AES-NI) [5]			b
		    TRESOR (x86) [5]			b
		    TRESOR (x86-64) [5]			E
		    zen-sauce				N

    6.12 (Stable)					A
		    -rt	(RT_PREEMPT)			A
		    Clang PGO				D
		    Clear Linux patchset		N
		    genpatches				A
		    kernel_compiler_patch		A
		    Nest				D
		    Project C				A
		    TCP BBR v2 [5]			D
		    TCP BBR v3 [5]			D
		    TRESOR (AES-NI) [5]			D
		    TRESOR (x86) [5]			D
		    TRESOR (x86-64) [5]			D
		    zen-sauce				A

    6.13 (Stable)					A
		    -rt	(RT_PREEMPT)			D
		    Clang PGO				D
		    Clear Linux patchset		A
		    genpatches				A
		    kernel_compiler_patch		D
		    Nest				D
		    Project C				A
		    TCP BBR v2 [5]			D
		    TCP BBR v3 [5]			D
		    TRESOR (AES-NI) [5]			D
		    TRESOR (x86) [5]			D
		    TRESOR (x86-64) [5]			D
		    zen-sauce				A

    6.14 (Stable)					A
		    -rt	(RT_PREEMPT)			A
		    Clang PGO				D
		    Clear Linux patchset		A (point releases only, not live)
		    genpatches				A
		    kernel_compiler_patch		D
		    Nest				D
		    Project C				A
		    TCP BBR v2 [5]			D
		    TCP BBR v3 [5]			D
		    TRESOR (AES-NI) [5]			D
		    TRESOR (x86) [5]			D
		    TRESOR (x86-64) [5]			D
		    zen-sauce				A

    6.15 (Mainline / Live / Master)			A
		    -rt	(RT_PREEMPT)			A
		    Clang PGO				D
		    Clear Linux patchset		D (point releases only, not live)
		    genpatches				D
		    kernel_compiler_patch		D
		    Nest				D
		    Project C				D
		    TCP BBR v2 [5]			D
		    TCP BBR v3 [5]			D
		    TRESOR (AES-NI) [5]			D
		    TRESOR (x86) [5]			D
		    TRESOR (x86-64) [5]			D
		    zen-sauce				D


    [1] Kernel LTS provides security updates and bugfixes, but doesn't extend to
        third party patchsets
    [2] Third party patchset LTS has provided updates
    [3] only from the oiledmachine-overlay repo
    [4] without correctness verification, due to lack of hardware or
        configuration.  Correctness and build fixes extends only to device
        agnostic independent code.
    [5] backported or forwardported, but not intended for this series, but build
        time fixes are provided by the ebuild maintainer
    [6] backported or forwardported, but not intended for this series, but build
        time fixes are provided by others if it is a recent new kernel
        series.

    A - Currently actively updatable
    R - Released only for major.minor usually no futher updates for patch versions
    D - USE flag should be disabled since there is no release for this minor
        version yet.
    N - Under the Patchset LTS indicates that the patchset is EOL or likely
        EOL for that version which means that bug fixes and security updates
        will not be provided.  This indicates a feature freeze, but
        build time failures will be fixed by the ebuild maintainer.
    E - No upstream release for this major minor version but fully maintained or
        supported by the ebuild maintainer or third party.  It means the same as
        third party Yes supported.
    I - Inactive due to changing API, but future support depends on motivation
    S - Upstream indicated support
    T - Patch is undergoing testing
    b - Build tested but without correctness verification due to lack of hardware
    X - Patch provided by alternative or multiple independent forks.
    Y - Patch is LTS supported upstream.
    ? - Unknown status

    EOL (End Of Life) stable kernels get dropped next update cycle which is
    typically a week.  The virtual/ot-sources-stable ebuild-package
    should handle the transition gracefully.

    Use virtual/ot-sources-lts or virtual/ot-sources-stable to track and
    update releases instead of emerging sys-kernel/ot-sources directly.
    It's recommended to use the ot-sources-lts if you have binary only kernel
    modules.  For those without binary only modules, use ot-sources-stable
    package.



    Design choices and walk-through of the configuration user interfaces for ebuild

    1. Menuconfig - This is primarily available to enable/disable drivers or for
    users that prefer a menuconfig only experience.   Menuconfig allows for
    editing kernel settings with buttons and windows.  The menuconfig is still
    the preferred way to decrapify the kernel config versus automated means.
    2. Environment variables (aka envars) - This is a collection of tweakables
    that can be used to modify the default kernel config or an existing kernel
    config.  It is mostly useful in assist mode.  Most envars will be ignored in
    non-assist mode.  It will override menuconfig edited kernel config settings
    in some cases.
    3. USE flags - This is primarily to install dependencies or download
    patches.
    4. OT_KERNEL_USE - This is primarily to apply patches per extraversion
    profile.  It is only useful in assist mode.
    5. env file - Used to store the per extraversion environment variables.
    These env files are typically stored in
    /etc/portage/ot-sources/${KV_MAJOR_MINOR}/${EXTRAVERSION}/${ARCH}/env
    The /etc/portage/ot-sources/${KV_MAJOR_MINOR}/${EXTRAVERSION}/${ARCH}/ folder
    can be used to store assets like logos.
    6. kernel config file - A file that stores the kernel config.  These are
    typically stored in the /etc/kernels/ folder.



    CFLAGS and HOSTCFLAGS

    CFLAGS, CXXFLAGS, LDFLAGS are applied to the kernel CHOST or target machine.

    HOSTCFLAGS, HOSTCXXFLAGS, HOSTLDFLAGS are applied to CBUILD programs.

    If HOSTCFLAGS is not set, it uses CFLAGS.  Same is true with the other
    pairs.

    The above CFLAGS should be added to the per build profile.  If not added,
    it will use the *FLAGS provided by /etc/portage/make.conf.

    Currently X86_MICROARCH_OVERRIDE will override the -march or -mcpu for
    CFLAGS.  Consideration for simplification of -march and
    X86_MICROARCH_OVERRIDE is open at this time with likely the removal of the
    latter envvar.  So both should be set at this time to the same
    -march/-mcpu to avoid confusion.



    Using the build USE flag (without PGO)

    The build USE flag can be used to build the kernel.  It comes with extra
    environment variables that can be placed in the per extraversion env file.

    The build USE flag was necessary to increase the security of the -rt patchset
    with a more customized limited config.

    It also speeds up deployment time to decrease the security update lag.

    The following steps need to be taken:

      0. Mount the boot partition
      1. Emerge with the build USE flag
      2. Run etc-update
      3. Build and install initramfses per each built kernel
      4. Update the bootloader
      5. Reboot


    Signed kernel modules corresponding to a build and that build's private key
    require multiple runs of "genkernel ... initramfs".  This means that N build
    profiles each having a unique private key required N kernel initramfs
    invocations.  If you built 5 profiles you need 5 corresponding
    initramfs updates.


    The PDO/PGO (Profile Directed Optimization / Profile Guided Optimization) progression:

    1. start from unknown state
    2. PGI = Build as instrumented
    3. PGT = Train with actual typical use, or simulation script that replays or mimics typical use, or benchmarks
    4. PGO = Build as optimized
    5. end

    Notes:

      * The FORCE_PGO_PHASE environment variable may be used to unbreak or disable PGO.
      * PGI, PGT, PGO, PG0 are valid values.  PG0 means to disable/skip PGO.
      * PDI, PDT, PDO, PD0 are deprecated and will be removed in the next minor version.
      * The ot-kernel.eclass contains a picture diagram of the state diagram.
      * A verification of major.minor version is needed for profile compatibility.
      * Restarting the process be required if the compiler's major and minor version is different.
      * It is not recommeded to update or change the compiler to the middle during the PGO process.

    See also:

      OT_KERNEL_PGO_FLAVOR



    Using the build USE flag with the pgo USE flag

    The following steps need to be taken:

      0. Mount the boot partition
      1. Emerge with the build and pgo USE flags
      2. Run etc-update
      3. Build and install initramfs
      4. Update the bootloader
      5. Reboot
      6. mount -t debugfs none /sys/kernel/debug
         (For GCC PGO if /sys/kernel/debug is not mounted yet by init scripts)
      7. Train the kernel with the pgo-trainer.sh script or your own simulation
         script
      8. Re-emerge the package with the build and pgo USE flag for an optimized
         build



    Resetting PGO

    The PGO progression state can be reset by deleting the
    /var/lib/ot-sources/${PV} folder or the .pgophase file.



    PGO state files and profiles:

    /var/lib/ot-sources/${PV}/${extraversion}-${arch}/{llvm,gcc}/pgophase -
      The PGO phase progression state file that contains the current step.
      {PGI,PGT,PGO,DONE} are the states in the FSM (Finite State Machine).
    /var/lib/ot-sources/${PV}/${extraversion}-${arch}/llvm/vmlinux.profraw -
      The profraw captured before conversion.
    /var/lib/ot-sources/${PV}/${extraversion}-${arch}/llvm/vmlinux.profdata -
      The merged profdata PGO profile.  It is used when building an optimized
      build.
    /var/lib/ot-sources/${PV}/${extraversion}-${arch}/gcc/#var#tmp#portage#sys-kernel#ot-sources-${PV}#work#linux-${PV}-${extraversion}#sound#usb#clock.gcda -
      The GCC PGO profile.  It is used when building an optimized build.

    Notes:
    - The .profdata may be used between major versions.
    - The .profraw may sometimes used between minor versions.
    - The .gcda is common among PGO packages, but .gcno is of unknown use.
    - The generated .gcda above is just a sample path.  It may vary per
      configuration.

    Important:  If a change to the PGO patch has been made, the
    /var/lib/ot-sources/${PV} folder and the files in it should be manually
    removed to restart the PGO process.


    LLVM versions supported for Clang PGO:

    * 18.x
    * 17.x
    * 16.x
    * 15.x
    * 14.x
    * 13.0.1
    * 13.0.0 

    Versions that are not *exactly* the ones listed above are not supported.
    The PGO profraw format used is sensitive to point version changes and even
    in the live ebuilds, and it's the reason why exact versions are only
    supported up and including profraw version 8.



    Using pgo-trainer.sh, aka the automated PGO trainer script

    It becomes tedious or too repetitive to manually train the kernel.
    This is why an automated trainer script pgo-trainer.sh (also found in the modded
    genkernel) is provided to automatically train the kernel.  You can of course
    write your own automated script.  The script can be extended with
    pgo_custom.sh in the same directory or modded directly.  Using pgo_custom.sh
    is recommended to preserve changes between installs.  It should be ran only
    as a non-root user.  This script is compatible with PDO.



    PGO support summary table:

    Implementation        | Complete?                    | Buggy / Broken                           | Estimated avg benefit | Notes 
    ======================+==============================+==========================================+=======================+============================================================================
    Clang PGO             | Yes (upstream abandoned)     | Maybe if ABI/API changes for newer LLVMs | ~10%                  | See also https://github.com/ClangBuiltLinux/linux/issues/1074
                          |                              | or code generation differences between   |                       |
                          |                              | compilers that create bugs               |                       |
    GCC PGO (CFG + value) | No/Dropped                   | Yes incomplete with build time failures  | ~10%                  | It will use -fprofile-generate and -fprofile-use.
                          |                              |                                          |                       | It also requires the sys-kernel/kpgo-utils package.
                          |                              |                                          |                       |
    GCC PGO (CFG only)    | Yes                          | No known problems                        | ~5%                   | -fprofile-arcs and -fprofile-use only.  Use PDO instead since -fprofile-use
                          |                              |                                          |                       | may rely on undefined behavior from incomplete profile, but reports claim
                          |                              |                                          |                       | benefit without documented problems.
    GCC PDO               | Yes                          | No                                       | 5% or less            | -fprofile-arcs and -fbranch-probabilities only

    * CFG means Control Flow Graph.  Essentially if/else and function calls will
      be profiled.  It may profile calls that act like constructors and
      deconstructors, conditional loops.

    PGO/PDO for kernel mini FAQ

    - Q:  Does GCC PGO work now for the kernel?
      A:  Yes and no, but not for Full PGO.  Some people consider PDO and CFG
          only PGO as PGO because it uses a profile and multiple step workflow,
          but it may likely miss the benefits or the expected optimizations that
          are missing in authentic and widely used Full PGO.

          For Full PGO, it breaks during the building of the PGO image.  The
          patch can be found at http://coolypf.com/kpgo.htm.  Most of the heavy
          lifting I would guess is already been done by that patch but it really
          needs a update for the newer GCCs and it is behind like 8 major
          versions from 4.9.  The only remaining item left is the missing -Os
          changes mentioned in the Yuan-ScienceChina-18 document which
          can be found at

            https://wiki.gentoo.org/wiki/Kernel/Optimization#GCC_PGO

          The following points still have missing implementation for complete
          support for Full PGO with GCC:
          * sections 3.2 - value profiling which corresponds to in the
            kernel's kernel/gcov/gcc_base.c and
            __gcov_*_profiler symbols in libgcov-profiler.c or specifically
              __gcov_indirect_call (GCC 9.1.0, GPL-3+, gcc-runtime-library-exception-3.1)
              __gcov_indirect_call_profiler_v4 (GCC 10.1.0, GPL-3+, gcc-runtime-library-exception-3.1)
              __gcov_indirect_call_topn_profiler (GCC 5.1.0, GPL-3+, gcc-runtime-library-exception-3.1)
              __gcov_time_profiler (GCC 4.9.0, GPL-3+ gcc-runtime-library-exception-3.1)
              __gcov_time_profiler_counter (GCC 7.1.0, GPL-3+, gcc-runtime-library-exception-3.1)
          * section 3.4 bullet point 2 changes to fix -Os in GCC
          * section 3.6 lists overall requirements
          * The patch is on hold indefinitely until license incompatibilities
            are resolved or workarounds provided to avoid license incompatible
            symbols.  It may require edits to the sys-devel/gcc-kpgo ebuild to
            avoid/disable these symbols and to use the older license compatible
            PGO profile format.
    - Q:  Does Clang PGO work?
      A:  No outstanding perceptable differences before and after, but it does do
          all steps without problems.
    - Q:  Why do I keep seeing warning: '....gcda' profile count data file not
          found [-Wmissing-profile]?
      A:  It could be either one of these:
          * The compiler is hinting that you skipped training for that.  If
            it is not of value, don't train it.
          * Name mangling bug.  This was observed with paths that have /../ that
            should be mangled as #^# but this information is lost in
            /sys/kernel/debug/gcov to fix it.  This serious issue pertains also
            to the amdgcn driver.
    - Q:  What does PGO do?
      A:  It depends on the implementation.
          For optimized builds it may do the following:
          - Automatic hot or cold classification, instead of manual annotations.
          - Hot code may get essentially -O3 treatment.
          - Cold code may get essentially -Os treatment.
          - Coalesces code into either hot or cold sections or maybe pages.
          - Code reordering or improving locality
          - Loop rolling or unrolling loops based on PGO profile and thresholds.
    - Q:  What is the performance?
      A:  Avg: 10% to -0.5% benefit.  Potentially 40% outliers.
    - Q:  What benefits the greatest from PGO?
      A:  Throughput, TPS (Transactions Per Second), Requests Per Second, server
          related parts on the kernel side
    - Q:  How do I avoid the worst case performance?
      A:  Do not do comprehesive training.  Train only actively used drivers,
          subsystems, algorithms, user space programs.  The goal again is to
          optimize the cache heirarchy not pollute it with least likely used
          pages or not increasing the number page faults.
    - Q:  Which is better active or passive training?
      A:  It depends...  For the least time investment, use passive traning.
          For consistent performance determinism try writing your own custom
          active training script.
    - Q:  When should I do PGO?
      A:  It should be done at the beginning of the release cycle.  Doing
          it about a week after the release may result in imminent replacement.
          Do not train more than once in a point release.
    - Q:  Should I pick GCC PGO or Clang PGO?
      A:  It depends if you plan to use KCFI or other compiler features.
          GCC PGO looks promising with the least amount of time investment.

          If fully implemented, GCC_PGO should have more profilers or
          instrumented kinds of data versus CLANG_PGO.  So far, CLANG_PGO has
          more kinds of profiled data.  The more implemented profilers, the
          more access to other types of 19 types of optimizations in
          -fprofile-use.
    - Q:  Does it really feel slow running under a instrumented kernel?
      A:  No outstanding noticeable difference.
    - Q:  How do I unstuck myself from broken PGO and compile without it?
      A:  Try one these:
          - Disable the pgo USE flag.
          - FORCE_PGO_PHASE="PG0" emerge =ot-sources-${PV}
          - Delete the /var/lib/ot-sources/${PV} or the
            /var/lib/ot-sources/${PV}/${extraversion}-${arch} folder.
    - Q:  Difference between PGO and PDO?
      A:  PDO is a weaker optimization compared to PGO.  PDO can only do
          optimization based on the CFG (Control Flow Graph) not values. 
          PGO is more difficult to apply on the kernel, but with PDO it
          is more easier.  Kernel GCOV support for PGO is not fully implemented,
          but requires patches.
    - Q:  Do I need use the same version before and after?
      A:  Yes likely depending if the profile was not converted to a version
          agnostic format.
    - Q:  Is it easy to PGO?
      A:  Yes, the ebuild tries its best to simplify.  It requires 2 emerges and
          training in the middle.



    The config file-directory structure

    The tree structure is as follows in abstract form:

      /etc/portage/ot-sources/${KV_MAJOR_MINOR}/${extraversion}/${arch}/env
      /etc/portage/ot-sources/${KV_MAJOR_MINOR}/${extraversion}/${arch}/patches

    KV_MAJOR_MINOR will be expanded to either 4.14, 5.4, 5.10, 5.15, 6.1.

    extraversion will be expanded to ot, rt, or a custom name.

    arch will expand to one of the folder names in the arches folder in
    /usr/src/linux/arch.

    Example:

      /etc/portage/ot-sources/5.16/ot/x86_64/env

    Files:

      /etc/portage/ot-sources/${KV_MAJOR_MINOR}/${extraversion}/${arch}/env
      Contains all environment variables for this buildconfig.  The
      per package extraversion and per package buildconfig are synonymous
      for this file.

    Directories (In planning):

      /etc/portage/ot-sources/${KV_MAJOR_MINOR}/${extraversion}/${arch}/patches
      Contains extra user patches to apply per buildconfig.



    An example of a *builder* env file located in /etc/portage/ot-sources/6.1/builder/x86_64/env:

CFLAGS="-O2 -pipe"
CXXFLAGS="-O2 -pipe"
LDFLAGS="-O2"
OT_KERNEL_ARCH="x86_64"
OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS="1"
OT_KERNEL_BOOT_ARGS="delayacct"
OT_KERNEL_BOOT_DECOMPRESSOR="zstd"
OT_KERNEL_BOOT_SUBSYSTEMS_APPEND="drivers/char/agp drivers/gpu drivers/video"
OT_KERNEL_BUILD="1"
OT_KERNEL_BUILD_ALL_MODULES_AS="y"
OT_KERNEL_CONFIG="/etc/kernels/kernel-config-6.1-builder-x86_64"
OT_KERNEL_CONFIG_MODE="assist"
OT_KERNEL_CPU_MICROCODE="1"
OT_KERNEL_CPU_SCHED="cfs-throughput"
OT_KERNEL_DISABLE="0"
OT_KERNEL_EXTRAVERSION="builder"
OT_KERNEL_FIRMWARE="polaris10 regulatory"
OT_KERNEL_HARDENING_LEVEL="practical"
OT_KERNEL_INIT="auto"
OT_KERNEL_INSTALL_SOURCE_CODE="1"
OT_KERNEL_KCONFIG[CONFIG_FORTIFY_SOURCE]=y
OT_KERNEL_KERNEL_COMPILER_PATCH_PROVIDER="graysky2"
OT_KERNEL_LSMS="auto"
OT_KERNEL_MAX_UPTIME="0"
OT_KERNEL_MESSAGE="I :heart: builder kernel"
OT_KERNEL_MODULES_SUPPORT="1"
OT_KERNEL_MODULES_COMPRESSOR="zstd"
OT_KERNEL_MENUCONFIG_COLORS="blackbg"
OT_KERNEL_MENUCONFIG_RUN_AT="pre"
OT_KERNEL_MENUCONFIG_UI="disabled"
OT_KERNEL_SIGN_MODULES="1"
OT_KERNEL_SECURITY_CRITICAL=1
OT_KERNEL_SECURITY_CRITICAL_TYPES="kfence ubsan cfi kcfi"
OT_KERNEL_SLAB_ALLOCATOR="slub"
OT_KERNEL_SWAP="1"
OT_KERNEL_TARGET_TRIPLE="x86_64-pc-linux-gnu"
OT_KERNEL_TCP_CONGESTION_CONTROLS="htcp ppc vegas"
OT_KERNEL_USE="disable_debug genpatches -lto -pgo -zen-sauce"
OT_KERNEL_VERBOSITY="1"
OT_KERNEL_WORK_PROFILE="builder-interactive"
OT_KERNEL_ZSWAP_ALLOCATOR="zsmalloc"
OT_KERNEL_ZSWAP_COMPRESSOR="zstd"


    An example of a *gaming* env file located in /etc/portage/ot-sources/6.1/gaming/x86_64/env:

CFLAGS="-march=native -O3 -pipe"
CXXFLAGS="-march=native -O3 -pipe"
LDFLAGS="-march=native -O3"
OT_KERNEL_ARCH="x86_64"
OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS="1"
OT_KERNEL_BOOT_ARGS="delayacct"
OT_KERNEL_BOOT_DECOMPRESSOR="zstd"
OT_KERNEL_BOOT_SUBSYSTEMS_APPEND="drivers/char/agp drivers/gpu drivers/video"
OT_KERNEL_BUILD="1"
OT_KERNEL_BUILD_ALL_MODULES_AS="y"
OT_KERNEL_CONFIG="/etc/kernels/kernel-config-6.1-gaming-x86_64"
OT_KERNEL_CONFIG_MODE="assist"
OT_KERNEL_CPU_MICROCODE="0"
OT_KERNEL_CPU_SCHED="cfs-autogroup"
OT_KERNEL_DISABLE="0"
OT_KERNEL_EXTRAVERSION="gaming"
OT_KERNEL_FIRMWARE="polaris10 regulatory"
OT_KERNEL_HARDENING_LEVEL="performance"
OT_KERNEL_INIT="auto"
OT_KERNEL_INSTALL_SOURCE_CODE="1"
OT_KERNEL_KERNEL_COMPILER_PATCH_PROVIDER="graysky2"
OT_KERNEL_LSMS="bpf"
OT_KERNEL_MAX_UPTIME="0"
OT_KERNEL_MESSAGE="I :heart: tourney kernel"
OT_KERNEL_MODULES_SUPPORT="1"
OT_KERNEL_MODULES_COMPRESSOR="zstd"
OT_KERNEL_MENUCONFIG_COLORS="blackbg"
OT_KERNEL_MENUCONFIG_RUN_AT="pre"
OT_KERNEL_MENUCONFIG_UI="disabled"
OT_KERNEL_PGO_FLAVOR="GCC_PDO"
OT_KERNEL_SIGN_MODULES="1"
OT_KERNEL_SECURITY_CRITICAL=0
OT_KERNEL_SLAB_ALLOCATOR="slab"
OT_KERNEL_SWAP="0"
OT_KERNEL_TARGET_TRIPLE="x86_64-pc-linux-gnu"
OT_KERNEL_TCP_CONGESTION_CONTROLS="vegas bbr htcp pcc"
OT_KERNEL_VERBOSITY=1
OT_KERNEL_USE="disable_debug genpatches zen-sauce"
OT_KERNEL_WORK_PROFILE="gaming-tournament"
TBM=1

    An example of a *secure* env file located in /etc/portage/ot-sources/6.9/secure/x86_64/env:

CFLAGS="-O2 -pipe"
CXXFLAGS="-O2 -pipe"
LDFLAGS="-O2"
OT_KERNEL_ARCH="arm64"
OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS="1"
OT_KERNEL_BOOT_ARGS="delayacct"
OT_KERNEL_BOOT_DECOMPRESSOR="zstd"
OT_KERNEL_BUILD="1"
OT_KERNEL_BUILD_ALL_MODULES_AS="y"
OT_KERNEL_CONFIG="/etc/kernels/kernel-config-6.9-secure-x86_64"
OT_KERNEL_CONFIG_MODE="assist"
OT_KERNEL_CPU_SCHED="cfs-autogroup"
OT_KERNEL_DISABLE="0"
OT_KERNEL_EXTRAVERSION="secure"
OT_KERNEL_FIRMWARE="polaris10 regulatory"
OT_KERNEL_HARDENING_LEVEL="secure-af"
OT_KERNEL_INIT="auto"
OT_KERNEL_INSTALL_SOURCE_CODE="1"
OT_KERNEL_IOSCHED="kyber kyber"
OT_KERNEL_KERNEL_COMPILER_PATCH_PROVIDER="graysky2"
OT_KERNEL_LSMS="auto"
OT_KERNEL_MAX_UPTIME="0"
OT_KERNEL_MESSAGE="This shit is secure af"
OT_KERNEL_MODULES_SUPPORT="0"
OT_KERNEL_SECURITY_CRITICAL=1
OT_KERNEL_SECURITY_CRITICAL_TYPES="asan ubsan cfi kcfi scs"
OT_KERNEL_SLAB_ALLOCATOR="slab"
OT_KERNEL_SWAP="0"
OT_KERNEL_TARGET_TRIPLE="aarch64-unknown-linux-gnu"
OT_KERNEL_TCP_CONGESTION_CONTROLS="cubic"
OT_KERNEL_VERBOSITY="1"
OT_KERNEL_USE="disable_debug genpatches zen-sauce cpu_flags_arm_bti"
OT_KERNEL_WORK_PROFILE="dss"
TBM=0


    Commentary about the above settings:

    The example builder profile above assumes stability and minimal downtime.

    The gaming profile above is similar to my gaming experience and principles
    in the mid to late 2000s.  Stability is the most important.  Frames Per
    Second (FPS) is as equally important as input latency.  Both are more
    important than security.

    The USE flag controls downloading and the OT_KERNEL_USE controls applying
    the patch per profile.

    Slub is used for high memory use which is typical for compiling.  Slab
    is preferred for caching and runtime performance.

    The CFLAGS, CXXFLAGS, LDFLAGS should be set per profile to properly
    control the stability and performance.  If they are not set, they will use
    the systemwide values.  Upstream has a negative attitude for -O3 and
    criticize the code quality.

    To generate the kernel config, you may set OT_KERNEL_MENUCONFIG_UI to
    menuconfig then emerge, then change it back to disabled then emerge.
    The menuconfig can be used to enable drivers.


    Comparison for examples:

                                | ot-sources (builder)        | ot-sources (gaming)   | ot-sources (secure)     | gentoo-sources             | gentoo-kernel              | zen-kernel                 | vanilla kernel defaults
    IA32 support [8]            | M [7]                       | M [7]                 | N                       | M [6]                      | N                          | Y                          | M [6]
    SSP (basic)                 | Y                           | N                     | Y                       | Y                          | Y                          | Y                          | Y
    SSP (strong)                | Y                           | N                     | Y                       | Y                          | Y                          | Y                          | Y
    BO (_FORTIFY_SOURCE=2) [15] | N [19][33]                  | N                     | Y                       | Y                          | Y                          | Y                          | N
    ASLR (basic)                | Y                           | N                     | Y                       | Y                          | Y                          | Y                          | Y
    ASLR (strong) [2]           | Y                           | N                     | Y                       | Y                          | Y                          | Y                          | Y
    KPTI                        | Y                           | N                     | Y                       | Y                          | Y                          | Y                          | Y
    KASAN                       | N                           | N                     | Y                       | Y [4]                      | Y [4]                      | N                          | N
    KFENCE                      | Y                           | N                     | N                       | Y [5]                      | Y [5]                      | Y                          | N
    UBSAN                       | Y                           | N                     | Y                       | Y                          | Y                          | N                          | N
    KCFI >= 6.1 [9][11]         | Y                           | N                     | Y                       | N                          | N                          | N                          | N
    SCS >= 5.8 [9][10]          | N                           | N                     | Y                       | N                          | N                          | N                          | N
    CET (branch/return) >= 5.18 | M/M [23]                    | N/N                   | M/M [23]                | M/M [22]                   | Y/Y                        | Y/Y                        | Y/N
    Sandboxing support [3]      | Y                           | Y                     | Y                       | Y                          | Y                          | Y                          | Y
    Retpoline [13]              | Y                           | N                     | Y                       | Y                          | Y                          | Y                          | Y
    YAMA [12]                   | M [1]                       | N                     | M [1]                   | M [25]                     | M                          | Y                          | N
    Free page policy            | None                        | None                  | Zero                    | Poison                     | Poison                     | Poison                     | None
    RANDSTRUCT                  | N                           | N                     | M [16]                  | M [16]                     | Y                          | N                          | N
    Swap                        | Y [29]                      | N [18]                | N [17]                  | Y [29]                     | Y [29]                     | Y [29]                     | Y [29]
    LSMS                        | [21a]                       | [21b]                 | [21c]                   | [21d]                      | [21e]                      | [21f]                      | [21g]
    CPU scheduler               | cfs-throughput              | cfs-autogroup         | cfs-autogroup [20]      | cfs-throughput             | cfs-throughput             | cfs-autogroup              | cfs-throughput
    HZ                          | 250                         | 1000                  | 100                     | 100                        | 300                        | 1000                       | 100
    IO schedulers               | [27a]                       | [27a]                 | [27c]                   | mq-deadline/none [30a]     | mq-deadline/none [30a]     | BFQ/Kyber [30][34b]        | mq-deadline/none [30][34a]
    TCP congestion control      | [26a]                       | [26b]                 | [26c]                   | Cubic                      | Cubic                      | Cubic                      | Cubic
    Panic on oops               | N [15]                      | N                     | N [15]                  | Y                          | Y                          | N [23]                     | N
    io_uring mitigation         | N                           | N                     | Y                       | N                          | N                          | N                          | N
    -march                      | generic [32]                | native [32]           | generic [32]            | generic [32]               | generic                    | generic                    | generic [32]
    -O level                    | 2                           | 3                     | 2                       | 2                          | 2                          | 3                          | 2
    TBM                         | Y                           | Y                     | N [36]                  | Y                          | Y                          | Y                          | Y
    Mitigated attack vectors    | CE, PE, DoS, DT, ID ; [14]  | DoS [14]              | CE, PE, DoS, DT, ID     | CE, PE, DoS, DT, ID ; [14] | CE, PE, DoS, DT, ID ; [14] | CE, PE, DoS, DT, ID ; [14] | CE, PE ; [14]
    Posture                     | Balanced                    | Performance-critical  | Security-critical [34]  | Security-critical [34]     | Security-critical [34]     | Security-critical [34]     | Balanced
    Security grade              | C                           | F                     | A                       | B-                         | B                          | B                          | C
    Performance grade           | B                           | A                     | B or C-F [39]                | C                          | C                          | B                          | B
    Uptime grade [38]           | A                           | D                     | C                       | C                          | C                          | C                          | A
    Release schedule grade [37] | C- [36]                     | C- [36]               | C- [36]                 | D [35]                     | D [35]                     | A                          | A

                                | pf-kernel                   | rt-kernel             | linux-tkg                  | clear                      |                            |                            | 
    IA32 support [8]            |                             |                       | Y                          | Y                          |                            |                            |
    SSP (basic)                 |                             |                       | Y                          | N                          |                            |                            |
    SSP (strong)                |                             |                       | Y                          | Y                          |                            |                            |
    BO (_FORTIFY_SOURCE=2) [15] |                             |                       | Y                          | Y                          |                            |                            |
    ASLR (basic)                |                             |                       | Y                          | Y                          |                            |                            |
    ASLR (strong) [2]           |                             |                       | Y                          | Y                          |                            |                            |
    KPTI                        |                             |                       | Y                          | Y                          |                            |                            |
    KASAN                       |                             |                       | N                          | N                          |                            |                            |
    KFENCE                      |                             |                       | Y                          | N                          |                            |                            |
    UBSAN                       |                             |                       | N                          | N                          |                            |                            |
    KCFI >= 6.1 [9][11]         |                             |                       | N                          | N                          |                            |                            |
    SCS >= 5.8 [9][10]          |                             |                       | N                          | N                          |                            |                            |
    CET (branch/return) >= 5.18 |                             |                       | Y/Y                        | Y/Y                        |                            |                            |
    Sandboxing support [3]      |                             |                       | Y                          | Y                          |                            |                            |
    Retpoline [13]              |                             |                       | Y                          | Y                          |                            |                            |
    YAMA [12]                   |                             |                       | Y                          | N                          |                            |                            |
    Free page policy            |                             |                       | Poison                     | None                       |                            |                            |
    RANDSTRUCT                  |                             |                       | N                          | N                          |                            |                            |
    Swap                        |                             |                       | Y                          | Y [29]                     |                            |                            |
    LSMS                        |                             |                       | [21i]                      | [21j]                      |                            |                            |
    CPU scheduler               |                             |                       | Y                          | cfs-autogroup              |                            |                            |
    HZ                          |                             |                       | 1000                       | 1000                       |                            |                            |
    IO schedulers               |                             |                       | mq-deadline/none [30][34]  | mq-deadline/none [30][34]  |                            |                            |
    TCP congestion control      |                             |                       | Cubic                      | BBRv1                      |                            |                            |
    Panic on oops               |                             |                       | N                          | N                          |                            |                            |
    io_uring mitigation         |                             |                       | N                          | N                          |                            |                            |  
    -march                      |                             |                       | generic                    | core2                      |                            |                            |
    -O level                    |                             |                       | 2                          | 2                          |                            |                            |
    TBM                         |                             |                       | Y                          | Y                          |                            |                            |
    Mitigated attack vectors    |                             |                       | CE, PE, DoS, DT, ID ; [14] | CE, PE, DoS ; [14]         |                            |                            |
    Posture                     |                             |                       | Security-critical [34d]    | Balanced                   |                            |                            |
    Security grade              |                             |                       | C                          | C                          |                            |                            |
    Performance grade           |                             |                       | B                          | B                          |                            |                            |
    Uptime grade [38]           |                             |                       | C                          | B                          |                            |                            |
    Release schedule grade [37] |                             |                       | ?                          | D                          |                            |                            |

    [1] Maybe, if a chromium based app is installed
    [2] Increased entropy with RANDOMIZE_MEMORY
    [3] With SECCOMP, SECCOMP_FILTER
    [4] ARCH=arm64 only
    [5] Non ARCH=arm64
    [6] No by default, but maybe if enabled using custom kernel config file.
    [7] Yes if multilib files discovered or 32-bit required packages found.
    [8] 32-bit is insecure by 2025 standards.
    [9] Requires clang
    [10] Only on arm64, riscv
    [11] Only on amd64, arm, arm64, riscv, x86
    [12] To protect tokens or private keys against information disclosure
    [13] Only on non CET processors
    [14] Some but not all
    [15] Custom patches for sanitizers to panic on violation, so higher availability
    [16] Yes, if GCC used.
    [17] Necessary to prevent plaintext memory dump of keys or sensitive data by swap
    [18] Necessary to prevent lag in permadeath gameplay.
    [19] Subject to change.
    [20] Can mitigate DoS (Denial of Service)
    [21a] auto detected based on installed userland packages
    [21b] bfp
    [21c] auto detected based on installed userland packages
    [21d] integrity,selinux,bpf
    [21e] landlock,yama,bpf
    [21f] landlock,lockdown,yama,integrity,bpf
    [21g] integrity,selinux,bpf
    [21i] landlock,lockdown,yama,integrity,bpf
    [21j] yama,loadpin,safesetid,integrity
    [22] Maybe/Maybe depends on the compiler and assembler used
    [23] Maybe/Maybe depends on the compiler and assembler and USE flags and hardening level
    [24] KFENCE not hardcoded off in kernel or can fail due to configuration vulnerability
    [25] Not loaded in CONFIG_LSM.  Possibly a configuration vulnerability.  If lsm="yama" is in the kernel command line, then the config is not vulnerable to information disclosure.
    [26a] htcp pcc vegas ; htcp and pcc for downloading, vegas for low latency
    [26b] vegas bbr htcp pcc ; htcp and pcc for downloading, vegas for low latency
    [26c] cubic
    [27a] SSD: none, HDD: bfq-low-latency
    [28b] SSD: kyber, HDD: kyber; Chosen based on CI ASan testing, low attack surface, DoS resistant
    [29] Information Disclosure is possible when sensitive data is dumped to disk as plaintext.  Encrypted swap or full disk encryption is recommended.
    [30] Single-queue/Multi-queue
    [31] Can be rebuild with native or specific microarch
    [32] Customizable by kernel config
    [33] Default off but can be overridable with OT_KERNEL_KCONFIG[CONFIG_FORTIFY_SOURCE]=y
    [34] Based on hardening flags plus sanitizer
    [35] KEYWORDS delayed rollout is a persistent threat for critical vulnerabilities or zero click attacks that rely on stable.  Relying on stable could be a type of configuration vulnerability.
    [36] May miss releases or may have uncheck patch failures that block update due to lack of staffing
    [37] It assumes that critical vulnerabilies be remediated within a week.
    [38] Too much hardening can cause overheating leading to a Denial of Service.
    [34a] Can switch to mq-deadline, kyber post compile during runtime
    [34b] Can switch to mq-deadline, kyber, bfq post compile during runtime
    [35] CONFIG_SCHED_MC_PRIO=y
    [36] If the computer is not maintained properly, it could cause an availability problem (e.g crash) or overheating during an online exam with no retakes allowed.  With hardening enabled to the max, the chances increase more.
    [38] Deviation from the default hardening settings may decrease uptime.  Less hardening can lead to DoS or more hardening can lead to overheating.  The default settings get more testing and more bugfixes.
    [39] If using KASAN HW_TAGS, the performance is B grade with 1.20x slower than normal build.  If using generic KASAN, the performance is C-F.  The performance impact in the generic KASAN case is 2-4x slower than normal build.

    Commentary:

    The gaming profile assumes ideal conditions in secure environment (i.e.
    behind firewall, gaming app only, no clicking on phishing emails, no hacker
    probes or attacks adjacent or over the network, no browsing over the
    internet).  It is time limited during the duration of gameplay.

    The musican profile would be similar to the gaming profile but without swap.
    It would use the digital-audio-workstation work profile instead.

    Browsing over the Internet is done over the builder profile or the secure
    profile.

    The builder profile is designed for installing and building ebuilds.

    The secure profile is designed for paying bills, private information.

    The gentoo-sources profile does not mitigate with KCFI against JOP/ROP,
    which can lead to code execution attacks.  It is missing KCFI and SCS.
    However, a custom profile enabling KCFI or SCS can mitigate against
    JOP/ROP attacks.

    The gentoo-sources profile does not mitigate against information
    disclosure with Retpoline which can lead to information disclosure in
    pre CET microarches.

    The profiles on ot-kernel will be improved over time.



    Environment variables overview:

    The purpose of some of these environment variables is to change primarily
    the default profile a little bit so that it skips the menuconfig step all
    together in the build before install with the build USE flag.  1 means yes.
    0 means no.  Auto assumes native build.  Due to the possibly of dependent
    options, 0 may also mean custom or previous settings.



    The difference between USE flags versus OT_KERNEL_USE:

    The USE flags control *downloading* patches, logos, ebuilds.   However, the
    OT_KERNEL_USE is intended to *applying* patches or settings per each
    extraversion profile.  The USE flags will be used as a fallback if
    OT_KERNEL_USE is not utilized.  The other motivation for having
    OT_KERNEL_USE was to reduce the attack surface by disabling poor quality
    patches or disabling patches from untrusted sources for secure kernel
    configurations.

    See also:

      OT_KERNEL_USE



    Environment variables required:

      OT_KERNEL_ARCH
      OT_KERNEL_EXTRAVERSION


    
    Environment variables:

    DISABLE_DEBUG_EXCLUDES - A space delimited list of kernel config symbols
    to ignore.



    OT_KERNEL_5_LEVEL_PAGING - set 5 level paging for supercomputers

    Acceptable values:

      1, 0, auto, unset

    Unset implies manual setting or previous setting.



    OT_KERNEL_ABIS - Adds support for ABIS especially cross compiling but only
    if the kernel arch supports it.  You many only choose one kernel arch per
    buildconfig env.  If unset, it will use auto settings.  Users are still
    responsible for editing the kernel config for details such as the
    microarchiecture, integrated circuits (ICs), or details relating to ABI.
    For endianess, you must set the CHOST variable in the per build env
    file.  (EXPERIMENTAL)

    Acceptable values:

      auto					; Autodetect and auto-enable ABIs
      manual					; Previous settings
      arm					; For the arm
      arm64					; For the arm64
      o32, n32, n64				; For the mips
      ppc, ppc64				; For the powerpc
      lp64d, lp64, ilp32d, ilp32		; For the risc
      s390, s390x				; For the s390
      sparc32, sparc64				; For the sparc
      x86, amd64, x32				; For the x86_64



    OT_KERNEL_ADD_KEY_TO_MOK - Auto adds the provided key to MOK if not found.



    OT_KERNEL_ARCH - The native ABI of the kernel to build using one of the
    names of the folders in /usr/src/linux/arch.  This package assumes that both
    x86_64 and arm64 are recognized as 64 with possibly 32 compatibility, but
    x86 and arm are recognized as strictly 32-bit.
    Both the folder path (${arch} in
    /etc/portage/ot-sources/${KV_MAJOR_MINOR}/${extraversion}/${arch}/env) and
    the OT_KERNEL_ARCH need to be the same.

    More arches are supported by the kernel but not supported by the distro.
    See https://github.com/gentoo-mirror/gentoo/tree/stable/profiles/arch

    Acceptable values:

      alpha, arm, arm64, loongarch, m68k, mips, parisc, parisc64, powerpc,
      riscv, s390, sparc, sparc32, sparc64, x86, x86_64



    OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS - Auto edit the kernel .config
    for installed packages.  What this means is that certain @world packages
    have additional kernel .config requirements and sometimes too complex
    or too long ago to remember to apply.  These missing or conflicting
    flags will be added or removed so that the @world package works properly.

    Acceptable values:

      1 to enable, 0 to disable

    By default, it is disabled meaning that manual editing is required or
    preferred.  For some select security packages, this is environment variable
    is unconditionally ignored implying to always apply the kernel changes.



    OT_KERNEL_BLACKLIST_FIRMWARE_PATHS - A space separated list of firmware
    relative paths to not include in CONFIG_EXTRA_FIRMWARE.



    OT_KERNEL_BOOT_ARGS - Set and embed the kernel command line into the
    kernel instead of the bootloader.

    Notes

      If lockdown is not enabled, it will use the appended values from the
      bootloader.

      You may remove delayacct from the kernel command line if you decide not to
      keep iotop.


    See also

      KVM_ADD_IGNORE_MSRS_EQ_1
      KVMGT
      OT_KERNEL_BOOT_ARGS_LOCKDOWN



    OT_KERNEL_BOOT_ARGS_LOCKDOWN - Prevent bootloader from overriding
    the internal kernel cmdline.

    Certain security options may auto enable this if they happen to use
    the kernel command line.

    Acceptable values:

      1 - enable
      0 - disable
      unset - manual settings

    See also

      OT_KERNEL_BOOT_ARGS



    OT_KERNEL_BOOT_DECOMPRESSOR - chooses the main boot decompressor for both
    kernel decompression and initramfs decompression.  If not chosen, it will
    choose either the previous manual setting, or if it is a new kernel config
    defaults which will choose gzip for the kernel and all decompressors for
    initramfs.

    Acceptable values:

      GZIP, BZIP2, LZ4, LZO, LZMA, XZ, ZSTD, default, manual, UNCOMPRESSED

    It is recommended to use lz4 or zstd.  However, if you are
    using x32 ABI bzip2 works but do not use lzma.  If empty, it will choose
    manual.  ZSTD is only allowed in 5.10+.



    OT_KERNEL_BUILD - It be 0, 1, true, false, yes, no, nobuild, build, not
    set.  Most are aliases, but it means to build or not build the kernel.  If
    not set it will try to guestimate based on the build flag.

    See also:

      OT_KERNEL_BUILD_CHECK_MOUNTED
      OT_KERNEL_KERNEL_DIR



    OT_KERNEL_BUILD_CHECK_MOUNTED - Check if the boot directory referenced
    by OT_KERNEL_KERNEL_DIR is mounted.

    Acceptable values:

      1 - check
      0 - don't check
      unset - check

    See also:

      OT_KERNEL_KERNEL_DIR



    OT_KERNEL_BUILD_ALL_MODULES_AS - Choose how to build options capable of
    being built as modules.  You can choose to convert kernel config
    options as mostly modules (m) or all builtins (y).  One may choose to
    build everything as builtins to prevent loading of hacked drivers or to
    speed up init time.  One may also choose mostly modules to load drivers
    on demand.  This option depends on OT_KERNEL_MODULES_SUPPORT=y.
    (EXPERIMENTAL, TESTING)

    Acceptable values:

      m, y, manual

    Unset is equivalent to manual.

    See also:

      OT_KERNEL_BOOT_KOPTIONS_APPEND
      OT_KERNEL_BOOT_SUBSYSTEMS
      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND
      OT_KERNEL_MODULES_SUPPORT



    OT_KERNEL_BOOT_KOPTIONS - A space separated list of CONFIG_... options to
    be built as builtins instead as modules.  This setting is optional.  This
    option depends on OT_KERNEL_BUILD_ALL_MODULES_AS="m".  This option focuses
    on specific devices.  This information can be found in help "defined at"
    section in "make menuconfig".

    Example:

      OT_KERNEL_BOOT_KOPTIONS="CONFIG_KEYBOARD_ATKBD CONFIG_USB_EHCI_HCD CONFIG_USB_STORAGE"

    See also:

      OT_KERNEL_BOOT_KOPTIONS_APPEND
      OT_KERNEL_BOOT_SUBSYSTEMS
      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND



    OT_KERNEL_BOOT_KOPTIONS_APPEND - A space separated list of CONFIG_...
    options to be built as builtins instead of modules added after auto boot
    option discovery.  This option depends on OT_KERNEL_BUILD_ALL_MODULES_AS="m"

    See also:

      OT_KERNEL_BOOT_KOPTIONS
      OT_KERNEL_BOOT_SUBSYSTEMS
      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND



    OT_KERNEL_BOOT_SUBSYSTEMS - A space separated list of subsystems required
    to boot as builtins instead of modules used to replace the defaults.
    This information can be found in the help "defined at"
    section in in "make menuconfig".  Early KMS requires drivers/char/agp,
    drivers/gpu, and drivers/video to be added.

    Example:

      OT_KERNEL_BOOT_SUBSYSTEMS="drivers/input/keyboard drivers/hid drivers/ata fs drivers/scsi drivers/block"

    See also:

      OT_KERNEL_BOOT_KOPTIONS
      OT_KERNEL_BOOT_KOPTIONS_APPEND
      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND



    OT_KERNEL_BOOT_SUBSYSTEMS_APPEND - An additional space separated list of
    subsystems required to boot as builtins appended to the default set of boot
    required subsystems.  Early KMS requires drivers/char/agp
    and drivers/gpu to be added.

    Example:

      OT_KERNEL_BOOT_SUBSYSTEMS_APPEND="drivers/spi drivers/mmc drivers/char/agp drivers/gpu drivers/video drivers/char/tpm"

    See also:

      OT_KERNEL_BOOT_KOPTIONS
      OT_KERNEL_BOOT_KOPTIONS_APPEND
      OT_KERNEL_BOOT_SUBSYSTEMS



    OT_KERNEL_CHECK_FIRMWARE_VULNERABILITY_FIXES - checks if the firmware or
    microcode is up-to-date for mitigation against criticial vulnerabilies.
    This check is only available during kernel config assist mode.

    Acceptable values:

      0 for disable checking
      1 for enable checking (default)

    See also:

      OT_KERNEL_CPU_MICROCODE
      OT_KERNEL_FIRMWARE



    OT_KERNEL_CLEAR_LINUX_PATCHSET_BLACKLIST - a space separated list of
    patches to skip.  These are just basenames.

    Example:

      OT_KERNEL_CLEAR_LINUX_PATCHSET_BLACKLIST="0109-initialize-ata-before-graphics.patch"



    OT_KERNEL_CLEAR_LINUX_PATCHSET_EXTRA - a space separated list of patches to
    apply that didn't get applied unconditionally.  Any patch that doesn't have
    Patch[0-9]+: in front of it in linux.spec are candidates for inclusion.
    They get applied from left to right order.

    See https://github.com/clearlinux-pkgs/linux for details.

    Example:

      OT_KERNEL_CLEAR_LINUX_PATCHSET_EXTRA="sched-hybrid1.patch sched-hybrid2.patch sched-hybrid3.patch sched-hybrid4.patch"



    OT_KERNEL_COLD_BOOT_MITIGATIONS - changes the kernel config to mitigate
    against cold boot attacks.

    Acceptable values:

      0 for do not apply any mitigations
      1 for applying mitigations

    See also

      OT_KERNEL_DMA_ATTACK_MITIGATIONS
      OT_KERNEL_IMA



    OT_KERNEL_CONFIG - Points to the absolute path of the kernel config. (This
    can be not set but then defaults to
    /etc/kernels/kernel-config-${PV}-${extraversion}-$(uname -m))

    See also:

      OT_KERNEL_KCONFIG



    OT_KERNEL_CONFIG_MODE - Choose between ebuild assisted and fully custom
    config.

    Acceptable values:

      assist - allow the ebuild to auto configure the config. (default)
      custom - have full control over the config.

    Notes:

      - In custom mode:
        * No kernel config validation will be done.
        * All or most of the environment variables will not have any affect.
        * The OT_KERNEL_BUILD is still available.
        * The OT_KERNEL_MENUCONFIG* environment variables are available.
        * The OT_KERNEL_USE is still valid in src_prepare() for per-profile
          patching.



    OT_KERNEL_CPU_SCHED - can be one of the below depending on the kernel version.

      4.14: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, muqss, muqss-latency, muqss-throughput, pds
      5.10: cfs, cfs-throghhput, cfs-interactive, cfs-autogroup, muqss, muqss-latency, muqss-throughput, prjc, prjc-bmq, prjc-pds
      5.15: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, nest, prjc, prjc-bmq, prjc-pds
      6.1: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, nest, prjc, prjc-bmq, prjc-pds
      6.6: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, nest, prjc, prjc-bmq, prjc-pds
      6.12: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, prjc, prjc-bmq, prjc-pds
      6.13: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, prjc, prjc-bmq, prjc-pds
      6.14: cfs, cfs-throughput, cfs-interactive, cfs-autogroup, prjc, prjc-bmq, prjc-pds

      The reason why for this flexibility is to allow for multiple
      configurations that are not mutual exclusive, meaning you can use the rt
      patchset with CFS but still choose MuQSS for a gaming client kernel.

      This field can be not set which would default to using cfs.

      Notes:

        - cfs is preferred for server kernels and bug-less experience.
        - cfs by default disables autogroup or uses previous settings
        - cfs-interactive is an alias for cfs-autogroup
        - autogroup will be disabled in all other schedulers.
        - muqss and pds-mq are better suited for audio production for the
          ISO priority class.
        - The rt USE/OT_KERNEL_USE flag can only use the cfs scheduler.
        - Anagolus to driving with manual and automatic gears, using autogroup or
          bmq can interfere with controlling individual task placement.
        - For better manual control of individual task placement use either cfs,
          cfs-throughput, muqss, or pds or the sysfs to adjust the weights
          of autogroup.
        - BMQ has been renamed to Project C.  Project C merged both PDS and
          BMQ allowing to choose either scheduler.  C means cross.
        - Project C's version of PDS is not the same as PDS-mq.
	- prjc is the same as prjc-bmq.
        - muqss-latency configures the runqueue for low latency.
        - muqss-latency and muqss-throughput only apply as a fallback for
          work profiles not matching or custom/manual work profiles.
        - Nest 6.7 has 2 releases of the same patch, with and without
          spinning.  By default, the old behavior is used.  To access the
          experimental new behavior without spinning set NEST_SPINNING=0.
          Spinning is a technique used to keep used previously idle cores warm
          or running at higher frequency.  Nest likely only benefits in certain
          configurations.

      The following is discussed in great detail because it affects use of
      scheduling apps that only discuss or assume CFS.  These small details
      relate to security and performance.

      The default timeslices:

        BMQ: 4 ms server/desktop, 2 ms with low latency desktop
        CFS: variable length
        MuQSS:  6 ms
        PDS: 6 ms
        Project C (BMQ/PDS): 4 ms
        Zen MuQSS: 4 ms with zen interactive, 6 ms without zen interactive

        Some of these timeslice values may be adjustable.

      Summary of nice:

        (IMPORTANT:  Not all nice are created equal!)

        CFS                     - weights used in the task's virtual runtime
                                  ("physical time"/weight) proportional to 1024
                                  (nice 0)
        Project C (BMQ/PDS)     - task placement in skiplist, with 0 highest
                                  priority and 39 lowest
        PDS-mq/MuQSS            - virtual deadlines in NORMAL and IDLE

      Summary of nice formulas:

        CFS                     - 1024 * (1.25 ** nice)
                                  [** is expodential and not to be confused with ^ bitwise xor]

        MuQSS                   - prio_ratio[0] = 128
                                  for i in 0 to 39:
                                    # 11/10 is 110% of previous prio_ratio
                                    prio_ratio[i] = prio_ratio[i-1] * 11/10
                                  # (see above in default timeslices) but can be tuned
                                  rr_time = 6 ms # is the default timeslice
                                                 # mentioned above
                                  # shiftleft is the bitshift shift operator in C
                                  virtual_deadline = now + prio_ratio[nice + 20] * rr_time * (1 shiftleft 20) / 128

        PDS-mq                  - deadline[nice + 20] # The documentation and
                                  sourcing of the deadline lookup table is
                                  undocumented.

        Project C (BMQ/PDS)     - nice + 20
                                  boost is +- 7 of current scheduling priority of a task (BMQ only)

      Summary of scheduling policies/classes

        (The priority class implies additional rules such as aging, preemption)

                                NORMAL  IDLE   BATCH   ISO  RT_RR    RT_FIFO  DEADLINE
        CFS                       y      y       y      n     y       y         y
        MuQSS                     y      y       y(*1)  y(*3) y(*4)   y(*4)     n(*5)
        Project C (BMQ/PDS)       y      y(*1)   y(*1)  n     y(*2)   y(*2)     y(*6)
        PDS-mq                    y      y       y(*1)  y(*3) y(*4)   y(*4)     n(*5)

        y - supported
        n - not supported

        *1 - Same as NORMAL.  cfs treats BATCH as potentially unpreemptable, but
             BMQ/PDS breaks this assumption.
        *2 - BMQ/PDS uses a single queue
        *3 - It is pseudo RT_RR with iso budget but demoted to NORMAL when budget
             exausted.
             It is unpremptable by NORMAL meaning it will not skip processing
             during it's time window.
             The budget is a percent of all CPUs over 5 seconds.
             It can be used by non-root users.
             It has it's own iso tick timer.
             The original will use 75% of all CPUs but zen-MuQSS will use 25% when
             zen-interactive is enabled.
        *4 - Using the same skiplist
        *5 - Uses RT_RR in self-test.
        *6 - Uses RT_RR in self-test, translates into RT_FIFO during __set_setscheduler.
             However, the queue is not dedicated but shared.

      Summary of maximum task limits:

        CFS                  - No limit
        PDS-mq/muqss         - CPUs * 64k tasks
        Project C (pds/bmq)  - No limit

      Summary of data structure

        CFS                     - time ordered red-black tree (for BATCH, NORMAL, IDLE)
                                  array of doubly linked lists used in RT_RR, RT_FIFO
        MuQSS                   - 8 level doubly linked skiplist
        PDS-mq                  - 8 level doubly linked skiplist
        Project C (BMQ/PDS) and - circularly doubly linked lists used as FIFO for NORMAL \
         BMQ (5.7 and earlier)    array of doubly linked lists used in RT_RR, RT_FIFO
                                  to implement a priority queue

      Summary of data structure for policies that SHARE data structures with other policies

                                        NORMAL   BATCH  IDLE   ISO   RT_RR   RT_FIFO   DEADLINE
        CFS                               y        y(*3)  y(*3) -      y        y         n
        MuQSS                             y        y(*2)  y(*2) y(*2)  y        y         -
        PDS-mq                            y        y(*2)  y(*2) y(*2)  y        y         y(*1)
        Project C (BMQ/PDS) and           y        y(*4)  y(*4) -      y        y         y(*1)
         BMQ (5.7 and earlier)  

        y = shared
        n = not shared
        - = does not exist
        (*1) with FIFO
        (*2) with NORMAL so same skiplist
        (*3) with NORMAL so same rbtree
        (*4) with NORMAL so same circular doubly linked-list

      Summary of data structure efficency for tasks (worst case)

                                   Search[*4]          Insert          Delete
        CFS                         O(n)[*5]            O(log n)        O(log n)
        CFS-rt                      O(n)                O(1)            O(1)
        Project C (BMQ/PDS)         O(1)/O(n)[*3]       O(1)            O(1)
        PDS-mq                      O(1)[*1]            O(k)            O(k)[*2]
        MuQSS                       O(1)[*1]            O(k)            O(k)[*2]

      Summary of data structure efficency for tasks (amortized [meaning over time])

                                   Search[*4]          Insert          Delete
        CFS                         O(1)[*5]            O(1)            O(1)
        Project C (BMQ/PDS)         O(1)/O(n)[*3]       O(1)            O(1)
        PDS-mq                      O(1)[*1]            O(1)            O(1)[*2]
        MuQSS                       O(1)[*1]            O(1)            O(1)[*2]

      (Applies to both worst case and amortized summaries)

        [*1]For single task in RT_RR or RT_FIFO, it is O(1)
        [*2]k levels with max 8 which is simply O(1).  The original design of
          the skiplist is O(log n) for insertions but has been changed in this
          implementation
        [*3]O(1) for normal, O(n) for RT_RR or RT_FIFO.
        [*4]The next task to execute is always the head but for RT it usually
            has to scan the the array in some implementations.
        [*5]The O(1) is amortized.

        In layman terms, O(1) is faster than O(log n).  O(log n) is faster than
        O(n).

      Summary of task auto-boosting:

        cfs               - no (by default), yes (with autogroup, deprived task
                            groups rewarded with more percent execution time)
        cfs-throughput    - no
        cfs-interactive   - yes (with autogroup, deprived task groups rewarded
                            with more percent execution time)
        Project C (BMQ)   - yes, upon unblocking
        Project C (PDS)   - no
        PDS-mq            - no
        MuQSS             - no

      Summary of task auto-demotion:

        cfs               - yes, if autogroup enabled, burners give percent cpu
                            to deprived task groups.
        cfs-interactive   - yes, with autogroup, burners give percent cpu to
                            deprived task groups.
        MuQSS             - yes, upon fork it is RT becomes NORMAL
                            yes, ISO becomes NORMAL after budget expires
        Project C (BMQ)   - yes, timeslice burners get demoted to lower
                            level of priority

      Summary of use cases and micro-grading:

        Report based on design, source code, and documentation review.

                             Gaming           Multimedia       Multi-tasking(*4)
        CFS                    C                  C                   B+(*3)
        Project C (BMQ)        C(*2)              B                   B-(*5)
        Project C (PDS)        B                  C                   C
        PDS-mq                 B                  B                   C
        MuQSS for 5.4+         B+(*10)            A(*10)              C-(*18)

                          Home server(*11)  SMP (cluster)(*14)    NUMA (HPC)(*14)
        CFS                    D(*12)             B                   A
        Project C (BMQ)        C+(*13)            F                   F
        Project C (PDS)        C+(*13)            F                   F
        PDS-mq                 C+(*13)            C                   F
        MuQSS for 5.4+         C+(*13)            C                   C

                          Embedded(*1)   LTS (Long term support)   Security
        CFS                    C-                 A                 A(*7)
        Project C (BMQ)        B                  F                 F(*17)
        Project C (PDS)        A                  F                 F(*17)
        PDS-mq                 C-                 F                 F
        MuQSS for 5.4+         C-                 F                 F(*6)(*8)

                           Multicore(*20)        EOL
        CFS                   C/A(*19)            n
        Project C (BMQ)       C/F(*16)            n
        Project C (PDS)       C/F(*16)            n
        PDS-mq                C/F(*16)            y
        MuQSS for 5.4+        A/F(*15)            y (since 5.12)
        Zen MuQSS                                 y

        A = best
        B = better
        C = supports and all around good
        D = supports but not so well
        F = no support
        (*1) In terms of fewest lines of code and efficiency which indirectly
            connects to power
        (*2) While the smaller round robin looks great for corresponding higher
          monitor HZ, the auto-boosting may nerf the AAA game.
        (*3) Only if autogroup is enabled, without it not so good from experience.
        (*4) Interactivity under heavy load or just plain desktop use.
        (*5) Usually more smoother under heavy resource use but likely requires
          restart.  It is unknown if this issue is outside of this scheduler
          or the scheduler itself.
        (*6) SCHED_ISO may be abused.  No use caps or timeout cooldown observed.
        (*7) Autogroup cpu burner protections and core scheduling mitigations
          allowed.
        (*8) May increase trashing in older version.  (Memory leak?, related to *18)
        (*9) No CI and no fuzz history.  Precaution should be taken when using
          this under secure scenarios.
        (*10) The nice formulas and virtual deadlines show consistency in SYNC
          with Hz, RTT, etc, but also indicate a weakness in catching up with
          newer hardware.  This means that the formula needs an updated.   All
          other schedulers fail in the nice-time consistency or nice-time
          scaling.
        (*11) Assumes software codec transcoding and distcc running, N users,
          N core.  Based on design and thought experiment.
        (*12) Only if enabled autogroup.  Each user is satisfied to receive
          some work but all were angry at the production rate.
        (*13) Some users may feel great that work was delivered faster than
          the if rendered alone, but some may feel disapointed due to the
          poor production rate.  Because that resource was freed up faster
          than usual, the other too felt it was faster.
        (*14) Assumes more than enough hardware resources but source code
          and design indicated effort in addressing this scenario.
        (*15) Provides many tunables for tuning for throughput or latency on
          different MC/SMP/NMA configurations, bad on SMT/HT security
          update or lacks review on risk assessment with SMT side-channels
          or compatibility review of core scheduling.
        (*16) May have latency issues in some configurations.
        (*17) Disables core scheduling which disables some/all mitigation against
          SMT side-channel attacks (by flawed processor design).
          SCHED_CORE was available since 5.14.  An alternative is to
          disable HT or replace with new processor design.
        (*18) Usually slower or unstable when forward-ported to later point
          releases.
        (*19) 
        (*20) left is performance, right is security

    See also

      HT
      OT_KERNEL_NEST_FREQ_GOV



    OT_KERNEL_CPU_MICROCODE - Auto includes CPU firmware to fix CPU bugs
    and mitigate against some security vulnerabilities.

    There is a risk when updating CPU microcode.  Some well known sites and
    distros have measured or reported performance penalties [in some cases
    single digit frames per second loss] with past microcode updates.

    This option depends on OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS=1.
    The firmware or microcode packages must be installed first.

    Valid values:
      0 (default), 1, path, unset
      1 - auto adds CPU microcode based on /proc/cpuinfo
      path - auto adds CPU microcode based on path to a /proc/cpuinfo snapshot
      Unset is the same as 0 which means manual settings.

    Examples:
      OT_KERNEL_CPU_MICROCODE="1"
      OT_KERNEL_CPU_MICROCODE="/etc/portage/ot-sources/5.15/ot/x86_64/cpu_info"

    See also:
      MICROCODE_BLACKLIST
      MICROCODE_SIGNATURES
      OT_KERNEL_CHECK_FIRMWARE_VULNERABILITY_FIXES



    OT_KERNEL_DISABLE - Disable processing this extraversion or profile.

    Acceptable values:

      0 - Do not disable this extraversion.
      1 - Disable this extraversion.
      unset - Do not disable this extraversion.



    OT_KERNEL_DMA_ATTACK_MITIGATIONS - changes the kernel config to mitigate
    against DMA attacks.  By default, this is enabled in the ebuild.

    Acceptable values:

      0 for do not apply any mitigations
      1 for level 1 mitigations
      1.5 for level 1.5 mitigations
      2 for level 2 mitigations

    - Level 1 mitigations are changes balance the convenience and the security.
    - Level 1.5 mitigations are changes increase mitigation without disabling
      of use of hardware with additional performance penalty.
    - Level 2 mitigations are changes that severely place security over
      convenience which may take away ability to use certain hardware or have
      severe performance degration.

    See also

      OT_KERNEL_COLD_BOOT_MITIGATIONS
      OT_KERNEL_IMA
      OT_KERNEL_KEXEC



    OT_KERNEL_DMESG - Allow the use of early printk and dmesg.  Setting this
    may affect features that may depend on it.  Setting it off may increase
    security.

    Acceptable values:

      1 - Turn on
      0 - Turn off
      default - Turn on with default buffer sizes
      debug - Increase logging sizes and log level for debug analysis
      unset - Unset will use manual or previous settings.

    The ebuild will override the user choice in order for certain features to
    work properly.  The following are overrides with top most overrides
    higher priority.

    For the PGI (profile guided instrumentation) step, it is default
      temporarily.
    For enabled OT_KERNEL_COLD_BOOT_MITIGATIONS, it is disabled.
    For userland Clang CFI development, it is recommended to use default temporarily
      if performing tests for segfault detection, but disable it ASAP.



    OT_KERNEL_EARLY_KMS - enable early KMS for graphics improvement.
    This setting fixes early kms problem with OT_KERNEL_BOOT_SUBSYSTEMS="m".
    For out-of-tree Direct Rendering Manager DKMS graphics drivers, this should
    be 0 to load these drivers as modules.

    Acceptable values:

      1, 0, y, n, unset

    Unset is equivalent to 1.



    OT_KERNEL_EXTRAVERSION - initials or name of the kernel.

    See also:

      OT_KERNEL_PRIMARY_EXTRAVERSION
      OT_KERNEL_PRIMARY_EXTRAVERSION_WITH_TRESOR



    OT_KERNEL_EXTERNAL_MODULES - prepares the kernel for out-of-tree
    modules.  The kernel needs to expose these for packages that build
    kernel drivers outside this package.

    This implies that the source code will be installed in order to build
    external modules.

    Acceptable values:

      1, unset.  Unset means auto detect.



    OT_KERNEL_FAST_SOURCE_CODE_INSTALL - install the kernel sources in the
    fastest way without permissions sanitization.

    Acceptable values:

      1 - fast install without permissions or ownership sanitization.
      0 - slow install with permissions or ownership sanitization.
      unset - slow install with permissions or ownership sanitization.  (default)

    Notes:

      - fast install takes at most a few seconds performing a move into
        image.
      - slow install may take tens of minutes to hours performing copy and
        permissions reset passes into image.

    Requires:

      OT_KERNEL_INSTALL_SOURCE_CODE=1



    OT_KERNEL_FIRMWARE - a space separated list of keywords matching the
    firmware relative to inside /lib/firmware.  Wildcards (denoted by "*") are
    accepted as well as relative paths.  Wildcards are implied before and after
    the pattern.  These patterns are case sensitive meaning there is a
    difference between model and MODEL.  There is a possibility of driver
    writers adding and removing files without notice which is why simple
    keyword matching containing the model name and number without adding
    specific ICs details is recommended.  Keeping this value not set is the
    same as manually editing or reusing the previous value in the .config
    file.  Using this environment variable has advantages of auto adding
    and auto removing firmware references.

    The X in the environment variable name corresponds to the kernel *arch*
    in buildconfigs that is uppercase.  The kernel arch is not exactly the
    same as the distro arch.

    The Y in the environment variable name corresponds to the extraversion
    in buildconfigs that is uppercase.  Both the X and Y values make it
    possible to not apply firmware to virtual machine guest kernels or for
    specific to cross compile kernels.  Any hyphen (-) should be replaced
    with the underscore character (_).

    The following are recognized patterns:

      1. Add by wildcard.  model*.bin model* dir* d*r
      2. Add by literal.  model model123.bin dir/model dir1/dir2/model.bin

    When you use OT_KERNEL_FIRMWARE envvar, it is implied it will wipe the
    previous setting.

    See also:

      OT_KERNEL_CPU_MICROCODE



    OT_KERNEL_FIRMWARE_AVSCAN - performs an avscan on firmware files.

    Acceptable values:

      1 - check
      0 - don't check
      unset - check (default)



    OT_KERNEL_FORCE_APPLY_DISABLE_DEBUG - force the applying disable debug
    globally to remove config symbols containing the following keywords:

      DEBUG, TRACE, VERBOSE, LOG, PRINT

    Acceptable values:

      1 to apply disable_debug, 0 to halt if there is a conflict between a
      kernel flag set and disable_debug.

    See also:

      DISABLE_DEBUG_EXCLUDES



    OT_KERNEL_FPS - Set it to the frames per second based on the recording
    standard.  It can be a multiple of 30 (corresponding to 300 HZ), or multiple
    of 25 (corresponding to 250 HZ).  This matters because some archs cannot use
    300 HZ.  This may help reduce the number of frames dropped in older
    processors or designs if set properly.

    See also:

      https://en.wikipedia.org/wiki/List_of_broadcast_video_formats
      https://en.wikipedia.org/wiki/PAL#/media/File:PAL-NTSC-SECAM.svg



    OT_KERNEL_PGO_FLAVOR - sets the flavor for PGO
    
    Acceptable values:

      CLANG_PGO   - Full PGO
      GCC_PGO_CFG - CFG only, Partial PGO
      GCC_PDO     - CFG only



    OT_KERNEL_HARDENING_LEVEL - sets the security mitigation level of the
    kernel.  In these ebuilds and eclasses - standard security hardening flags.

    Setting to performance also allows to use io_uring for more performance at
    the expense of security.

    Acceptable values:

      custom
      default
      manual
      fast
      fast-af
      practical
      performance
      secure
      secure-af
      unset

    Meanings:

      custom - Customize hardening.
      (Acceptable aliases:  manual, unset)

      default - Uses upstream default security settings, practically secure,
      balanced performance-security.  However, it does have unintended benefits
      such as being less crashy and longer uptimes TBH.
      (Acceptable aliases:  secure, hard, practical)

      fast-af - Trendy alias for performance but dangerous-af.  From experience,
      it does crash more.  It will turn off all hardening to reduce overhead
      or wasted CPU cycles.
      (Acceptable aliases:  fast, fast-af, fast-as-fuck, easy, performance,
      dangerous, dangerous-af, dangerous-as-fuck)

      secure-af - (aka secure as fuck) turns on full hardening.  It increases
      mitigation against theoretical attacks, mitigation against difficult to
      achieve attacks, mitigation against information disclosure.  The
      "see also" tunables below allow to apply potentially problematic
      mitigations conditionally based on experiental trial-and-error
      observations.  Idealistically, they should be ON by default but are
      disabled by default due to compatibility issues.
      The -af is intentional because it emphasizes extreme security measures.
      (Acceptable aliases:  secure-af, secure-as-fuck, hard-af, epic-boss)

      Note: secure-af was original envisioned to be an availability-first
      policy.  There are competing security objectives or philosophies.  For
      integrity-first policy set OT_KERNEL_SECURITY_CRITICAL=1.

      unset - same as custom.

    See also:

      HT
      OT_KERNEL_SECURITY_CRITICAL
      OT_KERNEL_SECURITY_CRITICAL_TYPES
      OT_KERNEL_SME
      OT_KERNEL_SME_DEFAULT_ON
      SEV

    External sources:

      https://en.wikipedia.org/wiki/Io_uring#Security



    OT_KERNEL_HAVE_CRYPTO_DEV_AES
    OT_KERNEL_HAVE_CRYPTO_DEV_ARIA
    OT_KERNEL_HAVE_CRYPTO_DEV_ANUBIS
    OT_KERNEL_HAVE_CRYPTO_DEV_BLAKE2B
    OT_KERNEL_HAVE_CRYPTO_DEV_BLAKE2S
    OT_KERNEL_HAVE_CRYPTO_DEV_CAMELLIA
    OT_KERNEL_HAVE_CRYPTO_DEV_CAST6
    OT_KERNEL_HAVE_CRYPTO_DEV_CHACHA20
    OT_KERNEL_HAVE_CRYPTO_DEV_CRC32
    OT_KERNEL_HAVE_CRYPTO_DEV_CRC32C
    OT_KERNEL_HAVE_CRYPTO_DEV_CURVE25519
    OT_KERNEL_HAVE_CRYPTO_DEV_DES
    OT_KERNEL_HAVE_CRYPTO_DEV_DES3_EDE
    OT_KERNEL_HAVE_CRYPTO_DEV_GCM
    OT_KERNEL_HAVE_CRYPTO_DEV_KUZNYECHIK
    OT_KERNEL_HAVE_CRYPTO_DEV_MD5
    OT_KERNEL_HAVE_CRYPTO_DEV_NHPOLY1305
    OT_KERNEL_HAVE_CRYPTO_DEV_POLY1305
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA1
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA256
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA3
    OT_KERNEL_HAVE_CRYPTO_DEV_SHA512
    OT_KERNEL_HAVE_CRYPTO_DEV_SERPENT
    OT_KERNEL_HAVE_CRYPTO_DEV_SM3
    OT_KERNEL_HAVE_CRYPTO_DEV_SM4
    OT_KERNEL_HAVE_CRYPTO_DEV_TWOFISH

    Acceptable values:

      1 for have, 0 do not have (optional), unset.  Unset is equivalent to 0.

    These will skip adding additional CPU optimized ciphers or hash algorithms
    in preference for the hardware accelerated crypto device implementation.
    While setting this flag, you still need to manually configure the kernel
    config to use the accelerated crypto device.  These should be set to 1
    if the accelerated crypto device supports the algorithm.  If not present,
    it will fall back to the CPU optimized or the generic non-optimized
    algorithm.

    IMPORTANT:

    Do not assume that the hardware algorithm is secure especially if
    obtained from or provided by a stranger or backdoored.

    The preference for hardware implementations of ciphers, hashes, RNG
    generators, end of life (EOL) compilers, etc is not endorsed by the ebuild
    maintainer.  This is due to most of these implementations being not
    transparent as in not open source hardware.  You should always check to see
    if the crypto integrated circut (IC) or CPU has reported hardware
    side-channels or design flaws.  If the hardware does have a flaw, consider
    replacing the hardware from a trusted vendor who can verify authenticity of
    that unit or use the software open source implementation from trusted vetted
    developers.

    See also

      https://en.wikipedia.org/wiki/Bullrun_(decryption_program)
      CONFIG_RANDOM_TRUST_CPU: \
      https://github.com/torvalds/linux/blob/v6.1/drivers/char/Kconfig#L426
      CONFIG_RANDOM_TRUST_BOOTLOADER: \
      https://github.com/torvalds/linux/blob/v6.1/drivers/char/Kconfig#L444
      https://en.wikipedia.org/wiki/Evil_maid_attack
      Lucky winner attack (trojan horse hardware): \
      https://en.wikipedia.org/wiki/Social_engineering_(security)#Baiting
      https://en.wikipedia.org/wiki/Backdoor_(computing)
      https://en.wikipedia.org/wiki/Hardware_backdoor
      https://nvd.nist.gov/vuln/detail/CVE-2019-15847


    OT_KERNEL_HDD - Set if HDD drive is present for this kernel build.

    Acceptable values:

      1 - yes, a rotational hard drive is present
      0 - no HHD exists
      auto - autodetect via sysfs (default)
      unset - auto

    See also:

      OT_KERNEL_SSD



    OT_KERNEL_HWRAID - Set if SATA hardware raid is being used.  This may
    improve the throughput with the BFQ I/O scheduler.

    Acceptable values:

      1 - have hardware raid
      0 - no hardware raid
      unset - no hardware raid



    OT_KERNEL_IMA - Sets the mode for IMA.  IMA will essentially ensure
    system integrity with the use of hashing and filesystem metadata.
    IMA requires 2 steps - measurement and appraisal.  Measurement
    is done by hashing files.  Appraisal is done by comparing hashes.

    These kernel configs will be built in so the kernel needs to be rebuilt
    whenever it changes.

    Simplified progression diagram:

      start ➡️  rebuild with fix ➡️  reboot ➡️  rebuild with enforce ➡️  reboot ➡️  end

    (➡️  is the right emoji symbol)

    Acceptable values:

      fix - update the IMA hashes
      enforce - protect
      off - disables IMA
      unset - manual



    OT_KERNEL_IMA_HASH_ALG - Sets the default hashing algorithm

    Acceptable values:

      sha1, sha256, sha512, wp512, default, manual, unset

    sha1 is the default.  If unset, it will choose manual.



    OT_KERNEL_IMA_POLICIES - A space separated list of IMA policies.

    Acceptable values:

      critical_data - hash kernel critical data
      fail_securely - force signature failure on untrusted filesystems
      tcb - default hash of opened root files, modules, firmware, policy
      tcb_appraise - default apprasial of tcb set
      secure_boot - check module, firmware, policy, and signed kexec kernels
      unset - use manual setting

    Examples:

      OT_KERNEL_IMA_POLICIES="tcb"
      OT_KERNEL_IMA_POLICIES="tcb tcb_appraise"
      OT_KERNEL_IMA_POLICIES="tcb tcb_appraise secure_boot"



    OT_KERNEL_INIT - Set the value for init= as an argument to the internal
    built-in kernel command line.  This variable was intended to minimize human
    error with the auto option.

    Acceptable values:

     a path - The absolute path to the init program.
     auto - Automatically detect based on the presence of init package installed.
     custom (default) - You will manually set via /etc/default/grub
     dinit - Use init=/sbin/dinit
     epoch - Use init=/usr/sbin/epoch-init
     finit - Use init=/sbin/finit
     none - Removes init= from the built-in kernel command line
     openrc - Use init=/sbin/openrc-init
     runit - Use init=/sbin/runit-init
     s6 - Use init=/sbin/init
     systemd - Use init=/lib/systemd/systemd
     sysvinit - Use init=/sbin/init

    Examples

      OT_KERNEL_INIT="/sbin/init"            # From the s6 quickstart.html instructions
      OT_KERNEL_INIT="/sbin/s6-imkr-init"    # From the "s6-linux-init (package)" instructions
      OT_KERNEL_INIT="/sbin/s6-init"         # From the "User:Capezotte/s6 on Gentoo" instructions
      OT_KERNEL_INIT="/sbin/s6-gentoo-init"  # From the "s6 and s6-rc-based init system" instructions
      OT_KERNEL_INIT="/sbin/openrc-init"
      OT_KERNEL_INIT="openrc"
      OT_KERNEL_INIT="auto"
      OT_KERNEL_INIT="none"
    
    Features

      init system | supervisor | sandboxing[4] | realtime | use cases | notes
      dinit            y             n           n              p
      epoch            y             n           n           e 
      finit            y             n           n[1]       d   p
      openrc           y             n[3]        y          d  mps
      runit            y             n[2]        n              p
      s6               y             n           n           e 
      systemd          y             y           y         Dd  mps    Support for on demand services for user or sockets, numa scheduling
      sysvinit         n             n           n            l
    
    Meaning:

      supervisor - has a tool (e.g. systemctl, initctl) to communicate to the
        supervisor process to stop or start services
      sandboxing - chroot filesystem isolation, root/network capability
        management, resource limits between services.
      realtime - able to change services to realtime priority class

       D - For data centers
       d - For desktop users
       e - For embedded
       l - For legacy or software museum
       m - For music production[4]
       p - For non-sensitive data servers such as dedicated game server
       s - For sensitive data servers on LAN server, home server, SOHO,
           SSH server
    
      [1] - achieveable with OpenRC compatibility wrappers but not native
      [2] - chroot yes, unsharing namespaces no
      [3] - chroot yes, unsharing namespaces requires sys-apps/sandbox
      [4] - Native support similar to bubblewrap and sys-apps/sandbox

    Notes

      * auto is recommended but the common practice is to configure
        /etc/default/grub.  It can only be used when not cross compiling.
      * If init= is provided by the bootloader, it will override this internal
        setting except when lockdown is enabled.
      * It is recommended to set it to auto and remove the init= from boot.
      * It is *mandatory* to disable tmpfiles USE flag in systemd-utils for
        realtime.  The periodic cleanup feature will ruin the production, cause
        gaming loss, disrupt live performance, etc.
      * The speed of the init may vary on each machine based on several factors
        such as the starting order, enabled bit, service support for that init
        system.  It is possible to start the tty login before the blocking
        network service (e.g. NetworkManager, netifrc) start.
      * The explicit values are provided for cross compiling.
      * There are four s6 instructions.  Insane!  The s6 or auto options uses
        the quckstart.html upstream instructions.


    See also

      OT_KERNEL_BOOT_ARGS
      OT_KERNEL_BOOT_ARGS_LOCKDOWN



    OT_KERNEL_INSTALL_SOURCE_CODE - Install the kernel source code.
    Install the source code implies copying the copyright notices.

    Acceptable values:

    0 - don't install
    1 - install
    n - don't install
    y - install
    unset -  install (default)

    Notes:

      - Explicit or implicit external modules will still force the install
        of the full source code.
      - Disabling the source code install will still install the minimal
        required and source code for portage to do version and kernel config
        checks.

    See also

      OT_KERNEL_PRESERVE_HEADER_NOTICES
      OT_KERNEL_FAST_SOURCE_CODE_INSTALL



    OT_KERNEL_IOMMU - Sets the default IOMMU domain type upon initalization.
    Setting this has implications with security and performance tradeoff.

    The OT_KERNEL_COLD_BOOT_MITIGATIONS have higher precedence when this
    option is used which allow only for lazy or strict.

    Acceptable values:

      manual - Use previous settings
      custom - Use previous settings
      disable - Disable the IOMMU.  Benefits tourney host level gaming.
      lazy - Restrict memory access.  Use delayed batch TLB invalidation.
        Throughput still significantly drops.
      strict - Restrict memory access.  Use slowest synchronous TLB
        invalidation.  Throughput significantly drops.
      pt - Trusted devices are given unrestricted memory access.  Option
        used by people that use virtual machines with near baremetal
        performance.  Passthrough reduces the VM overhead.

    See also:

      OT_KERNEL_IRQ_REMAP
      XEN_PCI_PASSTHROUGH



    OT_KERNEL_IOSCHED_OPENRC - Install the OpenRC init script(s) to
    autoset the kernel I/O scheduler per device.  If you do not generate
    and enable it, you are responsible to manually setting the I/O
    scheduler.

    Acceptable values

      1 - install (default)
      0 - don't install
      unset - install

    See also:

      OT_KERNEL_HWRAID
      OT_KERNEL_IOSCHED_SYSTEMD



    OT_KERNEL_IOSCHED_SYSTEMD - Install the systemd init script(s) to
    autoset the kernel I/O scheduler per device.  If you do not generate
    and enable it, you are responsible to manually setting the I/O
    scheduler.

    Acceptable values

      1 - install (default)
      0 - don't install
      unset - install

    See also:

      OT_KERNEL_HWRAID
      OT_KERNEL_IOSCHED_OPENRC



    OT_KERNEL_IOSCHED - A I/O scheduler list for the custom work profile
    (either OT_KERNEL_WORK_PROFILE="custom" or OT_KERNEL_WORK_PROFILE="manual").
    The first I/O scheduler corresponds to the I/O scheduler to apply to SSDs.
    The second I/O scheduler corresponds to the I/O scheduler to apply to HDDs.

    Examples:

      OT_KERNEL_IOSCHED="none none"
      OT_KERNEL_IOSCHED="noop mq-deadline"
      OT_KERNEL_IOSCHED="noop mq-deadline"
      OT_KERNEL_IOSCHED="kyber bfq-throughput"
    
    Acceptable values:

      bfq - Alias for bfq-low-latency.  Virtual latency guarantees for
      interactive and soft-real-time (SRT) and weighted proportional throughput.
      By default, more weight is given to interactive/SRT and sequential I/O
      requests.

      bfq-low-latency - Variation optimized for interactive or soft-real-time
      I/O such as seeking for media players.  Has observed benefits in startup
      time.  This option does automatic weight adjustments with interatives, but
      can still be inferior in some scenarios.  For manual, weight adjustments
      use bfq-custom-interactive instead.

      bfq-custom-interactive - Variation optimized for precise interactivity
      under high I/O.  This option requires the use of ionice to manually adjust
      the weights manipulating the priority class (-c in ionice) and the class
      data (-n in ionice).  Work profiles notorious for high I/O such as
      builder-interactive will be assigned this.

      Beneficial one liners for bfq-custom-interactive:

        ionice -c 3 -p $(pgrep -G portage) # puts emerge in the idle class
        ionice -c 3 -p $(pgrep sah) # puts sah in the idle class
        ionice -c 2 -n 0 -p $(pgrep uzbl) # web browser
        ionice -c 2 -n 0 -p $(pgrep mplayer) # streaming service
        # ionice -c 3 means idle and heaviest I/O programs should use this value.
        # ionice -c 2 means best effort to be used by interactive.
        # ionice -n 0 is highest priority in that priority class in the best effort class.
        # ionice -n 7 is low priority in that priority class in the best effort class.

      The recommendations above may change or better solution provided later.
      See also PORTAGE_IONICE_COMMAND in "man make.conf".

      bfq-streaming - Same as bfq-low-latency but designed to prevent dropped
      video frames at the expense of throughput.  This option uses automatic
      weight adjustments.

      bfq-throughput - Variation to maximize MB/s disabling boosting weights
      for interactive processes.

      cfq - Round robin fairness with timeslices (4.14 only)

      kyber - Ensures that the queues meets latency goals

      mq-deadline - Sorted I/O with grouped deployment

      none - Disables I/O scheduling

      noop - FIFO I/O scheduling with request merging (4.14 only)

    See also:

      OT_KERNEL_IOSCHED_OVERRIDE
      OT_KERNEL_HWRAID



    OT_KERNEL_IOSCHED_OVERRIDE - A space delimited list of id;iosched.  The id
    is obtained from the basename in "ls -l /dev/disk/by-id".  The id should
    be the device itself not a partition.  The reason for this is that
    the kernel may mistakenly flag USB flash disks as rotational.  This also
    allows for USB rotational and USB flash to be precisely given the proper
    scheduler or to override the auto applied values if you need latency
    guarantees.

    Examples:

      OT_KERNEL_IOSCHED_OVERRIDE="ata-XXX_XXXXXXXX-XXXXXXX_XX-XXXXXXXXXXXX;bfq-low-latency"
      OT_KERNEL_IOSCHED_OVERRIDE="ata-XXX_XXXXXXXX-XXXXXXX_XX-XXXXXXXXXXXX;bfq-throughput usb-XXXXXXXX_XXXX_XXXX_XXXXXXXXXXXXXXXXXXXXXXXX-0:0;none"
      OT_KERNEL_IOSCHED_OVERRIDE="usb-YYYYYYYY_YYYY_YYYY_YYYYYYYYYYYYYYYYYYYYYYYY-0:0;hdd usb-XXXXXXXX_XXXX_XXXX_XXXXXXXXXXXXXXXXXXXXXXXX-0:0;flash"
      OT_KERNEL_IOSCHED_OVERRIDE="ata-XXX_XXXXXXXX-XXXXXXX_XX-XXXXXXXXXXXX;rotational"

    Acceptable values for iosched

      All acceptable values listed in OT_KERNEL_IOSCHEDS

      hdd - Large mechanical platter type
      ssd - Large NAND memory storage 
      flash - NAND memory storage for use by USB or cameras (alias for ssd)
      rotational - alias for HDD

    See also:

      OT_KERNEL_IOSCHED



    OT_KERNEL_IRQ_REMAP - Sets IRQ remapping for virtual machine hypervisors
    or hosts to prevent malicious MSIs.  This option enables use of x2APIC
    mode.

    Acceptable values:

      1 (default when iommu is pt, lazy, or strict), 0, unset

    Unset is the same as manual.



    OT_KERNEL_KCONFIG - A set of key-value pairs used to enable or disable
    drivers or set options in the kernel config.  This is another convenient way
    to change the default config slightly without wasting minutes in menuconfig
    hunting down for the flag, or to quickly enable driver support on top of the
    default kernel config.  If an ebuild package(s) announces flags, you can
    easily add them using this.

    Examples:

      OT_KERNEL_KCONFIG[CONFIG_HZ_1000]=n
      OT_KERNEL_KCONFIG[CONFIG_HZ_250]=y
      OT_KERNEL_KCONFIG[CONFIG_MTRR]=y
      OT_KERNEL_KCONFIG[CONFIG_MTRR]=" "
      OT_KERNEL_KCONFIG[CONFIG_CONSOLE_LOGLEVEL_DEFAULT]=2
      OT_KERNEL_KCONFIG[CONFIG_MEDIA_SUPPORT]=m
      OT_KERNEL_KCONFIG[CONFIG_LSM]="integrity,apparmor,bpf"
      OT_KERNEL_KCONFIG[CONFIG_EXTRA_FIRMWARE]="\"vendor1/model1.bin vendor2/model2.bin vendor3/model3.bin\""

      OT_KERNEL_KCONFIG[CONFIG_BLOCK]=y
      OT_KERNEL_KCONFIG[CONFIG_PAGE_SIZE_LESS_THAN_256KB]=y
      OT_KERNEL_KCONFIG[CONFIG_BTRFS_FS]=y

    Notes:

      * You may use "y" to to enable the driver.
      * You may use "n" or " " to disable the driver.
      * All flags get evaluated from top to bottom order.
      * To ensure that the flag gets enabled, add all flags under "Depends on".
        This info can be found in the menuconfig help screen or inspecting
        the Kconfig file directly from git repo viewer.
      * You do not need to declare the array.
      * These get evaluated at the end of the kernel assist configuration.
      * You must add an escaped double quote with backslash for values with
        spaces.
      * Every option must be prefixed with CONFIG_

    See also:

       OT_KERNEL_CONFIG



    OT_KERNEL_KERNEL_COMPILER_PATCH_PROVIDER - Sets the upstream provider of the patch.

    Acceptable values:

      graysky2   - (default in lts/stable) Use the kernel_compiler_patch directly from the creator of the patchset.
      zen-sauce  - Use the zen-sauce version of kernel_compiler_patch
      genpatches - Use the genpatches version of kernel_compiler_patch
      none       - (default for live) Disables kernel_compiler_patch
      disable    - Disables kernel_compiler_patch

    See also:

      OT_KERNEL_KERNEL_COMPILER_PATCH_LEVEL



    OT_KERNEL_KERNEL_DIR - Sets and overrides the install location to install
    the kernel.

    Acceptable values:
      path - It must be an absolute path.
      unset - Sets to /boot



    OT_KERNEL_KEXEC - Sets kexec config to allow to reboot into a new kernel
    instantly.  Booting into a poorly configured destination kernel can lead to
    severe security holes.  It is not recommended to use this feature unless the
    destination kernels are signed and updated daily.

    The OT_KERNEL_DMA_ATTACK_MITIGATIONS has higher priority and may
    override this choice.

    Acceptable values:

      1 - Enables kexec support
      0 - Disables kexec support
      unset - Use manual settings

    See also:

      OT_KERNEL_IMA
      OT_KERNEL_IMA_POLICIES



    OT_KERNEL_LOGO_AVSCAN - Perform antivirus scan on image before running
      image *magick conversion and adding to kernel if avscanner available.

    Acceptable values:

      0 - disable
      1 - enable
      unset - enable (default)



    OT_KERNEL_LOGO_LICENSE_URI - A uri, local file containing the license

    Acceptable values:

      url - An image off the internet.
      absolute path to local file - A path locally on the device
      unset - skip license copy

    Examples:

      OT_KERNEL_LOGO_LICENSE_URI="https://gitweb.gentoo.org/repo/gentoo.git/plain/licenses/CC-BY-3.0"
      OT_KERNEL_LOGO_LICENSE_URI="file:///home/user/logo.license"
      OT_KERNEL_LOGO_LICENSE_URI="/home/user/logo.license"



    OT_KERNEL_LOGO_MAGICK_ARGS - Args to pass to the converter

    Examples:

      OT_KERNEL_LOGO_MAGICK_ARGS="-geometry x112 -colors 224"
      OT_KERNEL_LOGO_MAGICK_ARGS="-geometry x80 -colors 224"

    Notes:

      - Using the kernel logo will restore console logging levels to default,
        which may decrease security.
      - The -geometry option is used to scale the image preserving aspect ratio.
      - The value of -geometry cannot exceed the framebuffer width or height.
      - The -colors can only be 1, 16, 224 to indicate the maxiumum
        allowed colors.
      - You may specify more args.
      - The old logos dimensions do not scale well in current times.  The ratio
        is approximately .166, .133, .10416 the height of 640x480, 800x600,
        1366x768 monitors circa 2008.  So if you have a 1080p monitor (or
        1920x1080) or 4k monitor, a flag as a logo should be 144 pixels or 224
        pixels respectively in height to properly scale for newer monitors, so
        logos do not appear tiny, or feel archaic useless, but remain nostalgic
        as in circa 2008.  Larger full screen logos should be possible like
        with Dracut / Plymouth.
      - The dimensions should be an even number and divisible by 4.
      - See https://imagemagick.org/script/magick.php for additional arguments
        or clarification of the examples above.



    OT_KERNEL_LOGO_PREPROCESS_PATH - This is an absolute path to the
    preprocessor script.  This script can apply a series of extra manipulation
    on the logo such as distortions (wavy flag), or text annotations, or color
    tinting to the logo, or drawing borders, or waifu2x style upscaling.  The
    image_in_path bash variable will contain the path to the image.  The final
    image must be the same image format and the same filename contained in
    image_in_path.

    Example:

      OT_KERNEL_LOGO_PREPROCESS_PATH="/etc/portage/ot-sources/6.1/gaming/x86_64/logo_preprocess.sh"

    Notes:

      - The script must have root:root and 700 permissions.
      - The script must be a bash script.
      - OT_KERNEL_LOGO_PREPROCESS_SHA512 and OT_KERNEL_LOGO_PREPROCESS_BLAKE2B
        needs to be defined.
      - See the following links:

          https://imagemagick.org/Usage/distorts/
          https://imagemagick.org/Usage/annotating/
          https://imagemagick.org/Usage/

      - You may use other programs other than *magick package to achieve the
        desired results.
      - GPU usage may require extra ebuild/eclass modding so the CPU algorithm
        is preferred or preprocessing done prior to emerging.
      - This script can be used in creative good way like a image of the day
        changer, but also it can be a weakness (as in being hacked).  It is
        not recommended to do web activities during this time or allow
        external shell scripts from the web to run.



    OT_KERNEL_LOGO_PREPROCESS_SHA512 - sha512 checksum for OT_KERNEL_LOGO_PREPROCESS script.
    OT_KERNEL_LOGO_PREPROCESS_BLAKE2B - blake2b checksum for OT_KERNEL_LOGO_PREPROCESS script..

    Notes:

      - Use `sha512sum /etc/portage/ot-sources/6.1/gaming/x86_64/logo_preprocess.sh | cut -f 1 -d " "` to obtain the sha512 checksum.
      - Use `rhash --blake2b /etc/portage/ot-sources/6.1/gaming/x86_64/logo_preprocess.sh | cut -f 1 -d " "` to obtain the blake2b checksum



    OT_KERNEL_LOGO_COUNT - number of times to show the logo. (EXPERIMENTAL)

    Acceptable values:

      1 to number of online CPUs - an integer.
      auto - use the number of online CPUs (upstream default)



    OT_KERNEL_LOGO_FOOTNOTES - save notes to a file next to the optional license file. (EXPERIMENTAL)

    Example:

      OT_KERNEL_LOGO_FOOTNOTES="Photo:  Comet 2023.01.27 C-22-E3-ZTF 500 F5.  Credits: Auvo Korpi.  License: CC-BY-2.0."

    Notes:

      - Nested double quotes need to be escaped with \" or be replaced with single
        quotes.
      - The fille will found in /usr/share/${PN}/${PV}-${extraversion}/licenses/logo/logo_footnotes
      - It is a good way to save attribution to higher quality CC-BY licensed
        photos.

    See also:

      OT_KERNEL_LOGO_FOOTNOTES_ON_INIT



    OT_KERNEL_LOGO_FOOTNOTES_ON_INIT - Display the notes on init boot. (EXPERIMENTAL)
    This will automatically turn on early printk.

    Depends on:

      OT_KERNEL_LOGO_FOOTNOTES

    Acceptable values:

      1 - show
      0 - don't show
      unset - don't show (default)



    OT_KERNEL_LOGO_URI - A URI, local file, or pre-bundled logo provided by the
    package.

    Acceptable values:
    url - An image off the Internet.
    absolute path to local file - A path locally on the device
    pre-bundled logos - See

      https://github.com/torvalds/linux/tree/master/drivers/video/logo

    Examples:

      OT_KERNEL_LOGO_URI="https://upload.wikimedia.org/wikipedia/commons/4/49/Flag_of_Ukraine.svg"
      OT_KERNEL_LOGO_URI="logo_linux_clut224.ppm"
      OT_KERNEL_LOGO_URI="file:///home/user/logo.jpg"
      OT_KERNEL_LOGO_URI="/home/user/logo.jpg"

    Notes:

      - Custom logos or images provided require imagemagick or graphicsmagick
        installed via the respective USE flag.
      - Positives for using a kernel logo are ease of deployment, fewest changes,
        short term satisfaction.
      - Negatives for using a kernel logo are it will likely break the seamless
        integration between initramfs or init system logo transition.
      - It requires that the network-sandbox be disabled if logos are fetched
        from the Internet.
      - The logo must be license compatible with the kernel.
      - The logo must abide by acceptable trademark use agreements.
      - The logo from the Internet must come from a vetted reliable source to
        prevent being hacked.
      - The logos provided by the kernel are 80x80 or 40x40 with either
        1, 16, 225 colors.
      - For seemless boot logos or animated logos, it is recommended to use
        Dracut and Plymouth packages instead of the kernel logo.
        Kernel logos are stills.



    OT_KERNEL_LSMS - Enable and set the order for LSM (Linux Security Modules)

    Acceptable multi values: apparmor, bpf, capability, integrity, landlock,
    loadpin, lockdown, safesetid, selinux, smack, tomoyo, yama.

    Acceptable general values:  auto, default, manual

    * auto - Auto adds LSMs based on packages installed and OT_KERNEL_HARDENING_LEVEL.
      - If OT_KERNEL_HARDENING_LEVEL=fast-af or similar it will disable LSMs.
      - If OT_KERNEL_HARDENING_LEVEL=secure or above it will enable and auto-detect LSMs.
    * default - Uses "integrity,selinux,bpf" with default subsettings
      equivalent to upstream defaults.  It is implied capability and
      integrity are loaded.
    * manual - Uses previously manually set settings
    * a custom list

    The "acceptable multi values" and "acceptable general values" are mutually
    exclusive.  In acceptable multi values listing, the LSMs needs to be comma
    separated and mutiple LSMs can be used.  In acceptable general values
    only one value can be used which are associated with a precreated
    listing.

    For a newly generated kernel .config with not set OT_KERNEL_LSMS, it will
    apply auto setting.  For previous installs with OT_KERNEL_LSMS is not set,
    it will apply manual.

    It is recommended to use auto if you are using
    OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS=1.  Otherwise, it assumes that
    the user wants exact and full control over the LSM inclusion and ordering.

    Example:

      OT_KERNEL_LSMS="integrity,lockdown,yama,selinux"



    OT_KERNEL_MAX_UPTIME - Optimize the kernel to maximize uptime.  This setting
    is to mitigate against irreversable losses (hardcore mode, lost work) or
    embrassing crashes.  (EXPERIMENTAL, WIP)

    Acceptable values:  1 - max uptime, 0 - unstable (default)

    The following work profiles maximize uptime unconditionally:
    
    digital-audio-workstation
    dss
    gamedev
    game-server
    gaming-tournament
    http-server-busy
    http-server-relaxed
    musical-live-performance
    pi-deep-learning
    pi-music-production
    presentation
    pro-gaming
    ros
    workstation

    See Also

      OT_KERNEL_SECURITY_CRITICAL



    OT_KERNEL_MESSAGE - Print a message near the end of the kernel init.

    Examples:

      OT_KERNEL_MESSAGE="Return lost computer to ... at address ... call me at ..."



    OT_KERNEL_N_CPUS - Sets the max number of CPUs.



    OT_KERNEL_MENUCONFIG_COLORS - Sets the colors for menuconfig.

    Acceptable values:

      mono - black and white
      blackbg - black with colored borders
      classic - similiar to default but with yellow text
      bluetitle - default colored with black text designed for LCDs



    OT_KERNEL_MENUCONFIG_RUN_AT - Sets the location to run the menuconfig
    wrapper.

    Acceptable values:

      pre - Allow the user to run menuconfig wrapper before ebuild changes.
        This is suitable for enabling just drivers and minor edits.
      post - Allow the user to run menuconfig wrapper after ebuild changes.
        This is suitable for manual edits or mistakes by the ebuild itself.



    OT_KERNEL_MENUCONFIG_UI - Select the menu to use when running the
    wrapper.  When this value is set to a UI, the emerge will prematurely quit
    to allow to configure it using a wrapper script.  Due to interactive bugs,
    this workaround is used instead.  The menuconfig access in the ebuild
    was provided primarily to enable drivers.

    Valid values:

      config - Use line-by-line prompt frontend
      menuconfig - Use lxdialog menu frontend using ncurses
      nconfig - Use ncurses frontend
      gconfig - Use GTK+2 frontend
      xconfig - Use Qt5/Qt6 frontend
      disable - disables menuconfig
      none - disables menuconfig

    If unset, it assumes disabled.

    For the full list, see

      https://github.com/torvalds/linux/blob/master/scripts/kconfig/Makefile#L118



    OT_KERNEL_MODULES_SUPPORT - Enables or disable modules support.
    For unsigned kernel modules, this will prevent loading hacked modules.
    If a option is still a module and modules support is disable, it will
    convert all modules into builtins.

    Acceptable values:

      1, 0, y, n, unset

    Unset is equivalent to maunal or previous settings if using previous config,
    or default config if new config.



    OT_KERNEL_MODULES_COMPRESSOR (optional) - compresses the kernel
    modules.

    Acceptable values:

      NONE, GZIP, XZ, ZSTD

    If not set, it will use the manual setting.  NONE and ZSTD are only allowed
    with 5.15+.  When a new kernel config is generated, module compression is
    disabled; but can be overrided by explicitly setting it to one of the
    acceptable values.



    OT_KERNEL_NEST_FREQ_GOV - change the default for the frequency governor.
    This sets the default.  Overall schedutil dominates performance with nest
    based on benchmarks,  but you can refine optimizing the performance by
    selecting either one during runtime.

    Acceptable values:

      performance, schedutil


    OT_KERNEL_NETFILTER - a space delimited list of kernel config symbols.

    Acceptable values:

      For netfilter ipv4, see

        https://github.com/torvalds/linux/blob/master/net/ipv4/netfilter/Kconfig

      For netfilter ipv6, see

        https://github.com/torvalds/linux/blob/master/net/ipv6/netfilter/Kconfig

      For netfilter ipvs, see

        https://github.com/torvalds/linux/blob/master/net/netfilter/ipvs/Kconfig

      For netfilter ipset, see

        https://github.com/torvalds/linux/blob/master/net/netfilter/ipset/Kconfig

      For netfilter xtables, see

        https://github.com/torvalds/linux/blob/master/net/netfilter/Kconfig

      For netfilter ebt, see

        https://github.com/torvalds/linux/blob/master/net/bridge/netfilter/Kconfig

    Examples:

      OT_KERNEL_NETFILTER="NETFILTER_XT_MATCH_ADDRTYPE NETFILTER_XT_MATCH_CONNTRACK NETFILTER_XT_MATCH_IPVS IP_NF_FILTER IP6_NF_FILTER BRIDGE_EBT_T_NAT IP_VS_PROTO_UDP IP_VS_RR"
      OT_KERNEL_NETFILTER="IP_VS_SH_TAB_BITS=8 CONFIG_IP_VS_MH_TAB_INDEX=12"



    OT_KERNEL_PAGE_SIZE - Change the page size for reasons of performance,
    energy savings, security.  This may require certain software to be
    recompiled if this information is gained at compile time.  The numbers
    are in KB.

    Acceptable values:

      A number:
        alpha:  4
        arm:  4
        arm64:  4, 16, 64
        loongarch:  4, 16, 64
        m68k:  4, 8                          8 for CONFIG_SUN3=y or CONFIG_COLDFIRE=y; 4 for others
        parisc:  4, 16, 64                   (2)
        powerpc:  4, 16, 64, 256             (1)(4)
        mips:  4, 8, 16, 32                  (1)
        riscv:  4
        s390:  4
        sparc:  4, 8                         8 for a 64-bit compiler, 4 for others
        x86:  4
      big-data - optimized for HPC
      compact - produce the least wasted space
      custom - use current kernel config values
      default - use upstream defaults
      disable - skip setting but use custom values
      low-power - fewest CPU cycles wasted on managing the page table and page metadata
      max - largest page size supported by hardware in kernel config
      min - smallest page size supported by hardware in kernel config
      pgsql - Match PostgreSQL default page size
      security - increased page isolation
      sql - Match InnoDB default page size
      unset - same as custom

    (1) The values listed may have dependencies or not work in certain configurations.
    (2) 16, 64 are marked broken upstream
    (3) Performance for parisc (aka hppa) implies (2)
    (4) Only 64kb supported.
        It may likely require a modified bintools built with crossdev.
        (https://lore.kernel.org/all/200710181108.19413.yur@emcraft.com/T/#u)
    (5) If using a database package, both the database page size and the
        kernel's memory page size should be the same and the largest
        supported by the CPU and the linker.  For example,

          bfd supports 64 KB pages maxiumum.
          A database supports 16 KB, 32 KB, 64 KB pages.
          The CPU supports 64 KB and 256 KB.
          The largest common denominator is 64 KB.

    (6) If the DB supports a larger size than what is available by the CPU
        the half sized granularity is chosen.  For example a DB uses 8 KB
        as the page size, but the cpu supports only 4 KB an 16 KB.  4 KB
        will be preferred for that symbolic value.

    Notes:

    - Using this feature may disable options that decrease the index
      range or addressable range, meaning that the physical memory may
      not be fully utilized.
    - Changing the page size may require emerging packages that obtain
      page size information during configure time or build time.
    - Some architectures use a fixed page size with 1 or 2 values that has no
      effect when setting this value.
    - Non numerical values are only supported in non fixed page size
      architectures.
    - Because it may create new bugs in userspace apps, the default if
      not set is custom.
    - You can choose only one value.

    Examples:

      OT_KERNEL_PAGE_SIZE="64"
      OT_KERNEL_PAGE_SIZE="sql"



    OT_KERNEL_PCIE_MPS - sets the Maximum Paylond Size (MPS) and Max Read
    Request Size (MRRS).  This setting may improve performance by reducing
    overhead and packets transferred.

    Acceptable values:

      bios - use bios defaults
      default - use PCIe bridge value
      hotplug-optimal - alias for default
      hotplug-safe - MPS lowered for compatibility to prevent hotplug fail
      p2p-safe - MPS lowered for compatibility with PCIe-to-PCIe to prevent fail
      performance - use max parent MPS and increase MRRS to no more than MPS
      safe - max MPS common to all devices at boot
      unset - use manual settings



    OT_KERNEL_PKGFLAGS_ACCEPT - a key-value pair(s) of auto apply-able kernel
    config symbols to accept per package-wise.

    Examples:

      OT_KERNEL_PKGFLAGS_ACCEPT[S05309e2]=1
      OT_KERNEL_PKGFLAGS_ACCEPT[S351365c]=1

    Notes:

      - You must prefix the id with an S.
      - You do not need to declare the associative array.

    See also:

      Kernel pkgflags environment variables



    OT_KERNEL_PKGFLAGS_REJECT - is a key-value pair(s) auto apply-able kernel
    config symbols to reject.  These sets of flags are identified (id) with a 7
    digit hash code and used to either skip the config and apply the config
    manually or permit a disable_debug conflict to priorize disable_debug
    removal of debug keyworded kernel config symbols.

    Currently, this does not unset the kernel config flags but means that it
    will not apply the set of kernel configs.  One must manually unset these
    options.  The reason why it is not so easy to automate unsetting is
    because some of these settings may have multiple dependence on a kernel
    config.

    Examples:

      OT_KERNEL_PKGFLAGS_REJECT[S1ee4e36]=1
      OT_KERNEL_PKGFLAGS_REJECT[S155d9fc]=1
      OT_KERNEL_PKGFLAGS_REJECT[S27ea6ce]=1

    Notes:

      - You must prefix the id with an S.
      - You do not need to declare the associative array.

    See also:

      Kernel pkgflags environment variables



    OT_KERNEL_PKU - enables PKU (Memory Protection Keys) for supported
    hardware.

    Acceptable values:

      1, 0, auto, unset

    Unset is the same as auto.



    OT_KERNEL_PRESERVE_HEADER_NOTICES - Preserves copyright notices for binary
    only installation.

    Important:  You still need to save the source code and patches for some
    licenses such as the GPL.

    Notes:

      - When preserving headers, false positives or partial fragments may appear.
      - It may take hours to achieve this extraction.
      - This is only useful when doing binary install and without external
        modules.

    Acceptable values:

      1 - install preserved headers
      0 - skip (default due to the assumption tarballs and patches were saved)

    See also:

      OT_KERNEL_PRESERVE_HEADER_NOTICES_CACHED



    OT_KERNEL_PRESERVE_HEADER_NOTICES_CACHED - Use a cached copy to save time
    when performing point upgrades.  This option is only valid in the same
    major.minor version. (EXPERIMENTAL)

    Acceptable values:

      1 - use a cached copy if available (default)
      0 - produce a fresh new copy
      unset - produce a fresh new copy

    See also:

      OT_KERNEL_PRESERVE_HEADER_NOTICES_CACHED

    Depends on:

      OT_KERNEL_PRESERVE_HEADER_NOTICES=1



    OT_KERNEL_PRIMARY_EXTRAVERSION (optional) - sets the primary extraversion
    for the symlink USE flag.  If not set, it defaults to ot.



    OT_KERNEL_PRIMARY_EXTRAVERSION_WITH_TRESOR (optional) - sets the primary
    extraversion for tresor_sysfs USE flag.  If not set, it defaults to ot.



    OT_KERNEL_PRIVATE_KEY - The absolute path to a .pem private key file
    used for module signing.  This should only be set in the command line
    not saved in any make.conf, any per package configuration file, any
    env.  When done the variable should be overritten a new string and
    then not set.

    * Example:

# Scramble path if possible: \
OT_KERNEL_PRIVATE_KEY=$(dd if=/dev/urandom of=/dev/stdout bs=255 count=1 \
	status=none \
	| base64 | tr "\n" " " | sed -e "s| ||g")

# Remove the variable from memory: \
unset OT_KERNEL_PRIVATE_KEY



    OT_KERNEL_PROCESSOR_CLASS - sets the type of CPU class for used in this
    kernel.  This will reduce or increase latency.  If you do not see separate
    memory banks per socket, it probably means it is not designed for NUMA.
    Setting this may change the memory allocator which may affect the network
    TPS (throughput).

    Acceptable values:

      uniprocessor, unicore, multicore, multicore-smt, smp, smp-unicore,
      smp-legacy, multicore, numa-multicore, numa-unicore, auto, custom, manual,
      unset

    Unset is equivalent to manual.

    See also:

      OT_KERNEL_SLAB_ALLOCATOR



    OT_KERNEL_PRUNE_EXTRA_ARCHES - remove extra arches for faster install time.
    The one not pruned is the one corresponding to the value in OT_KERNEL_ARCH.

    Acceptable values:

      1 - prune
      0 - keep
      unset - keep

    Notes:

      - Pruning only applies to binary only install without external modules.
      - Full source code install disable pruning.



    OT_KERNEL_NET_QOS_ACTIONS - a space separated list of QoS actions to run
    after classification.

    Acceptable values:

      https://github.com/torvalds/linux/blob/master/net/sched/Kconfig#L753

    Exmaple:

      OT_KERNEL_NET_QOS_ACTIONS="mirred sample csum"



    OT_KERNEL_NET_QOS_CLASSIFIERS - a space separated list of additional QoS
    classifiers used to categorize packets.

    Acceptable values:

      https://github.com/torvalds/linux/blob/master/net/sched/Kconfig#L491
      ematch - extended matches

    See also:

      https://wiki.gentoo.org/wiki/Traffic_shaping



    OT_KERNEL_NET_QOS_SCHEDULERS - a space separated list of QoS queue
    schedulers with the first listed as the default.  Similar to like a CPU
    scheduler but for sending, dropping, prioritizing network packets.  Each
    network device can have a different one.

    Acceptable values:

      For algorithms, see

        https://github.com/torvalds/linux/blob/master/net/sched/Kconfig#L48

      For allowed defaults, see

        https://github.com/torvalds/linux/blob/master/net/sched/Kconfig#L457

    Notable values:

      pfifo_fast - the alternative kernel default when QoS is enabled
      fq_codel   - the systemd default to combat bufferbloat
      disable    - Disable QoS (the vanilla kernel default)
      custom     - Do not make changes but rely on the kernel .config file setting.

    Example:

      OT_KERNEL_NET_QOS_SCHEDULERS="fq pfifo_fast"
      OT_KERNEL_NET_QOS_SCHEDULERS="disable"
      OT_KERNEL_NET_QOS_SCHEDULERS="fq_codel"



    OT_KERNEL_REISUB - allow the use of REISUB, the equivalent to Ctrl+Alt+Del.  It allows access to
    SysRq debug features.

    Acceptable values:

      1 - allow
      0 - disallow (default)
      unset - disallow


    OT_KERNEL_SATA_LPM_MAX - Set the SATA link power management policy for max performance. (Default:  1)
    OT_KERNEL_SATA_LPM_MID - Set the SATA link power management policy for mid performance. (Default:  0)
    OT_KERNEL_SATA_LPM_MIN - Set the SATA link power management policy for power saving. (Default:  0)

    Acceptable values:

      0 - firmware default
      1 - maximum performance
      2 - medium performance
      3 - medium performance with initiated power management by device
      4 - minimal power use

    Using 3-4 may cause data loss that manifest as freezes.
    Using 4 may cause disk corruption with certain disks.



    OT_KERNEL_SECURITY_CRITICAL - Perform runtime monitoring and protection.

    There are competing security objectives for security.  Always-available and
    execution-integrity are mutually exclusive.  This setting is
    execution-integrity first meaning that in secure contexts, it should never
    be compromised.  If a vulnerability is detected, the computer should stop
    whether or not the vulnerability is taken advantage of and exploited for the
    benefit of the attacker(s).  It assumes that it is better to halt than to
    continue unauthorized anything that gives the attacker an advantage at the
    cost of you or the other people involved.  These sanitizers types may also
    trigger on false positives.  A crash can be a negative experience that leads
    to lost work or changes a good day into a bad day.  This is is why
    OT_KERNEL_SECURITY_CRITICAL is default off except for the dss work profile.

    In any case, it does a kernel panic crash on the kernel before running
    attacker's code, or crashes the kernel before running unauthorized changes,
    or crashes the kernel before running attacker's exfiltration code.

    Unconditionally enabled for work profiles:

    dss

    Acceptable values:

    1 - protect and crash
    0 - do not protect but maximize uptime availability (default, same as upstream)
    unset - same as 0

    See also:

      OT_KERNEL_MAX_UPTIME
      OT_KERNEL_SECURITY_CRITICAL_TYPES



    OT_KERNEL_SECURITY_CRITICAL_TYPES - A list of sanitizer types to protect
    the kernel.  The default is KASAN, UBSAN, CFI, KCFI when
    OT_KERNEL_SECURITY_CRITICAL=1.

    Sanitizer  | Supported versions | Threats mitigated   | Performance impact | Production ready | Estimated CVSS 3.1 Severity | Estimated false positives
    cfi        |  = 5.15            | CE, PE              | 1.05 -  1.15x      | Maybe            | High - Critical             | 0.1 - 1 %
    kasan      | >= 4.0             | CE, DT, DoS, DT, ID | 2.00 -  5.00x      | Yes              |  Low - Critical             | < 1 %
    kcfi       | >= 6.1             | CE, PE              | 1.05 -  1.50x      | Maybe            | High - Critical             | < 0.1 %
    kcsan      | >= 5.8             | DoS, DT, ID         | 1.50 -  3.00x      | Yes              |  Low - Medium               | 1 - 5 %
    kfence     | >= 5.12            | CE, DT, DoS, DT, ID | 1.01 -  1.10x      | Yes              |  Low - Critical             | 1 - 5 %
    kmsan      | >= 6.1             | ID                  | 3.00 - 10.00x      | No               |  Low - High                 | < 1 %
    scs        | >= 5.8             | CE, PE              | 1.01 -  1.05x      | Maybe            | High - Critical             | 0 %
    ubsan      | >= 4.5             | CE, PE, DoS, DT, ID | 1.10 -  2.00x      | Yes              |  Low - Critical             | < 0.1 %

    CE = Code Execution
    DoS = Denial of Service
    DT = Data Tampering
    ID = Information Disclosure
    PE = Privilege Escalation

    KASAN Mode | Supported versions | Performance impact | Sampled? | Compatibility
    HW_TAGS    | >= 5.11            | 1.05x - 1.25x      | Yes      | Adding cpu_flags_arm_mte to both USE and OT_KERNEL_USE will use HW_TAGS.
    SW_TAGS    | >= 5.0             | 1.20x - 2.00x      | Yes      | Fallback for arm64
    GENERIC    | >= 5.0             | 1.50x - 4.00x      | No       | Fallback for non-arm64 CPUs.

    1.5x means 1.5 times slower than the base which is unmitigated and optimized
    for performance.

    4.0x means 4 times slower compared to the base which is unmitigated and
    optimized for performance.

    The estimated CVSS 3.1 severity ranges reflect the vulnerability not the
    sanitizer.   The KASAN or KFENCE sanitizers for example would block use
    after free vulnerabilities that are marked critical before they were
    taken advantage of by attackers.  This is to block giving away full
    capabilities to attacker(s).

    Use KASAN or KFENCE to halt on several undiscovered vulnerabilities to
    mitigate against memory corruption.  Examples include use after free, double
    free, heap overflow, stack overflow.  KASAN and KFENCE have overlap.  Do not
    use both at the same time.  KASAN has overlap with stack overflow
    protection.  KFENCE does not protect against stack overflow.  For Rust based
    drivers, it is recommended to use KASAN and kernel versions >= 6.12 for
    proper SSP and HOP protection.  SSP is Stack Smashing Protection and HOP is
    Heap Overflow Protection.  Both SSP and HOP mitigate against code execution
    and privilege escalation.

    KASAN is comprehensive.  The HW_TAGS, SW_TAGS, GENERIC are automagic but
    still require you choose kasan.

    KASAN_SAMPLE_INTERVAL is set to 1 by default, meaning each page of memory
    is tagged for security-critical inspection for memory corruption.  This
    tunable applies only HW_TAGS and SW_TAGS.

    KFENCE is faster and sampled based meaning that it doesn't inspect every
    allocation/deallocation/use.

    KFENCE_SAMPLE_INTERVAL is set to 10 ms by default, meaning every 10 ms
    the memory is checked for memory corruption.

    Use KCSAN to halt on concurrency violations.

    Use CFI to halt on compromised execution integrity with just pointer
    functions.  It requires LTO.

    Use KCFI to halt on compromised execution integrity with both pointer
    functions and some static function calls connected with the entry point
    of modules or exported symbols.  It doesn't need LTO, so build time is
    fast.

    Use SCS to halt on ROP detection.  Usually SCS is paired with CFI for
    complete CFI coverage.

    Use MSAN to halt on uninitalized memory.  This catches sensitive data leaks
    from unsanitized memory before memory is being used.

    Use UBSAN to halt on several undiscovered vulnerabilities/exploits to
    mitigate against undefined behavior.  Examples include signed integer
    overflow, out of bounds access, null pointer dereference.

    Recommendations:

    Examples                                 | Availability-critical | Security-critical
    Cryptocurrency wallet                    | N                     | Y
    E-commerce website                       | N                     | Y
    Informational website without login mode | Y                     | N
    Laptop                                   | N                     | Y
    Login server                             | N                     | Y
    Login mode website                       | N                     | Y
    Multiuser home computer                  | N                     | S
    Senstive data kiosk                      | N                     | Y
    Informational kiosk                      | Y                     | N
    Paying bills                             | N                     | Y
    Permadeath gaming                        | D                     | N
    Smartphone                               | N                     | Y

    D = The balanced security defaults should be sufficient for secure login and
        max uptime.
    S = some security is recommended to reduce the chance of ransomware attacks
        (CE, PE, DT) or for login.

    Availability-critical means OT_KERNEL_MAX_UPTIME=1 and OT_KERNEL_SECURITY_CRITICAL=0
    Security-critical means OT_KERNEL_MAX_UPTIME=0 and OT_KERNEL_SECURITY_CRITICAL=1

    If you use KASAN+UBSAN, the build times may almost double or the worst
    case FPS may dip below 50 FPS.

    For casual gaming, software developers, or builder machines, use KFENCE+UBSAN.
    For dss (government, e-commerce), use KASAN+UBSAN.

    Requirements:

    sys-devel/gcc[sanitize]

      or

    LLVM_SLOT=16 # It should be >= 16
    llvm-core/llvm:${LLVM_SLOT}
    llvm-core/clang:${LLVM_SLOT}
    llvm-core/lld:${LLVM_SLOT}
    llvm-core/clang-runtime:${LLVM_SLOT}[sanitize]
    =llvm-runtimes/compiler-rt-${LLVM_SLOT}*
    =llvm-runtimes/compiler-rt-sanitizers-${LLVM_SLOT}*[asan,msan,tsan,shadowcallstack,ubsan]

    Sanitizer       | GCC Support   | Clang/LLVM support
    cfi-5.15        | No            | >= 13 (amd64), >= 12 (arm64)
    kasan (HW_TAGS) | >= 10         | >= 12
    kasan (SW_TAGS) | >= 11         | Yes
    kasan (GENERIC) | >= 8.3        | >= 11
    kcfi            | No            | >= 16
    kcsan           | >= 11         | >= 11
    kfence          | ?             | ?
    kmsan           | No            | >= 14.0.6
    scs             | >= 12.1       | >= 11
    ubsan           | >= 4.9        | >= 3.1

    You need to manually check the toolchains since BDEPENDs checks are missing.

    If you go the clang route, it should all be in the same slot.

    For SSP or HOP with Rust drivers require:

    =dev-lang/rust-9999 or =dev-lang/rust-bin-9999

        AND

    >=sys-devel/gcc-11 or >=llvm-core/clang-11

        AND

    KASAN (SW_TAGS or GENERIC)

    Examples:

      OT_KERNEL_SECURITY_CRITICAL_TYPES="kasan ubsan"
      OT_KERNEL_SECURITY_CRITICAL_TYPES="kasan ubsan kcsan"
      OT_KERNEL_SECURITY_CRITICAL_TYPES="ubsan"
      KFENCE_SAMPLE_INTERVAL="10"

    See also:

      KASAN_SAMPLE_INTERVAL
      KFENCE_SAMPLE_INTERVAL
      OT_KERNEL_SECURITY_CRITICAL_EXCLUSIONS


    OT_KERNEL_SECURITY_CRITICAL_EXCLUSIONS - Apply performance-critical
    sanitizer exclusions to drivers and subsystems.  The idea is to get most
    of the mitigation coverage of the sanitizers but not penalize in
    performance-critical sections.  The kernel does not conveniently allow to
    specify sanitizer exceptions to these sections. (DEVELOPMENT, PLANNED)

    When these exceptions are added, it may regain the lost single digit FPS or 
    decrease compile times by single or double digit hours for KASAN+UBSAN
    relative to the build without performance-critical exceptions.

    Acceptable values:

      A list of subsystems to exclude for KASAN, KFENCE, UBSAN treatment:

      alsa
      block
      cpu-scheduler
      file-systems
      interrupts
      io-scheduler
      timers
      video-codecs
      video-drivers

    Examples:

      # For devs or builder machines
      # For SSDs, you may remove block and file-systems from the list.
      # For HDDs, you may need block and file-systems added the list to mitigate against jitter.
      OT_KERNEL_SECURITY_CRITICAL_EXCLUSIONS="io-scheduler block file-systems interrupts"

      # For live streamers
      OT_KERNEL_SECURITY_CRITICAL_EXCLUSIONS="alsa cpu-scheduler interrupts timers video-codecs"
      
      # For musicians
      OT_KERNEL_SECURITY_CRITICAL_EXCLUSIONS="alsa cpu-scheduler interrupts"

      # For 3D artist
      OT_KERNEL_SECURITY_CRITICAL_EXCLUSIONS="cpu-scheduler file-system io-scheduler video-drivers"

      # For video conferencing
      OT_KERNEL_SECURITY_CRITICAL_EXCLUSIONS="cpu-scheduler video-codecs"

    OT_KERNEL_SLAB_ALLOCATOR - Set the slab allocator

    Acceptable values:
      auto - Auto detect based on kernel config
      custom - Use previous settings.
      manual - Use previous settings.
      slab - Use old allocator.  Recommended for networked computers for ~10%
        more network TPS (throughput) and systems with ~2 % lower CPU usage
        (and energy consumed).  However, this may slow down the emerge unpack
        phase.  Removed in the 6.8 series and newer.
      slob - Use allocator for embedded (e.g. gadgets, mp3 players).
        Removed in the 6.4 series and newer.  Use slub-tiny instead.
      slub - Use allocator for super computers and upstream default with SMP
        systems.  It has lower GiB overhead compared to slab in 1000+ processor
        systems.
      slub-tiny - Use slub optimized for embedded but lowers security.
      unset - It uses auto

    See also:

      OT_KERNEL_PROCESSOR_CLASS



    OT_KERNEL_SGX - sets SGX (Software Guard eXtensions) support for supported
    hardware.

    Acceptable values:

      1, 0, auto, unset

    Unset is the same as auto.



    OT_KERNEL_SIGN_MODULES (optional) - signs kernel modules with sha384
    or sha512.  This option is dependent on OT_KERNEL_MODULES_SUPPORT=y.

    Acceptable values:

      sha384, sha512, unset, 1, 0, manual

    If setting to 1, it will use sha384.  Setting to unset will assume manual.
    Setting to 0 will disable module signing and disable module sign
    verification.

    When a new kernel config is generated, module signing is disabled; but it
    can be signed by setting this to 1.  If module signing is enabled,
    it is recommended to sign external modules or these modules may no
    longer work.  External module signing is especially important especially
    for kernel graphics modules if module signing is enabled.  It is not
    forced default on to prevent any unprepared disruption.  See
    OT_KERNEL_PRIVATE_KEY section also.

    IMPORTANT:

      When OT_KERNEL_SIGN_MODULES is enabled, if the OT_KERNEL_PRIVATE_KEY
      and OT_KERNEL_SHARED_KEY are not specified, the kernel will
      autogenerate keys in the certs folder of the kernel sources.  These
      keys will be installed but the private key should be copied to a
      secure place such a encrypted store contained in a keychain or by
      steganography; and then the installed private key .pem file in the
      certs folder should be cryptographically securely destroyed with shred
      (or any secure delete program).  This is to prevent recovery and reuse
      of the private key by an untrusted user.  The private key temporarily
      stored in the certs folder should be destroyed in within 24 hours.
      Each build configuration will have a unique private-shared keys if
      using autogenerated, so all keys need to be stored and properly labeled
      to prevent mixup.



    OT_KERNEL_SIGN_KERNEL (WIP) - Cryptographically sign the kernel for the
    type of system and install the kernel to the EFI partition if possible.

    Acceptable values:

      uefi, efi, kexec, none, not set



    OT_KERNEL_SHARED_KEY - The absolute path to a .x509 shared key file
    used for module signing.



    OT_KERNEL_SME - allow support for Secure Memory Encryption for
    supported hardware.  This feature is not enabled by default due to
    possible boot failure.  To test, set OT_KERNEL_SME to 1 and bootloader
    with mem_encrypt=on.  If it works after testing, you must set
    OT_KERNEL_SME_DEFAULT_ON=1 to complete protection.

    Acceptable values:

      1, 0, auto, unset

    Unset is the same as auto.



    OT_KERNEL_SME_DEFAULT_ON - sets SME ON at boot.  This requires
    OT_KERNEL_BOOT_ARGS to have all kernel args that would be normally
    specified in the bootline to be builtin.  It will automatically add
    mem_encrypt=on and the kernel commandline provided by the bootloader
    is ignored to mitigate against an evil maid attack.

    Acceptable values:

      1, 0, unset

    Unset means 0 meaning SME is off unless mem_encrypt=on in the kernel
    command line.

    See also:

      OT_KERNEL_BOOT_ARGS



    OT_KERNEL_SSD - Set if SSD drive is present for this kernel build.

    Acceptable values:

      1 - yes, a non-rotational hard drive is present
      0 - no SSD exists
      auto - autodetect via sysfs (default)
      unset - auto

    See also:

      OT_KERNEL_HDD



    OT_KERNEL_SWAP - Enable or disable use of swap.

    Acceptable values:

      0, 1, y, n, manual, unset

    0 means disable and 1 means enable.  Unset is the same as manual.  

    Swap is forced disabled for the following work-profiles:

      casual-gaming
      casual-gaming-laptop
      cryptocurrency-miner-dedicated
      digital-audio-workstation
      dvr
      gaming-tournament
      gpu-gaming-laptop
      jukebox
      live-streaming-gamer
      live-video-reporting
      musical-live-performance
      pi-audio-player
      pi-deep-learning
      pi-gaming
      pi-music-production
      pi-video-player
      presentation
      pro-gaming
      realtime-hpc
      ros
      sdr
      smartphone
      smartphone-voice
      solar-gaming
      streamer-desktop
      streamer-reporter
      tablet
      video-conferencing
      voip

    Swap is default off except for the following work-profiles where it is
    default on:

      builder-dedicated
      builder-interactive
      gamedev
      green-hpc
      greenest-hpc
      laptop
      hpc
      mainstream-desktop
      pi-web-browser
      throughput-hpc
      workstation

    If you would like to increase the number of browser tabs, then swap should
    be enabled.  1.2 GiB for video tabs, 170 MiB per social media tabs.

    Memory intensive scenarios should always enable swap.  If you need swap use
    any work profile not mentioned in OT_KERNEL_WORK_PROFILE with
    OT_KERNEL_SWAP=1.  It is assumed that have enough memory for professional
    production.  This is what is assumed:

    Casual games:  2-4 GiB
    Gaming on major titles:  4-8 GiB depending on the title
    Live stream gaming:  16-32 GiB (8 GiB for gaming + 4 GiB at 1080p)



    OT_KERNEL_TARGET_TRIPLE - The target triple (CHOST) to use when
    cross-compiling.  Use the expanded CHOST value.  (This can be not set but
    then defaults to ${CHOST}.)  If you put just CHOST or just CBUILD it will
    expand for each case.



    OT_KERNEL_TCP_CONGESTION_CONTROLS - Select TCP congestion controls to
    add.  A space separated list may be used.  The first option is the default.
    (EXPERIMENTAL)

    The goal of TCP congestion control (TCC) is to avoid the penalties
    associated with bad quality of service (longer delays or increased packet
    loss).

    Acceptable values:

      Algorithm | Benefit (first row) / Cost (second row)
      ==========+===================================================================================================================
      bic       | RPC goodput for MiB+ payloads, default in earlier 2.6
                | Incast at ~0.06% packet loss
      bbr       | Latency, streaming, production code quality, energy efficient
                | Greedy, deprecated, high latency for small RPC payloads, incast at ~30% packet loss
      bbr2      | Latency, fair, ECN support
                | Alpha code quality, experimental, deprecated, energy inefficient
      bbr3      | BBR v1 upgraded with latency improvement with higher throughput, streaming, fair, ECN support, actively maintained, incast at ~1% packet loss
                | Not mainlined
      c2tcp     | Lowest latencies and lowest jitter
      cdg       | Latency.  Throughput like cubic but with lower latency, lower queuing delays.
                | Incast at 2% packet loss
      clear     | Do not add any (Ebuild only)
      dctcp     | High throughput and low cap data center low-latency
                | High latency for KiB RPC payloads
      deepcc    | Throughput, optimized BBR, Cubic, Illinois, Westwood
                | TensorFlow [heavy dependency], high memory footprint
      cubic     | Throughput, ubiquitous (de facto standard)
                | Incast at ~0.01% packet loss
      hstcp     | Throughput
      htcp      | Throughput and internal fairness for LFNs (Large Fat Networks) [ADSL2+, cable, or larger]; in packet loss scenarios, marginally better throughput versus cubic 
      hybla     | Throughput over satellite
      illinois  | Average throughput in high speed networks
                | Incast at ~0.0025% packet loss
      lp        | Full bandwidth utilization
                | May studder sound
      nv        | RPC goodput and low latency for KiB payloads
      orca      | Low CPU usage, consistent high performance in different networks
                | TensorFlow [heavy dependency], high memory footprint
      pcc       | Send throughput, low requirements, better stability over time
                | Higher CPU usage, incast at ~2.5% packet loss
      reno      | New Reno fallback algorithm
                | Old algorithm, incast at ~0.0015% packet loss
      scalable  | Throughput
                | High packet loss, incast at ~0.02% packet loss
      veno      | Throughput with wireless
      yeah      | Throughput, high network utilization and internal fairness for high BDP/RTT
      vegas     | Lower latency, lower packet loss, lower queuing delays
      westwood  | Throughput over wireless


      Algorithm | Possible use cases
      ==========+===================================================================================================================
      bic       | Historical, to re-live the mid 2000s Linux experience
      bbr       | Video streaming, video conferencing, VOIP, data centers, incast mitigation, power savings
      bbr2      | Video streaming, video conferencing, VOIP, data centers
      bbr3      | Video streaming, video conferencing, VOIP, data centers
      c2tcp     | VOIP, IPTV, live/radio broadcasting, interactive applications
      cdg       | Home network with wireless internet, incast mitigation
      clear     | Resetting to defaults
      dctcp     | Supercomputer, data centers
      deepcc    | Maximizes production possiblities with high throughput and low latency, optimized cubic
      cubic     | Broadband downloads
      hstcp     | Throughput
      htcp      | Broadband downloads
      hybla     | Satellite
      illinois  | Downloading in high speed networks
      lp        | Background downloads, background updates
      nv        | VOIP, radio broadcasting
      orca      | Cellular road trip, continental/intercontental transfer
      pcc       | Cellular road trip, intra-/inter- data center(s), CDN, satellite, incast mitigation
      reno      | Historical, to re-live the 1999-2004 Linux experience
      scalable  | Gigabit connections with high latency
      veno      | Wireless downloads
      yeah      | Parallel downloads, P2P
      vegas     | Web browsing
      westwood  | Wireless downloads


      * bbr2, c2tcp, deepcc, hstcp, illinois, lp, nv, orca, pcc, scalable, yeah
        cannot be made the default.
      * deep, orca has not been tested in this overlay yet.
      * Throughput alone implies high throughput.
      * Latency alone implies low latency.
      * Incast is more than half drop in throughput but results from drop rate
        and percent may change based on RTT.

      * It is recommended to fix physical layer and application layers issues
        as best as possible because they can impact the effectiveness/benefits
        of these Contestion Control Algorithms (CCAs).
      * Tips to improve wired throughput:
        1. Inspect the wire both on the ends and in the middle.  If any
           cuts, dents, loosening, or stretching are observed; the wire needs to
           be replaced.
      * Tips to improve WiFi throughput:
        1. Turn off all programs except emerge or the affected app.
           [This step is necessary only if the protocol or action does not
           support resume (e.g. git clone) or an improperly configured server
           that frequently drops connections.]
        2. Ensure that the antennas are not damaged.  Screw or replace the
           antenna.
        3. Ensure that the wireless router is positioned visibly in the open
           area or room.  If the site in question has thick walls (aka
           reinforced concrete), switch to wired or place the router visibly in
           the line of sight of the WiFi receiver.  Remove metallic obstacles
           in the line of sight to increase strength.
        4. Move the wireless closer to increase signal strength to gain access
           to the faster 5G mode.
        5. Fix all dropped packet issues.  If networkmanager causes dropped
           packets, use netifrc instead.  This may help unmask other sources of
           dropped packets or possibly router issues such as overheating,
           antenna damage, compromised firmware, an active DDOS attack.
           As mentioned in the table above a tiny percentage of dropped
           packets may cause a severe performance impact.
        6. Orient the antenna to achieve the lowest ping consistently with the
           wireless router.
        7. Switch the TCP Congestion Control to one with the highest average
           throughput (e.g. pcc).  For lossy poor quality connections, avoid
           cubic and illinois. [This step is only necessary for protocols
           or actions not supporting resume (e.g. git clone) or an improperly
           configured server that frequently drops connections.]

    Examples:

      OT_KERNEL_TCP_CONGESTION_CONTROLS="clear"                              # Fallback to cubic and reno
      OT_KERNEL_TCP_CONGESTION_CONTROLS="bbr3 htcp hybla lp vegas westwood"  # Similar to fallback defaults
      OT_KERNEL_TCP_CONGESTION_CONTROLS="dctcp bbr3 illinois"                # Similar to HPC defaults

      For allowed defaults, see

        https://github.com/torvalds/linux/blob/master/net/ipv4/Kconfig#L682

      The left most choice is the default, and the values listed overrides the
      fallback values.

      The OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_* can be used to select
      the secondary flow.  For example, one may need to increase the
      secondary flow to be more slightly greedy for a higher bitrate and to
      be less skippy.

      The default fallback will take into consideration OT_KERNEL_WORK_PROFILE.

    Recommendations:

      Audio streaming:  bbr
      Big data HPC - dctcp
      Data center - dctcp, bbr
      Dedicated large downloads:  See recommended default choice section below excluding vegas
      Downloading while video streaming:  lp
      distcc on LAN:  vegas
      Gaming with VoIP:  bbr
      Gaming without VoIP:  vegas
      Live broadcasting:  c2tcp, bbr
      On demand upload:  pcc, any delay based TCC
      Single player casual games:  See recommended default choice section below excluding vegas
      Social games:  vegas
      Web browsing:  vegas

    Recommened as default choice (sorted by high to low throughput)

      Inter data center:  ppc, illinois
      Intra data center:  dctcp, bbr
      High BDP:  pcc, htcp, bic, cubic
      Mobile:  bbr
      Satellite:  pcc, hybla
      Wireless:  pcc, westwood, veno, vegas

      * The left most value in OT_KERNEL_TCP_CONGESTION_CONTROLS makes it the default.
      * bbr means any version.
      * Use the tcca script to change these.
      * For frequent packet loss, it recommended to avoid cubic.
      * Mobile means road trip or rapidly changing networks.
      * Wireless means stationary home/office network.
      * pcc means PCC Vivace.

    Further reading:

      [TCP descriptions] https://github.com/torvalds/linux/blob/master/net/ipv4/Kconfig#L480
      [BBRv3 ECN] https://github.com/google/bbr/tree/v3#enabling-ecn-support
      P 9. "An Emulation-based Evaluation of TCP BBRv2 Alpha for Wired Broadband". Kfoury et al.
      P 14. "Comparison of TCP Congestion Control Performance over a Satellite Network". Claypool et al.
      Fig 10. "Statistical Learning Based Congestion Control for Real-time Video Communication", Dai et al.
      Slide 21. "BBR v2: A Model-based Congestion Control Performance Optimizations". Cardwell et al.
      Table I. "TCP Congestion Control Comparison", Esterhuizen and Krzesinski.
      Table V, VII, and XI. "Fifty Shades of Congestion Control: A Performance and Interactions Evaluation". Turkovic et al.

    See also:

      OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT



    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT - Install a helper script, tcca, to
    improve throughput experience mostly when multitasking.  (EXPERIMENTAL)

    The purpose is to make it easier to use the algorithm(s) or the benefits of
    the algorithm without remembering the name of it by providing a widely
    familiar use scenario.

    Acceptable values:

      1 - install
      0 - don't install
      unset - install (default)

    See also:

      OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_*



    The following set the default TCP Congestion Control algorithm for the tcca wrapper:

    Clients:

    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_BGDL - For background downloads.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_BROADCAST_HOME - For broadcasting content producers from a home network.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_BROADCAST_MOBILE - For broadcasting content producers from a mobile network.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_DEFAULT - For general use.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_GAMING_CLIENT - Full screen games while streaming music or VoIPing.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_GREEN - For the lowest energy consumption.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_MUSIC - For music service.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_P2P - For decentralized distribution.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_PODCAST - For downloading podcasts.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_PODCAST_UPLOAD - For uploading podcasts.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_RESIL - For incast mitigation to avoid a 50% throughput drop penalty.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_STREAMING - For playing streaming audio or video.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_TORRENT - For decentralized distribution.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_VIDEO_UPLOAD - For uploading videos.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_VOIP - For VoIP.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_WWW - For web browsing without streaming.

    Home server:

    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_HS_FAIR - For fair servers at home.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_HS_REALTIME - For realtime servers at home.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_HS_THROUGHPUT - For throughput servers at home.

    Intra data center refined:

    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_LCDC_FAIR - For fair low capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_LCDC_REALTIME - For realtime low capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_LCDC_THROUGHPUT - For throughput low capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_MCDC_FAIR - For fair mid capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_MCDC_REALTIME - For realtime mid capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_MCDC_THROUGHPUT - For throughput mid capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_HCDC_FAIR - For fair high capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_HCDC_REALTIME - For realtime high capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_HCDC_THROUGHPUT - For throughput high capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_UCDC_FAIR - For fair ultra capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_UCDC_REALTIME - For realtime ultra capacity data center.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_UCDC_THROUGHPUT - For throughput ultra capacity data center.

    UCDC - ultra cap data center O(100,000) - top 500 supercomputers
    HCDC - high cap data center O(10,000) - big tech
    MCDC - mid cap data center O(1,000) - university super computer
    LCDC - low cap data center O(100) - university HPC/ML/DL

    General cases:

    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_HIGH_BDP - For high BDP networks.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_INTRA_DC - For inside data centers.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_INTER_DC - For between data centers.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_MOBILE - For mobile networks.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_SATELLITE - For satellite networks.
    OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_WIRELESS - For wireless networks.

    Acceptable values:

      A single value, see OT_KERNEL_TCP_CONGESTION_CONTROLS acceptable values
      section for details.

    Example:

      OT_KERNEL_TCP_CONGESTION_CONTROLS_SCRIPT_RELIABLE="cubic"

    Notes:

      - The trapper will be found in /usr/bin/tcca
      - The wrapper configuration may be changed in /etc/tcca-${PV}-${EXTRAVERSION}-${ARCH}.conf
      - The wrapper script requires sys-auth/polkit.  Use the gnome or kde USE
        flag to present GUI dialog.
      - The wrapper script will reqest elevated privileges twice: once to load
        the kernel module, and the other to change the algorithm.
      - See the contents of the tcca (TCP Congestion Control Algorithm) script to
        learn how to use it.
      - Fair means distribution of bandwidth equally.
      - Realtime can be used in place of low latency.
      - Throughput means preserves maximum throughput property.
      - tcca usage examples:

        Video while downloading in the background (Simple):
        1. close web browser
        2. tcca streaming
        3. play video on the web browser
        4. tcca bgdl
        5. emerge -fvuDN @world

        Video while downloading in the background (Advanced):
        1. close web browser
        2. tcca bbr
        3. play video on the web browser
        4. tcca lp
        5. emerge -fvuDN @world

        Benefits:  skipless/uninterrupted video playback with maximum bandwidth
        utilization for background downloads with met downstream bandwidth
        requirements for video and audio.  [If 8k video and small bandwidth, it
        will skip.]


        Low latency web browsing (simple):
        1. close web browser
        2. tcca www

        Low latency web browsing (advanced):
        1. close web browser
        2. tcca vegas

        Benefits:  images load faster in parallel and faster navigation through
        wikis.


        Single player browser games (simple)
        1. close web browser
        2. tcca file

        Single player browser games (advanced)
        1. close web browser
        2. tcca cubic

        Benefits:  high throughput for downloading the game and shorter wait
        time to play.

     - You can verify the TCP congestion control use per socket via `ss -i`.


    OT_KERNEL_USB_AUTOSUSPEND - Set to -1 to disable, or set to a whole number
    to set the delay.  Some OT_KERNEL_WORK_PROFILE will automatically set it
    to -1 for gaming or digital-audio-workstations work profiles.
    


    OT_KERNEL_USE - Per build env USE flags.  If not set, it will use the same
    USE flags set.  The scope of OT_KERNEL_USE is partially in src_prepare,
    src_configure, src_compile, partially in src_install.  The normal USE flags
    are valid in global scope, fetching and unpacking, and in the remaining
    phases.  This per build env gives more control over some patches applied,
    features allowed, reducing the attack surface of unfuzzed patchsets by
    not applying them.



    OT_KERNEL_USE_LSM_UPSTREAM_ORDER - Use the upstream init order
    for LSM modules.
    Accepted values: 1 to use upstream order, 0 to use custom order.
    The custom order (0) can optionally apply to "acceptable multi values"
    configation and auto in acceptable general values.



    OT_KERNEL_VERBOSITY=N (optional) - presentation of compiler and build
    invocation.  This will print out the compiler flags used during 
    compilation.  Using 1 will print as if you are compiling a typical ebuild
    package.

    Acceptable values for N:

      0 for minimal output, 1 for showing compiler flags, 2 for reasons for
      rebuild.

    Tags:  verbose, console, stderr, compiler output, cflags, command line output



    OT_KERNEL_WORK_PROFILE - sets the power-performance profile while taking
    in consideration productivity and latency requirements.  This value can
    be unset which is equivalent to manual.

    Acceptable values:

      builder-dedicated
      builder-interactive
      cryptocurrency-miner-dedicated
      cryptocurrency-miner-workstation
      casual-gaming
      casual-gaming-laptop
      custom
      digital-audio-workstation
      distributed-computing-server
      distributed-computing-client
      desktop-guest-vm
      dss
      dvr
      file-server
      game-server
      gamedev
      gaming-guest-vm
      gaming-tournament
      gpu-gaming-laptop
      green-hpc
      green-pc
      greenest-hpc
      greenest-pc
      hpc
      http-server-busy
      http-server-relaxed
      realtime-hpc
      jukebox
      laptop
      live-streaming-gamer
      live-video-reporting
      mainstream-desktop
      manual
      max-uptime
      media-player
      media-server
      musical-live-performance
      pi-audio-player
      pi-deep-learning
      pi-gaming
      pi-media-player
      pi-music-production
      pi-video-player
      pi-web-browser
      presentation
      pro-gaming
      radio-broadcaster
      renderfarm-dedicated
      renderfarm-workstation
      ros
      sdr
      smartphone
      smartphone-voice
      solar-desktop
      solar-gaming
      tablet
      throughput-hpc
      touchscreen-laptop
      video-conferencing
      voip
      workstation

    Notes:

      - Some profiles are conveniently aliases.
      - builder* are used for emerging.
      - The OT_KERNEL_WORK_PROFILE is disjoint from OT_KERNEL_HARDENING_LEVEL to
        provide flexibility.
      - You can only use one OT_KERNEL_WORK_PROFILE per profile/extraversion.
      - It's recommended to have a separate profile/extraversion per profile.
      - digital-audio-workstation and PREEMPT_RT=y disables swap, it is
        recommended to build a builder kernel with swap enabled to build the
        entire userland.

    Examples:

      # For gaming without user generated content
      /etc/portage/ot-sources/5.16/gaming/x86_64/env:
      OT_KERNEL_EXTRAVERSION="gaming"
      OT_KERNEL_WORK_PROFILE="pro-gaming"
      OT_KERNEL_HARDENING_LEVEL="trusted"
      ...

      # For general use or web browsing
      /etc/portage/ot-sources/5.16/web/x86_64/env:
      OT_KERNEL_EXTRAVERSION="web"
      OT_KERNEL_WORK_PROFILE="mainstream-desktop"
      OT_KERNEL_HARDENING_LEVEL="untrusted"
      ...

    See also:

      OT_KERNEL_HARDENING_LEVEL
      OT_KERNEL_MAX_UPTIME
      OT_KERNEL_PAGE_SIZE



    OT_KERNEL_ZSWAP_ALLOCATOR - chooses the swap allocator which tries to fit
    the number of compressed pages while aiming to reduce fragmentation.

    Acceptable values:

      zsmalloc, zbud, z3fold, x2, x3, xn, unset, manual, auto

    If unset, it assumes manual.  xn is an alias for zsmalloc; x2 is a alias
    for zbud; x3 is an alias for z3fold.  auto is an alias for zszmalloc.  It is
    recommended to use xn for less than 12 GB of RAM.  For 12 GB and above, it
    should be unset.  The 12 GB is arbitrary and based on worst case peak
    memory.



    OT_KERNEL_ZSWAP_COMPRESSOR - chooses a swap page algorithm

    Acceptable values:

      deflate, lzo, 842, lz4, lz4hc, zstd, unset, manual, auto

    If unset, it assumes manual.  auto is an alias for lzo.  It is recommended
    to use lz4 or zstd (or any algorithm that can achieve 2:1 compression
    ratio) for less than 12 GB of ram.  For 12 GB and above, it should be unset.
    The 12 GB is arbitrary and based on worst case peak memory.



    Kernel pkgflags environment variables:

    The pkgflags come mostly from the ebuilds' themselves.  The current
    trend is to decentralize these settings and have users to manually
    edit the kernel.  This ebuild package will do the opposite by
    centralizing these settings for purposes of a semi autoconfigured
    kernel.

    By default kernel pkgflags module is not enabled.  To enable it, set
    OT_KERNEL_AUTO_CONFIGURE_KERNEL_FOR_PKGS=1 in the per buildconfig env
    file (ex. /etc/portage/ot-sources/4.16/ot/x86_64/env).

    One may reject or accept kernel settings by setting
    OT_KERNEL_PKGFLAGS_ACCEPT or OT_KERNEL_PKGFLAGS_REJECT with a space
    separated 7 digit id.  One may use the reject to manually apply
    settings for that package.

    Most variables below have values 0 for off and 1 for on.  Not set implies
    the eclass defaults.



    Pkgflags environment variables

    These should be specified in the per buildconfig env file.  These
    environment variables are only valid if the package is installed.
    0 means off and 1 means on.

    Important:  The 0 does not imply disable but implies unchanged in some
    cases.  This is because of the possibility of *flag dependencies* which are
    difficult to backtrack.  You must manually disable them by editing the
    kernel config.  This understanding is applied to previous sections as
    well.  The application of intuitive implied disable or implied unchange
    is based on the following general rules:  If it seems like the kernel
    option could be multiple referenced, a base option for an another option,
    or library option; it is implied unchanged.  If it seems like the kernel
    option is unlikely a base option, unlikely inherited option, or unlikely
    multiple reference, or is likely independent; it is likely an implied
    disabled.

    AMDGPU_DEEP_COLOR - Add support for more than 8 Bits Per Pixel for utilities
    querying capabilities.  For HDMI connections, it may be beneficial to set to
    1.  0 is the upstream default.
    Valid values:  0 (default), 1

    AMDGPU_DIRECT_DMA_FOR_SSG - Enable Direct DMA for SSG.  This requires the
    rock-dkms USE flag.
    Valid values:  0 (default), 1

    AMDGPU_EXP_HW_SUPPORT - Enable kernel driver support for experimental hardware.
    Valid values:  0 (default), 1
    This setting affects the following kernels and devices under these codenames:

      For the basic kernel driver:

        Kernel 5.4 for Arcturus, Renoir, Navi 12

      For the rock-dkms kernel driver:

        Does not apply or fully supported

    AMDGPU_OVERDRIVE - Set the overdrive flag (aka overclocking flag) to allow
    to set GPU clocks via the sysfs interface for the amdgpu driver.  This flag
    may also allow to control voltage.  This will embed amdgpu.ppfeaturemask in
    the kernel cmdline.  0 means disable the overclock bit, 1 is to enable the
    overclock bit.  Unset means to manually customize it.  If you already set
    amdgpu.ppfeaturemask, leave it unset.  The estimated benefit is between
    maybe 1-5 FPS with risk of temporary to permanent instability (e.g.
    freezing), or permanent damage (aka artifacts or bricking).  It should only
    be used as a last resort.  Vsync off or monitor hz changes should be used
    first.
    !!! EXPERTS ONLY !!!
    CHANGING THE CLOCK FREQUENCY MAY CAUSE DAMAGE AND VOID
    HARDWARE WARRANTY.  SETTING CLOCKS TOO HIGH OR HAVING INADEQUATE COOLING MAY
    CAUSE IRREVERSABLE DAMAGE.  SETTING THE VOLTAGE JUST A LITTLE TOO MUCH CAN
    CAUSE DAMAGE OR VISUAL ARTIFIACTS.  RESET BACK SETTINGS IF VISUAL ARTIFACTS
    ENCOUNTERED.  TOO MUCH HEAT WILL SHORTEN THE LIFESPAN OF THE DEVICE.
    THIS ECLASS VARIABLE IS EXPERIMENTAL.
    Valid values:  0, 1, unset (default).

    AMDGPU_VM_FRAGMENT_SIZE - Sets the large page size with the amdgpu driver.
    It uses the formula PAGE_SIZE = 4KB * 2^X.  Cryptominers typically suggest
    using 9.  9 is also documented by upstream as a way to enable large page
    support.
    Valid values:
      -1 [default, autodetect]
      4 [64 KB]
      5 [128 KB]
      6 [256 KB]
      7 [512 KB]
      8 [1024 KB, 1 MB]
      9 [2048 KB, 2 MB]
      clear [delete from kernel command line; same as -1 if amdgpu present]
      unset [same as clear]

    ALSA_PC_SPEAKER - Use the ALSA speaker driver for PC speaker.
    Valid values:  0 (default), 1

    CAMERAS - Add camera support.  Multiple drivers are space separated.
    Valid values:
      all - support all USB or I2C based cameras.
      ep800 - support the EP800 USB sensor.
      gl860 - support the GL860 USB sensor.
      gspca - support all USB based gspca webcams.
      i2c - support all i2c cameras used in smartphone or mobile devices.
      m5602 - support the m5602 USB sensor.
      name - a specific driver listed in one of the following lists:
        https://docs.kernel.org/admin-guide/media/gspca-cardlist.html
        https://github.com/torvalds/linux/blob/master/drivers/media/i2c/Kconfig
        https://github.com/torvalds/linux/blob/master/drivers/media/usb/gspca/gl860/Kconfig
        https://github.com/torvalds/linux/blob/master/drivers/media/usb/gspca/m5602/Kconfig
        https://github.com/torvalds/linux/blob/master/drivers/media/usb/gspca/stv06xx/Kconfig
        https://github.com/torvalds/linux/blob/master/drivers/media/usb/pwc/Kconfig
      none (default) - do not support webcams.  Same as unset.
      pwc - support pwc USB cameras.  See the above link.
      stv06xx - support STV06xx USB camera.
      uvc - support UVC based cameras (recommended)
      
    Examples:
      CAMERAS="all"
      CAMERAS="uvc"
      CAMERAS="ov519 zc3xx m5602"
      CAMERAS="imx355"

    CAMERAS_SNAPSHOT_BUTTON - Add support for the take snapshot button.
    Valid values:  0, 1 (default if uvc is added)

    CDROM - Support for CDROM, CD-R, CD-RW
    Valid values:  0, 1 (default)
    See also:  DVD

    CRYPTSETUP_CIPHERS - Space separated list block ciphers.
    Valid values:  aes, anubis, camellia, cast6, kuznyechik, serpent, twofish.

    If unset, it adds aes.

    CPU_MFG - The manufacturer of the CPU.  It is used to override the portable
    autodetect solution especially if producing a prebuilt kernel package.  This
    affects the following:

      IOMMU
      kernel_compiler_patch native option
      KVM
      PMU events
      OpenRGB

    Examples:

      CPU_MFG="amd"
      CPU_MFG="intel"

    CRYPTSETUP_INTEGRITIES - Space separated of AEAD ciphers used for
    additional encryption with data integrity.  Only for LUKS2.
    Valid values:  poly1305, hmac-sha256, hmac-sha512

    Unset by default.  (Restricted pairings: chacha20 with poly1305,
    aes-xts-plain64 with hmac-sha256 or hmac-sha512.)  For weaknesses, see

      https://gitlab.com/cryptsetup/cryptsetup/-/blob/main/docs/v2.0.0-ReleaseNotes#L261

    For consequences of compromised integrity or data corruption, see

      https://www.kernel.org/doc/html/latest/admin-guide/device-mapper/dm-integrity.html

    CRYPTSETUP_IVS - Space separated list for IV generation.
    Valid values:  essiv, random, plain64.  If unset, it adds essiv, plain64.

    CRYPTSETUP_MODES - Space separated list for cipher modes of operation.
    Valid values:  adiantum, cbc, ctr, cts, xts.  If unset, it adds
    adiantum, cbc, xts.
    Notes:  For the dss work profile, only ctr and xts cryptsetup are available
    on the kernel side.  Do not use ECB or CBC.

    CRYPTSETUP_HASHES - Space separated list for password pseudorandomness.
    Valid values:  blake2b, blake2s, rmd160, sha256, sha512, sha3, wp512.
    If unset, it adds rmd160, sha256.

    CRYPTSETUP_TCRYPT - Add support for tcrypt.
    Valid values:  0, 1 (default).

    CRYPTSETUP_VERITY - Add support for dm-verity integrity checking using
    another device.
    Valid values:  0 (default), 1

    DSS_DISK_ENCRYPTION - Set the preferred way to protect sensitive data in non
    database contexts.
    Valid values:  ext4-encryption, fs-encryption, cryptsetup,
    unset (autodetect)
    Note:  You may select multiple values separated by space or comma.

    Examples:

      DSS_DISK_ENCRYPTION="fs-encryption cryptsetup"

    DSS_FIREWALL_TYPE - Set the preferred firewall.
    Valid values:  waf, unset (autodetect)
    Notes:  waf means to select Web Application Firewall.  If waf is not
    selected, it will check for an installed sofware based firewall package.

    DSS_REGION - Set the region for crypto standards
    Valid values:  cn, eu, jp, kr, ru, us, usa, west (default)
    Note:  Only one region can be selected.  usa enables additional federal
    settings.
    See also:  TLS_REGION

    DVD - Support for DVD, DVD-R, DVD-RW, DVD+R, DVD+RW, Blu-Ray
    Valid values:  0, 1 (default)
    See also:  CDROM

    E300C3 - Add support for PMU performance counters for e300c3.
    E300C4 - Add support for PMU performance counters for e300c4.
    Valid values:  0 (default), 1

    EMU_16BIT - Support 16-bit apps in DOSEMU, Wine, QEMU, etc.
    Valid values: 0 (default), 1
    This could lower security.

    EXT4_ENCRYPTION - Add support for ext4 encryption
    Valid values:  0, 1 (default).

    HT - Control mitigations against HT/SMT side-channel attacks when hardened
    level is secure-af.
    Valid values: 1, 2, 3, custom, manual, unset.
    1      - SMT is conditionally on, but may be off if vulnerability found
    2      - SMT is unconditionally off but can be enabled via sysfs
    3      - SMT is unconditionally off but irreversable until set to different HT setting (default if secure-af)
    custom - Manual setting
    manual - Alias for custom
    unset  - Alias for 3 if secure-af
    (Auto detection would be nice, but may be counter productive if hardware
    already fixed or feature disabled.  This is why it is a manual setting.)
    Notes:  This is a manually setting so that you can build a kernel from a
    PC without HT to a laptop with HT support.

    I915_GEN9_HWACCEL_LOW_POWER_VIDEO_ENCODING - Enable hardware accelerated low
    power video encoding for Gen9/Gen9.5 where it is not the default ON.
    This requires sys-kernel/linux-firmware.
    Valid values:  0 (default), 1.

    IPTABLES_CLIENT - Add support for iptables client.
    Valid values:  0, 1 (default).

    IPTABLES_ROUTER - Add support for iptables router.
    Valid values:  0 (default), 1.

    TLS - Allow AES and SHA256 to be installed.
    Valid values:  0, 1 (default)
    Note:  Setting to 0 chooses regional crypto systems instead and to disable
    TLS to prevent installing unwanted ciphers.

    TLS_REGION - A regional hint to enable the proper kernel config for TLS
    offload for improved throughput.
    Valid values:  cn, eu, jp, kr, ru, us, west (default)
    Notes:  Multiple options can be specified with spaces.  It only affects non
    dss work profiles.
    See also:  DSS_REGION

    KVM_ADD_IGNORE_MSRS_EQ_1 - Adds the kvm.ignore_msrs=1 to the kernel command
    line to fix virtual machine crashes as a result of accessing unsupported
    MSR registers.  You must may remove kvm.ignore_msrs=1 from the kernel
    config if you decide to disable it.
    Valid values:  0 (default), 1.

    KVM_GUEST_MEM_HOTPLUG - Add support for hotplugging dynamic memory.
    Valid values:  0 (default), 1.

    KVM_GUEST_PCI_HOTPLUG - Add support to dynamically remove a PCI device
    and / or a disk.  Hot plugging disks with this option is not a mistake.
    Valid values:  0 (default), 1.

    KVM_GUEST_VIRTIO_BALLOON - Add support to dynamic adjustment of the dynamic memory
    of the guest.
    Valid values:  0 (default), 1.

    KVM_GUEST_VIRTIO_CONSOLE - Add support for piping data between guest and host.
    Valid values:  0 (default), 1.

    KVM_GUEST_VIRTIO_MEM - Add support for virtio-mem.  This is more secure than
    the other kernel virtio memory hotplug drivers.
    Valid values:  0, 1 (default).

    KVMGT - Add support for KVMGT with GVT-g.  You may manually remove i915.enable_gvt=1
    from the kernel kernel config if you decide to disable it.
    Valid values:  0 (default), 1.
    See also: KVM_ADD_IGNORE_MSRS_EQ_1

    KASAN_SAMPLE_INTERVAL - Set the tag creation interval between number of tags
    to control check overhead.
    Valid values:  an integer, 1 (every page is tagged tagged, upstream and ebuild default)
    Possible recommendations:
    security-critical: 1,  balanced: 10,  performance-critical: 100
    security-critical: 1,  balanced: 100,  performance-critical: 1000
    security-critical: 1,  balanced: 1000,  performance-critical: 10000
    So changes are based on orders of magnitude.
    The tuneable is not well documented or verified.

    KFENCE_SAMPLE_INTERVAL - Set the check interval in milliseconds.
    Valid values:  an integer, 0 (disable kfence), 10 (ebuild default), 100 (upstream default)
    Recommendations:  security-critical: 10,  balanced: 100,  performance-critical: 1000
    So changes are based on magnitude of order.

    LM_SENSORS_MODULES - Add modules for lm-sensors.
    Valid values:  0 (default), 1.

    MDADM_RAID - Add support for software RAID.
    Valid values:  0, 1 (default).

    NFS_CLIENT - Add support for nfs client.
    Valid values:  0, 1 (default).

    NFS_SERVER - Add support for nfs server.
    Valid values:  0, 1 (default).

    MEMCARD_MMC - Build all MMC (MultiMediaCard) modules.
    Valid values:  0 (default), 1.
    See also:  MEMCARD_SD, MEMCARD_SDIO, USB_MASS_STORAGE

    MEMCARD_SD - Build all SD (Secure Digital / SD Card) modules.
    Valid values:  0 (default), 1.
    See also:  MEMCARD_MMC, MEMCARD_SDIO, USB_MASS_STORAGE

    MEMCARD_SDIO - Build all SD (Secure Digital Input Output) modules.
    Valid values:  0 (default), 1.
    See also:  MEMCARD_MMC, MEMCARD_SD, USB_MASS_STORAGE

    MICROCODE_SIGNATURES - Whitelist processor signatures.  If changed, it will
      replace the ebuild defaults.  Requires OT_KERNEL_CPU_MICROCODE=1.
    Valid values:
      See iucode_tool man page for details.
    Examples:
      MICROCODE_SIGNATURES="-S" # Equivalent to --scan-system=auto ; Not recommended for multisocket mobos.
      MICROCODE_SIGNATURES="--scan-system=exact" # Recommended for multisocket, server.  Ebuild default.
      MICROCODE_SIGNATURES="-s 0x000306c3"

    MICROCODE_BLACKLIST - Blacklist processor signatures.
      Requires OT_KERNEL_CPU_MICROCODE=1.
    Valid values:
      See iucode_tool man page for details.
    Examples:
      MICROCODE_BLACKLIST="-s !0x000406f1"

    MOBO_AUDIO - Add support for motherboard audio, gamer grade PCI audio, or laptop audio.
    Valid values:  1 (default), 0

    MOBO_AUDIO_LEGACY - Add support for legacy motherboard audio or gamer grade PCI audio.
    Valid values:  1, 0 (default)

    OPENRGB_RESOLVE_ACPI_SMBUS_CONFLICT - Add additional kernel command line
    args to fix ACPI and SMBUS conficts.
    Valid values:  0 (default), 1.

    OSS - Force add support for OSS sound.
    Valid values:  0 (default), 1.

    OSS_MIDI - Force added support for OSS MIDI.
    Valid values:  0 (default), 1.

    SANE_SCSI - Add support for SCSI scanners.
    Valid values:  0 (default), 1.

    SANE_USB - Add support for USB scanners.
    Valid values:  0, 1 (default).

    SEV - Add or remove support for SEV (Secure Encrypted Virtualization).
    Valid values:  0 (default), 1 (enables full hardening)
    See also:  OT_KERNEL_SME
    Notes:  Value valid only when OT_KERNEL_HARDENING_LEVEL is secure-af.
    It requires AMD CPU family 17h (2017) or 19h (2021).
    Before you use SEV, please test OT_KERNEL_SME first because SME can break boot.

    STD_PC_SPEAKER - Add support for the PC speaker with the standard PC speaker
    driver.
    Valid values:  0, 1 (default).

    TPM - Force added support for TPM (Trusted Platform Module).
    Valid values:  0 (default), 1.

    QEMU_HOST - Add support for QEMU Linux host.
    Valid values:  0, 1 (default).

    QEMU_GUEST_LINUX - Add support for QEMU Linux guests.
    Valid values:  0 (default), 1.

    QEMU_ETHERNET_BRIDGING - Add support for ethernet bridging.
    Valid values:  0 (default), 1.

    RADEON_DEEP_COLOR - Add support for more than 8 Bits Per Pixel for utilities
    querying capabilities.  For HDMI connections, it may be beneficial to set to
    1.  0 is the upstream default.

    Valid values:  0 (default), 1.

    SHEBANG - Support shebangs for scripting languages.
    auto - enable based on packages installed.  (default)
    1 - enable
    0 - disable
    custom - let the .config kernel config decide

    SQUASHFS_4K_BLOCK_SIZE - Operate in 4k blocks instead of 1k blocks
    Valid values: 0 (upstream default; optimizes for lower latency),
    1 (ebuild default; optimizes for increased sequential throughput).

    SQUASHFS_NFRAGS_CACHED - Number of fragments to cache in embedded environments.
    Valid values: 1 or more with default 3.
    Decreasing means more seeks and big delays.
    Increasing means less seeks and fewer big delays.

    SQUASHFS_ZLIB - Adds ZLIB decompression.
    Valid values: 1 (default), 0.

    SQUASHFS_NSTEP_DECOMPRESS - Number of steps to decompress
    1 - once into page cache (ebuild default, fastest)
    2 - two step copy from temp buffer to page cache (upstream default)

    SQUASHFS_XATTR - Support extended attributes.
    Valid values: 0 (upstream default), 1 (ebuild default).

    SQUASHFS_DECOMPRESSORS_PER_CORE - Parallel decompression
    Valid values:
      1 - 1 thread per core to decompress
      2 - 2 threads per core to decompress
      1up - 1 thread only total (upstream default)
      auto - (ebuild default)
    auto will judge based on threads per core (TPC) inspection.
    Use manual selection when porting to other machines.

    SYSTEMD_CONTAINER - Apply fix for systemd in a container.
      1 - apply fix for systemd used in a container
      0 - don't apply fix for systemd used in a container (default)

    SYSTEMD_FEATURE_AUTOFS - Support access/insertion based automounting.
      1 - enable
      0 - disable (default)

    SYSTEMD_FEATURE_BPF - Enable support for IPAddressDeny=,
    IPAddressAllow=, IPIngressFilterPath=, IPEgressFilterPath=,
    SocketBind{Allow|Deny}=, RestrictNetworkInterfaces=
      1 - enable
      0 - disable (default)

    To use FQ-CoDel as a QoS queue discipline for systemd's default setting and
    mitigation against bufferbloat, use OT_KERNEL_NET_QOS_SCHEDULERS instead.
    Other queue discipline can be added through the same variable to enable
    sections supported in the systemd.network man page.

    SYSTEMD_FEATURE_CPUSHARES - Enable CPUShares= support
      1 - enable
      0 - disable (default)

    SYSTEMD_FEATURE_CPUQUOTA - Enable CPUQuota= support
      1 - enable
      0 - disable (default)

    SYSTEMD_FEATURE_IPV6 - Support IPv6
      1 - enable
      0 - disable (default)

    SYSTEMD_FEATURE_OOMD - Support systemd-oomd
      1 - enable
      0 - disable (default)

    SYSTEMD_FEATURE_PRIVATENETWORK - Enable PrivateNetwork= support
      1 - enable
      0 - disable (default)

    SYSTEMD_FEATURE_PRIVATEUSERS - Enable PrivateUsers= support
      1 - enable
      0 - disable (default)

    SYSTEMD_FEATURE_RESTRICT_FS - Enable RestrictFileSystems= support
      1 - enable
      0 - disable (default)

    SYSTEMD_FEATURE_SCSI - Support SCSI serial number retrieval
      1 - enable
      0 - disable (default)

    For SYSTEMD_FEATURE_SIGNED_DM_VERITY, use CRYPTSETUP_VERITY instead.

    SYSTEMD_FEATURE_SMBIOS - Allow the importation of credentials/parameters
    through mostly virtual machine (VM) SMBIOSes.
      1 - enable
      0 - disable (default)

    SYSTEMD_UEFI - Support UEFI systems
      1 - enable (default)
      0 - disable

    SYSTEMD_FEATURE_FD_COMPARE - Compares file descriptors for duplicates base
    on the selected function.
    Valid values:  kcmp (default), fstat

    TBM - Disables Turbo Boost Max
    Valid values:
      1 - enables turbo
      0 - disable turbo
      unset - enable turbo
    Note:  if max availability is on or a work profile requires max
    availability, it will disable turbo.

    TRESOR_MAX_KEY_SIZE - The maximum key size for the cipher.
    Valid values:
    256 - acceptable on x86_64 arch only
    192 - acceptable on x86_64 arch only
    128 - acceptable on x86 or x86_64 arches
    unset - uses 256 key size on x86_64 or 128 key size on x86

    TTY_DRIVER - Add a video driver as a TTY driver fallback for binary GPU drivers
    Valid values:
      efi - newer systems
      simple - greater portability but conflicts with some binary GPU drivers
      vesa - older systems
      headless - no tty
      none - no tty
    (Valid only in binary driver contexts.)

    USB_FLASH_EXT2 - Add support for ext2 USB flash disks (aka USB thumb drive)
    Valid values:  0 (default), 1.

    USB_FLASH_EXT4 - Add support for ext4 USB flash disks (aka USB thumb drive)
    Valid values:  0, 1 (default).

    USB_FLASH_F2FS - Add support for F2FS USB flash disks (aka USB thumb drive)
    Valid values:  0 (default), 1.

    USB_FLASH_UDF - Add support for UDF USB flash disks (aka USB thumb drive)
    Valid values:  0 (default), 1.

    USB_MASS_STORAGE - Build all USB mass storage drivers which includes
    USB hard disks drivers, CD writers, MP3 player storage, CompactFlash,
    SmartMedia support
    Valid values:  0 (default), 1.
    See also:  MEMCARD_MMC, MEMCARD_SD, MEMCARD_SDIO

    USE_SUID_SANDBOX - Force adding SUID sandbox support for Blink based apps
    or web browsers.
    Valid values:  0 (default), 1.

    WATCHDOG_DRIVERS - A space separated list of watchdog kernel flag(s) or drivers
    without the CONFIG_ prefix.
    Valid values:  SOFT_WATCHDOG (default ON, but OFF upstream)
    See also:  https://github.com/torvalds/linux/blob/master/drivers/watchdog/Kconfig

    WATCHDOG_WAYOUT - Allow to stop the watchdog timer after it has started.
    Valid values:  1 - yes way out (default), 0 - no way out

    X86_MICROARCH_OVERRIDE - Override the -march=native or -march=generic.  With
    the help of the kernel_compiler_patch, more march values are exposed based
    on compiler support.  Setting to a specific microarchitecture is useful for
    prebuilt kernel packages.  For the greatest portablility, use GENERIC_CPU.
    For autodetection, use a MNATIVE* option.  However, the MNATIVE* option
    only works when the builder machine (CBUILD) is the same as the target
    or host machine (CTARGET/CHOST) to run the kernel.  The environment variable
    only valid in x86 and x86_64.  STATUS:  This setting may be removed in the
    future.

    If unset, it will use a MNATIVE* or GENERIC_CPU matching the
    march equivalent.  The MNATIVE* name changes depending if you are using
    the 4.14 series.

    The custom or manual value is provided to use previously set values.

    The availability of some options or spelling below may depend on
    the version of the compiler and the version of the kernel_compiler_patch.
    See arch/x86/Kconfig.cpu for details.  It is not necessary to use the
    kernel_compiler_patch, but this environment variable also works with
    the vanilla unpatch set.

    Examples:

      X86_MICROARCH_OVERRIDE="GENERIC_CPU"
      X86_MICROARCH_OVERRIDE="MATOM"
      X86_MICROARCH_OVERRIDE="manual"

    VIRTUALBOX_GUEST_LINUX - Add support for VirtualBox Linux guests.
    Valid values:  0, 1 (default).

    VSYSCALL_MODE - Select vsyscall mode.
    Valid values:  full, emulate (default).

    YUBIKEY - Force added support for YubiKey.
    Valid values: 0 (default), 1

    ZEN_DOM0 - Use the Domain 0 (privileged, backend, host) kernel config.  Both
    ZEN_DOM0 and ZEN_DOMU are mutually exclusive.
    Valid values: 0, 1 (default)

    ZEN_DOMU - Use the Domain U (unprivileged, frontend, guest) kernel config.
    Both ZEN_DOM0 and ZEN_DOMU are mutually exclusive.
    Valid values: 0 (default), 1



    disable_debug environment variables:

    PERMIT_NETFILTER_SYMBOL_REMOVAL - Remove extra symbols containing names
    with those keywords.  Note, some of these symbols may be beneficial to
    netfilter and not be related to debugging.  By default, this is disabled.

    Acceptable values:

      1 to remove symbols, 0 to not remove symbols.



    Environment variables for genpatches:
    
    GENPATCHES_BLACKLIST - a space separated list of genpatches to ban.
    See the genpatches website for the number to patch correspondance.

    Examples:

      GENPATCHES_BLACKLIST="2500"
      GENPATCHES_BLACKLIST="2500 2600"



    Environment variables for zen-sauce:

    ZEN_SAUCE_BLACKLIST - a space separated list of zen-sauce commit ids to ban.
    ZEN_SAUCE_WHITELIST - a space separated list of zen-sauce commit ids to apply.

    Acceptable values:

      * - all commits
      40 digit commit
      7 digit commit
      all - all commits
      zen-sauce - add all zen sauce commits
      zen-tune - add all zen tune commits

    Examples:

      ZEN_SAUCE_BLACKLIST="*"
      ZEN_SAUCE_BLACKLIST="all"
      ZEN_SAUCE_BLACKLIST="19be35c 1baa02f"
      ZEN_SAUCE_BLACKLIST="1baa02fbd7a419fdd0e484ba31ba82c90c7036cf ef12d902c1323bbbeacc3babc91aae15976474ca 56f6f4315aedbbcbef8ad61f187347c20a270e49"
      ZEN_SAUCE_WHITELIST="*"
      ZEN_SAUCE_WHITELIST="all"
      ZEN_SAUCE_WHITELIST="4b03a1c 613d2ac"
      ZEN_SAUCE_WHITELIST="zen-tune"

    For a full list of commits, see the commit history.

    For 5.4, see:

      https://github.com/torvalds/linux/compare/v5.4...zen-kernel:5.4/zen-sauce

    For 5.10, see:

      https://github.com/torvalds/linux/compare/v5.10...zen-kernel:5.10/zen-sauce

    For 5.15, see:

      https://github.com/torvalds/linux/compare/v5.15...zen-kernel:5.15/zen-sauce

    For 6.1, see:

      https://github.com/torvalds/linux/compare/v6.1...zen-kernel:6.1/zen-sauce

    For 6.6, see:

      https://github.com/torvalds/linux/compare/v6.6...zen-kernel:6.6/zen-sauce

    For 6.12, see:

      https://github.com/torvalds/linux/compare/v6.12...zen-kernel:6.12/zen-sauce

    For 6.13, see:

      https://github.com/torvalds/linux/compare/v6.13...zen-kernel:6.13/zen-sauce

    For 6.14, see:

      https://github.com/torvalds/linux/compare/v6.14...zen-kernel:6.14/zen-sauce

    Use the zen-sauce USE flags instead of passing their Zen commit IDs
    equivalents.

    Please read the metadata.xml comments for more info.
  -->
  ]]>
  <upstream>
    <!-- Send bug reports to the oiledmachine-overlay first. -->
    <bugs-to>
      https://github.com/orsonteodoro/oiledmachine-overlay/issues
    </bugs-to>
    <remote-id type="cpe">cpe:/o:linux:linux_kernel</remote-id>
  </upstream>
  <use>
    <flag name="big-endian">
      Install dependencies needed to build big-endian support.
    </flag>
    <flag name="bbrv2">
      Patches the kernel with BBRv2 TCP congestion control for improved goodput,
      which is the actual useful data over time alone, than its predecessor with
      around less than 5 percent retransmission comparable to Cubic but trading
      off ~5-10 MBps raw throughput, which includes data retransmissions and
      overhead.
    </flag>
    <flag name="bbrv3">
      Patches the kernel with BBRv3 TCP congestion control reducing the
      retransmission and latency by %0.2 compared to BBRv1, lower loss rate,
      throughput is +/- 1% of BBRv1.
    </flag>
    <flag name="bfq-mq">
      Update the BFQ IO scheduler from single queue to multi-queue in 4.14.x
      series only.  The multi-queue design was utilized in later kernels.
      Updating may present IO related problems, or have hidden unfixed bugs
    </flag>
    <flag name="bmq">
      Patches the kernel to use BMQ CPU scheduler, a more simple scheduler.
    </flag>
    <flag name="bmq-quick-fix">
      Patches the kernel with fixes to BMQ.
    </flag>
    <flag name="bzip2">
      Add support for bzip compression
    </flag>
    <flag name="c2tcp">
      (WORK IN PROGRESS / DRAFT)
      Changes existing TCP congestion controls for C2TCP with ultra low latency
      with benefits of low jitter and lower delays.

      The architecture of C2TCP is AQM inspired.  It essentially overrides
      control window based on bad conditions, with desired target delays
      set by the application.

      The architecture assumes that it is plugged into a loss based
      congestion control algorithm.

      It requires the use of Cubic.

      Installing the <pkg>sys-apps/c2tcp</pkg> evaluation package is optional.
    </flag>
    <flag name="cfi">
      Ensures that the toolchain is ready for CFI support (superceeded by KCFI).
      Control Flow Integrity (CFI) is mitigation against forward edge attacks
      and backward edge attacks (through the shadowcallstack USE flag) to
      mitigate against arbitrary code execution.
    </flag>
    <flag name="cfs">
      Uses the CFS (Completely Fair Scheduling) CPU scheduler and not apply
      any third-party CPU scheduler.
    </flag>
    <flag name="clang">
      This is a stronger check for those prefer Clang over GCC and to make sure
      the prerequisites are met.
    </flag>
    <flag name="clear">
      Add the Clear Linux patchset containing optimizations, tweaks,
      workarounds, fixes, corrections.

      This patchset is only applied when the versions are exactly the same.
    </flag>
    <flag name="cpu_flags_arm_bti">
      Install dependencies for (Branch Target Identification) BTI support for
      ROP and JOP mitigation.
    </flag>
    <flag name="cpu_flags_arm_lse">
      Install dependencies for LSE (Large System Extensions) atomics support.
    </flag>
    <flag name="cpu_flags_arm_mte">
      Install dependencies for MTE (Memory Tagging Extension) support for
      buffer overflow and use-after-free mitigations.
    </flag>
    <flag name="cpu_flags_arm_pac">
      Install dependencies for Pointer Authentication for ROP mitigation.
    </flag>
    <flag name="cpu_flags_arm_tlbi">
      Install dependencies for TLB range invalation support.
    </flag>
    <flag name="cpu_flags_arm_v4">
      Install dependencies for ARMv4 support.
    </flag>
    <flag name="cpu_flags_arm_v4">
      Install dependencies for ARMv4T support.
    </flag>
    <flag name="cpu_flags_ppc_476fpe">
      Install dependencies for fixing the 476FPE bug.
    </flag>
    <flag name="cpu_flags_riscv_rvv">
      Install dependencies for RISC-V Vector Extension (RVV) support.
    </flag>
    <flag name="cpu_flags_x86_aes">
      Install dependencies for support for the AES-NI instruction.
    </flag>
    <flag name="cpu_flags_x86_avx512bw">
      Install dependencies for support for the AVX512-BW instructions.
    </flag>
    <flag name="cpu_flags_x86_avx512vl">
      Install dependencies for support for the AVX512-VL instructions.
    </flag>
    <flag name="cpu_flags_x86_clmul_ni">
      Add support for CLMUL-NI for faster hashing.
    </flag>
    <flag name="cpu_flags_x86_gfni">
      Enables support for GFNI support for the ARIA block cipher.
    </flag>
    <flag name="cpu_flags_x86_sha256">
      Install dependencies for support for the SHA256-NI instruction.
    </flag>
    <flag name="cpu_flags_x86_tpause">
      Install dependencies for support for the TPAUSE instruction.
    </flag>
    <flag name="cpu_flags_x86_vaes">
      Install dependencies for support for the VAES instruction.
    </flag>
    <flag name="debug">
      If enabled, it will install the package dependencies and USE dependencies
      required for zlib compression.

      If disabled, installs or allows use of scripts to disable debugging,
      tracing, verbose output or related code paths.
    </flag>
    <flag name="deepcc">
      (WORK IN PROGRESS / DRAFT)
      DeepCC uses Deep Reinforced Learning (DRL) AI to improve existing
      classical congestion control.  It is used like a plugin to the existing
      and future diciplines.

      The goal or benefits are increased throughput or lower average delays.
      It also has lower CPU usage compared to pure learning based based CC.

      The output of DeepCC is changes of the max values (aka cap) of the control
      window.

      Prebuilt training models only works with BBR, Cubic, Illinois, Westwood.

      Installing the <pkg>sys-apps/deepcc</pkg> package is required for the DRL
      Agent and the learned model(s).
    </flag>
    <flag name="dwarf4">
      Uses and tells the compiler to embed the DWARF4 debugging format for gdb.
    </flag>
    <flag name="dwarf5">
      Uses and tells the compiler to embed the DWARF5 debugging format for gdb.
    </flag>
    <flag name="dwarf-auto">
      Support either DWARF4, DWARF5 debugging format based on the compiler
      default.

      It will default to one following:

      DWARF5 - llvm 14 or later, gcc 11 or later
      DWARF4 - llvm 13 or earlier, gcc 4.8 to 10.5
    </flag>
    <flag name="exfat">
      Enables or removes exFAT
    </flag>
    <flag name="fallback-commit">
      Rewind the commit backwards for live ebuilds to when patches were working.
    </flag>
    <flag name="gdb">
      Install gdb for debug info support.
    </flag>
    <flag name="genpatches">
      Applies the genkernel patch set.
    </flag>
    <flag name="genpatches_1510">
      Applies the genkernel patch 1510 for protected hardlinks and symlinks
      during early boot.  Disabled because it may cause indefinte lock up during
      OOM (or very high memory use) or cause failures in different software
      during runtime.  Enabling it reverts

        https://github.com/torvalds/linux/commit/561ec64ae67ef25cac8d72bb9c4bfc955edfd415

    </flag>
    <flag name="gost">
      Add support for GOST (Kuznyechik block cipher)
    </flag>
    <flag name="gtk">
      Add support for gconfig, the GTK+2 kernel config editor
    </flag>
    <flag name="gzip">
      Add support for gzip compression
    </flag>
    <flag name="graphicsmagick">
      Adds build time logo conversion support.
    </flag>
    <flag name="nest">
      Adds the per-core Nest task scheduler for 10% to 2x the benefit.  It uses
      autogrouped CFS and CFS as a fallback for secondary nest expansion.  The
      developers used it on multiple socket servers with multicore processors
      having 2 TPC (Threads per Core) and DVFS (Dynamic Voltage and Frequency
      Scaling enabled).

      For 6.7 and later:

        NEST_SPINNING=1 - Old behavior with spinning
        NEST_SPINNING=0 - New behavior without spinning (experimental)

      Spinning is a technique used to keep possibly used previously idle cores
      warm and running at a higher frequency.
    </flag>
    <flag name="kpgo-utils">
      Adds support for Full PGO for GCC compilers.
    </flag>
    <flag name="imagemagick">
      Adds build time logo conversion support.
    </flag>
    <flag name="intel-microcode">
      Ensure that the package has the latest CPU microcode security update.
    </flag>
    <flag name="kcfi">
      Apply KCFI sanitization for forward edge control flow integrity but
      limited to only indirect calls.
    </flag>
    <flag name="linux-firmware">
      Install the firmware package and ensure that the installed version has the
      latest CPU microcode for security updates.
    </flag>
    <flag name="lto">
      Fulfills the ThinLTO requirements.
    </flag>
    <flag name="lz4">
      Add support for lz4 compression
    </flag>
    <flag name="lzma">
      Add support for lzma compression
    </flag>
    <flag name="lzo">
      Add support for lzo compression
    </flag>
    <flag name="multigen_lru">
      Applies the vanilla Multi-Gen LRU patch for improved page reclamation.

      [It is still possible to get OOM/system-freeze with or without this patch.]
    </flag>
    <flag name="muqss">
      Patches the kernel with Con Kolivas patchset and includes his skiplist
      based MuQSS CPU scheduler.
    </flag>
    <flag name="ncurses">
      Add support for nconfig and menuconfig, the ncurses kernel config editors
    </flag>
    <flag name="orca">
      (WORK IN PROGRESS / DRAFT)
      Orca is an AI architecture that is partially AI driven and
      partially classical congestion control (CC).

      It is a learning based TCP congestion control using Deep Renforced
      Learning (DRL w/TD3) and Finite State Machine (FSM) based Congestion
      Control Heuristics.

      The benefits are the sending rates converge towards link capacity;
      convergance toward high throughput, lower delays, and lower loss;
      better unseen performance; lower CPU usage than pure learning
      implementations.
      
      The output of orca is changes in control window (cwnd) and pacing rates.

      The *prebuilt model* and the CC Huristics maybe limited to Cubic.

      Using a different CC may require futher customizations or new AI
      training.

      Installing the <pkg>sys-apps/orca</pkg> package is required for the DRL
      Agent and the learned model.
    </flag>
    <flag name="openssl">
      Add support for signing modules and kernels
    </flag>
    <flag name="pcc">
      Adds support for PCC (Performance-oriented Congestion Control) optimized
      for sending data over the Internet.  It is an online learning based
      congestion control.  [Online is the opposite to predetermined offline.]
    </flag>
    <flag name="pds">
      Patches the kernel with an alternative skiplist based scheduler.
    </flag>
    <flag name="pgo">
      Perform Profile Guided Optimization that may in average result in a range 
      between 10% improvement or a ~0.5% drop in performance.

      Perform Profile Directed Optimization.  3 phases like PGO but only using
      same optimizations, code generation options, and -fbranch-probabilities
      optimization.

      GCC PGO includes and implies GCC PDO.

      You may use Clang or GCC.  Support is experimental.

      In addition OT_KERNEL_PGO_FLAVOR must be set as either GCC_PDO, GCC_PGO,
      GCC_PGO_CFG, CLANG_PGO.  Only one value may be selected.

      In additon OT_KERNEL_USE must contain pgo.

      For clang pgo, OT_KERNEL_USE and USE must contain the clang USE flag.
    </flag>
    <flag name="prjc">
      Applies the Project C CPU scheduler.
    </flag>
    <flag name="qt5">
      Add support for xconfig, the Qt5 kernel config editor
    </flag>
    <flag name="qt6">
      Add support for xconfig, the Qt6 kernel config editor
    </flag>
    <flag name="reiserfs">
      Enable to keep, but not necessarily enabling it.
      Disable to cancel both ReiserFS and Reiser4 references.

      (EXPERIMENTAL)
    </flag>
    <flag name="retpoline">
      Installs dependencies for retpoline support.
    </flag>
    <flag name="rock-dkms">
      Build the amdgpu DRM driver in this kernel package as a module so that the
      rock-dkms driver can be loaded (via modprobe or insmod) as its replacement.

      In addition, install the rock-dkms kernel module package after this
      package.
    </flag>
    <flag name="rt">
      Applies the the PREEMPT_RT patchset which makes the kernel program fully
      preemptable (aka pausable everywhere) so that realtime threads can benefit
      as in maybe reduced lag time between kernel-user space context switches.
      The patchset trades off lower latency at the expense of throughput.
      Kernel realtime work profiles supports

        primary uses:  music production, audio broadcasting
      secondary uses:  robotics

      SECURITY:  Never give untrusted apps realtime access.  
    </flag>
    <flag name="rust">
      Add support for drivers written in Rust and kernel config options related
      to Rust.
    </flag>
    <flag name="shadowcallstack">
      Ensures that shadow call stack dependencies are installed.  Protects from
      ROP back edge attacks from arbitary code execution.
    </flag>
    <flag name="symlink">
      Updates the the /usr/src/linux symlink for every newer release.
    </flag>
    <flag name="tresor">
      Controls application of TRESOR, a cold boot resistant AES cipher.  AES
      keys are stored in registers instead of RAM.  It only supports one device
      at a time but supports 128-, 192-, 256- bit keys.
    </flag>
    <flag name="tresor_prompt">
      Enables the boot time TRESOR prompt in the kernel config.
    </flag>
    <flag name="tresor_sysfs">
      Builds the external key setting program.
    </flag>
    <flag name="uksm">
      Patches the kernel with the Ultra Kernel Samepage Merging, a type of
      memory page deduper algorithm.

      Using it may be insecure.  For details, see

        https://en.wikipedia.org/wiki/Kernel_same-page_merging#Security_risks

      [Using this patchset *may* result in more IO or performance degradation.]
    </flag>
    <flag name="xz">
      Add support for xz compression.
    </flag>
    <flag name="zen-multigen_lru">
      Enables and sets default time interval between 0.1 to 1 second [based on
      the timer frequency selected] for preventing certain working sets from
      being OOM-killed via the zen-kernel patchset.  The vanilla Multi-Gen LRU
      patch does not enable time based OOM-kill prevention by default.  For
      5.15, it adds the le9ec patch for size based thrash prevention and
      livelock prevention when clean pages are exausted.

      [It is still possible to get OOM/system-freeze with or without this patch.]
    </flag>
    <flag name="zen-muqss">
      Apply the zen-kernel's version of MuQSS
    </flag>
    <flag name="zen-sauce">
      Patches the kernel with selected Zen kernel commits.

      The zen-sauce set contains commit patches that add drivers or
      functionality related to gaming, laptops, optimizations, etc.

      The zen-tune set contains commit patches with some Zen Interactive Tuning,
      particularly those marked INTERACTIVE.
    </flag>
    <flag name="zstd">
      Add support for zstd compression.
    </flag>
  </use>
</pkgmetadata>
