<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <longdescription>
    ot-sources is a customizable patchset compilation package that applies
    patches for performance, encryption, and security.

    The package prefers to unbundle patchsets, in preference for the
    version of the feature that was released directly from original author,
    but sometimes prefers the bundled repackaged version for the major.minor
    series especially if they are difficult to maintain between major.minor
    series.

    Power users can choose either the BMQ, PDS, MuQSS CPU schedulers.  These
    schedulers focus on normal non-realtime tasks.

    CFS, used as the stock CPU scheduler, uses red-black trees.  The Red-black
    tree is O(log n) search, O(log n) task insert, O(log n) task removal.
    CFS does not use runqueues but red-black trees instead ordered by time.
    
    PDS is multiple run queues per CPU with backend skiplists.  Tries to
    balance throughput with latency.

    BMQ design tries to resume tasks faster for unfinished timeslices and
    uses PDS plus another scheduler design.  FIFO for non-rt and priority
    queue for rt tasks.

    MuQSS uses O(1) task removal. O(log n) task insertion. O(k) next task
    execution, with k CPU cores.  Each core has it's own runqueue of
    array of doubly linked lists arranged as a skip list.  Tasks are ordered
    by priority class and virtual deadline.  MuQSS tries to improve upon
    BFS with faster next task lookup from O(log n) to O(k) and choose between
    improved latency (single queue runqueue) or throughput (multiqueue runqueue).
    MuQSS was End Of Life (EOL) with 5.12 series.

    BMQ has been renamed to Project C.  Project C merged both PDS and
    BMQ allowing to choose either scheduler.  C means cross.

    In layman terms, O(1) is faster than O(log n).  O(log n) is faster than
    O(n).

    The zen-kernel's MuQSS is a forward port of MuQSS fork is MuQSS with changes
    to interactivity.  These changes drops the round robin time for task
    switches from 6 to 4 and lowers the cpu percentage from 75% to 25%
    to run as real time in the isochronous process class when using zen
    interactive tunables.  To keep it like vanilla just disable zen interactive
    or patch without zen interactive.

    Multigenerational LRU is a redesign of the current LRU design with
    more complex and accurate separation into multiple lists (aka generations)
    instead of the current LRU design of 2 which may be too coarse and result in
    inefficient reclamation.  The recommended tunings address mobile, cloud,
    desktop usage and should be customized or considered if not desktop which
    may differ from the defaults.

    The TRESOR patch provides increased mitigation from cold boot resistant
    attacks.  TRESOR is vulnerable to a DMA attack side-channel attack.  All
    older hardware that does not have IOMMU VT-d / AMD-Vi and not using it is
    vulnerable.  DMA attack is used to extract keys.  See
    https://en.wikipedia.org/wiki/List_of_IOMMU-supporting_hardware
    for a list of hardware supporting IOMMU.

    Compiler based optimizations are provided by GraySky2's
    kernel_compiler_patch.

    The O3 patch allows for O3 compiler optimiation is provided by the
    zen kernel.

    Older point releases are removed to eliminate some of the previously
    announced 0-day exploits.

    4.14.x kernel series is kept around for vanilla TRESOR.
    TRESOR for 5.x is experimental.  Only CBC mode is only recommended
    and should only be used.

    Using TRESOR with fscrypt is currently not supported.  The ebuild
    developer is currently working towards that goal.  Changing the key
    in the middle of writing may result in data loss, meaning half the
    data may be encrypted with two different keys.  The fscrypt version
    with TRESOR support will address this problem.

    Only Long Term Support (LTS) kernel and those marked stable
    in kernel.org are kept.  However, feature patchsets typically do not
    backport updates, so the latest stable should be used if you want updates
    or bugfixes for patchsets.  For reliable working builds, use the
    LTS series.

    Kernel series | Patchset | 			     | LTS [1,2]
    4.14 (LTS)						Y
		    -ck / MuQSS				N
		    -rt (RT_PREEMPT)			Y
		    genpatches				Y
		    kernel_compiler_patch 		N
		    O3 [6]				N
		    PDS					N
		    TRESOR (AES-NI) [3,4,6]		y
		    TRESOR (x86) [3,4,6]		y
		    TRESOR (x86-64) [3,6]		Y
		    UKSM [5]				N

    5.4	(LTS)						Y
		    -ck / MuQSS				N
		    -rt	(RT_PREEMPT)			Y
		    BMQ					N
		    futex (futex-wait-multiple) [6]	N
		    genpatches				Y
		    kernel_compiler_patch		N
		    TRESOR (AES-NI) [6]			y
		    TRESOR (x86) [6]			y
		    TRESOR (x86-64) [6]			Y
		    UKSM [5]				N
		    zen-muqss				N
		    zen-sauce				N

    5.10 (LTS)						Y
		    -ck / MuQSS				N
		    -rt	(RT_PREEMPT)			Y
		    BMQ					N
		    futex (futex-wait-multiple) [6]	N
		    genpatches				Y
		    kernel_compiler_patch		N
		    Project C				N
		    TCP BBR v2				N
		    TRESOR (AES-NI) [6]			y
		    TRESOR (x86) [6]			y
		    TRESOR (x86-64) [6]			Y
		    UKSM [5]				N
		    zen-muqss				N
		    zen-sauce				N

    5.15 (LTS)						Y
		    -rt	(RT_PREEMPT)			A
		    Clang PGO				?
		    futex (futex-wait-multiple)	[6]	?
		    futex2				?
		    kernel_compiler_patch		?
		    genpatches				A
		    lru_gen				?
		    Project C				A
		    TCP BBR v2 [6]			?
		    TRESOR (AES-NI) [6]			D
		    TRESOR (x86) [6]			D
		    TRESOR (x86-64) [6]			D
		    UKSM [5]				Y
		    x86-cfi				?
		    zen-lru_gen				N
		    zen-sauce				N
						
    5.16 (Stable)					N
		    -rt	(RT_PREEMPT)			A
		    Clang PGO				?
		    futex (futex-wait-multiple)	[6]	?
		    futex2				?
		    genpatches				A
		    lru_gen				?
		    kernel_compiler_patch		?
		    Project C				D
		    TCP BBR v2 [6]			?
		    TRESOR (AES-NI) [6]			D
		    TRESOR (x86) [6]			D
		    TRESOR (x86-64) [6]			D
		    UKSM [5]				D
		    x86-cfi				?
		    zen-lru_gen				A
		    zen-sauce				A

    [1] Kernel LTS provides security updates and bugfixes, but doesn't extend to
        third party patchsets
    [2] Third party patchset LTS has provided updates
    [3] only from the oiledmachine-overlay repo
    [4] without correctness verification, due to lack of hardware or
        configuration.  Correctness and build fixes extends only to device
        agnostic independent code.
    [5] updates usually only once, which may indicate bugs or lack of
        sufficient testing.  No versioning system between patch fixes.
    [6] backported or forwardported, but not intended for this series, but build
        time fixes are provided by the ebuild maintainer
    [7] backported or forwardported, but not intended for this series, but build
        time fixes are provided by others if it is a recent new kernel
        series.

    A - currently actively updatable
    D - USE flag should be disabled since there is no release for this minor
        version yet.
    N - under the Patchset LTS indicates that the patchset is EOL or likely
        EOL for that version which means that bug fixes and security updates
        will not be provided.  This indicates a feature freeze, but
        build time failures will be fixed by the ebuild maintainer.
    I - inactive due to changing API, but future support depends on motivation
    S - upstream indicated support
    y - only partial LTS for building but without correctness verification
    ? - unknown status

    EOL (End Of Life) stable kernels get dropped next update cycle which is
    typically a week.  The virtual/ot-sources-stable ebuild-package
    should handle the transition gracefully.

    Use virtual/ot-sources-lts or virtual/ot-sources-stable to track and
    update releases instead of emerging sys-kernel/ot-sources directly.
    It's recommended to use the ot-sources-lts if you have binary only kernel
    modules.  For those without binary only modules, use ot-sources-stable
    package.

    
    Using the build USE flag

    The build USE flag can be used to build the kernel.  It comes with extra
    environment variables that can be placed in the make.conf or as a
    per-package conf.

    When both the build and pgo USE flags are enabled, it will build an
    instrumented build ready for PGO training.  This requires a reboot.  After
    rebooting, you may use benchmarks or any program that reflects typical use
    cases.

    The build USE flag was necessary to increase the security of the -rt patchset
    with a more customized limited config.

    It also speeds up deployment time to decrease the security update lag.


    Using gen_pgo.sh

    It becomes tedious or too repetitive to manually train the kernel.
    This is why an automated trainer script gen_pgo.sh (also found in the modded
    genkernel) is provided to automatically train the kernel.  You can of course
    write your own automated script.  The script can be extended with
    pgo_custom.sh in the same directory or modded directly.  Using pgo_custom.sh
    is recommended to preserve changes between installs.  It should be ran only
    as a non-root user.  It also has additional package requirements listed in
    the pgo_trainer_* sections in the link below:

https://github.com/orsonteodoro/oiledmachine-overlay/blob/6de2332092a475bc2bc4f4aff350c36fce8f4c85/sys-kernel/genkernel/genkernel-4.2.6-r2.ebuild#L279


    Build environment variables
   
    OT_KERNEL_BUILDCONFIGS_X_Y -- list of build configs.  Once you define this,
    it will override and erase the defaults for that particular major.minor version.

    X is the major version, Y is the minor version.

    Examples:

    OT_MENUCONFIG_PREFERENCE="menuconfig"
    OT_KERNEL_BUILDCONFIGS_5_4="ot:build:/etc/kernels/kernel-config-5.4.180-ot-x86_64:x86_64:x86_64-pc-linux-gnu:muqss"
    OT_KERNEL_BUILDCONFIGS_5_16="ot:build:/etc/kernels/kernel-config-5.16.10-ot-x86_64:x86_64:x86_64-pc-linux-gnu:prjc;rt:build:/etc/kernels/kernel-config-5.16.10-rt-x86_64:x86_64:x86_64-pc-linux-gnu:cfs"

    The format of the sublists in OT_KERNEL_BUILDCONFIGS_X_Y is described below:

    Each build config is separated by a semicolon (;).

    The colon (:) separated sublist is defined as follows:

    All of the following are required to be defined from (left to right):

    OT_KERNEL_BUILDCONFIGS_X_Y="1:2:3:4:5:6"			# Acceptable
    OT_KERNEL_BUILDCONFIGS_X_Y="1:2:3:4:5:6;1:2:3:4:5:6"	# Acceptable

    1. Extraversion -- initials or name of the kernel.  Using the rt extraversion will
		apply the rt patchset to only that copy.
    2. Build flag -- It be 0, 1, true, false, yes, no, nobuild, build, unset.  Most
		are aliases, but it means to build or not build the kernel.
    3. Config -- Points to the absolute path of the kernel config. (This can be unset
		but then defaults to
		/etc/kernels/kernel-config-${PV}-${extraversion}-$(uname -m))
    4. Arch -- The native ABI of the kernel to build using one of the names of the
		folders in /usr/src/linux/arch.
    5. Target triple -- The target triple (CHOST) to use when cross-compiling.  Use the
		expanded CHOST value.  (This can be unset but then defaults to ${CHOST})
		If you put just CHOST or just CBUILD it will expand for each case.
    6. CPU scheduler -- can be one of the below depending on the kernel version.

		4.14: cfs, muqss, pds
		5.10: cfs, muqss, prjc
		5.15: cfs, prjc
		5.16: cfs, prjc

		The reason why for this flexibility is to allow for multiple
		configurations that are not mutual exclusive, meaning you can
		use the rt kernel with cfs but still choose muqss for a
		gaming client kernel.

		This field can be unset which would default to using cfs.

		* cfs is preferred for server kernels and bug-less experience.
		* muqss and prjc are better suited for audio production.
		* The rt extraversion can only use the cfs scheduler.

    Please read the metadata.xml comments for more info.
  </longdescription>
  <upstream>
    <!-- for this ebuild, eclasses, cve_hotfix, disable_debug, tresor_x86_64,
         tresor_x86_64-256-bit-key-support -->
    <bugs-to>
      https://github.com/orsonteodoro/oiledmachine-overlay/issues
    </bugs-to>

    <!-- for TCP BBR v2 support and documentation, see
https://github.com/google/bbr
    -->

    <maintainer status="active" type="person">
      <!-- for BMQ, PDS, Project C -->
      <email>cchalpha@gmail.com</email>
      <name>Alfred Chen</name>
    </maintainer>

    <!-- for CFI maintainers, see
https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/tree/MAINTAINERS?h=for-next/clang/pgo&id=3bc68891829b776b9a5dd9174de05e69138af7b6#n4439
    -->

    <maintainer status="active" type="project">
      <!-- for genpatches -->
      <email>kernel@gentoo.org</email>
      <name>Gentoo Kernel Project</name>
    </maintainer>

    <!-- for futex (FUTEX_WAIT_MULTIPLE), futex2, see
https://gitlab.collabora.com/tonyk/linux/-/commits/futex-proton-v3
https://gitlab.collabora.com/tonyk/linux/-/commits/futex2
https://gitlab.collabora.com/tonyk/linux/-/commits/futex2-proton
    -->

    <maintainer status="active" type="person">
      <!-- for kernel_compiler_patches -->
      <email>graysky AT archlinux DOT us</email>
      <name>graysky</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for the Linux kernel -->
      <name>Linus Torvalds</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for MuQSS -->
      <email>kernel at kolivas dot org</email>
      <name>Con Kolivas</name>
    </maintainer>

    <!-- for PGO maintainers, see
https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/tree/MAINTAINERS?h=for-next/clang/pgo&id=3bc68891829b776b9a5dd9174de05e69138af7b6#n14390
    -->

    <!-- for -rt -->
    <bugs-to>
      https://wiki.linuxfoundation.org/realtime/communication/bugreport
    </bugs-to>
    <doc lang="en">
      https://wiki.linuxfoundation.org/realtime/documentation/start
    </doc>

    <!-- for UKSM, see
https://github.com/dolohow/uksm
    -->

    <maintainer status="active" type="person">
      <!-- for TRESOR AES-NI and i386, 2010 -->
      <email>tilo.mueller@informatik.uni-erlangen.de</email>
      <name>Tilo Mueller</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for TRESOR (aes-128) i386, 2012 -->
      <email>johannes@jgoetzfried.de</email>
      <name>Johannes Goetzfried</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for the zen patchset -->
      <email>jan.steffens@gmail.com</email>
      <name>Jan Alexander Steffens</name>
      <!-- aka heftig -->
    </maintainer>
  </upstream>
  <use>
    <flag name="bbrv2">Patches the kernel with BBRv2 TCP congestion control for
      improved goodput, which is the actual useful data over time alone, than
      its predecessor with around less than 5 percent retransmission comparable
      to Cubic but trading off ~5-10 MBps raw throughput, which includes data
      retransmissions and overhead.
    <flag name="bfq-mq">Update the BFQ IO scheduler from single queue to
      multi-queue in 4.14.x series only.  The multi-queue design was utilized
      in later kernels.  Updating may present IO related problems, or have
      hidden unfixed bugs</flag>
    <flag name="bmq">Patches the kernel to use BMQ CPU scheduler, a more
      simple scheduler.</flag>
    <flag name="bmq-quick-fix">Patches the kernel with fixes to BMQ.</flag>
    <flag name="cfi">Ensures that the toolchain is ready for CFI support
      (for arm64 in production, and for x86_64 in development).  Control
      Flow Integrity (CFI) is mitigation against forward edge attacks and
      backward edge attacks (through the shadowcallstack USE flag) to
      mitigate against arbitrary code execution.</flag>
    <flag name="cfs">Uses the CFS (Completely Fair Scheduling) CPU scheduler
      and not apply any third-party CPU scheduler.</flag>
    <flag name="clang">This is a stronger check for those prefer Clang over
      GCC and to make sure the prerequisites are met. 
    <flag name="clang-pgo">Adds experimental Clang PGO support.  Patch was on
      hold due to compiler code generation problems.</flag>
    <flag name="cve_hotfix">Applies patches to resolve CVEs (Common 
      Vulnerabilities and Exposures).  Not enabled by default.

      Currently, not all patch fixes under code review, custom kernel vendors
      from mobile hardware manufacturers, or major distro advisories,
      get applied.

      Newer CVE fixes should be automatically added and applied per emerge.

      It uses an external script from https://github.com/orsonteodoro/tuxparoni

      Several global env vars can be used to control this flag that
      you set in your make.conf or per-package env:
      CVE_FIX_TRUST_LEVEL - an "inclusive or" bit mask that controls classes of 
                            cve hotfixes to accept.  See ot-kernel-cve.eclass
                            for acceptable values.  You will need to use the
                            hex value equivalent since these identifier
                            constants are not initialized in the
                            make.conf/per-package env.
      CVE_BLACKLIST_FIXES - is a string of CVE ids to reject fixes indended if
                            runtime or compile time failure occurs.
      CVE_DELAY - is set to 1 to enable or 0 to disable the 30 second delay per
                  entry in the report.
      CVE_FIX_REJECT_DISPUTED - is set to 0 to not reject (default), 1 to reject
                                to applying a CVE fix marked as disputed.
      CVE_ALLOW_RISKY_BACKPORTS - is set to 0 (default) to not apply, 1 to apply
                                  risky backport.  Risky backports are untested
                                  and may lead to data loss or data corruption,
                                  non functioning driver/device, or irreversible
                                  damage.
      CVE_ALLOW_UNTAGGED_PATCHES - is set to 0 to not accept, 1 to accept
                                   (default).  This is used to inspect patches
                                   or commits for viable official fix from 
                                   kernel.org or github.com/torvals if a url is
                                   not marked Patch or Vendor Advisory.
      CVE_ALLOW_CRASH_PREVENTION - is set to 1 to accept (default), 0 to reject
                                   if to apply commits that prevent crashes,
                                   memory leaks, overflows, and also adds
                                   data validations checks surrounding a fix
                                   for a CVE.
      CVE_MAX_BULK_CONNECTIONS - maximum large downloads at a time, 5 is default
      CVE_MAX_PATCH_CONNECTIONS - maximum patch downloads at a time,
                                  100 is default
      CVE_MIN_YEAR - starting patching-download-drytest year, default is 1999.

      Examples:
      CVE_FIX_TRUST_LEVEL=$((0x00010000 | 0x00040000))
      CVE_BLACKLIST_FIXES="CVE-2019-14814 CVE-2019-14895"
      CVE_DELAY=0
      CVE_ALLOW_RISKY_BACKPORTS=1
      </flag>
    <flag name="disable_debug">Installs scripts to disable debugging, tracing,
      verbose output or related code paths.</flag>
    <flag name="genpatches">Applies the genkernel patch set.</flag>
    <flag name="genpatches_1510">Applies the genkernel patch 1510 for
      protected hardlinks and symlinks during early boot.  Disabled because it
      may cause indefinte lock up during OOM (or very high memory use) or
      cause failures in different software during runtime.  Enabling it reverts
https://github.com/torvalds/linux/commit/561ec64ae67ef25cac8d72bb9c4bfc955edfd415
    </flag>
    <flag name="futex">Patches the kernel with FUTEX_WAIT_MULTIPLE futex syscall
      option which may be used in the proton, proton-wine, experimental-wine
      version 5 or above packages.  It may reduce CPU usage by less than
      5%.</flag>
    <flag name="futex2">Patches the kernel with older futex2 syscall
      specification.  This may reduce the CPU usage by less than 5%.  It is
      recommended to combine this USE flag with the futex2-proton USE flag as
      well since no known software uses the syscall's original data
      structures.</flag>
    <flag name="futex2-proton">Modifies the syscall data structures to be
      compatible with experimental-wine version 5.13 or above.  This will
      break compatibility.</flag>
    <flag name="kernel-compiler-patch">Patches the kernel for more CPU
      microarchitectures that are released before 2020</flag>
    <flag name="kernel-compiler-patch-cortex-a72">Patches the kernel for the
      Cortex A72 used in the Raspberry Pi 4.</flag>
    <flag name="kernel-compiler-patch-zen3">Patches the kernel for the Zen 3
      microarchitecture and ensures the toolchain requirements are in
      place.</flag>
    <flag name="kernel-compiler-patch-cooper_lake">Patches the kernel for the
      Cooper Lake microarchitecture and ensures the toolchain requirements are
      in place.</flag>
    <flag name="kernel-compiler-patch-tiger_lake">Patches the kernel for the
      Tiger Lake microarchitecture and ensures the toolchain requirements are
      in place.</flag>
    <flag name="kernel-compiler-patch-sapphire_rapids">Patches the kernel for the
      Sapphire Rapids microarchitecture and ensures the toolchain requirements
      are in place.</flag>
    <flag name="kernel-compiler-patch-rocket_lake">Patches the kernel for the
      Rocket Lake microarchitecture and ensures the toolchain requirements
      are in place.</flag>
    <flag name="kernel-compiler-patch-alder_lake">Patches the kernel for the
      Alder Lake microarchitecture and ensures the toolchain requirements
      are in place.</flag>
    <flag name="lru_gen">Applies the Multigenerational LRU patch for improved
      page reclamation.  This patch also includes zen-kernel changes.</flag>
    <flag name="lto">Fulfills the ThinLTO requirements.</flag>
    <flag name="muqss">Patches the kernel with Con Kolivas patchset and
      includes his skiplist based MuQSS CPU scheduler.</flag>
    <flag name="O3">Patches the kernel with more experimental O3
      compiler optimizations and adds them to the zen-sauce white list.</flag>
    <flag name="pds">Patches the kernel with an alternative skiplist
      based scheduler.</flag>
    <flag name="prjc">Applies the Project C CPU scheduler.</flag>
    <flag name="rt">Patches the kernel with the PREEMPT_RT patch which tries
      to minimize non-preemptible parts of the kernel.  It's experimental when
      combined with other USE flags and patchsets.</flag>  Realtime
      is not recommended for desktop use but for dedicated and isolated
      setups.  Never give untrusted apps realtime access.  The rt patchset
      is used by music producers that require low latency audio.
    <flag name="shadowcallstack">Ensures that shadow call stack dependencies
      are installed.  Protects from ROP back edge attacks from arbitary
      code execution.</flag>
    <flag name="symlink">Updates the the /usr/src/linux symlink for every
      newer release.</flag>
    <flag name="tresor">Controls application of TRESOR, a cold boot resistant
      AES cipher.  AES keys are stored in registers instead of RAM.  It only
      supports one device at a time but supports 128-, 192-, 256- bit keys.
      </flag>
    <flag name="tresor_aesni">Patches the kernel with cold boot resistant
      AES hardware accelerated AES-NI support.</flag>
    <flag name="tresor_i686">Patches the kernel with cold boot resistant
      AES using SSE for 32 bit systems.</flag>
    <flag name="tresor_sysfs">Builds the external key setting program.</flag>
    <flag name="tresor_x86_64">Patches the kernel with cold boot
      resistant AES using SSE for 64 bit systems.</flag>
    <flag name="tresor_x86_64-256-bit-key-support">Adds 192- and 256-bit
      AES key support to the 64-bit sse2 version of TRESOR.</flag>
    <flag name="uksm">Patches the kernel with the Ultra Kernel Samepage
      Merging, a type of memory page deduper algorithm.

      Using it may be insecure.  For details, see
      https://en.wikipedia.org/wiki/Kernel_same-page_merging#Security_risks</flag>
    <flag name="zen-lru_gen">Applies zen-kernel's branch of lru_gen with fixes</flag>
    <flag name="zen-muqss">Apply the zen-kernel's version of MuQSS</flag>
    <flag name="zen-sauce">Patches the kernel with selected Zen kernel
      commits.  You will need to define a ZENSAUCE_WHITELIST_5_10 environmental
      variable (in your make.conf or per-package env), replacing 5_10 with 5
      as the kernel major version and 10 the kernel minor version, containing
      a string of space separated commit IDs.  Order doesn't matter.  
      For a full list of commits see the commit history at...

      for 4.19 see:
      https://github.com/torvalds/linux/compare/v4.19...zen-kernel:4.19/misc

      for 5.4 see:
      https://github.com/torvalds/linux/compare/v5.4...zen-kernel:5.4/zen-sauce

      for 5.10 see:
      https://github.com/torvalds/linux/compare/v5.10...zen-kernel:5.10/zen-sauce

      for 5.14 see:
      https://github.com/torvalds/linux/compare/v5.14...zen-kernel:5.14/zen-sauce

      for 5.15 see:
      https://github.com/torvalds/linux/compare/v5.15...zen-kernel:5.15/zen-sauce

      for 5.16 see:
      https://github.com/torvalds/linux/compare/v5.16...zen-kernel:5.16/zen-sauce

      Use the O3, zen-sauce, kernel-compiler-patch USE flags instead of passing their
      commit IDs.

      The zen-sauce set contains patches that add drivers or functionality
      related to gaming, laptops, optimizations, etc.
     </flag>
    <flag name="zen-sauce-all">Blanket whitelist all zen-sauce commits</flag>
    <flag name="zen-tune">Patches the kernel with some Zen Interactive
      Tuning, particularly those marked INTERACTIVE.
    </flag>
  </use>
</pkgmetadata>
