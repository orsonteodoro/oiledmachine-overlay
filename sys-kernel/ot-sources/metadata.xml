<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <longdescription>
    ot-sources is a customizable kernel package that applies patches for
    performance, encryption, and security.

    The package prefers to unbundle patchsets, in preference for the
    version of the feature that was released directly from original author,
    but sometimes prefers the bundled repackaged version for the major.minor
    series especially if they are difficult to maintain between major.minor
    series.

    Power users can choose either the BMQ, PDS, MuQSS CPU schedulers.  These
    schedulers focus on normal non-realtime tasks.

    CFS, used as the stock CPU scheduler, uses red-black trees.  The Red-black
    tree is O(log n) search, O(log n) task insert, O(log n) task removal.
    CFS does not use runqueues but red-black trees instead ordered by time.
    
    PDS is multiple run queues per CPU with backend skiplists.  Tries to
    balance throughput with latency.

    BMQ design tries to resume tasks faster for unfinished timeslices and
    uses PDS plus another scheduler design.  FIFO for non-rt and priority
    queue for rt tasks.

    MuQSS uses O(1) task removal. O(log n) task insertion. O(k) next task
    execution, with k CPU cores.  Each core has it's own runqueue of
    array of doubly linked lists arranged as a skip list.  Tasks are ordered
    by priority class and virtual deadline.  MuQSS tries to improve upon
    BFS with faster next task lookup from O(log n) to O(k) and choose between
    improved latency (single queue runqueue) or throughput (multiqueue runqueue).

    BMQ has been renamed to Project C.  Project C will merge both PDS and
    BMQ.  C means cross.

    In layman terms, O(1) is faster than O(log n).  O(log n) is faster than
    O(n).

    The TRESOR patch provides increased mitigation from cold boot resistant
    attacks.  TRESOR is vulnerable to a DMA attack side-channel attack.  All
    older hardware that does not have IOMMU VT-d / AMD-Vi and not using it is
    vulnerable.  DMA attack is used to extract keys.  See
    https://en.wikipedia.org/wiki/List_of_IOMMU-supporting_hardware
    for a list of hardware supporting IOMMU.

    Compiler based optimizations are provided by GraySky2's kernel_gcc_patch 
    and the O3 patch.

    Older point releases are removed to eliminate some of the previously
    announced 0-day exploits.

    4.14.x kernel series is kept around for vanilla TRESOR.
    TRESOR for 5.x is experimental.  XTS with TRESOR is in Testing and
    may require modding.

    Only Long Term Support (LTS) kernel and those marked stable
    in kernel.org are kept.

    EOL (End Of Life) stable kernels get dropped next update cycle which is
    typically a week.  The virtual/ot-sources-stable ebuild-package
    should handle the transition gracefully.

    Use virtual/ot-sources-lts or virtual/ot-sources-stable to track and
    update releases instead of emerging sys-kernel/ot-sources directly.
    It's recommended to use the ot-sources-lts if you have binary only kernel
    modules.  For those without binary only modules, use ot-sources-stable
    package.

    Please read the metadata.xml comments for more info.
  </longdescription>
  <upstream>
    <!-- for this ebuild, eclasses, cve_hotfix, disable_debug, tresor_x86_64,
         tresor_x86_64-256-bit-key-support -->
    <bugs-to>
      https://github.com/orsonteodoro/oiledmachine-overlay/issues
    </bugs-to>

    <maintainer status="active" type="person">
      <!-- for bmq, pds, Project C -->
      <email>cchalpha@gmail.com</email>
      <name>Alfred Chen</name>
    </maintainer>

    <maintainer status="active" type="project">
      <!-- for genpatches -->
      <email>kernel@gentoo.org</email>
      <name>Gentoo Kernel Project</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for FUTEX_WAIT_MULTIPLE -->
      <email>krisman-AT-collabora.com</email>
      <name>Gabriel Krisman Bertazi</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for kernel_gcc_patches -->
      <email>graysky AT archlinux DOT us</email>
      <name>graysky</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for the linux kernel -->
      <name>Linus Torvalds</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for muqss -->
      <email>kernel at kolivas dot org</email>
      <name>Con Kolivas</name>
    </maintainer>

    <!-- for rt -->
    <bugs-to>
      https://wiki.linuxfoundation.org/realtime/communication/bugreport
    </bugs-to>
    <doc lang="en">
      https://wiki.linuxfoundation.org/realtime/documentation/start
    </doc>

    <maintainer status="active" type="person">
      <!-- for tresor aes-ni and i386, 2010 -->
      <email>tilo.mueller@informatik.uni-erlangen.de</email>
      <name>Tilo Mueller</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for tresor (aes-128) i386, 2012 -->
      <email>johannes@jgoetzfried.de</email>
      <name>Johannes Goetzfried</name>
    </maintainer>

    <maintainer status="active" type="person">
      <!-- for zen-tune patchset -->
      <email>jan.steffens@gmail.com</email>
      <name>Jan Alexander Steffens</name>
      <!-- aka heftig -->
    </maintainer>

  </upstream>
  <use>
    <flag name="bbrv2">Patches the kernel with BBRv2 TCP congestion control for
      around less than 1% retranssmisson (comparable to CUBIC) versus
      BBRv2 5% retransmission, at the cost of around 10 mbps relative to
      BBRv1.  BBRv1 is about double the throughput than CUBIC on average.
      BBRv2 is above CUBIC in throughput.

      This benefits the most with people with bad connections and 
      those under pay per mb/gb plan.  Gamers/streamers benefit marginally
      from having fewer random skips or losses.
    <flag name="bmq">Patches the kernel to use BMQ CPU scheduler, a more
      simple scheduler.</flag>
    <flag name="bmq-quick-fix">Patches the kernel with fixes to BMQ.</flag>
    <flag name="cve_hotfix">Applies patches to resolve CVEs (Common 
      Vulnerabilities and Exposures).  Not enabled by default.

      Currently, not all patch fixes under code review, custom kernel vendors
      from mobile hardware manufacturers, or major distro advisories,
      get applied.

      Newer CVE fixes should be automatically added and applied per emerge.

      It uses an external script from https://github.com/orsonteodoro/tuxparoni

      Several global env vars can be used to control this flag that
      you set in your make.conf or per-package env:
      CVE_FIX_TRUST_LEVEL - an "inclusive or" bit mask that controls classes of 
                            cve hotfixes to accept.  See ot-kernel-cve.eclass
                            for acceptable values.  You will need to use the
                            hex value equivalent since these identifier
                            constants are not initialized in the
                            make.conf/per-package env.
      CVE_BLACKLIST_FIXES - is a string of CVE ids to reject fixes indended if
                            runtime or compile time failure occurs.
      CVE_DELAY - is set to 1 to enable or 0 to disable the 30 second delay per
                  entry in the report.
      CVE_FIX_REJECT_DISPUTED - is set to 0 to not reject (default), 1 to reject
                                to applying a CVE fix marked as disputed.
      CVE_ALLOW_RISKY_BACKPORTS - is set to 0 (default) to not apply, 1 to apply
                                  risky backport.  Risky backports are untested
                                  and may lead to data loss or data corruption,
                                  non functioning driver/device, or irreversible
                                  damage.
      CVE_ALLOW_UNTAGGED_PATCHES - is set to 0 to not accept, 1 to accept
                                   (default).  This is used to inspect patches
                                   or commits for viable official fix from 
                                   kernel.org or github.com/torvals if a url is
                                   not marked Patch or Vendor Advisory.
      CVE_ALLOW_CRASH_PREVENTION - is set to 1 to accept (default), 0 to reject
                                   if to apply commits that prevent crashes,
                                   memory leaks, overflows, and also adds
                                   data validations checks surrounding a fix
                                   for a CVE.
      CVE_MAX_BULK_CONNECTIONS - maximum large downloads at a time, 5 is default
      CVE_MAX_PATCH_CONNECTIONS - maximum patch downloads at a time,
                                  100 is default
      CVE_MIN_YEAR - starting patching-download-drytest year, default is 1999.

      Examples:
      CVE_FIX_TRUST_LEVEL=$((0x00010000 | 0x00040000))
      CVE_BLACKLIST_FIXES="CVE-2019-14814 CVE-2019-14895"
      CVE_DELAY=0
      CVE_ALLOW_RISKY_BACKPORTS=1
      </flag>
    <flag name="cfs">Uses the CFS (Completely Fair Scheduling) CPU scheduler
      and not apply any third-party CPU scheduler.</flag>
    <flag name="disable_debug">Installs scripts to disable debugging, tracing,
      verbose output or related code paths.</flag>
    <flag name="genpatches">Applies the genkernel patch set.</flag>
    <flag name="futex-wait-multiple">Patches the kernel with
      FUTEX_WAIT_MULTIPLE futex syscall option which may be used in the
      wine-proton package and in Steam Play (based on Proton).  It may reduce 
      CPU usage by less than 5%.</flag>
    <flag name="futex2">Patches the kernel with futex2 syscalls.
      This may reduce the CPU usage by less than 5%.</flag>
    <flag name="kernel-gcc-patch">Patches the kernel for more CPU
      microarchitectures</flag>
    <flag name="muqss">Patches the kernel with Con Kolivas patchset and
      includes his skiplist based MuQSS CPU scheduler.</flag>
    <flag name="O3">Patches the kernel with more experimental O3
      compiler optimizations.</flag>
    <flag name="pds">Patches the kernel with an alternative skiplist
      based scheduler.</flag>
    <flag name="prjc">Applies the Project C CPU scheduler.</flag>
    <flag name="rt">Patches the kernel with the PREEMPT_RT patch which tries
      to minimize non-preemptible parts of the kernel.  It's experimental when
      combined with other USE flags and patchsets.</flag>
    <flag name="symlink">Updates the the /usr/src/linux symlink for every
      newer release.</flag>
    <flag name="tresor">Controls application of TRESOR, a cold boot resistant
      AES cipher.  AES keys are stored in registers instead of RAM.  It only
      supports one device at a time but supports 128-, 192-, 256- bit keys.
      </flag>
    <flag name="tresor_aesni">Patches the kernel with cold boot resistant
      AES hardware accelerated AES-NI support.</flag>
    <flag name="tresor_i686">Patches the kernel with cold boot resistant
      AES using SSE for 32 bit systems.</flag>
    <flag name="tresor_sysfs">Builds the external key setting program.</flag>
    <flag name="tresor_x86_64">Patches the kernel with cold boot
      resistant AES using SSE for 64 bit systems.</flag>
    <flag name="tresor_x86_64-256-bit-key-support">Adds 192- and 256-bit
      AES key support to the 64-bit sse2 version of TRESOR.</flag>
    <flag name="uksm">Patches the kernel with the Ultra Kernel Samepage
      Merging, a type of memory page deduper algorithm.

      Using it may be insecure.  For details, see
      https://en.wikipedia.org/wiki/Kernel_same-page_merging#Security_risks</flag>
    <flag name="zen-sauce">Patches the kernel with selected Zen kernel
      commits.  You will need to define a ZENSAUCE_WHITELIST_5_3 environmental
      variable (in your make.conf or per-package env), replacing 5_3 with 5
      as the kernel major version and 3 the kernel minor version, containing
      a string of space separated commit IDs.  Commits will apply one after the
      older with the oldest-left to newest-right.  The order corresponding to
      the bottom commit of the page to the top commit of the page respectively.
      Only 40 or 7 character commit IDs are supported.  For a full list of
      commits...

      for 4.19 see:
      https://github.com/torvalds/linux/compare/v4.19...zen-kernel:4.19/misc

      for 5.4 see:
      https://github.com/torvalds/linux/compare/v5.4...zen-kernel:5.4/zen-sauce

      for 5.10 see:
      https://github.com/torvalds/linux/compare/v5.10...zen-kernel:5.10/zen-sauce

      for 5.11 see:
      https://github.com/torvalds/linux/compare/v5.11...zen-kernel:5.11/zen-sauce

      Use the O3, zen-sauce, kernel_gcc_patch USE flags instead of passing their
      commit IDs.

      The zen-sauce set contains patches that add drivers or functionality
      related to gaming, laptops, optimizations, etc.
     </flag>
    <flag name="zen-tune">Patches the kernel with some Zen Interactive
      Tuning, particularly those marked INTERACTIVE.

      Disabled commits:
      "ZEN: INTERACTIVE: Use BFQ as our elevator"
      Reason:  Can set via custom init script to set
      /sys/block/sd*/queue/scheduler per device.  BFQ is suboptimal for
      SSD.

      You may manually add them back by /etc/portage/patches.  This is
      to allow people a choice.
    </flag>
    <flag name="zen-tune-muqss">Patches the kernel with Zen Interactive
      Tuning timings for MuQSS that may improve game FPS performance by
      10% along with emulators.  Only those commits marked INTERACTIVE
      in the muqss branch will be used.</flag>
  </use>
</pkgmetadata>
