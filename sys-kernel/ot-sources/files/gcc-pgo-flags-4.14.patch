Patch status:  WIP / In development
License identified in Makefile:
# SPDX-License-Identifier: GPL-2.0
License identified for kernel/gcov/Makefile:
# SPDX-License-Identifier: GPL-2.0
License identified in arch/x86/kernel/paravirt.c:
// SPDX-License-Identifier: GPL-2.0-or-later
--- a/Makefile.orig	2023-09-13 18:48:47.672199841 -0700
+++ b/Makefile	2023-09-13 18:50:11.440197675 -0700
@@ -640,7 +640,36 @@ all: vmlinux
 
 KBUILD_CFLAGS	+= $(call cc-option,-fno-PIE)
 KBUILD_AFLAGS	+= $(call cc-option,-fno-PIE)
-CFLAGS_GCOV	:= -fprofile-arcs -ftest-coverage -fno-tree-loop-im $(call cc-disable-warning,maybe-uninitialized,)
+
+CFLAGS_GCOV	:=
+CFLAGS_GCOV_DEFAULT	:= y
+
+ifeq ($(findstring GCC_PDI,$(GCC_PGO_PHASE)),GCC_PDI)
+CFLAGS_GCOV	+= -fprofile-arcs -fno-tree-loop-im
+CFLAGS_GCOV_DEFAULT	:= n
+endif
+
+ifeq ($(findstring GCC_PGI,$(GCC_PGO_PHASE)),GCC_PGI)
+CFLAGS_GCOV	+= -fprofile-generate -fno-tree-loop-im
+CFLAGS_GCOV_DEFAULT	:= n
+endif
+
+ifeq ($(findstring GCC_PDO,$(GCC_PGO_PHASE)),GCC_PDO)
+CFLAGS_GCOV	+= -fbranch-probabilities -fprofile-dir=$(GCC_PGO_PROFILE_DIR) -fprofile-correction -Wno-error=missing-profile -Wno-error=coverage-mismatch
+CFLAGS_GCOV_DEFAULT	:= n
+endif
+
+ifeq ($(findstring GCC_PGO,$(GCC_PGO_PHASE)),GCC_PGO)
+CFLAGS_GCOV	+= -fprofile-use -fprofile-dir=$(GCC_PGO_PROFILE_DIR) -fprofile-correction -Wno-error=missing-profile -Wno-error=coverage-mismatch
+CFLAGS_GCOV_DEFAULT	:= n
+endif
+
+ifeq ($(CFLAGS_GCOV_DEFAULT),y)
+CFLAGS_GCOV	+= -fprofile-arcs -ftest-coverage -fno-tree-loop-im
+endif
+
+CFLAGS_GCOV	+= $(call cc-disable-warning,maybe-uninitialized,)
+
 CFLAGS_KCOV	:= $(call cc-option,-fsanitize-coverage=trace-pc,)
 export CFLAGS_GCOV CFLAGS_KCOV
 
@@ -885,6 +914,17 @@ ifdef CONFIG_LD_DEAD_CODE_DATA_ELIMINATI
 LDFLAGS_vmlinux	+= $(call ld-option, --gc-sections,)
 endif
 
+#ifeq ($(findstring GCC_PGI,$(GCC_PGO_PHASE)),GCC_PGI)
+#KBUILD_CFLAGS          += -fprofile-generate
+#KBUILD_LDFLAGS_MODULE  += $(GCC_GCOV_DIR)/libgcov.a
+#LDFLAGS                += $(GCC_GCOV_DIR)/libgcov.a
+#endif
+#ifeq ($(findstring GCC_PGO,$(GCC_PGO_PHASE)),GCC_PGO)
+#KBUILD_CFLAGS          += -fprofile-use -fprofile-dir=$(GCC_PGO_PROFILE_DIR) -fprofile-correction -Wno-error=missing-profile -Wno-error=coverage-mismatch
+#KBUILD_LDFLAGS_MODULE  += $(GCC_GCOV_DIR)/libgcov.a
+#LDFLAGS                += $(GCC_GCOV_DIR)/libgcov.a
+#endif
+
 LDFLAGS	+= -z noexecstack
 LDFLAGS	+= $(call ld-option,--no-warn-rwx-segments)
 
--- a/kernel/gcov/Makefile.orig	2023-08-27 14:49:51.000000000 -0700
+++ b/kernel/gcov/Makefile	2023-09-13 15:27:37.344512036 -0700
@@ -1,4 +1,9 @@
 # SPDX-License-Identifier: GPL-2.0
+
+ifeq ($(findstring GCC_PGI,$(GCC_PGO_PHASE)),GCC_PGI)
+GCOV_PROFILE := n
+endif
+
 ccflags-y := -DSRCTREE='"$(srctree)"' -DOBJTREE='"$(objtree)"'
 
 obj-y := base.o fs.o
--- a/arch/x86/kernel/paravirt.c.orig	2023-09-13 16:24:48.932423279 -0700
+++ b/arch/x86/kernel/paravirt.c	2023-09-13 16:29:12.000416475 -0700
@@ -47,6 +47,7 @@
  * avoid confusing the entry prologues.
  */
 extern void _paravirt_nop(void);
+//
 asm (".pushsection .entry.text, \"ax\"\n"
      ".global _paravirt_nop\n"
      "_paravirt_nop:\n\t"
@@ -56,11 +57,13 @@ asm (".pushsection .entry.text, \"ax\"\n
      ".popsection");
 
 /* identity function, which can be inlined */
+#pragma GCC optimize "-fno-profile-values"
 u32 notrace _paravirt_ident_32(u32 x)
 {
 	return x;
 }
 
+#pragma GCC optimize "-fno-profile-values"
 u64 notrace _paravirt_ident_64(u64 x)
 {
 	return x;
