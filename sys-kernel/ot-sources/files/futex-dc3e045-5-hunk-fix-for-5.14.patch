License headers:

include/uapi/linux/futex.h:
/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */

kernel/futex.c:
// SPDX-License-Identifier: GPL-2.0-or-later

--- a/include/uapi/linux/futex.h.orig	2021-09-22 00:57:19.292485177 -0700
+++ b/include/uapi/linux/futex.h	2021-09-22 00:57:55.240486362 -0700
@@ -22,6 +22,7 @@
 #define FUTEX_WAIT_REQUEUE_PI	11
 #define FUTEX_CMP_REQUEUE_PI	12
 #define FUTEX_LOCK_PI2		13
+#define FUTEX_WAIT_MULTIPLE	14
 
 #define FUTEX_PRIVATE_FLAG	128
 #define FUTEX_CLOCK_REALTIME	256
--- a/kernel/futex.c.orig	2021-09-22 00:57:19.296485178 -0700
+++ b/kernel/futex.c	2021-09-22 01:08:14.792506778 -0700
@@ -4035,6 +4035,7 @@ static __always_inline bool futex_cmd_ha
 	case FUTEX_LOCK_PI2:
 	case FUTEX_WAIT_BITSET:
 	case FUTEX_WAIT_REQUEUE_PI:
+	case FUTEX_WAIT_MULTIPLE:
 		return true;
 	}
 	return false;
@@ -4073,6 +4074,25 @@ SYSCALL_DEFINE6(futex, u32 __user *, uad
 		tp = &t;
 	}
 
+	if (cmd == FUTEX_WAIT_MULTIPLE) {
+		int ret;
+		struct futex_q *qs;
+
+#ifdef CONFIG_X86_X32
+		if (unlikely(in_x32_syscall()))
+			return -ENOSYS;
+#endif
+		qs = futex_read_wait_block(uaddr, val);
+
+		if (IS_ERR(qs))
+			return PTR_ERR(qs);
+
+		ret = futex_wait_multiple(qs, op, val, tp);
+		kfree(qs);
+
+		return ret;
+	}
+
 	return do_futex(uaddr, op, val, tp, uaddr2, (unsigned long)utime, val3);
 }
 
@@ -4303,6 +4323,19 @@ SYSCALL_DEFINE6(futex_time32, u32 __user
 		tp = &t;
 	}
 
+	if (cmd == FUTEX_WAIT_MULTIPLE) {
+		int ret;
+		struct futex_q *qs = compat_futex_read_wait_block(uaddr, val);
+
+		if (IS_ERR(qs))
+			return PTR_ERR(qs);
+
+		ret = futex_wait_multiple(qs, op, val, tp);
+		kfree(qs);
+
+		return ret;
+	}
+
 	return do_futex(uaddr, op, val, tp, uaddr2, (unsigned long)utime, val3);
 }
 #endif /* CONFIG_COMPAT_32BIT_TIME */
