Patch status:  testing
MCDC associated with llvm_prf_bits is disabled.
--- a/kernel/pgo/fs.c.orig	2024-02-13 21:35:28.758279564 -0800
+++ b/kernel/pgo/fs.c	2024-02-13 22:06:51.506410113 -0800
@@ -39,6 +39,7 @@ struct prf_private_data {
  *	- llvm_prf_header
  *	- __llvm_prf_data
  *	- __llvm_prf_cnts
+ *	- __llvm_prf_bits
  *	- __llvm_prf_names
  *	- zero padding to 8 bytes
  *	- for each llvm_prf_data in __llvm_prf_data:
@@ -62,14 +63,31 @@ static void prf_fill_header(void **buffe
 	header->version = LLVM_VARIANT_MASK_IR_PROF | LLVM_INSTR_PROF_RAW_VERSION;
 	header->data_size = prf_data_count();
 	header->padding_bytes_before_counters = 0;
+
+#if LLVM_INSTR_PROF_RAW_VERSION == 9
+	header->num_counters = prf_cnts_count();
+#elif LLVM_INSTR_PROF_RAW_VERSION == 8 \
+	|| LLVM_INSTR_PROF_RAW_VERSION == 7 \
+	|| LLVM_INSTR_PROF_RAW_VERSION == 6 \
+	|| LLVM_INSTR_PROF_RAW_VERSION == 5
 	header->counters_size = prf_cnts_count();
+#endif
 	header->padding_bytes_after_counters = 0;
+
+#if LLVM_INSTR_PROF_RAW_VERSION == 9
+	header->num_bitmap_bytes = 0/*prf_bits_count()*/;
+	header->padding_bytes_after_bitmap_bytes = 0;
+#endif
+
 	header->names_size = prf_names_count();
 #if LLVM_INSTR_PROF_RAW_VERSION >= 8
 	header->counters_delta = (u64)__llvm_prf_cnts_start - (u64)__llvm_prf_data_start;
 #else
 	header->counters_delta = (u64)__llvm_prf_cnts_start;
 #endif
+#if LLVM_INSTR_PROF_RAW_VERSION >= 9
+	header->bitmap_delta = 0/*(u64)__llvm_prf_bits_start - (u64)__llvm_prf_data_start*/;
+#endif
 	header->names_delta = (u64)__llvm_prf_names_start;
 	header->value_kind_last = LLVM_INSTR_PROF_IPVK_LAST;
 #if LLVM_INSTR_PROF_RAW_VERSION >= 6
@@ -225,6 +243,9 @@ static unsigned long prf_buffer_size(voi
 	return sizeof(struct llvm_prf_header) +
 			prf_data_size()	+
 			prf_cnts_size() +
+#if LLVM_INSTR_PROF_RAW_VERSION >= 9 && 0
+			prf_bits_size() +
+#endif
 			prf_names_size() +
 			prf_get_padding(prf_names_size()) +
 			prf_get_value_size();
@@ -249,9 +270,13 @@ static int prf_serialize(struct prf_priv
 
 	buffer = p->buffer;
 
+// Sync with INSTR_PROF_SECT_ENTRY
 	prf_fill_header(&buffer);
 	prf_copy_to_buffer(&buffer, __llvm_prf_data_start,  prf_data_size());
 	prf_copy_to_buffer(&buffer, __llvm_prf_cnts_start,  prf_cnts_size());
+#if LLVM_INSTR_PROF_RAW_VERSION >= 9 && 0
+	prf_copy_to_buffer(&buffer, __llvm_prf_bits_start,  prf_bits_size());
+#endif
 	prf_copy_to_buffer(&buffer, __llvm_prf_names_start, prf_names_size());
 	buffer += prf_get_padding(prf_names_size());
 
@@ -330,6 +355,9 @@ static ssize_t reset_write(struct file *
 	struct llvm_prf_data *data;
 
 	memset(__llvm_prf_cnts_start, 0, prf_cnts_size());
+#if LLVM_INSTR_PROF_RAW_VERSION == 9 && 0
+	memset(__llvm_prf_bits_start, 0, prf_bits_size());
+#endif
 
 	for (data = __llvm_prf_data_start; data < __llvm_prf_data_end; data++) {
 		struct llvm_prf_value_node **vnodes;
--- a/kernel/pgo/Kconfig.orig	2024-02-13 21:35:28.758279564 -0800
+++ b/kernel/pgo/Kconfig	2024-02-13 21:36:20.057732154 -0800
@@ -10,7 +10,7 @@ config PGO_CLANG
 	depends on ARCH_SUPPORTS_PGO_CLANG
 	depends on CC_IS_CLANG && CLANG_VERSION >= 120000
 	depends on !ARCH_WANTS_NO_INSTR || CC_HAS_NO_PROFILE_FN_ATTR
-	depends on PROFRAW_V8 || PROFRAW_V7 || PROFRAW_V6 || PROFRAW_V5
+	depends on PROFRAW_V9 || PROFRAW_V8 || PROFRAW_V7 || PROFRAW_V6 || PROFRAW_V5
 	help
 	  This option enables clang's PGO (Profile Guided Optimization) based
 	  code profiling to better optimize the kernel.
@@ -40,16 +40,25 @@ choice PGO_CLANG_LLVM_SELECT
 	  This matches the profdata data structure to a specific version
 	  of LLVM since not enough metadata is provided.
 
-config PROFRAW_V8
-	bool "profraw v8 (14.x, 15.x, main)"
+config PROFRAW_V9
+	bool "profraw v9 (18.x, 19.x, main) (Experimental)"
 	help
 	  The following are compatible:
 	    * LLVM main branch with the latest commit
-	    * LLVM 14.x branch with the latest commit
-	    * LLVM 14.0.3
-	    * LLVM 14.0.2
-	    * LLVM 14.0.1
-	    * LLVM 14.0.0
+	    * LLVM 19.x init
+	    * LLVM 18.x branch with the latest commit
+	    * LLVM 18.1 rc2
+	    * LLVM 18.1 rc1
+
+config PROFRAW_V8
+	bool "profraw v8 (14.x, 15.x, 16.x, 17.x)"
+	help
+	  The following are compatible:
+	    * LLVM 18 init
+	    * LLVM 17.x
+	    * LLVM 16.x
+	    * LLVM 15.x
+	    * LLVM 14.x
 
 config PROFRAW_V7
 	bool "profraw v7 (13.x)"
--- a/kernel/pgo/pgo.h.orig	2024-02-13 21:35:28.758279564 -0800
+++ b/kernel/pgo/pgo.h	2024-02-14 08:07:25.135525237 -0800
@@ -50,7 +50,9 @@
 #  error "backport those commits."
 #endif
 
-#if defined(CONFIG_PROFRAW_V8)
+#if defined(CONFIG_PROFRAW_V9)
+#  define LLVM_INSTR_PROF_RAW_VERSION	9
+#elif defined(CONFIG_PROFRAW_V8)
 #  define LLVM_INSTR_PROF_RAW_VERSION	8
 #elif defined(CONFIG_PROFRAW_V7)
 #  define LLVM_INSTR_PROF_RAW_VERSION	7
@@ -59,7 +61,7 @@
 #elif defined(CONFIG_PROFRAW_V5)
 #  define LLVM_INSTR_PROF_RAW_VERSION	5
 #else
-#  error "profraw versions < 5 or > 8 are not supported."
+#  error "profraw versions < 5 or > 9 are not supported."
 #endif
 
 #define LLVM_INSTR_PROF_DATA_ALIGNMENT		8
@@ -96,10 +98,24 @@ struct llvm_prf_header {
 #endif
 	u64 data_size;
 	u64 padding_bytes_before_counters;
+#if LLVM_INSTR_PROF_RAW_VERSION == 9
+	u64 num_counters;
+#elif LLVM_INSTR_PROF_RAW_VERSION == 8 \
+	|| LLVM_INSTR_PROF_RAW_VERSION == 7 \
+	|| LLVM_INSTR_PROF_RAW_VERSION == 6 \
+	|| LLVM_INSTR_PROF_RAW_VERSION == 5
 	u64 counters_size;
+#endif
 	u64 padding_bytes_after_counters;
+#if LLVM_INSTR_PROF_RAW_VERSION == 9
+	u64 num_bitmap_bytes;
+	u64 padding_bytes_after_bitmap_bytes;
+#endif
 	u64 names_size;
 	u64 counters_delta;
+#if LLVM_INSTR_PROF_RAW_VERSION == 9
+	u64 bitmap_delta;
+#endif
 	u64 names_delta;
 	u64 value_kind_last;
 #if LLVM_INSTR_PROF_RAW_VERSION == 6 \
@@ -113,6 +129,7 @@ struct llvm_prf_header {
  * @name_ref: the reference to the function's name.
  * @func_hash: the hash value of the function.
  * @counter_ptr: a pointer to the profile counter.
+ * @bitmap_ptr: a pointer to the profile bitmap.
  * @function_ptr: a pointer to the function.
  * @values: the profiling values associated with this function.
  * @num_counters: the number of counters in the function.
@@ -122,10 +139,16 @@ struct llvm_prf_data {
 	const u64 name_ref;
 	const u64 func_hash;
 	const void *counter_ptr;
+#if LLVM_INSTR_PROF_RAW_VERSION == 9
+	const void *bitmap_ptr;
+#endif
 	const void *function_ptr;
 	void *values;
 	const u32 num_counters;
 	const u16 num_value_sites[LLVM_INSTR_PROF_IPVK_LAST + 1];
+#if LLVM_INSTR_PROF_RAW_VERSION == 9
+	const u32 num_bitmap_bytes;
+#endif
 } __aligned(LLVM_INSTR_PROF_DATA_ALIGNMENT);
 
 /**
@@ -193,6 +216,11 @@ extern struct llvm_prf_data __llvm_prf_d
 extern u64 __llvm_prf_cnts_start[];
 extern u64 __llvm_prf_cnts_end[];
 
+#if LLVM_INSTR_PROF_RAW_VERSION == 9 && 0
+extern char __llvm_prf_bits_start[];
+extern char __llvm_prf_bits_end[];
+#endif
+
 extern char __llvm_prf_names_start[];
 extern char __llvm_prf_names_end[];
 
@@ -221,6 +249,9 @@ extern void prf_unlock(unsigned long fla
 
 __DEFINE_PRF_SIZE(data);
 __DEFINE_PRF_SIZE(cnts);
+#if LLVM_INSTR_PROF_RAW_VERSION == 9 && 0
+__DEFINE_PRF_SIZE(bits);
+#endif
 __DEFINE_PRF_SIZE(names);
 __DEFINE_PRF_SIZE(vnds);
 
--- a/include/asm-generic/vmlinux.lds.h.orig	2024-03-06 08:58:11.606623371 -0800
+++ b/include/asm-generic/vmlinux.lds.h	2024-03-06 08:57:32.151037247 -0800
@@ -326,6 +326,16 @@
 #endif
 
 #ifdef CONFIG_PGO_CLANG
+# if defined(CONFIG_PROFRAW_V9) && 0
+#define PGO_CLANG_DATA_BITS
+	__llvm_prf_bits : AT(ADDR(__llvm_prf_bits) - LOAD_OFFSET) {	\
+		__llvm_prf_bits_start = .;				\
+		*(__llvm_prf_bits)					\
+		__llvm_prf_bits_end = .;				\
+	}
+# else
+#define PGO_CLANG_DATA_BITS
+# endif
 #define PGO_CLANG_DATA							\
 	__llvm_prf_data : AT(ADDR(__llvm_prf_data) - LOAD_OFFSET) {	\
 		__llvm_prf_start = .;					\
@@ -338,6 +348,7 @@
 		*(__llvm_prf_cnts)					\
 		__llvm_prf_cnts_end = .;				\
 	}								\
+	PGO_CLANG_DATA_BITS						\
 	__llvm_prf_names : AT(ADDR(__llvm_prf_names) - LOAD_OFFSET) {	\
 		__llvm_prf_names_start = .;				\
 		*(__llvm_prf_names)					\
