--- a/arch/x86/kernel/ptrace.c.orig	2020-06-29 13:31:48.392569090 -0700
+++ b/arch/x86/kernel/ptrace.c	2020-06-29 13:47:20.182552453 -0700
@@ -617,6 +617,10 @@ static unsigned long ptrace_get_debugreg
 	struct thread_struct *thread = &tsk->thread;
 	unsigned long val = 0;
 
+#ifdef CONFIG_CRYPTO_TRESOR
+	return val;
+#endif
+
 	if (n < HBP_NUM) {
 		int index = array_index_nospec(n, HBP_NUM);
 		struct perf_event *bp = thread->ptrace_bps[index];
@@ -638,6 +642,10 @@ static int ptrace_set_breakpoint_addr(st
 	struct perf_event *bp = t->ptrace_bps[nr];
 	int err = 0;
 
+#ifdef CONFIG_CRYPTO_TRESOR
+	return -EBUSY;
+#endif
+
 	if (!bp) {
 		/*
 		 * Put stub len and type to create an inactive but correct bp.
@@ -678,7 +686,12 @@ static int ptrace_set_debugreg(struct ta
 	int rc = -EIO;
 
 #ifdef CONFIG_CRYPTO_TRESOR
-	return val;
+	if (n == 4 || n == 5)
+		return -EIO;
+	else if (n == 6 || n == 7)
+		return -EPERM;
+	else
+		return -EBUSY;
 #endif
 
 	if (n < HBP_NUM) {
@@ -734,10 +747,6 @@ static const struct user_regset_view use
 long arch_ptrace(struct task_struct *child, long request,
 		 unsigned long addr, unsigned long data)
 {
-#ifdef CONFIG_CRYPTO_TRESOR
-	return -EBUSY;
-#endif
-
 	int ret;
 	unsigned long __user *datap = (unsigned long __user *)data;
 
@@ -770,15 +779,6 @@ long arch_ptrace(struct task_struct *chi
 		if (addr < sizeof(struct user_regs_struct))
 			ret = putreg(child, addr, data);
 		else if (addr >= offsetof(struct user, u_debugreg[0]) &&
- 
-#ifdef CONFIG_CRYPTO_TRESOR
-	if (n == 4 || n == 5)
-		return -EIO;
-	else if (n == 6 || n == 7)
-		return -EPERM;
-	else
-		return -EBUSY;
-#endif
 			 addr <= offsetof(struct user, u_debugreg[7])) {
 			addr -= offsetof(struct user, u_debugreg[0]);
 			ret = ptrace_set_debugreg(child,
