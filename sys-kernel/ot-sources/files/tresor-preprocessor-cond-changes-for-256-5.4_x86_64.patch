--- a/arch/x86/crypto/tresor_glue.c.orig	2024-02-12 18:32:42.669542749 -0800
+++ b/arch/x86/crypto/tresor_glue.c	2024-02-12 18:44:15.974477972 -0800
@@ -57,7 +57,6 @@
  * Assembly functions implemented in tresor-intel_asm.S
  */
 asmlinkage void tresor_set_key(const u8 *in_key);
-asmlinkage void tresor_set_key_xts_tweak_128(const u8 *in_key);
 asmlinkage void tresor_encblk_128(u8 *out, const u8 *in);
 asmlinkage void tresor_decblk_128(u8 *out, const u8 *in);
 #ifdef CONFIG_X86_64
@@ -65,8 +64,9 @@ asmlinkage void tresor_encblk_192(u8 *ou
 asmlinkage void tresor_decblk_192(u8 *out, const u8 *in);
 asmlinkage void tresor_encblk_256(u8 *out, const u8 *in);
 asmlinkage void tresor_decblk_256(u8 *out, const u8 *in);
-#endif
+asmlinkage void tresor_set_key_xts_tweak_128(const u8 *in_key);
 asmlinkage void tresor_encblk_128_xts_tweak(u8 *out, const u8 *in);
+#endif
 
 
 
@@ -192,6 +192,7 @@ void tresor_setkey(const u8 *in_key)
 	on_each_cpu(tresor_setkey_current_cpu, (void *)in_key, 1);
 }
 
+#ifdef CONFIG_X86_64
 /*
  * Set XTS tweak key
  */
@@ -206,6 +207,7 @@ void tresor_setkey_xts_tweak(const u8 *i
 {
 	on_each_cpu(tresor_setkey_xts_tweak_current_cpu, (void *)in_key, 1);
 }
+#endif
 
 static int tresor_skcipher_setkey(struct crypto_skcipher *tfm, const u8 *key, unsigned int keylen)
 {
@@ -538,7 +540,6 @@ static struct skcipher_alg tresor_skciph
 		.setkey		= tresor_skcipher_setkey,
 		.encrypt	= cbc_encrypt,
 		.decrypt	= cbc_decrypt,
-#ifdef CONFIG_X86_64
 	}, {
 		.base = {
 			.cra_name		= "__ctr(tresor)",
@@ -556,6 +557,7 @@ static struct skcipher_alg tresor_skciph
 		.setkey		= tresor_skcipher_setkey,
 		.encrypt	= ctr_crypt,
 		.decrypt	= ctr_crypt,
+#ifdef CONFIG_X86_64
 	}, {
 		.base = {
 			.cra_name		= "__xts(tresor)",
--- a/arch/x86/crypto/tresor_asm.S.orig	2024-02-12 18:32:42.589543488 -0800
+++ b/arch/x86/crypto/tresor_asm.S	2024-02-12 18:56:53.870334857 -0800
@@ -245,8 +245,7 @@ gfbd9e:	.long	0x00000000, 0x0b0d090e, 0x
 	pxor		%mm7,%mm7
 #endif
 	/* leave */
-#ifdef CONFIG_X86_64
-#else
+#ifdef CONFIG_X86_32
 	popa
 	pop		ebp
 #endif
@@ -1087,8 +1086,7 @@ out:
 .endm
 #endif
 
-#ifdef CONFIG_X86_64
-#else
+#ifdef CONFIG_X86_32
 .macro key_schedule32_10
 	/* Generate round keys from rk1 to rk10 for AES-128 */
 	generate_rk_10	rk1,rk1,$0x1
@@ -1306,60 +1304,53 @@ out:
 	.global		tresor_decblk_192
 	.global		tresor_encblk_256
 	.global		tresor_decblk_256
-#endif
 	.global		tresor_set_key_xts_tweak_128
 	.global		tresor_encblk_128_xts_tweak
+#endif
 	.extern		crypto_ft_tab
 	.extern		crypto_fl_tab
 	.extern		crypto_it_tab
 	.extern		crypto_il_tab
 
+#ifdef CONFIG_X86_64
 /* void tresor_encblk_128(u8 *out, const u8 *in) */
 tresor_encblk_128:
-#ifdef CONFIG_X86_64
 	tresor_encblk64_10
-#else
-	tresor_encblk32_10
-#endif
+
 /* void tresor_decblk_128(u8 *out, const u8 *in) */
 tresor_decblk_128:
-#ifdef CONFIG_X86_64
 	tresor_decblk64_10
-#else
-	tresor_decblk32_10
-#endif
+
 /* void tresor_encblk_192(u8 *out, const u8 *in) */
 tresor_encblk_192:
-#ifdef CONFIG_X86_64
 	tresor_encblk64_12
-#else
-	ret
-#endif
+
 /* void tresor_decblk_192(u8 *out, const u8 *in) */
 tresor_decblk_192:
-#ifdef CONFIG_X86_64
 	tresor_decblk64_12
-#else
-	ret
-#endif
+
 /* void tresor_encblk_256(u8 *out, const u8 *in) */
 tresor_encblk_256:
-#ifdef CONFIG_X86_64
 	tresor_encblk64_14
-#else
-	ret
-#endif
+
 /* void tresor_decblk_256(u8 *out, const u8 *in) */
 tresor_decblk_256:
-#ifdef CONFIG_X86_64
 	tresor_decblk64_14
+
 #else
-	ret
+
+/* void tresor_encblk_128(u8 *out, const u8 *in) */
+tresor_encblk_128:
+	tresor_encblk32_10
+
+/* void tresor_decblk_128(u8 *out, const u8 *in) */
+tresor_decblk_128:
+	tresor_decblk32_10
 #endif
 
+#ifdef CONFIG_X86_64
 /* void tresor_encblk_128_xts_tweak(u8 *out, const u8 *in) */
 tresor_encblk_128_xts_tweak:
-#ifdef CONFIG_X86_64
 	prolog
 	xts_dbg_to_sse	rk0
 	pxor		rk0,rstate
@@ -1375,8 +1366,6 @@ tresor_encblk_128_xts_tweak:
 	f_nround	rk9
 	f_lround	rk10
 	epilog
-#else
-	ret
 #endif
 
 /* void tresor_set_key(const u8 *in_key) */
@@ -1457,9 +1446,9 @@ tresor_set_key:
 #endif
 	ret
 
+#ifdef CONFIG_X86_64
 /* void tresor_set_key_xts_tweak_128(const u8 *in_key) */
 tresor_set_key_xts_tweak_128:
-#ifdef CONFIG_X86_64
 /*
 	rdi[0] = tweak_key[0]:tk0 = in
 	rdi[1] = tweak_key[1]:tk1 = in
@@ -1489,6 +1478,5 @@ tresor_set_key_xts_tweak_128:
 	db2    tk1 out  tk0 out
 	db3    tk3 out  tk2 out
 */
-#else
-#endif
 	ret
+#endif
--- a/init/main.c.orig	2024-02-12 21:39:30.960166125 -0800
+++ b/init/main.c	2024-02-12 21:40:49.911478340 -0800
@@ -1214,7 +1214,9 @@ static noinline void __init kernel_init_
 	alg_test("ecb(tresor)", "ecb(tresor)", 0, 0);
 	alg_test("cbc(tresor)", "cbc(tresor)", 0, 0);
 	alg_test("ctr(tresor)", "ctr(tresor)", 0, 0);
+#ifdef CONFIG_X86_64
 	alg_test("xts(tresor)", "xts(tresor)", 0, 0);
+#endif
 	tresor_lock_tests();
 #endif
 
--- a/crypto/testmgr.c.orig	2024-02-12 21:39:36.272119907 -0800
+++ b/crypto/testmgr.c	2024-02-12 21:41:50.302951012 -0800
@@ -2501,17 +2501,21 @@ static int test_skcipher_vec_cfg(const c
 					    CRYPTO_TFM_REQ_FORBID_WEAK_KEYS);
 #ifdef CONFIG_CRYPTO_TRESOR
 	if (strstr(driver, "tresor")) {
+#ifdef CONFIG_X86_64
 		/* continue tests so we can see breakage */
 		if (strstr(driver, "xts") && vec->klen > 32) {
 			pr_info("alg: skcipher: vec->klen=%d for %s is skipped and unsupported.", vec->klen, driver);
 			return 0;
 		}
+#endif
 
 		pr_info("alg: skcipher: testing: vec->klen=%d for %s.  enc=%d.", vec->klen, driver, enc);
 
 		tresor_setkey(vec->key);
+#ifdef CONFIG_X86_64
 		if (strstr(driver, "xts"))
 			tresor_setkey_xts_tweak(vec->key + vec->klen/2);
+#endif
 	}
 #endif
 	err = crypto_skcipher_setkey(tfm, vec->key, vec->klen);
@@ -5182,6 +5186,7 @@ static const struct alg_test_desc alg_te
 		}
 	}, {
 #ifdef CONFIG_CRYPTO_TRESOR
+#ifdef CONFIG_X86_64
 		.alg = "xts(tresor)",
 		.generic_driver = "xts(ecb(aes-generic))",
 		.test = alg_test_skcipher,
@@ -5191,6 +5196,7 @@ static const struct alg_test_desc alg_te
 		}
 	}, {
 #endif
+#endif
 		.alg = "xts(twofish)",
 		.generic_driver = "xts(ecb(twofish-generic))",
 		.test = alg_test_skcipher,
