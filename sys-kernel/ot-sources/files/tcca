#!/bin/bash
#
# Copyright (c) 2023 Orson Teodoro <orsonteodoro@hotmail.com>.  All rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

TRIPLE_ID=$(cat /proc/version | cut -f 3 -d " ")
EXTRAVERSION="${TRIPLE_ID%-*}"
EXTRAVERSION="${EXTRAVERSION#*-}"
PV="${TRIPLE_ID%%-*}"
ARCH="${TRIPLE_ID##*-}"
if [[ -e /etc/tcca-${PV}-${EXTRAVERSION}-${ARCH}.conf ]] ; then
	source /etc/tcca-${PV}-${EXTRAVERSION}-${ARCH}.conf
fi

INTERNAL_PING_IP_ADDR=${INTERNAL_PING_IP_ADDR:-"192.168.1.254"}
EXTERNAL_PING_IP_ADDR=${EXTERNAL_PING_IP_ADDR:-"kernel.org"}
SAMPLE_SIZE="30" # Standard
PERCENTILE="68" # This is within 1 standard deviation, pruning outliers or junk results.

CCA=(
	bbr
	bbr2
	bbr3
	bic
	cdg
	cubic
	dctcp
	highspeed
	htcp
	hybla
	illinois
	lp
	nv
	pcc
	reno
	scalable
	vegas
	vino
	westwood
	yeah
)

# TCCA - TCP Congestion Control Algorithm
# Client
TCCA_BGDL="${TCCA_BGDL:-lp}"
TCCA_BROADCAST_HOME="${TCCA_BROADCAST_HOME:-bbr}"
TCCA_BROADCAST_MOBILE="${TCCA_BROADCAST_MOBILE:-bbr}"
TCCA_DISTCC="${TCCA_DISTCC:-vegas}"
TCCA_FILE="${TCCA_FILE:-cubic}"
TCCA_GAMING="${TCCA_GAMING:-vegas}"
TCCA_GREEN="${TCCA_GREEN:-bbr}"
TCCA_MUSIC="${TCCA_MUSIC:-bbr}"
TCCA_P2P="${TCCA_P2P:-cubic}"
TCCA_PODCAST="${TCCA_PODCAST:-bbr}"
TCCA_PODCAST_UPLOAD="${TCCA_PODCAST_UPLOAD:-cubic}"
TCCA_RESIL="${TCCA_RESIL:-bbr}"
TCCA_SOCIAL_GAME="${TCCA_SOCIAL_GAME:-vegas}"
TCCA_STREAMING="${TCCA_STREAMING:-bbr}"
TCCA_TORRENT="${TCCA_TORRENT:-cubic}"
TCCA_VIDEO_CHAT="${TCCA_VIDEO_CHAT:-bbr}"
TCCA_VIDEO_UPLOAD="${TCCA_VIDEO_UPLOAD:-cubic}"
TCCA_VOIP="${TCCA_VOIP:-bbr}"
TCCA_WWW="${TCCA_WWW:-vegas}"

# Home server
TCCA_HS_FAIR="${TCCA_HS_FAIR:-vegas}"
TCCA_HS_REALTIME="${TCCA_HS_REALTIME:-bbr}"
TCCA_HS_THROUGHPUT="${TCCA_HS_THROUGHPUT:-cubic}"

# Intra data center refined
TCCA_LCDC_FAIR="${TCCA_LCDC_FAIR:-dctcp}"
TCCA_LCDC_REALTIME="${TCCA_LCDC_THROUGHPUT:-bbr}"
TCCA_LCDC_THROUGHPUT="${TCCA_LCDC_THROUGHPUT:-dctcp}"
TCCA_MCDC_FAIR="${TCCA_MCDC_FAIR:-bbr}"
TCCA_MCDC_REALTIME="${TCCA_MCDC_THROUGHPUT:-bbr}"
TCCA_MCDC_THROUGHPUT="${TCCA_MCDC_THROUGHPUT:-dctcp}"
TCCA_HCDC_FAIR="${TCCA_HCDC_FAIR:-bbr}"
TCCA_HCDC_REALTIME="${TCCA_HCDC_THROUGHPUT:-bbr}"
TCCA_HCDC_THROUGHPUT="${TCCA_HCDC_THROUGHPUT:-dctcp}"
TCCA_UCDC_FAIR="${TCCA_HCDC_FAIR:-bbr}"
TCCA_UCDC_REALTIME="${TCCA_HCDC_THROUGHPUT:-bbr}"
TCCA_UCDC_THROUGHPUT="${TCCA_HCDC_THROUGHPUT:-dctcp}"

# General
TCCA_HIGH_BDP="${TCCA_HIGH_BDP:-cubic}"
TCCA_INTER_DC="${TCCA_INTER_DC:-illinois}"
TCCA_INTRA_DC="${TCCA_INTRA_DC:-dctcp}"
TCCA_MOBILE="${TCCA_MOBILE:-bbr}"
TCCA_SATELLITE="${TCCA_SATELLITE:-hybla}"
TCCA_WIRELESS="${TCCA_WIRELESS:-westwood}"

# This is for loading modules or TCP CC selection from non-root user.
# sudo is for command line only
# pkexec is for GUI desktop environments or command line
TCCA_ELEVATE_PRIV="${TCCA_ELEVATE_PRIV:-pkexec}" # Can be sudo, pkexec, polkit, root, none

MY_NAME=$(basename "$0")

ARGV=( $@ )
USE_CASE="${1}"
shift
PN="${1}"
shift
PN_ARGS=( $@ )

get_ccas() {
	local L=(
		$(cat /proc/sys/net/ipv*/tcp_allowed_congestion_control)
	)
	local cca
	pushd /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/ >/dev/null 2>&1
		local ccas=$(ls tcp_*.ko* | sed -e "s|.ko.*$||g" -e "s|tcp_||g")
		for cca in ${ccas[@]} ; do
			L+=( ${cca} )
		done
	popd >/dev/null 2>&1
	L=( $(echo "${L[@]}" | tr " " "\n" | sort | uniq) )
	echo ${L[@]}
}

print_help() {
echo
echo "${MY_NAME} - Helper script to setup the TCP Congestion Control Algorithm"
echo "for new connections for the kernel"
echo
echo "${MY_NAME} [cca|info|use-case]"
echo
echo "Client"
echo
echo "  bgdl - For background downloads"
echo "  broadcast-home - For live broadcasting from a home network"
echo "  broadcast-mobile - For live broadcasting from a mobile network"
echo "  distcc - For at home compile farm"
echo "  file - For downloading large files one at a time with the shortest completion time"
echo "  gaming - For gaming clients"
echo "  green - For the lowest energy consumption"
echo "  music - For music service"
echo "  p2p - For decentralized downloads"
echo "  podcast - For downloading podcasts"
echo "  podcast-upload - For podcast uploading"
echo "  resil - For incast +50% throughput drop mitigation"
echo "  social-game - For social gaming"
echo "  streaming - For streaming audio/video downloads"
echo "  torrent - For decentralized downloads"
echo "  video-chat - For audio/video chat"
echo "  video-upload - For video uploading"
echo "  voip - For voice over IP"
echo "  www - For web browsing"
echo
echo "Home server"
echo
echo "  hs-fair - For fair home server"
echo "  hs-realtime - For realtime home server"
echo "  hs-throughput - For throughput home server"
echo
echo "Intra datacenter refinement"
echo
echo "  lcdc-fair - For fair low capacity datacenter"
echo "  lcdc-realtime - For realtime low capacity datacenter"
echo "  lcdc-throughput - For throughput low capacity datacenter"
echo "  mcdc-fair - For fair mid capacity datacenter"
echo "  mcdc-realtime - For realtime mid capacity datacenter"
echo "  mcdc-throughput - For throughput mid capacity datacenter"
echo "  hcdc-fair - For fair high capacity datacenter"
echo "  hcdc-realtime - For realtime high capacity datacenter"
echo "  hcdc-throughput - For throughput high capacity datacenter"
echo "  ucdc-fair - For fair ultra capacity datacenter"
echo "  ucdc-realtime - For realtime ultra capacity datacenter"
echo "  ucdc-throughput - For throughput ultra capacity datacenter"
echo
echo "General cases"
echo
echo "  high-bdp - For high BDP networks"
echo "  inter-dc - For between datacenters"
echo "  intra-dc - For inside datacenters"
echo "  lte - For smartphone connections"
echo "  satellite - For satellite connections"
echo "  wireless - For wireless connections"
echo
echo "Footnote(s)"
echo
echo "  lcdc - low cap data center O(100) - university HPC/ML/DL"
echo "  mcdc - mid cap data center O(1,000) - university super computer"
echo "  hcdc - high cap data center O(10,000) - big tech"
echo "  ucdc - ultra cap data center O(100,000) - top 500 supercomputers"
echo "  fair - equal bandwidth"
echo "  realtime - low jitter, implies low latency"
echo "  throughput - maximizes link utilization"
echo
echo "Congestion Control Algorithms (CCAs):"
echo

	for cca in $(get_ccas) ; do
echo "  ${cca}"
	done

echo
echo "Info"
echo
echo "  help, --help - Print this help"
echo "  cca, status, --status - For the current TCP Congestion Control affecting newer connections"
echo "  internal-latency, --check-internal-latency - For internal ping report"
echo "  external-latency, --check-external-latency - For external ping report"
echo "  packet-loss, --check-packet-loss - For packet loss report"
echo "  tips, --tips - Print ways to improve hardware layer or application layer performance."
echo "  usage, --usage - Print usage instructions."
echo
echo "Environment variables"
echo
echo "INTERNAL_PING_IP_ADDR - Home router IP address for internal-latency test"
echo "EXTERNAL_PING_IP_ADDR - Any address on the Internet for external-latency test"
echo
}

print_tips() {
# Keep in sync with metadata.xml
echo -e "
      * It is recommended to fix physical layer and application layers issues
        as best as possible because they can impact the effectiveness/benefits
        of these Contestion Control Algorithms (CCAs).

      * Tips to improve wired throughput:
        1. Inspect the wire both on the ends and in the middle.  If any
           cuts, dents, loosening, or stretching are observed; the wire needs to
           be replaced.

      * Tips to improve WiFi throughput:
        1. Turn off all programs except emerge or the affected app.
           [This step is necessary only if the protocol or action does not
           support resume (e.g. git clone) or an improperly configured server
           that frequently drops connections.]
        2. Ensure that the antennas are not damaged.  Screw or replace the
           antenna.
        3. Ensure that the wireless router is positioned visibly in the open
           area or room.  If the site in question has thick walls (aka
           reinforced concrete), switch to wired or place the router visibly in
           the line of sight of the WiFi receiver.  Remove metallic obstacles
           in the line of sight to increase strength.
        4. Move the wireless closer to increase signal strength to gain access
           to the faster 5G mode.
        5. Fix all dropped packet issues.  If networkmanager causes dropped
           packets, use netifrc instead.  This may help unmask other sources of
           dropped packets or possibly router issues such as overheating,
           antenna damage, compromised firmware, an active DDOS attack.
           As mentioned in the table above a tiny percentage of dropped
           packets may cause a severe performance impact.
        6. Orient the antenna to achieve the lowest ping consistently with the
           wireless router.
        7. Switch the TCP Congestion Control to one with the highest average
           throughput (e.g. pcc).  For lossy poor quality connections, avoid
           cubic and illinois. [This step is only necessary for protocols
           or actions not supporting resume (e.g. git clone) or an improperly
           configured server that frequently drops connections.]
"
}

print_usage() {
# Keep in sync with metadata.xml
echo -e "
        Video while downloading in the background (Simple):
        1. close web browser
        2. tcca streaming
        3. play video on the web browser
        4. tcca bgdl
        5. emerge -fvuDN @world

        Video while downloading in the background (Advanced):
        1. close web browser
        2. tcca bbr
        3. play video on the web browser
        4. tcca lp
        5. emerge -fvuDN @world

        Benefits:  skipless/uninterrupted video playback with maximum bandwidth
        utilization for background downloads with met downstream bandwidth
        requirements for video and audio.  [If 8k video and small bandwidth, it
        will skip.]


        Low latency web browsing (simple):
        1. close web browser
        2. tcca www

        Low latency web browsing (advanced):
        1. close web browser
        2. tcca vegas

        Benefits:  images load faster in parallel and faster navigation through
        wikis.


        Single player browser games (simple)
        1. close web browser
        2. tcca file

        Single player browser games (advanced)
        1. close web browser
        2. tcca cubic

        Benefits:  high throughput for downloading the game and shorter wait
        time to play.

     - You can verify the TCP congestion control use per socket via \`ss -i\`.
"
}

unset TCCA_MAP
declare -A TCCA_MAP=(
	["bgdl"]="${TCCA_BGDL}"
	["broadcast"]="${TCCA_BROADCAST_HOME}"
	["broadcast-home"]="${TCCA_BROADCAST_HOME}"
	["broadcast-mobile"]="${TCCA_BROADCAST_MOBILE}"
	["distcc"]="${TCCA_DISTCC}"
	["file"]="${TCCA_FILE}"
	["gaming"]="${TCCA_GAMING}"
	["green"]="${TCCA_GREEN}"
	["music"]="${TCCA_MUSIC}"
	["p2p"]="${TCCA_P2P}"
	["podcast"]="${TCCA_PODCAST}"
	["podcast-upload"]="${TCCA_PODCAST_UPLOAD}"
	["social-game"]="${TCCA_SOCIAL_GAME}"
	["streaming"]="${TCCA_STREAMING}"
	["torrent"]="${TCCA_TORRENT}"
	["video-chat"]="${TCCA_VIDEO_CHAT}"
	["video-upload"]="${TCCA_VIDEO_UPLOAD}"
	["voip"]="${TCCA_VOIP}"
	["www"]="${TCCA_WWW}"

	["hs-fair"]="${TCCA_HS_FAIR}"
	["hs-realtime"]="${TCCA_HS_REALTIME}"
	["hs-throughput"]="${TCCA_HS_THROUGHPUT}"

	["lcdc-fair"]="${TCCA_LCDC_FAIR}"
	["lcdc-realtime"]="${TCCA_LCDC_REALTIME}"
	["lcdc-throughput"]="${TCCA_LCDC_THROUGHPUT}"
	["mcdc-fair"]="${TCCA_MCDC_FAIR}"
	["mcdc-realtime"]="${TCCA_MCDC_REALTIME}"
	["mcdc-throughput"]="${TCCA_MCDC_THROUGHPUT}"
	["hcdc-fair"]="${TCCA_HCDC_FAIR}"
	["hcdc-realtime"]="${TCCA_HCDC_REALTIME}"
	["hcdc-throughput"]="${TCCA_HCDC_THROUGHPUT}"
	["ucdc-fair"]="${TCCA_UCDC_FAIR}"
	["ucdc-realtime"]="${TCCA_UCDC_REALTIME}"
	["ucdc-throughput"]="${TCCA_UCDC_THROUGHPUT}"

	["high-bdp"]="${TCCA_HIGH_BDP}"
	["inter-dc"]="${TCCA_INTER_DC}"
	["intra-dc"]="${TCCA_INTRA_DC}"
	["satellite"]="${TCCA_SATELLITE}"
	["wireless"]="${TCCA_WIRELESS}"
)

_check_numpy() {
	if ! which python >/dev/null 2>&1 ; then
echo "Install the python package."
		exit 1
	fi
	local script=$(cat <<EOF
import sys
import traceback
try:
  import numpy as np
  print(np.__version__)
except Exception:
  traceback.print_exc()
  sys.exit(1)
sys.exit(0)
EOF
)
	python -c "${script}" >/dev/null 2>&1
	if (( $? != 0 )) ; then
		local python_version=$(python --version | cut -f 2 -d " ")
echo "Missing dependency.  You must install the dev-python/numpy package for Python ${python_version}."
		exit 1
	fi
}

# Primarily to check if production possibilities is maximized in the latency side.
check_internal_ping() {
echo "Checking internal ping:"
	if ! which ping >/dev/null 2>&1 ; then
echo "Install ping from the net-misc/iputils package."
		exit 1
	fi
	_check_numpy

	local ping_output=$(ping -c ${SAMPLE_SIZE} ${INTERNAL_PING_IP_ADDR} 2>&1)
	if [[ -z "${ping_output}" ]] ; then
echo "Cannot ping.  Check if your connection is online or set INTERNAL_PING_IP_ADDR."
		exit 1
	fi
echo -e "${ping_output}"
	local pings=$(echo -e "${ping_output}" \
		| grep -E -o -e "time=[0-9.]+" \
		| cut -f 2 -d "=" \
		| tr " " "\n" \
		| sort -g \
		| tr "\n" " " \
		| sed -e "s| |,|g" \
		| sed -e "s|,$||g")
	local script=$(cat <<EOF
import numpy as np
a = np.array([${pings}])
p = np.percentile(a, ${PERCENTILE})
print(p)
EOF
)
	local avg_ping=$(python -c "${script}")
echo "Address:  ${INTERNAL_PING_IP_ADDR}"
echo "Data:  ${pings}"
echo "Percentile:  ${PERCENTILE}"
echo "Sample size:  ${SAMPLE_SIZE}"
echo "Average ping:  ${avg_ping}"
echo
echo "Idealistically, the ping data elements should be in the same order of"
echo "magitude to minimize jitter."
echo
	local has_jitter=0
	local ping
	for ping in $(echo ${pings} | tr "," " ") ; do
		local jitter=$(python -c "print(${ping} - ${avg_ping})")
		if (( "${jitter%.*}" > 60 )) ; then
echo "ping - ${ping} ms, jitter - ${jitter} ms"
			has_jitter=1
		fi
	done

	if (( ${has_jitter} == 1 )) ; then
# Jitter is approximately RTT/2 > 30ms.
echo
echo "Detected jitter > 60 ms.  Your viewers may experience jitter or audio"
echo "distortion.  Switching to a low latency congestion control may mitigate"
echo "against jitter."
echo
	fi

# Check if in the same order of magnitude or reasonable range
	local is_unstable=0
	local digits_avg=$(python -c "print(len(str(${avg_ping%.*})))")
	for ping in $(echo ${pings} | tr "," " ") ; do
		local digits_ping=$(python -c "print(len(str(${ping%.*})))")
		if (( ${digits_avg} != ${digits_ping} )) ; then
			if (( ${avg_ping%.*} >= 400 )) ; then
# Poor quality connection
echo "ping - ${ping} ms, digits = ${digits_ping}"
				is_unstable=1
			elif (( ${digits_avg} >= 4 )) ; then
echo "ping - ${ping} ms, digits = ${digits_ping}"
				is_unstable=1
			elif (( ${digits_avg} == 3 && ${ping%.*} >= 1000 )) ; then
echo "ping - ${ping} ms, digits = ${digits_ping}"
				is_unstable=1
			elif (( ${digits_avg} == 2 && ${ping%.*} >= 100 )) ; then
echo "ping - ${ping} ms, digits = ${digits_ping}"
				is_unstable=1
			elif (( ${digits_avg} == 1 && ${ping%.*} >= 100 )) ; then
echo "ping - ${ping} ms, digits = ${digits_ping}"
				is_unstable=1
			fi
		fi
	done
	if (( ${is_unstable} == 1 )) ; then
echo
echo "Detected unstable connection."
echo
echo "Average ping:  ${avg_ping}"
echo "Average ping digits:  ${digits_avg}"
echo
	fi
	if (( ${avg_ping%.*} >= 100 )) ; then
echo "An average ping of 100+ ms is unsual for a LAN."
	fi
echo
echo "Closing all background downloading apps may improve the results."
echo
}

# Primarily to check if gaming conneciton performance meets gaming community standards.
check_external_ping() {
echo "Checking external ping:"
	if ! which ping >/dev/null 2>&1 ; then
echo "Install ping from the net-misc/iputils package."
		exit 1
	fi
	_check_numpy
	local ping_output=$(ping -c ${SAMPLE_SIZE} ${EXTERNAL_PING_IP_ADDR} 2>&1)
	if [[ -z "${ping_output}" ]] ; then
echo "Cannot ping.  Check if your connection is online or set EXTERNAL_PING_IP_ADDR."
		exit 1
	fi
echo -e "${ping_output}"
	local pings=$(echo -e "${ping_output}" \
		| grep -E -o -e "time=[0-9.]+" \
		| cut -f 2 -d "=" \
		| tr " " "\n" \
		| sort -g \
		| tr "\n" " " \
		| sed -e "s| |,|g" \
		| sed -e "s|,$||g")
	local script=$(cat <<EOF
import numpy as np
a = np.array([${pings}])
p = np.percentile(a, ${PERCENTILE})
print(p)
EOF
)
	local avg_ping=$(python -c "${script}")
echo "Address:  ${EXTERNAL_PING_IP_ADDR}"
echo "Data:  ${pings}"
echo "Percentile:  ${PERCENTILE}"
echo "Sample size:  ${SAMPLE_SIZE}"
echo "Average ping:  ${avg_ping}"
	if (( ${avg_ping%.*} > 300 )) ; then
echo "A ping above 300 is considered unplayable for gaming."
	elif (( ${avg_ping%.*} > 160 )) ; then
echo "A ping above 160 is considered laggy for gaming."
	elif (( ${avg_ping%.*} >= 100 )) ; then
# 3 digit ping is the budget gamer 1990s aesthetic.
echo "A ping above 100 meets casual gaming standards."
	elif (( ${avg_ping%.*} > 60 && ${avg_ping%.*} < 100 )) ; then
# 2 digit ping is 2000s, 2010s, 2020s gaming aesthetic.
echo "Your ping is considered acceptable for high end content gaming."
	elif (( ${avg_ping%.*} >= 10 ${avg_ping%.*} <= 60 )) ; then
# 2 digit ping, but never distorts in live gamer streams
echo "Your ping meets the current standard as a live gamer streamer celeb."
	elif (( ${avg_ping%.*} < 10 )) ; then
# 1 digit ping or less is the future gaming aesthetic
echo "Your ping exceeds the current gaming aesthetic."
	fi
	if (( ${avg_ping%.*} > 60 )) ; then
echo "A ping above 60 ms may cause voice distortion during VoIP calls or live streaming."
echo "A ping above 60 ms may affect teamplay success in gaming."
	fi
}

check_packet_loss() {
	echo "Gathering for packet loss report..."
	local n=$(cat /sys/class/net/*/statistics/*dropped* | wc -l)
	if [[ -e "/sys/class/net" && ${n} -ge 1 ]] ; then
		local n0=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")
		sleep 1
		local n1=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")

		sleep 1
		local n2=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")
		sleep 1
		local n3=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")
		sleep 1
		local n4=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")
		sleep 1
		local n5=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")

		[[ -z "${n0}" ]] && n0=0
		[[ -z "${n1}" ]] && n1=0
		[[ -z "${n2}" ]] && n2=0
		[[ -z "${n3}" ]] && n3=0
		[[ -z "${n4}" ]] && n3=0
		[[ -z "${n5}" ]] && n3=0
		local d0=$((${n1} - ${n0}))
		local d1=$((${n2} - ${n1}))
		local d2=$((${n3} - ${n2}))
		local d3=$((${n4} - ${n3}))
		local d4=$((${n5} - ${n4}))
echo "Dropped packets per second:  ${d0} (t=1), ${d1} (t=2), ${d2} (t=3), ${d3} (t=4), ${d4} (t=5)"
		if (( \
			   ${d0} == 1 \
			|| ${d1} == 1 \
			|| ${d2} == 1 \
			|| ${d3} == 1 \
			|| ${d4} == 1 \
		)) ; then
echo
echo "Detected 1 dropped packet per second which concerning and indicative of possible thoughput issues."
echo "Consult the packet loss troubleshoot guides to resolve the issue."
echo
		elif (( \
			   ( ${d0} > 1 && ${d0} < 10 ) \
			|| ( ${d1} > 1 && ${d1} < 10 ) \
			|| ( ${d2} > 1 && ${d2} < 10 ) \
			|| ( ${d3} > 1 && ${d3} < 10 ) \
			|| ( ${d4} > 1 && ${d4} < 10 ) \
		)) ; then
echo
echo "Detected <10 dropped packets per second which is unusual and indicative of throughput issues."
echo "Consult the packet loss troubleshoot guides to resolve the issue."
echo
		elif (( \
			   ${d0} >= 10 \
			|| ${d1} >= 10 \
			|| ${d2} >= 10 \
			|| ${d3} >= 10 \
			|| ${d4} >= 10 \
		)) ; then
echo
echo "Detected >=10 dropped packets per second which is indicative of serious throughput issues."
echo "Consult the packet loss troubleshoot guides to resolve the issue."
echo
		else
echo "No packet loss experienced."
		fi
		if (( \
			   ${d0} >= 1 \
			&& ${d1} >= 1 \
			&& ${d2} >= 1 \
			&& ${d3} >= 1 \
			&& ${d4} >= 1 \
		)) ; then
echo
echo "Detected consecutive dropped packets in 5 seconds which is unusual."
echo "Consult the packet loss troubleshoot guides to resolve the issue and ensure the router is not compromised."
echo "Switching from net-misc/networkmanager to net-misc/netifrc may fix the problem."
echo
		fi
	fi
}

print_status() {
	echo -e $(cat /proc/sys/net/ipv4/tcp_congestion_control)
}

process_options() {
	local x
	for x in ${ARGV[@]} ; do
		if [[ "${x}" == "--help" || "${x}" == "help" ]] ; then
			print_help
			exit 0
		elif [[ "${x}" == "--tips" || "${x}" == "tips" ]] ; then
			print_tips
			exit 0
		elif [[ "${x}" == "--usage" || "${x}" == "usage" || "${x}" == "--instructions" || "${x}" == "instructions" ]] ; then
			print_usage
			exit 0
		elif [[ "${x}" == "--status" || "${x}" == "status" || "${x}" == "cca" ]] ; then
			print_status
			exit 0
		elif [[ "${x}" == "--check-packet-loss" || "${x}" == "packet-loss" ]] ; then
			check_packet_loss
			exit 0
		elif [[ "${x}" == "--check-internal-latency" || "${x}" == "internal-latency" ]] ; then
			check_internal_ping
			exit 0
		elif [[ "${x}" == "--check-external-latency" || "${x}" == "external-latency" ]] ; then
			check_external_ping
			exit 0
		else
			local cca
			for cca in ${CCA[@]} ; do
				if [[ "${x}" == "${cca}" ]] ; then
					set_tcca "${x}"
					exit 0
				fi
			done
			print_help
			exit 1
		fi
	done
}

check_dependencies() {
	if [[ -n "${DISPLAY}" ]] && ! which pkexec >/dev/null 2>&1 ; then
echo "You must install polkit"
		exit 1
	fi
	if [[ -z "${USE_CASE}" ]] ; then
echo "You must choose a use case."
		print_help
		exit 1
	else
echo -e "USE_CASE:\t\t\t${USE_CASE}"
	fi
}

_set_tcca_polkit() {
	local alg="${1}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* >/dev/null 2>&1 ; then
echo "Loading kernel module for ${alg}"
		pkexec modprobe tcp_${alg}
	fi
echo "Setting TCP Congestion Control algorithm"
	echo "${alg}" \
		| pkexec dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

_set_tcca_sudo() {
	local alg="${1}"
	echo -e "TCP_CONGESTION_CONTROL_ALG:\t${alg}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* >/dev/null 2>&1 ; then
echo "Loading kernel module for ${alg}"
		sudo modprobe tcp_${alg}
	fi
echo "Setting TCP Congestion Control algorithm"
	echo "${alg}" \
		| sudo dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

_set_tcca_root() {
	local alg="${1}"
	echo -e "TCP_CONGESTION_CONTROL_ALG:\t${alg}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* >/dev/null 2>&1 ; then
echo "Loading kernel module for ${alg}"
		modprobe tcp_${alg}
	fi
echo "Setting TCP Congestion Control algorithm"
	echo "${alg}" \
		| dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

set_tcca() {
	local alg="${1}"
	if [[ "${alg,,}" == "bbr3" ]] ; then
		alg="bbr"
	fi
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit") ]] ; then
		_set_tcca_polkit "${alg}"
	elif [[ "${TCCA_ELEVATE_PRIV}" == "sudo" ]] ; then
		_set_tcca_sudo "${alg}"
	else
		_set_tcca_root "${alg}"
	fi
}

select_tcca() {
	local key="${USE_CASE,,}"
	if [[ "${!TCCA_MAP[@]}" =~ "${key}" ]] ; then
		set_tcca ${TCCA_MAP[${key}]}
	else
echo "${key} does not exist."
echo "Valid values: ${!TCCA_MAP[@]}"
		exit 1
	fi
}

run_pn() {
	if [[ -n "${PN}" ]] ; then
echo "Running ${PN} ${PN_ARGS[@]}"
		"${PN}" "${PN_ARGS[@]}"
	fi
}

main() {
	process_options
	check_dependencies
	select_tcca
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit"|"sudo") ]] ; then
		run_pn
	fi
}

main
