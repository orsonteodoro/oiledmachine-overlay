#!/bin/bash
#
# Copyright (c) 2023 Orson Teodoro <orsonteodoro@hotmail.com>.  All rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

TRIPLE_ID=$(cat /proc/version | cut -f 3 -d " ")
EXTRAVERSION="${TRIPLE_ID%-*}"
EXTRAVERSION="${EXTRAVERSION#*-}"
PV="${TRIPLE_ID%%-*}"
ARCH="${TRIPLE_ID##*-}"
if [[ -e /etc/tcca-${PV}-${EXTRAVERSION}-${ARCH}.conf ]] ; then
	source /etc/tcca-${PV}-${EXTRAVERSION}-${ARCH}.conf
fi

CCA=(
	bbr
	bbr2
	bic
	cdg
	cubic
	dctcp
	highspeed
	htcp
	hybla
	illinois
	lp
	nv
	pcc
	reno
	scalable
	vegas
	vino
	westwood
	yeah
)

# TCCA - TCP Congestion Control Algorithm
# Client
TCCA_BGDL="${TCCA_BGDL:-lp}"
TCCA_BROADCAST="${TCCA_BROADCAST:-bbr}"
TCCA_DISTCC="${TCCA_DISTCC:-vegas}"
TCCA_FTP="${TCCA_FTP:-cubic}"
TCCA_GAMING="${TCCA_GAMING:-vegas}"
TCCA_GREEN="${TCCA_GREEN:-bbr}"
TCCA_MUSIC="${TCCA_MUSIC:-bbr}"
TCCA_P2P="${TCCA_P2P:-cubic}"
TCCA_PODCAST="${TCCA_PODCAST:-bbr}"
TCCA_PODCAST_UPLOAD="${TCCA_PODCAST_UPLOAD:-cubic}"
TCCA_SOCIAL_GAME="${TCCA_SOCIAL_GAME:-vegas}"
TCCA_STREAMING="${TCCA_STREAMING:-bbr}"
TCCA_TORRENT="${TCCA_TORRENT:-cubic}"
TCCA_VIDEO_CHAT="${TCCA_VIDEO_CHAT:-bbr}"
TCCA_VIDEO_UPLOAD="${TCCA_VIDEO_UPLOAD:-cubic}"
TCCA_VOIP="${TCCA_VOIP:-bbr}"
TCCA_WWW="${TCCA_WWW:-vegas}"

# Home server
TCCA_HS_FAIR="${TCCA_HS_FAIR:-vegas}"
TCCA_HS_REALTIME="${TCCA_HS_REALTIME:-bbr}"
TCCA_HS_THROUGHPUT="${TCCA_HS_THROUGHPUT:-cubic}"

# Intra data center refined
TCCA_LCDC_FAIR="${TCCA_LCDC_FAIR:-dctcp}"
TCCA_LCDC_REALTIME="${TCCA_LCDC_THROUGHPUT:-bbr}"
TCCA_LCDC_THROUGHPUT="${TCCA_LCDC_THROUGHPUT:-dctcp}"
TCCA_MCDC_FAIR="${TCCA_MCDC_FAIR:-bbr}"
TCCA_MCDC_REALTIME="${TCCA_MCDC_THROUGHPUT:-bbr}"
TCCA_MCDC_THROUGHPUT="${TCCA_MCDC_THROUGHPUT:-dctcp}"
TCCA_HCDC_FAIR="${TCCA_HCDC_FAIR:-bbr}"
TCCA_HCDC_REALTIME="${TCCA_HCDC_THROUGHPUT:-bbr}"
TCCA_HCDC_THROUGHPUT="${TCCA_HCDC_THROUGHPUT:-dctcp}"
TCCA_UCDC_FAIR="${TCCA_HCDC_FAIR:-bbr}"
TCCA_UCDC_REALTIME="${TCCA_HCDC_THROUGHPUT:-bbr}"
TCCA_UCDC_THROUGHPUT="${TCCA_HCDC_THROUGHPUT:-dctcp}"

# General
TCCA_HIGH_BDP="${TCCA_HIGH_BDP:-cubic}"
TCCA_INTER_DC="${TCCA_INTER_DC:-illinois}"
TCCA_INTRA_DC="${TCCA_INTRA_DC:-dctcp}"
TCCA_SATELLITE="${TCCA_SATELLITE:-hybla}"
TCCA_WIRELESS="${TCCA_WIRELESS:-westwood}"

# This is for loading modules or TCP CC selection from non-root user.
# sudo is for command line only
# pkexec is for GUI desktop environments or command line
TCCA_ELEVATE_PRIV="${TCCA_ELEVATE_PRIV:-pkexec}" # Can be sudo, pkexec, polkit, root, none

MY_NAME=$(basename "$0")

ARGV=( $@ )
USE_CASE="${1}"
shift
PN="${1}"
shift
PN_ARGS=( $@ )

print_help() {
echo
echo "${MY_NAME} - Helper script to setup the TCP Congestion Control Algorithm"
echo "for new connections for the kernel"
echo
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit"|"sudo") ]] ; then
echo "${MY_NAME} [cca|use-case|menu-item] [cmd] [args]"
	else
echo "${MY_NAME} [cca|use-case|menu-item]"
	fi
echo
echo "Client"
echo
echo "  bgdl - For background downloads"
echo "  broadcast - For live broadcasting"
echo "  distcc - For at home compile farm"
echo "  ftp - For file downloads"
echo "  gaming - For gaming clients"
echo "  green - For the lowest energy consumption"
echo "  music - For music service"
echo "  p2p - For decentralized downloads"
echo "  podcast - For downloading podcasts"
echo "  podcast-upload - For podcast uploading"
echo "  social-game - For social gaming"
echo "  streaming - For streaming audio/video downloads"
echo "  torrent - For decentralized downloads"
echo "  video-chat - For audio/video chat"
echo "  video-upload - For video uploading"
echo "  voip - For voice over IP"
echo "  www - For web browsing"
echo
echo "Home server"
echo
echo "  hs-fair - For fair home server"
echo "  hs-realtime - For realtime home server"
echo "  hs-throughput - For throughput home server"
echo
echo "Intra datacenter refinement"
echo
echo "  lcdc-fair - For fair low capacity datacenter"
echo "  lcdc-realtime - For realtime low capacity datacenter"
echo "  lcdc-throughput - For throughput low capacity datacenter"
echo "  mcdc-fair - For fair mid capacity datacenter"
echo "  mcdc-realtime - For realtime mid capacity datacenter"
echo "  mcdc-throughput - For throughput mid capacity datacenter"
echo "  hcdc-fair - For fair high capacity datacenter"
echo "  hcdc-realtime - For realtime high capacity datacenter"
echo "  hcdc-throughput - For throughput high capacity datacenter"
echo "  ucdc-fair - For fair ultra capacity datacenter"
echo "  ucdc-realtime - For realtime ultra capacity datacenter"
echo "  ucdc-throughput - For throughput ultra capacity datacenter"
echo
echo "General cases"
echo
echo "  high-bdp - For high BDP networks"
echo "  inter-dc - For between datacenters"
echo "  intra-dc - For inside datacenters"
echo "  satellite - For satellite connections"
echo "  wireless - For wireless connections"
echo
echo "Footnote(s)"
echo
echo "  lcdc - low cap data center O(100) - university HPC/ML/DL"
echo "  mcdc - mid cap data center O(1,000) - university super computer"
echo "  hcdc - high cap data center O(10,000) - big tech"
echo "  ucdc - ultra cap data center O(100,000) - top 500 supercomputers"
echo "  fair - equal bandwidth"
echo "  realtime - low jitter, implies low latency"
echo "  throughput - maximizes link utilization"
echo
echo "Menu item"
echo
echo "  --help - Print this help"
echo "  --status - For printing TCP Congestion Control details"
echo "  --use=<alg> - For using the algorithm directly"
echo "  --set=<alg> - For using the algorithm directly"
echo
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit"|"sudo") ]] ; then
echo "[cmd]    - program to run (optional)"
echo "[args]   - list of arguments to pass to the program (optional)"
echo
	fi
}

unset TCCA_MAP
declare -A TCCA_MAP=(
	["bgdl"]="${TCCA_BGDL}"
	["broadcast"]="${TCCA_BROADCAST}"
	["distcc"]="${TCCA_DISTCC}"
	["ftp"]="${TCCA_FTP}"
	["gaming"]="${TCCA_GAMING}"
	["green"]="${TCCA_GREEN}"
	["music"]="${TCCA_MUSIC}"
	["p2p"]="${TCCA_P2P}"
	["podcast"]="${TCCA_PODCAST}"
	["podcast-upload"]="${TCCA_PODCAST_UPLOAD}"
	["social-game"]="${TCCA_SOCIAL_GAME}"
	["streaming"]="${TCCA_STREAMING}"
	["torrent"]="${TCCA_TORRENT}"
	["video-chat"]="${TCCA_VIDEO_CHAT}"
	["video-upload"]="${TCCA_VIDEO_UPLOAD}"
	["voip"]="${TCCA_VOIP}"
	["www"]="${TCCA_WWW}"

	["hs-fair"]="${TCCA_HS_FAIR}"
	["hs-realtime"]="${TCCA_HS_REALTIME}"
	["hs-throughput"]="${TCCA_HS_THROUGHPUT}"

	["lcdc-fair"]="${TCCA_LCDC_FAIR}"
	["lcdc-realtime"]="${TCCA_LCDC_REALTIME}"
	["lcdc-throughput"]="${TCCA_LCDC_THROUGHPUT}"
	["mcdc-fair"]="${TCCA_MCDC_FAIR}"
	["mcdc-realtime"]="${TCCA_MCDC_REALTIME}"
	["mcdc-throughput"]="${TCCA_MCDC_THROUGHPUT}"
	["hcdc-fair"]="${TCCA_HCDC_FAIR}"
	["hcdc-realtime"]="${TCCA_HCDC_REALTIME}"
	["hcdc-throughput"]="${TCCA_HCDC_THROUGHPUT}"
	["ucdc-fair"]="${TCCA_UCDC_FAIR}"
	["ucdc-realtime"]="${TCCA_UCDC_REALTIME}"
	["ucdc-throughput"]="${TCCA_UCDC_THROUGHPUT}"

	["high-bdp"]="${TCCA_HIGH_BDP}"
	["inter-dc"]="${TCCA_INTER_DC}"
	["intra-dc"]="${TCCA_INTRA_DC}"
	["satellite"]="${TCCA_SATELLITE}"
	["wireless"]="${TCCA_WIRELESS}"
)

print_status() {
echo
echo "The Current TCP Congestion Control algorithm for new connections:"
	echo -e "\t"$(cat /proc/sys/net/ipv4/tcp_congestion_control)
echo
echo "Allowed algorithms:"
	echo -e "\t"$(cat /proc/sys/net/ipv4/tcp_available_congestion_control)
echo
echo "Available kernel modules:"
	pushd /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/ >/dev/null 2>&1
		echo -e "\t"$(ls tcp_*.ko* | sed -e "s|.ko.*$||g")
	popd >/dev/null 2>&1
echo
	local n=$(cat /sys/class/net/*/statistics/*dropped* | wc -l)
	if [[ -e "/sys/class/net" && ${n} -ge 1 ]] ; then
		local n0=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")
		sleep 1
		local n1=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")

		sleep 1
		local n2=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")
		sleep 1
		local n3=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")
		sleep 1
		local n4=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")
		sleep 1
		local n5=$(cat /sys/class/net/*/statistics/*dropped* \
			| sort \
			| tail -n 1 \
			| cut -f 2 -d " ")

		[[ -z "${n0}" ]] && n0=0
		[[ -z "${n1}" ]] && n1=0
		[[ -z "${n2}" ]] && n2=0
		[[ -z "${n3}" ]] && n3=0
		[[ -z "${n4}" ]] && n3=0
		[[ -z "${n5}" ]] && n3=0
		local d0=$((${n1} - ${n0}))
		local d1=$((${n2} - ${n1}))
		local d2=$((${n3} - ${n2}))
		local d3=$((${n4} - ${n3}))
		local d4=$((${n5} - ${n4}))
echo "Dropped packets per second:  ${d0} (t=1), ${d1} (t=2), ${d2} (t=3), ${d3} (t=4), ${d4} (t=5)"
		if (( ${d0} == 1 || ${d1} == 1 )) ; then
echo
echo "Detected 1 dropped packet per second which concerning and indicative of possible thoughput issues."
echo "Consult the packet loss troubleshoot guides to resolve the issue."
echo
		elif (( ( ${d0} > 1 && ${d0} < 10 ) || ( ${d1} > 1 && ${d1} < 10 ) )) ; then
echo
echo "Detected <10 dropped packets per second which is unusual and indicative of throughput issues."
echo "Consult the packet loss troubleshoot guides to resolve the issue."
echo
		elif (( ${d0} >= 10 || ${d1} >= 10 )) ; then
echo
echo "Detected >=10 dropped packets per second which is indicative of serious throughput issues."
echo "Consult the packet loss troubleshoot guides to resolve the issue."
echo
		fi
		if (( ${d0} >= 1 && ${d1} >= 1 && ${d2} >= 1 && ${d3} >= 1 && ${d4} >= 1 )) ; then
echo
echo "Detected consecutive dropped packets in 5 seconds which is unusual."
echo "Consult the packet loss troubleshoot guides to resolve the issue and ensure the router is not compromised."
echo "Switching from net-misc/networkmanager to net-misc/netifrc may fix the problem."
echo
		fi
	fi
}

process_options() {
	local x
	for x in ${ARGV[@]} ; do
		if [[ "${x}" == "--help" ]] ; then
			print_help
			exit 0
		elif [[ "${x}" == "--status" ]] ; then
			print_status
			exit 0
		elif [[ "${x}" =~ ^"--use=" ]] ; then
			set_tcca $(echo "${x}" | cut -f 2 -d "=" | sed -e "s|^tcp_||g")
			exit 0
		elif [[ "${x}" =~ ^"--set=" ]] ; then
			set_tcca $(echo "${x}" | cut -f 2 -d "=" | sed -e "s|^tcp_||g")
			exit 0
		else
			local cca
			for cca in ${CCA[@]} ; do
				if [[ "${x}" == "${cca}" ]] ; then
					set_tcca "${x}"
					exit 0
				fi
			done
			print_help
			exit 1
		fi
	done
}

check_dependencies() {
	if [[ -n "${DISPLAY}" ]] && ! which pkexec >/dev/null 2>&1 ; then
echo "You must install polkit"
		exit 1
	fi
	if [[ -z "${USE_CASE}" ]] ; then
echo "You must choose a use case.  See ${MY_NAME} --help."
		exit 1
	else
echo -e "USE_CASE:\t\t\t${USE_CASE}"
	fi
}

_set_tcca_polkit() {
	local alg="${1}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* >/dev/null 2>&1 ; then
echo "Loading kernel module for ${alg}"
		pkexec modprobe tcp_${alg}
	fi
echo "Setting TCP Congestion Control algorithm"
	echo "${alg}" \
		| pkexec dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

_set_tcca_sudo() {
	local alg="${1}"
	echo -e "TCP_CONGESTION_CONTROL_ALG:\t${alg}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* >/dev/null 2>&1 ; then
echo "Loading kernel module for ${alg}"
		sudo modprobe tcp_${alg}
	fi
echo "Setting TCP Congestion Control algorithm"
	echo "${alg}" \
		| sudo dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

_set_tcca_root() {
	local alg="${1}"
	echo -e "TCP_CONGESTION_CONTROL_ALG:\t${alg}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* >/dev/null 2>&1 ; then
echo "Loading kernel module for ${alg}"
		modprobe tcp_${alg}
	fi
echo "Setting TCP Congestion Control algorithm"
	echo "${alg}" \
		| dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

set_tcca() {
	local alg="${1}"
	if [[ "${alg,,}" == "bbr3" ]] ; then
		alg="bbr"
	fi
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit") ]] ; then
		_set_tcca_polkit "${alg}"
	elif [[ "${TCCA_ELEVATE_PRIV}" == "sudo" ]] ; then
		_set_tcca_sudo "${alg}"
	else
		_set_tcca_root "${alg}"
	fi
}

select_tcca() {
	local key="${USE_CASE,,}"
	if [[ "${!TCCA_MAP[@]}" =~ "${key}" ]] ; then
		set_tcca ${TCCA_MAP[${key}]}
	else
echo "${key} does not exist."
echo "Valid values: ${!TCCA_MAP[@]}"
		exit 1
	fi
}

run_pn() {
	if [[ -n "${PN}" ]] ; then
echo "Running ${PN} ${PN_ARGS[@]}"
		"${PN}" "${PN_ARGS[@]}"
	fi
}

main() {
	process_options
	check_dependencies
	select_tcca
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit"|"sudo") ]] ; then
		run_pn
	fi
}

main
