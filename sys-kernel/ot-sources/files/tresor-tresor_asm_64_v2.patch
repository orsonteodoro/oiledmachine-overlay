Patch Author: Orson Teodoro <orsonteodoro@hotmail.com>
v2: Merge tresor-fix-addressing-mode-64-bit-index.patch into this.
    Used __x86_64__.
    Updated comments.
v1.1: Created tresor-fix-addressing-mode-64-bit-index.patch.
      Updated with 64 bit indexes.
v1: Update prolog, epilog, tresor_set_key.
----
--- a/arch/x86/crypto/tresor_asm.S	2020-06-30 21:14:38.462355830 -0700
+++ b/arch/x86/crypto/tresor_asm.S	2020-06-30 21:17:10.619231743 -0700
@@ -1,6 +1,6 @@
 /***************************************************************************
  *
- * Cold boot resistant AES-128 for 32-bit machines
+ * Cold boot resistant AES-128 for 32-bit/64-bit machines
  * 
  * Copyright (C) 2010	Tilo Mueller <tilo.mueller@informatik.uni-erlangen.de>
  * Copyright (C) 2012	Johannes Goetzfried <johannes@jgoetzfried.de>
@@ -42,7 +42,7 @@
 .set	rk9a,	%mm6		/* round key 9a */
 .set	rk9b,	%mm7		/* round key 9b */
 
-/* 32-bit debug registers */
+/* 32-bit ^ 64-bit debug registers but with 32-bit values */
 .set	db0,	%db0		/* round key 0a */
 .set	db1,	%db1		/* round key 0b */
 .set	db2,	%db2		/* round key 1a */
@@ -58,6 +58,17 @@
 .set	esp,	%esp
 .set	ebp,	%ebp
 
+#if __x86_64__
+/* 64-bit GPR registers */
+.set	rax,	%rax
+.set	rbx,	%rbx
+.set	rcx,	%rcx
+.set	rdx,	%rdx
+.set	rsi,	%rsi
+.set	rdi,	%rdi
+.set	rsp,	%rsp
+.set	rbp,	%rbp
+#endif
 
 /***************************************************************************
  *  				DATA SEGMENT
@@ -148,6 +159,21 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 
 /* function prologue */ 
 .macro prolog
+#if __x86_64__
+	/* enter */
+	pushq		rbp
+	movq		rsp,rbp
+	pushq		rsp
+	pushq		rax
+	pushq		rcx
+	pushq		rdx
+	pushq		rbx
+	pushq		rbp
+	pushq		rsi /* in */
+	pushq		rdi /* out */
+	/* get input */
+	movdqu		0(rsi),rstate
+#else
 	/* enter */
 	push		ebp
 	movl		esp,ebp
@@ -155,13 +181,19 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 	/* get input */
 	movl		12(ebp),eax
 	movdqu		0(eax),rstate
+#endif
 .endm
 
 /* function epilogue */
 .macro epilog
 	/* write output */
+#if __x86_64__
+	movq		-64(rbp),rax
+	movdqu		rstate,0(rax)
+#else
 	movl		8(ebp),eax
 	movdqu		rstate,0(eax)
+#endif
 	/* reset XMM registers */
 	pxor		%xmm0,%xmm0
 	pxor		%xmm1,%xmm1
@@ -181,8 +213,20 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 	pxor		%mm6,%mm6
 	pxor		%mm7,%mm7
 	/* leave */
+#if __x86_64__
+	popq		rdi
+	popq		rsi
+	popq		rbp
+	popq		rbx
+	popq		rdx
+	popq		rcx
+	popq		rax
+	popq		rsp
+	popq		rbp
+#else
 	popa
 	pop		ebp
+#endif
 	ret
 .endm
 
@@ -202,8 +246,21 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 	pxor		rhelp,\sse
 .endm
 
-/* copy four 32-bit debug registers into one 128-bit sse register */
+/* copy four 32-bit values from debug registers into one 128-bit sse register */
 .macro	dbg_to_sse dbg0 dbg1 dbg2 dbg3 sse
+#if __x86_64__
+	movq		\dbg0,rax
+	movd		eax,\sse
+	movq		\dbg1,rax
+	movd		eax,rhelp
+	pslldq		$4,rhelp
+	pxor		rhelp,\sse
+	movq		\dbg2,rax
+	movd		eax,rhelp
+	pslldq		$8,rhelp
+	pxor		rhelp,\sse
+	movq		\dbg3,rax
+#else
 	movl		\dbg0,eax
 	movd		eax,\sse
 	movl		\dbg1,eax
@@ -215,6 +272,7 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 	pslldq		$8,rhelp
 	pxor		rhelp,\sse
 	movl		\dbg3,eax
+#endif
 	movd		eax,rhelp
 	pslldq		$12,rhelp
 	pxor		rhelp,\sse
@@ -240,11 +298,19 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 	psrldq		$\index,rhelp	
 	movd		rhelp,eax
 	andl		$0x000000ff,eax
+#if __x86_64__
+	.if \init
+		movzx	ft_tab+1(,rax,4),edx
+	.else
+		xorb	ft_tab+1(,rax,4),%dl
+	.endif
+#else
 	.if \init
 		movzx	ft_tab+1(,eax,4),edx
 	.else
 		xorb	ft_tab+1(,eax,4),%dl
 	.endif
+#endif
 .endm
 
 /* generate next round key */
@@ -263,7 +329,11 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 	ks_box		14,\rk,0
 	shl		$8,edx
 	ks_box		13,\rk,0
+#if __x86_64__
+	xorl		rc_tab(,rcx,4),edx
+#else
 	xorl		rc_tab(,ecx,4),edx
+#endif
 	movd		edx,rhelp
 	pxor		rhelp,\rk
 	/*
@@ -289,7 +359,11 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 	psrldq		$\r,rhelp
 	movd		rhelp,eax
 	andl		$0x000000ff,eax
+#if __x86_64__
+	movl		gfbd9e(,rax,4),eax
+#else
 	movl		gfbd9e(,eax,4),eax
+#endif
 	rol		$\l,eax
 	.if \init
 		movl	eax,\reg
@@ -337,11 +411,19 @@ rc_tab:	.long	0x00000001, 0x00000002, 0x
 	psrldq		$\r,rhelp
 	movd		rhelp,eax
 	andl		$0x000000ff,eax
+#if __x86_64__
+	.if \init
+		movl	\tab+\off(,rax,4),\reg
+	.else
+		xorl	\tab+\off(,rax,4),\reg
+	.endif
+#else
 	.if \init
 		movl	\tab+\off(,eax,4),\reg
 	.else
 		xorl	\tab+\off(,eax,4),\reg
 	.endif
+#endif
 .endm
 
 /* reg = tab[0][state[i]] ^ tab[1][state[j]] 
@@ -480,6 +562,16 @@ tresor_decblk_128:
 
 /* void tresor_set_key(const u8 *in_key) */
 tresor_set_key:
+#if __x86_64__
+	movl		0(rdi),eax
+	movq		rax,db0
+	movl		4(rdi),eax
+	movq		rax,db1
+	movl		8(rdi),eax
+	movq		rax,db2
+	movl		12(rdi),eax
+	movq		rax,db3
+#else
 	movl		4(esp),edx
 	movl		0(edx),eax
 	movl		eax,db0
@@ -489,5 +581,6 @@ tresor_set_key:
 	movl		eax,db2
 	movl		12(edx),eax
 	movl		eax,db3
+#endif
 	xorl		eax, eax
 	ret
