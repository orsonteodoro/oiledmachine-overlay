#!/bin/bash
#
# Copyright (c) 2018-2022 Orson Teodoro <orsonteodoro@hotmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

strip_debug_from_config() {
	# This script will disable all debugging for your .config file.
	#
	# Essentually it reduces the amount of extra processing added by the
	# debug path.
	#
	# It does really speed up boot times.
	#
	# Liquorix claims that disabling debug paths will increase throughput.
	#
	# The Liquorix Kernel team does essentually the same but may do it
	# manually by inspection and manually altering config files.
	# This is more of a future proof solution.

	local targetconfig="${1}"

	echo -e "\nUnset all debug"
	IFS=$'\n'
	for l in $(grep -r -e "CONFIG.*DEBUG" "$targetconfig") ; do
		#echo "raw: $l"
		echo "$l" | grep -E -e "=[0-9]+" > /dev/null
		if [[ "$?" == "0" ]] ; then
			echo "skipping $l"
			continue
		fi
		a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
		b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
		echo "modding $a"
		sed -i -E -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
	done
	for c in $(grep -r -e "^config " $(find . -name "Kconfig.debug") | cut -f 2 -d ":" | cut -f 2 -d " " | sort) ; do
		local skip=(
			CONSOLE_LOGLEVEL_DEFAULT
			CONSOLE_LOGLEVEL_QUIET
			MESSAGE_LOGLEVEL_DEFAULT
			FRAME_WARN
			PANIC_TIMEOUT
			RCU_CPU_STALL_TIMEOUT
			IO_DELAY
			UNWINDER
		)
		local needs_skip=0
		for s in ${skip[@]} ; do
			[[ "${c}" =~ "${s}" ]] && needs_skip=1
		done
		(( ${needs_skip} == 1 )) && continue

		for l in $(grep -r -e "$c" "$targetconfig") ; do
			#echo "raw: $l"
			a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
			b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
			[[ "${a}" =~ "CONFIG_" ]] || continue
			echo "modding $a"
			sed -i -r -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
		done
	done

	echo -e "\nUnset all trace"
	for l in $(grep -r -e "TRACE" "$targetconfig") ; do
		#echo "raw: $l"
		echo "$l" | grep -E -e "=[0-9]+" > /dev/null
		if [[ "$?" == "0" ]] ; then
			echo "skipping $l"
			continue
		fi
		a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
		b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
		echo "modding $a"
		sed -i -E -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
	done
	for c in $(grep -r -e "^config " $(find kernel/trace/ -name "Kconfig") | cut -f 2 -d ":" | cut -f 2 -d " " | sort) ; do
		for l in $(grep -r -e "$c" "$targetconfig") ; do
			#echo "raw: $l"
			a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
			b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
			echo "modding $a"
			sed -i -r -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
		done
	done

	echo -e "\nUnset all debugger"
	for l in $(grep -r -e "KGDB" "$targetconfig") ; do
		#echo "raw: $l"
		echo "$l" | grep -E -e "=[0-9]+" > /dev/null
		if [[ "$?" == "0" ]] ; then
			echo "skipping $l"
			continue
		fi
		a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
		b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
		echo "modding $a"
		sed -i -E -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
	done

	echo -e "\nUnset all verbose"
	for l in $(grep -r -e "VERBOSE" "$targetconfig") ; do
		#echo "raw: $l"
		echo "$l" | grep -E -e "=[0-9]+" > /dev/null
		if [[ "$?" == "0" ]] ; then
			echo "skipping $l"
			continue
		fi
		a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
		b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
		echo "modding $a"
		sed -i -E -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
	done

	echo -e "\nUnset all asserts"
	for l in $(grep -r -e "ASSERT" "$targetconfig") ; do
		#echo "raw: $l"
		echo "$l" | grep -E -e "=[0-9]+" > /dev/null
		if [[ "$?" == "0" ]] ; then
			echo "skipping $l"
			continue
		fi
		a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
		b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
		echo "modding $a"
		sed -i -E -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
	done

	echo -e "\nUnset all tests"
	for l in $(grep -r -e "CONFIG.*TEST" "$targetconfig") \
		$(grep -r -e "CONFIG.*KUNIT" "$targetconfig") ; do
		#echo "raw: $l"
		echo "$l" | grep -E -e "=[0-9]+" > /dev/null
		if [[ "$?" == "0" ]] ; then
			echo "skipping $l"
			continue
		fi
		a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
		b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
		echo "modding $a"
		sed -i -E -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
	done

	echo -e "\nUnset all debugging sanitizers"
	for l in \
		$(grep -r -e "CONFIG.*KASAN" "$targetconfig") \
		$(grep -r -e "CONFIG.*KCSAN" "$targetconfig") \
		$(grep -r -e "CONFIG.*KFENCE" "$targetconfig") \
		$(grep -r -e "CONFIG.*UBSAN" "$targetconfig") \
			; do
		#echo "raw: $l"
		echo "$l" | grep -E -e "=[0-9]+" > /dev/null
		if [[ "$?" == "0" ]] ; then
			echo "skipping $l"
			continue
		fi
		a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
		b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
		echo "modding $a"
		sed -i -E -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
	done

	local extra_syms=()
	if [[ "${PERMIT_NETFILTER_SYMBOL_REMOVAL}" == "1" ]] ; then
		extra_syms=(
			CONFIG_BRIDGE_EBT_LOG
			CONFIG_NETFILTER_NETLINK_LOG
			CONFIG_NETFILTER_XT_TARGET_LOG
			CONFIG_NETFILTER_XT_TARGET_NFLOG
			CONFIG_BRIDGE_EBT_NFLOG
			CONFIG_NF_LOG_ARP
			CONFIG_NF_LOG_BRIDGE
			CONFIG_NF_LOG_COMMON
			CONFIG_NF_LOG_IPV4
			CONFIG_NF_LOG_IPV6
			CONFIG_NFT_LOG
		)
	fi

	echo -e "\nUnset some options to disable debug"
	for c in \
		${extra_syms[@]} \
		CONFIG_ALLOW_DEV_COREDUMP \
		CONFIG_AIC7XXX_REG_PRETTY_PRINT \
		CONFIG_AIC79XX_REG_PRETTY_PRINT \
		CONFIG_COREDUMP \
		CONFIG_CRASH_DUMP \
		CONFIG_DM_LOG_USERSPACE \
		CONFIG_DM_LOG_WRITES \
		CONFIG_GENTOO_PRINT_FIRMWARE_INFO \
		CONFIG_MAC80211_HWSIM \
		CONFIG_NET_PKTGEN \
		CONFIG_PRINTK_TIME \
		CONFIG_PRINTK_NMI \
		CONFIG_SFC_MCDI_LOGGING \
		CONFIG_X86_CHECK_BIOS_CORRUPTION \
			; do
		for l in $(grep -r -e "$c" "$targetconfig") ; do
			#echo "raw: $l"
			a=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g")
			b=$(echo "$l" | sed -r -e "s|# ||g" -e "s| is not set||g" -e "s|=[0-9ynm]+||g")
			echo "modding $a"
			sed -i -r -e "s|[ ]*${a}\$|# $b is not set|g" "$targetconfig"
		done
	done

	echo -e "\nSetting some options to disable debug"
	sed -i -E \
		-e "s|# CRYPTO_MANAGER_DISABLE_TESTS is not set|CRYPTO_MANAGER_DISABLE_TESTS=y|g" \
		"$targetconfig"

	echo -e "\nReducing log levels and bits shifted"
	sed -i -E -e "s|CONFIG_WIMAX_DEBUG_LEVEL=[0-9]+|CONFIG_WIMAX_DEBUG_LEVEL=0|g" \
		-e "s|CONFIG_AIC7XXX_DEBUG_MASK=[0-9]+|CONFIG_AIC7XXX_DEBUG_MASK=0|g" \
		-e "s|CONFIG_AIC79XX_DEBUG_MASK=[0-9]+|CONFIG_AIC79XX_DEBUG_MASK=0|g" \
		-e "s|CONFIG_ATM_FORE200E_DEBUG=[0-9]+|CONFIG_ATM_FORE200E_DEBUG=0|g" \
		-e "s|CONFIG_WIMAX_I2400M_DEBUG_LEVEL=[0-9]+|CONFIG_WIMAX_I2400M_DEBUG_LEVEL=0|g" \
		-e "s|CONFIG_NOUVEAU_DEBUG=[0-9]+|CONFIG_NOUVEAU_DEBUG=0|g" \
		-e "s|CONFIG_NOUVEAU_DEBUG_DEFAULT=[0-9]+|CONFIG_NOUVEAU_DEBUG_DEFAULT=0|g" \
		-e "s|CONFIG_NOUVEAU_DEBUG_DEFAULT=[0-9]+|CONFIG_NOUVEAU_DEBUG_DEFAULT=0|g" \
		-e "s|CONFIG_JFFS2_FS_DEBUG=[0-9]+|CONFIG_JFFS2_FS_DEBUG=0|g" \
		-e "s|CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE=[0-9]+|CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE=200|g" \
		-e "s|CONFIG_CONSOLE_LOGLEVEL_DEFAULT=[0-9]+|CONFIG_CONSOLE_LOGLEVEL_DEFAULT=1|g" \
		-e "s|CONFIG_MESSAGE_LOGLEVEL_DEFAULT=[0-9]+|CONFIG_MESSAGE_LOGLEVEL_DEFAULT=1|g" \
		-e "s|CONFIG_PRINTK_SAFE_LOG_BUF_SHIFT=[0-9]+|CONFIG_PRINTK_SAFE_LOG_BUF_SHIFT=10|g" \
		-e "s|CONFIG_LOG_CPU_MAX_BUF_SHIFT=[0-9]+|CONFIG_LOG_CPU_MAX_BUF_SHIFT=0|g" \
		-e "s|CONFIG_LOG_BUF_SHIFT=[0-9]+|CONFIG_LOG_BUF_SHIFT=12|g" \
		-e "s|CONFIG_SCSI_OSD_DPRINT_SENSE=[0-9]+|CONFIG_SCSI_OSD_DPRINT_SENSE=0|g" \
		"$targetconfig"

	echo "Activate necessary debug"
	sed -i -E \
		-e "s|# CONFIG_BRANCH_PROFILE_NONE is not set|BRANCH_PROFILE_NONE=y|g" \
		"$targetconfig"

	#echo -e "\nEnable for ureadahead for bootup speedup"
	#sed -i -E \
	#	-e "s|# CONFIG_FTRACE is not set|CONFIG_FTRACE=y|g" \
	#	-e "s|# CONFIG_TRACING_SUPPORT is not set|CONFIG_TRACING_SUPPORT=y|g" \
	#	-e "s|# CONFIG_DEBUG_FS is not set|CONFIG_DEBUG_FS=y|g" \
	#	-e "s|# CONFIG_ENABLE_DEFAULT_TRACERS is not set|CONFIG_ENABLE_DEFAULT_TRACERS=y|g" \
	#	"$targetconfig"

	echo "Fixing settings for security"
	sed -i -E \
		-e "s|# CONFIG_STRICT_DEVMEM is not set|CONFIG_STRICT_DEVMEM=y|g" \
		-e "s|# CONFIG_IO_STRICT_DEVMEM is not set|CONFIG_IO_STRICT_DEVMEM=y|g" \
		"$targetconfig"

	echo "Restoring defaults"
	sed -i -E \
		-e "s|# CONFIG_PRINTK is not set|CONFIG_PRINTK=y|g" \
		-e "s|# CONFIG_EARLY_PRINTK is not set|CONFIG_EARLY_PRINTK=y|g" \
		-e "s|# CONFIG_STRIP_ASM_SYMS is not set|CONFIG_STRIP_ASM_SYMS=y|g" \
		-e "s|# CONFIG_SECTION_MISMATCH_WARN_ONLY is not set|CONFIG_SECTION_MISMATCH_WARN_ONLY=y|g" \
		"$targetconfig"
}

update_all_disable() {
	strip_debug_from_config "./.config"
}

update_all_oldconfig() {
	# Bring .config up to date before modifying .config.
	make ARCH=${DD_FLAVOR} olddefconfig
}

main() {
	cp .config .config.dd_backup
	echo "The backup config is stored in .config.dd_backup"
	export DD_FLAVOR=$(grep -r -e "Kernel Configuration" "./.config" \
		| cut -f 2 -d " " \
		| cut -f 2 -d "/")
	#update_all_oldconfig
	update_all_disable
}

main
