Patch Status: Requires testing on AES-NI.  Send result as an issue to oiledmachine-overlay.
Patch Author: Orson Teodoro <orsonteodoro@hotmail.com>
Date: Jan 17, 2021

This is a backport of the cumulative patches from 5.10 series limited to CBC and ECB.
The tresor only tested against these modes of operation in i686.

v2:  Replaced "struct crypto_aes_ctx" with "struct tresor_ctx"
v1:  initial release

-----
diff -Nurp linux-4.14.216-ot.orig/arch/x86/crypto/tresor_glue.c linux-4.14.216-ot/arch/x86/crypto/tresor_glue.c
--- linux-4.14.216-ot.orig/arch/x86/crypto/tresor_glue.c	2021-01-17 18:47:45.360252666 -0800
+++ linux-4.14.216-ot/arch/x86/crypto/tresor_glue.c	2021-01-17 18:49:44.334760068 -0800
@@ -5,6 +5,19 @@
  * Copyright (C) 2010	Tilo Mueller <tilo.mueller@informatik.uni-erlangen.de>
  * Copyright (C) 2012	Hans Spath <tresor@hans-spath.de>
  *
+ * Portions use skcipher cbc_, ecb_, ctr_ code from crypto/cast5_avx_glue.c by:
+ *   Copyright (C) 2012 Johannes Goetzfried
+ *       <Johannes.Goetzfried@informatik.stud.uni-erlangen.de>
+ *   Copyright Â© 2013 Jussi Kivilinna <jussi.kivilinna@iki.fi>
+ *
+ * Portions use aesni_init and aesni_skciphers code from crypto/aesni-intel_glue.c by:
+ *   Copyright (C) 2008, Intel Corp.
+ *      Author: Huang Ying <ying.huang@intel.com>
+ *
+ * CBC & ECB parts based on code (crypto/cbc.c,ecb.c) by:
+ *   Copyright (c) 2006 Herbert Xu <herbert@gondor.apana.org.au>
+ *
+ *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms and conditions of the GNU General Public License,
  * version 2, as published by the Free Software Foundation.
@@ -17,9 +30,15 @@
  * You should have received a copy of the GNU General Public License along with
  * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
  * Place - Suite 330, Boston, MA 02111-1307 USA.
+ *
+ * Portions include skcipher updates by Eric Biggers <ebiggers@google.com> and
+ * Herbert Xu <herbert@gondor.apana.org.au>.
  */
 
+#include <asm/crypto/glue_helper.h>
 #include <crypto/algapi.h>
+#include <crypto/b128ops.h>
+#include <crypto/internal/simd.h>
 #include <crypto/tresor.h>
 #include <linux/module.h>
 #include <crypto/aes.h>
@@ -49,7 +68,7 @@ asmlinkage void tresor_decblk_256(u8 *ou
 static int tresor_setdummykey(struct crypto_tfm *tfm, const u8 *in_key,
 							unsigned int key_len)
 {
-	struct crypto_aes_ctx *ctx = crypto_tfm_ctx(tfm);
+	struct tresor_ctx *ctx = crypto_tfm_ctx(tfm);
 
 	switch (key_len) {
 	case AES_KEYSIZE_128:
@@ -86,17 +105,11 @@ static inline void tresor_epilog(unsigne
 	preempt_enable();
 }
 
-
-/*
- * Encrypt one block
- */
-void tresor_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
+void __tresor_encrypt(int key_length, u8 *dst, const u8 *src)
 {
-	struct crypto_aes_ctx *ctx = crypto_tfm_ctx(tfm);
 	unsigned long irq_flags;
-
 	tresor_prolog(&irq_flags);
-	switch (ctx->key_length) {
+	switch (key_length) {
 	case AES_KEYSIZE_128:
 		tresor_encblk_128(dst, src);
 		break;
@@ -110,17 +123,11 @@ void tresor_encrypt(struct crypto_tfm *t
 	tresor_epilog(&irq_flags);
 }
 
-
-/*
- * Decrypt one block
- */
-void tresor_decrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
+void __tresor_decrypt(int key_length, u8 *dst, const u8 *src)
 {
-	struct crypto_aes_ctx *ctx = crypto_tfm_ctx(tfm);
 	unsigned long irq_flags;
-
-	tresor_prolog(&irq_flags);
-	switch (ctx->key_length) {
+ 	tresor_prolog(&irq_flags);
+	switch (key_length) {
 	case AES_KEYSIZE_128:
 		tresor_decblk_128(dst, src);
 		break;
@@ -131,9 +138,26 @@ void tresor_decrypt(struct crypto_tfm *t
 		tresor_decblk_256(dst, src);
 		break;
 	}
-	tresor_epilog(&irq_flags);
+ 	tresor_epilog(&irq_flags);
 }
 
+/*
+ * Encrypt one block
+ */
+void tresor_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
+{
+	struct tresor_ctx *ctx = crypto_tfm_ctx(tfm);
+	__tresor_encrypt(ctx->key_length, dst, src);
+}
+
+/*
+ * Decrypt one block
+ */
+void tresor_decrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src)
+{
+	struct tresor_ctx *ctx = crypto_tfm_ctx(tfm);
+	__tresor_decrypt(ctx->key_length, dst, src);
+}
 
 /*
  * Set AES key (the real function this time, not dummy as above)
@@ -150,6 +174,136 @@ void tresor_setkey(const u8 *in_key)
 	on_each_cpu(tresor_setkey_current_cpu, (void *)in_key, 1);
 }
 
+static int tresor_skcipher_setkey(struct crypto_skcipher *tfm, const u8 *key, unsigned int keylen)
+{
+	tresor_setdummykey(crypto_skcipher_tfm(tfm), key, keylen);
+	return 0;
+}
+
+static int ecb_crypt(struct skcipher_request *req, bool enc)
+{
+	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
+	struct tresor_ctx *ctx = crypto_skcipher_ctx(tfm);
+	struct skcipher_walk walk;
+	const unsigned int bsize = AES_BLOCK_SIZE;
+	unsigned int nbytes;
+	int err;
+
+	err = skcipher_walk_virt(&walk, req, true);
+
+	while ((nbytes = walk.nbytes)) {
+		u8 *wsrc = walk.src.virt.addr;
+		u8 *wdst = walk.dst.virt.addr;
+
+		/* Handle leftovers */
+		do {
+			if (enc)
+				__tresor_encrypt(ctx->key_length, wdst, wsrc);
+			else
+				__tresor_decrypt(ctx->key_length, wdst, wsrc);
+			wsrc += bsize;
+			wdst += bsize;
+			nbytes -= bsize;
+		} while (nbytes >= bsize);
+
+		err = skcipher_walk_done(&walk, nbytes);
+	}
+
+	return err;
+}
+
+static int ecb_encrypt(struct skcipher_request *req)
+{
+	return ecb_crypt(req, true);
+}
+
+static int ecb_decrypt(struct skcipher_request *req)
+{
+	return ecb_crypt(req, false);
+}
+
+static int cbc_encrypt(struct skcipher_request *req)
+{
+	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
+	struct tresor_ctx *ctx = crypto_skcipher_ctx(tfm);
+	const unsigned int bsize = AES_BLOCK_SIZE;
+	struct skcipher_walk walk;
+	unsigned int nbytes;
+	int err;
+
+	err = skcipher_walk_virt(&walk, req, false);
+
+	while ((nbytes = walk.nbytes)) {
+		u128 *src = (u128 *)walk.src.virt.addr;
+		u128 *dst = (u128 *)walk.dst.virt.addr;
+		u128 *iv = (u128 *)walk.iv;
+
+		do {
+			u128_xor(dst, src, iv);
+			__tresor_encrypt(ctx->key_length, (u8 *)dst, (u8 *)dst);
+			iv = dst;
+			src++;
+			dst++;
+			nbytes -= bsize;
+		} while (nbytes >= bsize);
+
+		*(u128 *)walk.iv = *iv;
+		err = skcipher_walk_done(&walk, nbytes);
+	}
+
+	return err;
+}
+
+static unsigned int __cbc_decrypt(struct tresor_ctx *ctx,
+				  struct skcipher_walk *walk)
+{
+	const unsigned int bsize = AES_BLOCK_SIZE;
+	unsigned int nbytes = walk->nbytes;
+	u128*src = (u128 *)walk->src.virt.addr;
+	u128 *dst = (u128 *)walk->dst.virt.addr;
+	u128 last_iv;
+
+	/* Start of the last block. */
+	src += nbytes / bsize - 1;
+	dst += nbytes / bsize - 1;
+
+	last_iv = *src;
+
+	/* Handle leftovers */
+	for (;;) {
+		__tresor_decrypt(ctx->key_length, (u8 *)dst, (u8 *)src);
+
+		nbytes -= bsize;
+		if (nbytes < bsize)
+			break;
+
+		u128_xor(dst, dst, (src-1));
+		src -= 1;
+		dst -= 1;
+	}
+
+	u128_xor(dst, dst, walk->iv);
+	*(u128 *)walk->iv = last_iv;
+
+	return nbytes;
+}
+
+static int cbc_decrypt(struct skcipher_request *req)
+{
+	struct crypto_skcipher *tfm = crypto_skcipher_reqtfm(req);
+	struct tresor_ctx *ctx = crypto_skcipher_ctx(tfm);
+	struct skcipher_walk walk;
+	unsigned int nbytes;
+	int err;
+
+	err = skcipher_walk_virt(&walk, req, false);
+
+	while ((nbytes = walk.nbytes)) {
+		nbytes = __cbc_decrypt(ctx, &walk);
+		err = skcipher_walk_done(&walk, nbytes);
+	}
+	return err;
+}
 
 /*
  * Crypto API algorithm
@@ -160,7 +314,7 @@ static struct crypto_alg tresor_alg = {
 	.cra_priority		= 100,
 	.cra_flags		= CRYPTO_ALG_TYPE_CIPHER,
 	.cra_blocksize		= AES_BLOCK_SIZE,
-	.cra_ctxsize		= sizeof(struct crypto_aes_ctx),
+	.cra_ctxsize		= sizeof(struct tresor_ctx),
 	.cra_alignmask		= 3,
 	.cra_module		= THIS_MODULE,
 	.cra_list		= LIST_HEAD_INIT(tresor_alg.cra_list),
@@ -175,12 +329,92 @@ static struct crypto_alg tresor_alg = {
 	}
 };
 
+static struct skcipher_alg tresor_skciphers[] = {
+	{
+		.base = {
+			.cra_name		= "__ecb(tresor)",
+			.cra_driver_name	= "__ecb-tresor-aesni",
+			.cra_priority		= 400,
+			.cra_flags		= CRYPTO_ALG_INTERNAL,
+			.cra_blocksize		= AES_BLOCK_SIZE,
+			.cra_ctxsize		= sizeof(struct tresor_ctx),
+			.cra_module		= THIS_MODULE,
+		},
+		.min_keysize	= AES_MIN_KEY_SIZE,
+		.max_keysize	= AES_MAX_KEY_SIZE,
+		.setkey		= tresor_skcipher_setkey,
+		.encrypt	= ecb_encrypt,
+		.decrypt	= ecb_decrypt,
+	}, {
+		.base = {
+			.cra_name		= "__cbc(tresor)",
+			.cra_driver_name	= "__cbc-tresor-aesni",
+			.cra_priority		= 400,
+			.cra_flags		= CRYPTO_ALG_INTERNAL,
+			.cra_blocksize		= AES_BLOCK_SIZE,
+			.cra_ctxsize		= sizeof(struct tresor_ctx),
+			.cra_module		= THIS_MODULE,
+		},
+		.min_keysize	= AES_MIN_KEY_SIZE,
+		.max_keysize	= AES_MAX_KEY_SIZE,
+		.ivsize		= AES_BLOCK_SIZE,
+		.setkey		= tresor_skcipher_setkey,
+		.encrypt	= cbc_encrypt,
+		.decrypt	= cbc_decrypt,
+	}
+};
+
+static struct simd_skcipher_alg *tresor_simd_skciphers[ARRAY_SIZE(tresor_skciphers)];
+
+static void tresor_free_simds(void)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(tresor_simd_skciphers) &&
+		    tresor_simd_skciphers[i]; i++)
+		simd_skcipher_free(tresor_simd_skciphers[i]);
+}
 
 /* Initialize module */
 static int __init tresor_init(void)
 {
+	struct simd_skcipher_alg *simd;
+	const char *basename;
+	const char *algname;
+	const char *drvname;
+	int err;
+	int i;
 	int retval;
 	retval = crypto_register_alg(&tresor_alg);
+	if (retval)
+		return retval;
+
+	retval = crypto_register_skciphers(tresor_skciphers,
+					   ARRAY_SIZE(tresor_skciphers));
+	if (retval)
+		goto unregister_alg;
+
+	for (i = 0; i < ARRAY_SIZE(tresor_skciphers); i++) {
+		algname = tresor_skciphers[i].base.cra_name + 2;
+		drvname = tresor_skciphers[i].base.cra_driver_name + 2;
+		basename = tresor_skciphers[i].base.cra_driver_name;
+		simd = simd_skcipher_create_compat(algname, drvname, basename);
+		err = PTR_ERR(simd);
+		if (IS_ERR(simd))
+			goto unregister_simds;
+
+		tresor_simd_skciphers[i] = simd;
+	}
+
+	return 0;
+
+unregister_simds:
+	tresor_free_simds();
+unregister_skciphers:
+	crypto_unregister_skciphers(tresor_skciphers,
+				    ARRAY_SIZE(tresor_skciphers));
+unregister_alg:
+	crypto_unregister_alg(&tresor_alg);
 	return retval;
 }
 module_init(tresor_init);
@@ -189,6 +423,9 @@ module_init(tresor_init);
 /* Remove module */
 static void __exit tresor_fini(void)
 {
+	tresor_free_simds();
+	crypto_unregister_skciphers(tresor_skciphers,
+				    ARRAY_SIZE(tresor_skciphers));
 	crypto_unregister_alg(&tresor_alg);
 }
 module_exit(tresor_fini);
diff -Nurp linux-4.14.216-ot.orig/include/crypto/tresor.h linux-4.14.216-ot/include/crypto/tresor.h
--- linux-4.14.216-ot.orig/include/crypto/tresor.h	2021-01-17 18:47:45.370253043 -0800
+++ linux-4.14.216-ot/include/crypto/tresor.h	2021-01-17 18:50:56.437491602 -0800
@@ -10,6 +10,10 @@
 /* number of chars to clear memory */
 #define TRESOR_RANDOM_CHARS 4096
 
+struct tresor_ctx {
+        int key_length;
+};
+
 /* TRESOR core functionality (enc, dec, setkey) */
 void tresor_encrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src);
 void tresor_decrypt(struct crypto_tfm *tfm, u8 *dst, const u8 *src);
