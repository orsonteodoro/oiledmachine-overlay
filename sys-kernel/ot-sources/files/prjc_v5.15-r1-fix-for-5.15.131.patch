License identified for kernel/locking/rtmutex.c:
// SPDX-License-Identifier: GPL-2.0-only
--- a/kernel/locking/rtmutex.c.orig	2023-09-09 15:03:59.399841965 -0700
+++ b/kernel/locking/rtmutex.c	2023-09-09 15:07:16.303848082 -0700
@@ -341,7 +341,7 @@ waiter_update_prio(struct rt_mutex_waite
 	lockdep_assert(RB_EMPTY_NODE(&waiter->tree.entry));
 
 	waiter->tree.prio = __waiter_prio(task);
-	waiter->tree.deadline = task->dl.deadline;
+	waiter->tree.deadline = __tsk_deadline(task);
 }
 
 /*
@@ -362,16 +362,20 @@ waiter_clone_prio(struct rt_mutex_waiter
  * Only use with rt_waiter_node_{less,equal}()
  */
 #define task_to_waiter_node(p)	\
-	&(struct rt_waiter_node){ .prio = __waiter_prio(p), .deadline = (p)->dl.deadline }
+	&(struct rt_waiter_node){ .prio = __waiter_prio(p), .deadline = __tsk_deadline(p) }
 #define task_to_waiter(p)	\
 	&(struct rt_mutex_waiter){ .tree = *task_to_waiter_node(p) }
 
 static __always_inline int rt_waiter_node_less(struct rt_waiter_node *left,
 					       struct rt_waiter_node *right)
 {
+#ifdef CONFIG_SCHED_PDS
+	return (left->deadline < right->deadline);
+#else
 	if (left->prio < right->prio)
 		return 1;
 
+#ifndef CONFIG_SCHED_BMQ
 	/*
 	 * If both waiters have dl_prio(), we check the deadlines of the
 	 * associated tasks.
@@ -380,16 +384,22 @@ static __always_inline int rt_waiter_nod
 	 */
 	if (dl_prio(left->prio))
 		return dl_time_before(left->deadline, right->deadline);
+#endif
 
 	return 0;
+#endif
 }
 
 static __always_inline int rt_waiter_node_equal(struct rt_waiter_node *left,
 						 struct rt_waiter_node *right)
 {
+#ifdef CONFIG_SCHED_PDS
+	return (left->deadline == right->deadline);
+#else
 	if (left->prio != right->prio)
 		return 0;
 
+#ifndef CONFIG_SCHED_BMQ
 	/*
 	 * If both waiters have dl_prio(), we check the deadlines of the
 	 * associated tasks.
License identified for kernel/sched/cputime.c:
// SPDX-License-Identifier: GPL-2.0-only
--- a/kernel/sched/cputime.c.orig	2023-09-09 15:03:59.403841965 -0700
+++ b/kernel/sched/cputime.c	2023-09-09 15:07:40.475848833 -0700
@@ -147,7 +147,7 @@ void account_guest_time(struct task_stru
 	p->gtime += cputime;
 
 	/* Add guest time to cpustat. */
-	if (task_nice(p) > 0) {
+	if (task_running_nice(p)) {
 		task_group_account_field(p, CPUTIME_NICE, cputime);
 		cpustat[CPUTIME_GUEST_NICE] += cputime;
 	} else {
License identified for kernel/sysctl.c:
// SPDX-License-Identifier: GPL-2.0-only
--- a/kernel/sysctl.c.orig	2023-09-09 16:22:06.071987564 -0700
+++ b/kernel/sysctl.c	2023-09-09 16:24:49.751992649 -0700
@@ -113,9 +113,15 @@
 static int sixty = 60;
 #endif
 
+static int zero;
+static int __maybe_unused two = 2;
 static unsigned long zero_ul;
 static unsigned long one_ul = 1;
 static unsigned long long_max = LONG_MAX;
+#ifdef CONFIG_SCHED_ALT
+static int __maybe_unused zero = 0;
+extern int sched_yield_type;
+#endif
 #ifdef CONFIG_PRINTK
 static int ten_thousand = 10000;
 #endif
