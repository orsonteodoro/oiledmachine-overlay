#!/bin/bash
#
# Copyright (c) 2023 Orson Teodoro <orsonteodoro@hotmail.com>.  All rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

TRIPLE_ID=$(cat /proc/version | cut -f 3 -d " ")
EXTRAVERSION="${TRIPLE_ID%-*}"
EXTRAVERSION="${EXTRAVERSION#*-}"
PV="${TRIPLE_ID%%-*}"
ARCH="${TRIPLE_ID##*-}"
if [[ -e /etc/tcca-${PV}-${EXTRAVERSION}-${ARCH}.conf ]] ; then
	source /etc/tcca-${PV}-${EXTRAVERSION}-${ARCH}.conf
fi

# TCCA - TCP Congestion Control Algorithm
# HC O(10,000) - high cap data center, big tech data center
# MC O(1,000) - md cap data center, university super computer
# LC O(100) - low cap data center, university HPC
TCCA_BROADCAST="${TCCA_BROADCAST:-bbr}"
TCCA_DEFAULT="${TCCA_DEFAULT:-bbr}"
TCCA_DISTCC="${TCCA_DISTCC:-reno}"
TCCA_HCDC_FAIR="${TCCA_HCDC_FAIR:-bbr}"
TCCA_HCDC_REALTIME="${TCCA_HCDC_THROUGHPUT:-bbr}"
TCCA_HCDC_THROUGHPUT="${TCCA_HCDC_THROUGHPUT:-dctcp}"
TCCA_HOME_SERVER_FAIR="${TCCA_HOME_SERVER_FAIR:-reno}"
TCCA_HOME_SERVER_REALTIME="${TCCA_HOME_SERVER_REALTIME:-reno}"
TCCA_HOME_SERVER_THROUGHPUT="${TCCA_HOME_SERVER_THROUGHPUT:-cdg}"
TCCA_FTP="${TCCA_FTP:-cubic}"
TCCA_GAMING="${TCCA_GAMING:-vegas}"
TCCA_LCDC_FAIR="${TCCA_LCDC_FAIR:-bbr}"
TCCA_LCDC_REALTIME="${TCCA_LCDC_THROUGHPUT:-bbr}"
TCCA_LCDC_THROUGHPUT="${TCCA_LCDC_THROUGHPUT:-dctcp}"
TCCA_MCDC_FAIR="${TCCA_MCDC_FAIR:-bbr}"
TCCA_MCDC_REALTIME="${TCCA_MCDC_THROUGHPUT:-bbr}"
TCCA_MCDC_THROUGHPUT="${TCCA_MCDC_THROUGHPUT:-bbr}"
TCCA_MUSIC="${TCCA_MUSIC:-bbr}"
TCCA_P2P="${TCCA_P2P:-cubic}"
TCCA_PODCASTS="${TCCA_PODCASTS:-bbr2}"
TCCA_PODCAST_UPLOAD="${TCCA_PODCAST_UPLOAD:-cubic}"
TCCA_SOCIAL_GAMES="${TCCA_SOCIAL_GAMES:-vegas}"
TCCA_STREAMING="${TCCA_STREAMING:-bbr}"
TCCA_TORRENT="${TCCA_TORRENT:-cubic}"
TCCA_VIDEO_CHAT="${TCCA_VIDEO_CHAT:-bbr}"
TCCA_VIDEO_UPLOAD="${TCCA_VIDEO_UPLOAD:-bbr}"
TCCA_VOIP="${TCCA_VOIP:-bbr}"
TCCA_WWW="${TCCA_WWW:-vegas}"

# This is for loading modules or TCP CC selection from non-root user.
# sudo is for command line only
# pkexec is for GUI desktop environments or command line
TCCA_ELEVATE_PRIV="${TCCA_ELEVATE_PRIV:-pkexec}" # Can be sudo, pkexec, polkit, root, none

MY_NAME=$(basename "$0")

ARGV=( $@ )
USE_CASE="${1}"
shift
PN="${1}"
shift
PN_ARGS=( $@ )

print_help() {
echo
echo "${MY_NAME} - Helper script to setup the TCP Congestion Control Algorithm"
echo "for new connections for the kernel"
echo
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit"|"sudo") ]] ; then
echo "${MY_NAME} [use-case|menu-item] [cmd] [args]"
	else
echo "${MY_NAME} [use-case|menu-item]"
	fi
echo
echo "Use cases:"
echo
echo "  broadcast - For live broadcasting"
echo "  ftp - For file downloads"
echo "  gaming - For gaming clients"
echo "  distcc - For at home compile farm"
echo "  music - For music service"
echo "  p2p - For decentralized downloads"
echo "  social-gaming - For social gaming"
echo "  streaming - For streaming audio/video downloads"
echo "  torrent - For decentralized downloads"
echo "  podcasts - For downloading podcasts"
echo "  podcast-upload - For podcast uploading"
echo "  video-chat - For audio/video chat"
echo "  video-upload - For video uploading"
echo "  voip - For voice over IP"
echo "  www - For web browsing"
echo
echo "Menu item:"
echo
echo "  --help - Print this help"
echo "  --status - For printing TCP Congestion Control details"
echo "  --use=<alg> - For using the algorithm directly"
echo
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit"|"sudo") ]] ; then
echo "[cmd]    - program to run (optional)"
echo "[args]   - list of arguments to pass to the program (optional)"
echo
	fi
}

unset TCCA_MAP
declare -A TCCA_MAP=(
	["broadcast"]="${TCCA_BROADCAST}"
	["distcc"]="${TCCA_DISTCC}"
	["ftp"]="${TCCA_FTP}"
	["gaming"]="${TCCA_GAMING}"
	["home-server-fair"]="${TCCA_HOME_SERVER_FAIR}"
	["home-server-throughput"]="${TCCA_HOME_SERVER_THROUGHPUT}"
	["music"]="${TCCA_MUSIC}"
	["p2p"]="${TCCA_P2P}"
	["podcasts"]="${TCCA_PODCASTS}"
	["podcast-upload"]="${TCCA_PODCAST_UPLOAD}"
	["social-gaming"]="${TCCA_SOCIAL_GAMING}"
	["streaming"]="${TCCA_STREAMING}"
	["torrent"]="${TCCA_TORRENT}"
	["video-upload"]="${TCCA_VIDEO_UPLOAD}"
	["video-chat"]="${TCCA_VIDEO_CHAT}"
	["voip"]="${TCCA_VOIP}"
	["www"]="${TCCA_WWW_CLIENT}"

	["bulk"]="${TCCA_BULK_FG}"
	["bulk-download"]="${TCCA_BULK_FG}"
	["download"]="${TCCA_BULK_FG}"

	["bulk-send"]="${TCCA_BULK_SEND}"

	["multi-large"]="${TCCA_MULTI_LARGE}"

	["multi-small"]="${TCCA_MULTI_SMALL}"

	["http-server"]="${TCCA_FAIR_SERVER}"
	["gaming-server"]="${TCCA_FAIR_SERVER}"

	["gaming"]="${TCCA_GAMING}"
	["gaming-client"]="${TCCA_GAMING}"

	["reliable"]="${TCCA_RELIABLE}"

	["reset"]="${TCCA_RESET}"

	["multi"]="${TCCA_MULTI_BG}"
	["multi-download"]="${TCCA_MULTI_BG}"
	["ftp-server"]="${TCCA_MULTI_BG}"
	["p2p"]="${TCCA_MULTI_BG}"
	["torrent"]="${TCCA_MULTI_BG}"

	["rec"]="${TCCA_STREAMING_REC}"
	["streamer"]="${TCCA_STREAMING_REC}"
	["voip"]="${TCCA_STREAMING_REC}"

	["rural"]="${TCCA_RURAL}"
	["satellite"]="${TCCA_RURAL}"

	["streaming"]="${TCCA_STREAMING}"
	["live"]="${TCCA_STREAMING}"
	["live-streaming"]="${TCCA_STREAMING}"
	["online-radio"]="${TCCA_STREAMING}"
	["radio"]="${TCCA_STREAMING}"

	["streaming-server"]="${TCCA_THROUGHPUT_SERVER}"
	["media-server"]="${TCCA_THROUGHPUT_SERVER}"

	["bad"]="${TCCA_BAD}"
	["packet-loss"]="${TCCA_BAD}"

	["www"]="${TCCA_WWW_CLIENT}"
	["www-client"]="${TCCA_WWW_CLIENT}"
	["http-client"]="${TCCA_WWW_CLIENT}"
)

print_status() {
echo
echo "The Current TCP Congestion Control algorithm for new connections:"
echo
	echo -e "\t"$(cat /proc/sys/net/ipv4/tcp_congestion_control)
echo
echo "Allowed algorithms:"
echo
	echo -e "\t"$(cat /proc/sys/net/ipv4/tcp_available_congestion_control)
echo
echo "Available kernel modules:"
echo
	pushd /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/ 2>/dev/null 1>/dev/null
		echo -e "\t"$(ls tcp_*.ko* | sed -e "s|.ko.*$||g")
	popd 2>/dev/null 1>/dev/null
echo
}

process_options() {
	local x
	for x in ${ARGV[@]} ; do
		case ${x} in
			--help)
				print_help
				exit 0
				;;
			--status)
				print_status
				exit 0
				;;
			--use=*)
				set_tcca $(echo "${x}" | cut -f 2 -d "=" | sed -e "s|^tcp_||g")
				exit 0
				;;
			*)
				;;
		esac
	done
}

check_dependencies() {
	if [[ -n "${DISPLAY}" ]] && ! which pkexec 2>/dev/null 1>/dev/null ; then
		echo "You must install polkit"
		exit 1
	fi
	if [[ -z "${USE_CASE}" ]] ; then
		echo "You must choose a use case.  See ${MY_NAME} --help."
		exit 1
	else
		echo -e "USE_CASE:\t\t\t${USE_CASE}"
	fi
}

_set_tcca_polkit() {
	local alg="${1}"
	echo -e "TCP_CONGESTION_CONTROL_ALG:\t${alg}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* 2>/dev/null 1>/dev/null ; then
echo
echo "Loading kernel module for ${alg}"
echo
		pkexec modprobe tcp_${alg}
	fi
echo
echo "Setting TCP Congestion Control algorithm"
echo
	echo "${alg}" \
		| pkexec dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

_set_tcca_sudo() {
	local alg="${1}"
	echo -e "TCP_CONGESTION_CONTROL_ALG:\t${alg}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* 2>/dev/null 1>/dev/null ; then
echo
echo "Loading kernel module for ${alg}"
echo
		sudo modprobe tcp_${alg}
	fi
echo
echo "Setting TCP Congestion Control algorithm"
echo
	echo "${alg}" \
		| sudo dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

_set_tcca_root() {
	local alg="${1}"
	echo -e "TCP_CONGESTION_CONTROL_ALG:\t${alg}"
	if ls /lib/modules/${PV}-${EXTRAVERSION}-${ARCH}/kernel/net/ipv4/tcp_${alg}.ko* 2>/dev/null 1>/dev/null ; then
echo
echo "Loading kernel module for ${alg}"
echo
		modprobe tcp_${alg}
	fi
echo
echo "Setting TCP Congestion Control algorithm"
echo
	echo "${alg}" \
		| dd \
			of=/proc/sys/net/ipv4/tcp_congestion_control \
			oflag=append \
			conv=notrunc
}

set_tcca() {
	local alg="${1}"
	if [[ "${alg,,}" == "bbr3" ]] ; then
		alg="bbr"
	fi
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit") ]] ; then
		_set_tcca_polkit "${alg}"
	elif [[ "${TCCA_ELEVATE_PRIV}" == "sudo" ]] ; then
		_set_tcca_sudo "${alg}"
	else
		_set_tcca_root "${alg}"
	fi
}

select_tcca() {
	local key="${USE_CASE,,}"
	if [[ "${!TCCA_MAP[@]}" =~ "${key}" ]] ; then
		set_tcca ${TCCA_MAP[${key}]}
	else
		echo "${key} does not exist."
		echo "Valid values: ${!TCCA_MAP[@]}"
		exit 1
	fi
}

run_pn() {
	if [[ -n "${PN}" ]] ; then
		echo "Running ${PN} ${PN_ARGS[@]}"
		"${PN}" "${PN_ARGS[@]}"
	fi
}

main() {
	process_options
	check_dependencies
	select_tcca
	if [[ "${TCCA_ELEVATE_PRIV}" =~ ("pkexec"|"polkit"|"sudo") ]] ; then
		run_pn
	fi
}

main
