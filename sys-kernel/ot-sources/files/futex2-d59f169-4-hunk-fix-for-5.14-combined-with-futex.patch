License headers:

tools/testing/selftests/futex/functional/futex_wait_timeout.c:
// SPDX-License-Identifier: GPL-2.0-or-later

--- a/tools/testing/selftests/futex/functional/futex_wait_timeout.c.orig	2021-09-22 23:48:11.883195600 -0700
+++ b/tools/testing/selftests/futex/functional/futex_wait_timeout.c	2021-09-22 23:51:06.914201368 -0700
@@ -12,12 +12,14 @@
  * HISTORY
  *      2009-Nov-6: Initial version by Darren Hart <dvhart@linux.intel.com>
  *      2019-Dec-13: Add WAIT_MULTIPLE test by Krisman <krisman@collabora.com>
+ *      2021-Feb-5: Add futex2 test by André <andrealmeid@collabora.com>
  *      2021-Apr-26: More test cases by André Almeida <andrealmeid@collabora.com>
  *
  *****************************************************************************/
 
 #include <pthread.h>
 #include "futextest.h"
+#include "futex2test.h"
 #include "logging.h"
 
 #define TEST_NAME "futex-wait-timeout"
@@ -95,6 +97,7 @@ int main(int argc, char *argv[])
 	futex_t f1 = FUTEX_INITIALIZER;
 	int res, ret = RET_PASS;
 	struct timespec to;
+	struct timespec64 to64;
 	time_t secs;
 	struct futex_wait_block fwb = {&f1, f1, 0};
 	pthread_t thread;
@@ -121,7 +124,7 @@ int main(int argc, char *argv[])
 	}
 
 	ksft_print_header();
-	ksft_set_plan(8);
+	ksft_set_plan(10);
 	ksft_print_msg("%s: Block on a futex and wait for timeout\n",
 	       basename(argv[0]));
 	ksft_print_msg("\tArguments: timeout=%ldns\n", timeout_ns);
@@ -208,6 +211,50 @@ int main(int argc, char *argv[])
 		ksft_test_result_pass("futex_wait_multiple timeout succeeds\n");
 #endif /* __ILP32__ */
 
+	/* initialize relative timeout */
+	to.tv_sec = 0;
+	to.tv_nsec = timeout_ns;
+
+	/* setting absolute monotonic timeout for futex2 */
+	if (gettime64(CLOCK_MONOTONIC, &to64))
+		error("gettime64 failed\n", errno);
+
+	to64.tv_nsec += timeout_ns;
+
+	if (to64.tv_nsec >= 1000000000) {
+		to64.tv_sec++;
+		to64.tv_nsec -= 1000000000;
+	}
+
+	info("Calling futex2_wait on f1: %u @ %p\n", f1, &f1);
+	res = futex2_wait(&f1, f1, FUTEX_32, &to64);
+	if (!res || errno != ETIMEDOUT) {
+		ksft_test_result_fail("futex2_wait monotonic returned %d\n", ret < 0 ? errno : ret);
+		ret = RET_FAIL;
+	} else {
+		ksft_test_result_pass("futex2_wait monotonic timeout succeeds\n");
+	}
+
+	/* setting absolute realtime timeout for futex2 */
+	if (gettime64(CLOCK_REALTIME, &to64))
+		error("gettime64 failed\n", errno);
+
+	to64.tv_nsec += timeout_ns;
+
+	if (to64.tv_nsec >= 1000000000) {
+		to64.tv_sec++;
+		to64.tv_nsec -= 1000000000;
+	}
+
+	info("Calling futex2_wait on f1: %u @ %p\n", f1, &f1);
+	res = futex2_wait(&f1, f1, FUTEX_32 | FUTEX_CLOCK_REALTIME, &to64);
+	if (!res || errno != ETIMEDOUT) {
+		ksft_test_result_fail("futex2_wait realtime returned %d\n", ret < 0 ? errno : ret);
+ 		ret = RET_FAIL;
+	} else {
+		ksft_test_result_pass("futex2_wait realtime timeout succeeds\n");
+ 	}
+
 	ksft_print_cnts();
 	return ret;
 }
