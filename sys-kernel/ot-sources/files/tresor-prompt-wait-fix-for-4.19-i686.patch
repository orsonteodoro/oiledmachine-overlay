Subject: TRESOR prompt boot time panic fix for 4.19 (i686)

Author: Orson Teodoro <orsonteodoro@hotmail.com>
Date: Jan 18, 2021 (Unix timestamp: 1611035600)

The wait fix addresses is_kthread_should_stop() boot time panic
introduced by cb6538e740d7543cd989128625cf8cac4b471e0a
with TRESOR prompt without revert.

----
--- a/arch/x86/crypto/tresor_key.c.orig	2024-02-04 13:28:46.473451560 -0800
+++ b/arch/x86/crypto/tresor_key.c	2024-02-04 13:32:22.807205302 -0800
@@ -160,6 +160,7 @@ static void sha256(const char *message,
 /* Print to term_fd */
 static int printf_(const char *fmt, ...)
 {
+	ssize_t ret;
 	va_list args; int col = 80; char line[col];
 
 	va_start(args, fmt);
@@ -167,7 +168,10 @@ static int printf_(const char *fmt, ...)
 	line[col-1] = 0;
 	va_end(args);
 
-	return ksys_write(term_fd, line, strlen(line));
+	tresor_prompt_begin();
+	ret = ksys_write(term_fd, line, strlen(line));
+	tresor_prompt_end();
+	return ret;
 }
 
 /* Erase line before printing (workaround for weird consoles) */
@@ -187,7 +191,9 @@ static int printf(const char *fmt, ...)
 static unsigned char getchar(void)
 {
 	unsigned char c;
+	tresor_prompt_begin();
 	ksys_read(term_fd, &c, 1);
+	tresor_prompt_end();
 	return c;
 }
 
@@ -236,15 +242,19 @@ int tresor_readkey(const char *terminal,
 	ofs = get_fs();
 	set_fs(get_ds());
 	/* try to open terminal */
+	tresor_prompt_begin();
 	term_fd = ksys_open((const char __user *) terminal, O_RDWR, 0);
+	tresor_prompt_end();
 	if (term_fd < 0) {
 		set_fs(ofs);
 		return term_fd;
 	}
 	/* read single characters; no echo */
+	tresor_prompt_begin();
 	ksys_ioctl(term_fd, TCGETS, (long)&termios);
 	termios.c_lflag &= ~(ICANON | ECHO);
 	ksys_ioctl(term_fd, TCSETSF, (long)&termios);
+	tresor_prompt_end();
 	/* initialize console */
 	cursor_enable();
 	cls();
@@ -387,7 +397,9 @@ readkey:
 		printf("\n\n");
 
 	termios.c_lflag |= (ICANON | ECHO);
+	tresor_prompt_begin();
 	ksys_ioctl(term_fd, TCSETSF, (long)&termios);
+	tresor_prompt_end();
 
 	if (resume)
 		cursor_disable();
--- a/include/linux/sched.h.orig	2024-02-04 13:28:17.977739833 -0800
+++ b/include/linux/sched.h	2024-02-04 13:29:52.856778289 -0800
@@ -754,6 +754,11 @@ struct task_struct {
 	/* Canary value for the -fstack-protector GCC feature: */
 	unsigned long			stack_canary;
 #endif
+
+#ifdef CONFIG_CRYPTO_TRESOR_PROMPT
+	unsigned long			tresor_reading_prompt;
+#endif
+
 	/*
 	 * Pointers to the (original) parent process, youngest child, younger sibling,
 	 * older sibling, respectively.  (p->father can be replaced with
@@ -1912,4 +1917,25 @@ static inline void rseq_syscall(struct p
 
 #endif
 
+#ifdef CONFIG_CRYPTO_TRESOR_PROMPT
+#define TRESOR_PROMPT_INACTIVE 0
+static inline void tresor_prompt_begin(void)
+{
+	current->tresor_reading_prompt++;
+	barrier();
+}
+
+static inline void tresor_prompt_end(void)
+{
+	barrier();
+	current->tresor_reading_prompt--;
+}
+
+/* non-zero is reading, zero is not reading */
+static inline int tresor_prompt_active(void)
+{
+	return current->tresor_reading_prompt;
+}
+#endif
+
 #endif
--- a/kernel/sched/wait.c.orig	2024-02-04 13:28:01.513906177 -0800
+++ b/kernel/sched/wait.c	2024-02-04 13:29:52.860778249 -0800
@@ -390,7 +390,12 @@ EXPORT_SYMBOL(autoremove_wake_function);
 
 static inline bool is_kthread_should_stop(void)
 {
-	return (current->flags & PF_KTHREAD) && kthread_should_stop();
+#ifdef CONFIG_CRYPTO_TRESOR_PROMPT
+	if (unlikely(tresor_prompt_active()))
+		return 0;
+	else
+#endif
+		return (current->flags & PF_KTHREAD) && kthread_should_stop();
 }
 
 /*
