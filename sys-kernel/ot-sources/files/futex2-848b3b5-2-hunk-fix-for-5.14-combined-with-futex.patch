License headers:

tools/testing/selftests/futex/functional/futex_wait_wouldblock.c:
// SPDX-License-Identifier: GPL-2.0-or-later

--- a/tools/testing/selftests/futex/functional/futex_wait_wouldblock.c.orig	2021-09-23 00:00:17.782219520 -0700
+++ b/tools/testing/selftests/futex/functional/futex_wait_wouldblock.c	2021-09-23 00:01:57.359222801 -0700
@@ -13,6 +13,7 @@
  * HISTORY
  *      2009-Nov-14: Initial version by Gowrishankar <gowrishankar.m@in.ibm.com>
  *      2019-Dec-13: Add WAIT_MULTIPLE test by Krisman <krisman@collabora.com>
+ *      2021-Feb-5: Add futex2 test by Andr√© <andrealmeid@collabora.com>
  *
  *****************************************************************************/
 
@@ -64,18 +65,19 @@ int main(int argc, char *argv[])
 	}
 
 	ksft_print_header();
-	ksft_set_plan(2);
+	ksft_set_plan(3);
 	ksft_print_msg("%s: Test the unexpected futex value in FUTEX_WAIT\n",
 	       basename(argv[0]));
 
 	info("Calling futex_wait on f1: %u @ %p with val=%u\n", f1, &f1, f1+1);
 	res = futex_wait(&f1, f1+1, &to, FUTEX_PRIVATE_FLAG);
 	if (!res || errno != EWOULDBLOCK) {
-		fail("futex_wait returned: %d %s\n",
+		ksft_test_result_fail("futex_wait returned: %d %s\n",
 		     res ? errno : res, res ? strerror(errno) : "");
 		ret = RET_FAIL;
-	} else
+	} else {
 		ksft_test_result_pass("futex_wait wouldblock succeeds\n");
+	}
 
 	info("Calling futex_wait_multiple on f1: %u @ %p with val=%u\n",
 	     f1, &f1, f1+1);
@@ -98,6 +100,27 @@ int main(int argc, char *argv[])
 	ksft_test_result_pass("futex_wait_multiple wouldblock succeeds\n");
 #endif /* __ILP32__ */
 
+	/* setting absolute timeout for futex2 */
+	if (gettime64(CLOCK_MONOTONIC, &to64))
+		error("gettime64 failed\n", errno);
+
+	to64.tv_nsec += timeout_ns;
+
+	if (to64.tv_nsec >= 1000000000) {
+		to64.tv_sec++;
+		to64.tv_nsec -= 1000000000;
+	}
+
+	info("Calling futex2_wait on f1: %u @ %p with val=%u\n", f1, &f1, f1+1);
+	res = futex2_wait(&f1, f1+1, FUTEX_32, &to64);
+	if (!res || errno != EWOULDBLOCK) {
+		ksft_test_result_fail("futex2_wait returned: %d %s\n",
+		     res ? errno : res, res ? strerror(errno) : "");
+		ret = RET_FAIL;
+	} else {
+		ksft_test_result_pass("futex2_wait wouldblock succeeds\n");
+	}
+
 	ksft_print_cnts();
 	return ret;
 }
