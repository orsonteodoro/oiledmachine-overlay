Patch status:  WIP / In development
License identified for Makefile:
# SPDX-License-Identifier: GPL-2.0
License identified for scripts/Makefile.modfinal:
# SPDX-License-Identifier: GPL-2.0-only
License identified for scripts/Makefile.vmlinux_o:
# SPDX-License-Identifier: GPL-2.0-only
License identified in scripts/Makefile.vmlinux:
# SPDX-License-Identifier: GPL-2.0-only
License identified for kernel/gcov/Makefile:
# SPDX-License-Identifier: GPL-2.0
License identified in arch/x86/kernel/paravirt.c:
// SPDX-License-Identifier: GPL-2.0-or-later
--- a/Makefile.orig	2023-09-13 18:20:31.324243717 -0700
+++ b/Makefile	2023-09-13 18:21:21.272242425 -0700
@@ -762,10 +762,33 @@ endif # KBUILD_EXTMOD
 # Defaults to vmlinux, but the arch makefile usually adds further targets
 all: vmlinux
 
-CFLAGS_GCOV	:= -fprofile-arcs -ftest-coverage
-ifdef CONFIG_CC_IS_GCC
-CFLAGS_GCOV	+= -fno-tree-loop-im
+CFLAGS_GCOV	:=
+CFLAGS_GCOV_DEFAULT	:= 1
+
+ifeq ($(GCC_PGO_PHASE),GCC_PDI)
+CFLAGS_GCOV	+= -fprofile-arcs -fno-tree-loop-im
+CFLAGS_GCOV_DEFAULT	= 0
+endif
+
+ifeq ($(GCC_PGO_PHASE),GCC_PGI)
+CFLAGS_GCOV	+= -fprofile-generate -fno-tree-loop-im
+CFLAGS_GCOV_DEFAULT	= 0
+endif
+
+ifeq ($(GCC_PGO_PHASE),GCC_PDO)
+KCFLAGS	+= -fbranch-probabilities -fprofile-dir=$(GCC_PGO_PROFILE_DIR) -fprofile-correction -Wno-error=missing-profile -Wno-error=coverage-mismatch
+CFLAGS_GCOV_DEFAULT	= 0
 endif
+
+ifeq ($(GCC_PGO_PHASE),GCC_PGO)
+KCFLAGS	+= -fprofile-use -fprofile-dir=$(GCC_PGO_PROFILE_DIR) -fprofile-correction -Wno-error=missing-profile -Wno-error=coverage-mismatch
+CFLAGS_GCOV_DEFAULT	= 0
+endif
+
+ifeq ($(CFLAGS_GCOV_DEFAULT),1)
+CFLAGS_GCOV	+= -fprofile-arcs -ftest-coverage
+endif
+
 export CFLAGS_GCOV
 
 # The arch Makefiles can override CC_FLAGS_FTRACE. We may also append it later.
--- a/scripts/Makefile.modfinal.orig	2023-08-27 14:49:51.000000000 -0700
+++ b/scripts/Makefile.modfinal	2023-09-12 19:43:51.714349090 -0700
@@ -22,8 +22,20 @@ __modfinal: $(modules:%.o=%.ko)
 modname = $(notdir $(@:.mod.o=))
 part-of-module = y
 
+CFLAGS_GCOV_PGI :=
+CFLAGS_GCOV_PGO :=
+LDFLAGS_GCOV_PGI :=
+LDFLAGS_GCOV_PGO :=
+#ifeq ($(GCC_PGO_PHASE),GCC_PGI)
+#      CFLAGS_GCOV_PGI += -fprofile-generate -fno-tree-loop-im
+#      LDFLAGS_GCOV_PGI += -L$(LIBC_DIR) -l:libc.a -L$(GCC_GCOV_DIR) -l:libgcov.a -l:libgcc.a -l:libunwind.a
+#endif
+#ifeq ($(GCC_PGO_PHASE),GCC_PGO)
+#      CFLAGS_GCOV_PGO += -fprofile-use -fprofile-correction -Wno-error=missing-profile -Wno-error=coverage-mismatch
+#endif
+
 quiet_cmd_cc_o_c = CC [M]  $@
-      cmd_cc_o_c = $(CC) $(filter-out $(CC_FLAGS_CFI) $(CFLAGS_GCOV), $(c_flags)) -c -o $@ $<
+      cmd_cc_o_c = $(CC) $(filter-out $(CC_FLAGS_CFI) $(CFLAGS_GCOV), $(c_flags)) $(CFLAGS_GCOV_PGI) $(LDFLAGS_GCOV_PGO) -c -o $@ $<
 
 %.mod.o: %.mod.c FORCE
 	$(call if_changed_dep,cc_o_c)
@@ -34,6 +46,7 @@ quiet_cmd_ld_ko_o = LD [M]  $@
       cmd_ld_ko_o +=							\
 	$(LD) -r $(KBUILD_LDFLAGS)					\
 		$(KBUILD_LDFLAGS_MODULE) $(LDFLAGS_MODULE)		\
+		$(LDFLAGS_GCOV_PGI) \
 		-T scripts/module.lds -o $@ $(filter %.o, $^);		\
 	$(if $(ARCH_POSTLINK), $(MAKE) -f $(ARCH_POSTLINK) $@, true)
 
--- a/kernel/gcov/Makefile.orig	2023-08-27 14:49:51.000000000 -0700
+++ b/kernel/gcov/Makefile	2023-09-13 15:27:37.344512036 -0700
@@ -1,4 +1,9 @@
 # SPDX-License-Identifier: GPL-2.0
+
+ifeq ($(GCC_PGO_PHASE),GCC_PGI)
+GCOV_PROFILE := n
+endif
+
 ccflags-y := -DSRCTREE='"$(srctree)"' -DOBJTREE='"$(objtree)"'
 
 obj-y := base.o fs.o
--- a/arch/x86/kernel/paravirt.c.orig	2023-09-13 21:18:40.111967255 -0700
+++ b/arch/x86/kernel/paravirt.c	2023-09-13 21:19:58.491965228 -0700
@@ -38,6 +38,7 @@
  * avoid confusing the entry prologues.
  */
 extern void _paravirt_nop(void);
+//
 asm (".pushsection .entry.text, \"ax\"\n"
      ".global _paravirt_nop\n"
      "_paravirt_nop:\n\t"
@@ -85,6 +86,7 @@ static unsigned paravirt_patch_call(void
 
 #ifdef CONFIG_PARAVIRT_XXL
 /* identity function, which can be inlined */
+#pragma GCC optimize "-fno-profile-values"
 u64 notrace _paravirt_ident_64(u64 x)
 {
 	return x;
