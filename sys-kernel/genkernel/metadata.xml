<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Only for this ebuild on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
  </maintainer>
  <maintainer type="project">
    <!-- Originator -->
    <email>genkernel@gentoo.org</email>
  </maintainer>
  <longdescription>
    This is an ebuild fork that applies subdir_mount, crypt_root_plain, llvm
    PGO patches.

    Patch status:
    3.5.x.x - subdir_mount (works), crypt_root_plain (works)
    4.0.x - subdir_mount (untested), crypt_root_plain (works), llvm (works)
    4.2.x - subdir_mount (untested), crypt_root_plain (works), llvm (works),
      pgo (In development / WIP)

    When switching between 4.2.x and older versions, The /dev/disk/by-id/
    entries may change.  This means that you need to adjust the kernel
    parameters to the correct identifiers.

    Some PGO trainers require you run them in a desktop environment.

    If we used automation, we could possibly reduce steps 2-4 within
    about 90 minutes.

    Estimated time to build:

    30 min to build the instrumented kernel.
    30 min to run training to generate a profile.
    30 min to build the optimized kernel.

    PGO support requires a PGO toolchain to run benchmarks.  All benchmarks
    are done on a live system to make it more accessible without getting
    too technical.

    The performance of the instrumented build to the normal build is not
    dramatically slower and about the same perceptual performance as
    the normal build, but it does have a slightly have a few bugs
    present compared to a normal build compared to the instrumented.

    Phase 1 and 2 have been tested and currently trying to close
    compatibility issues with the profraw to profdata merger and
    debug phase 3.

    The following steps must be take for a PGO kernel:

    (1) Emerge a source based kernel package with PGO and profraw compat patch
    (2) Run genkernel --pgi all
    (3) Reboot
    (4) Run genkernel --pgt-all train
    (4 optional) Run genkernel --pgt-yt train in X as a normal user
    (5) Run genkernel --pgo all
    (6) Reboot

    The trainers that you choose should reflect typical use.  You may also
    extend PGO with your own custom script.  The script should be placed
    in /usr/share/genkernel as pgo-custom.sh in the same folder as gen_pgo.sh
    with 0770 permissions with wheel to both user or group ownership.

    Due to licensing concerns for the 2014 PGO GCC patch and associated scripts
    cannot be integrated both in the kernel sources and this package
    directly.  Only the emerging 2021 PGO with clang and llvm support will be
    supported.

    Environmental variables (store in /etc/genkernel.conf):

    PGO_P2P_URI - The URI must have a filename to replace the placeholder
                  torrent.  (Only public domain assets or open source project
                  torrents should be used.)
    PGO_LINUX_TARBALL - Abspath to a linux tarball use as a source of
                  pseudo randomness.
    PGO_TRAINER_NETWORK_TCP_CONGESTIONS - string separated list from
      /proc/sys/net/ipv4/tcp_allowed_congestion_control to select for
      PGO training.
    PGO_FILESYSTEMS_LIST - a string separated list of selected of
      quintuples in this format -- ioscheduler_name&fs_name&dev_name&mount_point&test_dir
      -- to PGO train.
      * io_scheduler_name must be one of the names listed in
        `cat $(find /sys/devices/ -path "*sda*scheduler")`, where sda is replace with the
        block device of interest.  It will be used to switch to that scheduler.
      * fs_name must match the driver name.  These are listed in
        ${KERNEL_DIR}/fs as one the subdirectories
      * dev_name must the basename to the corresponding path listed in
        find /sys/ -name "scheduler"
      * mount_point must be abspath to the mount point.  It must not contain
        a space in the abspath.
      * test_dir must be a decent size folder like similar to /usr/bin that
        is used for grep tests and sequential read tests.  It also is
        an abspath relative to mount_point.

      If it is not set, it will default to the following:
      PGO_FILESYSTEMS_LIST="unk:unk:unk:/:/usr/bin"

      Example:
      PGO_FILESYSTEMS_LIST="bfq&ext4&sda&/&/usr/bin kyber&bfs&sdb&/mnt/rock&/data mq-deadline&ext4&sda&/&/usr/bin"
  </longdescription>
  <use>
    <flag name="cfi">Ensure that the Code Flow Integrity toolchain requirements
      are met.</flag>
    <flag name="crypt_root_plain">Adds dmcrypt plain support</flag>
    <flag name="cryptsetup">Enable support for Luks disk encryption using
      <pkg>sys-fs/cryptsetup</pkg></flag>
    <flag name="firmware">Prefer system firmware
      <pkg>sys-kernel/linux-firmware</pkg> over local copy.</flag>
    <flag name="llvm">Enable support for the Clang/LLVM toolchain
      These changes only apply to building the kernel only.</flag>
    <flag name="lto">Ensure that the Link Time Optimization toolchain
      requirements are met.</flag>
    <flag name="pgo-clang">Add clang PGO support to genkernel.</flag>
    <flag name="pgo-custom">Add a PGO custom script to genkernel
      to PGO train unconventional portions of the kernel or whatever
      you want.</flag>
    <flag name="pgo_trainer_crypto">Trains the Crypto API portion of the
      kernel.</flag>
    <flag name="pgo_trainer_disk">Trains the disk/file system portion of the
      kernel.</flag>
    <flag name="pgo_trainer_memory">Trains the memory portion of the kernel
      subsystem.</flag>
    <flag name="pgo_trainer_network">Trains network portions of the kernel
      downloading a few bytes of the kernel and ICMP/UDP PGO training.</flag>
    <flag name="pgo_trainer_p2p">Trains the network, filesystem, disk portions
      of the kernel subsystems using peer-to-peer (p2p) with open source
      tarball.</flag>
    <flag name="pgo_trainer_webcam">Trains webcam portions of the kernel that
      may contain software based implementations on cheap cameras.</flag>
    <flag name="pgo_trainer_xscreensaver_2d">Train the CPU scheduler, GPU
      portions of the kernel using 2D drawing primarily with complex graphics or
      computational geometry algorithms.  It will spawn ncores*thread_per_core
      processes.  Best used with an auto tile tiling window manager so that
      tricks are not applied to skip rendering.</flag>
    <flag name="pgo_trainer_xscreensaver_3d">Train the GPU portions of the
      kernel with OpenGL ~1.3.  It will spawn ncores * thread_per_core
      processes.  Best used with a auto tile tiling window manager so that
      tricks are not applied to skip rendering.</flag>
    <flag name="shadow-call-stack">Ensure that the shadow-call-stack toolchain
      requirements are met.</flag>
    <flag name="subdir_mount">Adds mounting subdirectory support.  Used for
      mounting muslx32 or stage2 or stage3 images in place produced from
      crossdev and mounting them directly at /usr/$CTARGET without risk of
      damage caused by human error replacing / with /usr/$CTARGET.
    </flag>
    <flag name="sudo">Allow use of sudo to mark non-root PGO training
      complete</flag>
  </use>
  <!--
    <upstream>
    <remote-id type="gentoo">git://git.gentoo.org/proj/genkernel</remote-id>
  </upstream>
  -->
  <upstream>
    <remote-id type="sourceforge">fuse</remote-id>
  </upstream>
</pkgmetadata>
