<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Only for this ebuild on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
  </maintainer>
  <maintainer type="project">
    <!-- Originator -->
    <email>genkernel@gentoo.org</email>
  </maintainer>
  <longdescription>
    This is an ebuild fork that applies subdir_mount, crypt_root_plain, llvm
    PGO patches.

    Patch status:
    3.5.x.x - subdir_mount (works), crypt_root_plain (works)
    4.0.x - subdir_mount (untested), crypt_root_plain (works), llvm (works)
    4.2.x - subdir_mount (untested), crypt_root_plain (works), llvm (works),
      pgo (In development / WIP)

    When switching between 4.2.x and older versions, The /dev/disk/by-id/
    entries may change.  This means that you need to adjust the kernel
    parameters to the correct identifiers.

    Profile Guided Instrumentation (PGO) support:

    PGO is not trivial for the Linux kernel and has taken more than a decade
    for widespread use.  The hurdles of PGO kernel:
    (1) Code review
    (2) Obtaining profile data
    (3) No benchmark suite to perform training.
    (4) Reboots
    (5) Converting gcov data to one accepted by kernel
    ... possibly more

    Some PGO trainers require you run them in a desktop environment.

    If we used automation, we could possibly reduce steps 2-4 within
    about 90 minutes.

    Estimated time to build:

    30 min to build the instrumented kernel.
    30 min to run training to generate a profile.
    30 min to build the optimized kernel.

    PGO support requires a PGO toolchain to run benchmarks.  All benchmarks
    are done on a live system.  A QEMU VM was considered, but after evaluation
    it wouldn't be practical for normal to beginner users to set up.

    The following steps must be take for a PGO kernel:
    (This list will shrink when more of these TODO gets completed.)
    (1) Emerge a source based kernel package
    (2) Change the compilation flags of the kernel and let genkernel set enable
        gcov kernel config options
    (3) Disable portions of the kernel which may break under PGO
    (4) Build the kernel with coverage collection [PGI, phase 1]
    (5) Update the bootloader with a PGI kernel entry if required.
    (6) Reboot and choose the PGI kernel
    (7) Run the trainer suite [PGT, phase 2] iff using PGI kernel else send user
        to fix bootloader and reboot computer with PGI selected.
    (8a) Collect data if using GCC
    (8b) Collect and merge the data if using LLVM
    (9) Disable kernel options. (TODO have genkernel automatically do this)
    (10) Have genkernel set flags.
    (12) Update the bootloader with a PGO kernel entry if required.
    (13) Rebuild the kernel using profiling information. [PGO, phase 3]
    (14) Reboot with new PGO kernel

    The trainers that you choose should reflect typical use.  You may also
    extend PGO with your own custom script.

    Environmental variables (store in /etc/genkernel.conf):
    PGO_P2P_URI - The URI must have a filename to replace the placeholder torrent.
                  (Only public domain assets or open source project torrents should be used.)
  </longdescription>
  <use>
    <flag name="cfi">Ensure that the Code Flow Integrity toolchain requirements
      are met.</flag>
    <flag name="crypt_root_plain">Adds dmcrypt plain support</flag>
    <flag name="cryptsetup">Enable support for Luks disk encryption using
      <pkg>sys-fs/cryptsetup</pkg></flag>
    <flag name="firmware">Prefer system firmware
      <pkg>sys-kernel/linux-firmware</pkg> over local copy.</flag>
    <flag name="llvm">Enable support for the Clang/LLVM toolchain
      These changes only apply to building the kernel only.</flag>
    <flag name="lto">Ensure that the Link Time Optimization toolchain
      requirements are met.</flag>
    <flag name="pgo">Add PGO support to genkernel.</flag>
    <flag name="pgo-custom">Add a PGO custom script to genkernel
      to PGO train unconventional portions of the kernel or whatever
      you want.</flag>
    <flag name="pgo_trainer_crypto">Trains the Crypto API portion of the
      kernel.</flag>
    <flag name="pgo_trainer_disk">Trains the disk/file system portion of the
      kernel.</flag>
    <flag name="pgo_trainer_memory">Trains the memory portion of the kernel
      subsystem.</flag>
    <flag name="pgo_trainer_network">Trains network portions of the
      kernel downloading a few bytes of the kernel and ICMP/UDP
      PGO training.</flag>
    <flag name="pgo_trainer_p2p">Trains the network, filesystem, disk portions
      of the kernel subsystems using peer-to-peer (p2p) with open source
      tarball.</flag>
    <flag name="pgo_trainer_webcam">Trains webcam portions of the kernel that
      may contain software based implementations on cheap cameras.</flag>
    <flag name="pgo_trainer_xscreensaver_2d">Train cpu scheduler, gpu portions
      of the kernel using 2D drawing primarily with come complex graphics or
      computational geometry algorithms.  It will spawn ncores*thread_per_core
      processes.</flag>
    <flag name="pgo_trainer_xscreensaver_3d">Train gpu portions of the
      kernel with OpenGL ~1.3.  It will spawn ncores*thread_per_core
      processes.</flag>
    <flag name="shadow-call-stack">Ensure that the shadow-call-stack toolchain
      requirements are met.</flag>
    <flag name="subdir_mount">Adds mounting subdirectory support.  Used for
      mounting muslx32 or stage2 or stage3 images in place produced from
      crossdev and mounting them directly at /usr/$CTARGET without risk of
      damage caused by human error replacing / with /usr/$CTARGET.
    </flag>
  </use>
  <!--
    <upstream>
    <remote-id type="gentoo">git://git.gentoo.org/proj/genkernel</remote-id>
  </upstream>
  -->
  <upstream>
    <remote-id type="sourceforge">fuse</remote-id>
  </upstream>
</pkgmetadata>
