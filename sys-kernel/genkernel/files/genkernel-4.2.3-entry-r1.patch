Subject:       New entry system
Patch Author:  Orson Teodoro <orsonteodoro@hotmail.com>
Patch Status:  In development (DO NOT USE YET) pre-alpha quality, untested
Date:          Sun Sep 26 10:37:20 PM PDT 2021 (Unix time: 1632721040)

Requires input-event-codes.h from the linux kernel

A complete rewrite of the flawed existing one.

diff -x '*.orig' -urpN genkernel-4.2.6.orig/defaults/initrd.defaults genkernel-4.2.6/defaults/initrd.defaults
--- genkernel-4.2.6.orig/defaults/initrd.defaults	2021-11-15 10:35:10.000000000 -0800
+++ genkernel-4.2.6/defaults/initrd.defaults	2022-02-05 19:49:39.449728855 -0800
@@ -158,3 +158,20 @@ HWOPTS="keymap cache modules virtio hype
 # This is the set of default HWOPTS, in the order that they are loaded.
 # This is whitespace aligned with HWOPTS above.
 MY_HWOPTS="          modules virtio hyperv ${HWOPTS_BLK}        lvm dmraid           mdadm     fs       crypto"
+
+# For pad possibilities, see
+# ${KERNEL_DIR}/include/uapi/linux/input-event-codes.h
+# IMPORTANT:  Remove all comments and these two lines.  DO NOT REUSE OR USE THEM
+# All of these values are weak and need re-editing.
+ENTRY_PAD='S0VZXzEgS0VZXzIgS0VZXzMgS0VZX0NIQVQgS0VZX1ZPSUNFTUFJTA=='
+ENTRY_DEVICE='Y3J5cHRzZXR1cCBvcGVuICAgJiYgbWtkaXIgLXAgL21udC9kb25nbGUgJiYgbW91bnQgL2Rldi9tYXBwZXIvIC9tbnQvZG9uZ2xlCg=='
+ENTRY_ROOTB='cG93ZXJvZmYgLWY='
+ENTRY_ROOTG='Z3BnIC0tZGVjcnlwdCAke2twfSB8IGNyeXB0c2V0dXAgb3BlbiAke0VOVFJZX1JPT1RfREVWfSAke21wfQo='
+ENTRY_ROOTS='c3RlZ2hpZGUgLXEgLXNmICR7a3B9IC14ZiAtIHwgY3J5cHRzZXR1cCBvcGVuICR7RU5UUllfUk9PVF9ERVZ9ICR7bXB9Cg=='
+ENTRY_ROOTP='Y3J5cHRzZXR1cCBvcGVuICR7RU5UUllfUk9PVF9ERVZ9ICR7bXB9'
+ENTRY_RESUMEB='cG93ZXJvZmYgLWY='
+ENTRY_RESUMES='c3RlZ2hpZGUgLXEgLXNmICR7a3B9IC14ZiAtIHwgY3J5cHRzZXR1cCBvcGVuICR7RU5UUllfUkVTVU1FX0RFVn0gJHttcH0K'
+ENTRY_RESUMEG='Z3BnIC0tZGVjcnlwdCAke2twfSB8IGNyeXB0c2V0dXAgb3BlbiAke0VOVFJZX1JFU1VNRV9ERVZ9ICR7bXB9Cg=='
+ENTRY_RESUMEP='Y3J5cHRzZXR1cCBvcGVuICR7RkFDQURFX1JFU1VNRV9ERVZ9ICR7bXB9Cg=='
+ENTRY_SUPPORT_DEVICE=0
+ENTRY_SUPPORT_RESUME=0
diff -x '*.orig' -urpN genkernel-4.2.6.orig/defaults/initrd.scripts genkernel-4.2.6/defaults/initrd.scripts
--- genkernel-4.2.6.orig/defaults/initrd.scripts	2021-11-15 10:35:10.000000000 -0800
+++ genkernel-4.2.6/defaults/initrd.scripts	2022-02-05 19:49:39.451728934 -0800
@@ -2319,6 +2319,325 @@ ipv6_tentative() {
 	fi
 }
 
+start_entry_dots() {
+	local duration=20
+	# check keyboard at this time
+	for s in $(seq ${duration}) ; do
+		echo "."
+		sleep 0.$((${RANDOM} % 10))
+	done
+}
+
+start_entry_boot() {
+	local duration=200
+	# check for keyboard at this time
+	local c=0
+	local O=$(dmesg | cut -c 16-)
+	local timestamps=0
+	local l=$(dmesg | sed -n "1,1p")
+	[ "${l:0:1}" = "[" ] && timestamps=1
+	local nlines=$(echo "${O}" | wc -l)
+	for s in $(seq ${duration}) ; do
+		local r=$((${RANDOM} % ${nlines} + 1))
+		local t=$(printf "%0.6f" $(echo "scale=6;${c}/60" | bc))
+		if [ ${timestamps} -eq 1 ]
+		then
+			echo "[    ${t}] "$(echo "${O}" | sed -n "${r},${r}p")
+		else
+			echo $(echo "${O}" | sed -n "${r},${r}p")
+		fi
+		sleep 0.0$((${RANDOM} % 10))
+		c=$((${c} + 1))
+	done
+}
+
+open_device() {
+	local D=""
+	for f in $(ls /dev/disk/by-id | sort | tr "\n" " ")
+	do
+		D="${D} ${f}"
+	done
+
+	local c=0
+	for d in ${D} ; do
+		echo "${c} ${d}"
+		c=$((${c} + 1))
+	done
+	echo "N none"
+	echo
+	echo "Choose a token device:"
+	read C
+	if [ "${C}" = "N" ]
+	then
+		return
+	fi
+	if [ "${C}" = "n" ]
+	then
+		return
+	fi
+	if [ "${C}" = "n" ]
+	then
+		return
+	fi
+	echo
+	echo "Choose a file in the token device:"
+	read kf
+	export kf
+	export ENTRY_DEVICE="/dev/disk/by-id/"$(echo "${D}" | cut -f ${C} -d " ")
+	eval $(get_entry_cmd "ENTRY_DEVICE")
+}
+
+open_root() {
+	local D=""
+	for f in $(ls /dev/disk/by-id | sort | tr "\n" " ")
+	do
+		D="${D} ${f}"
+	done
+
+	local c=0
+	for d in ${D} ; do
+		echo "${c} ${d}"
+		c=$((${c} + 1))
+	done
+	echo "N none"
+	echo
+	echo "Choose a root drive or partition:"
+	read C
+	if [ "${C}" = "N" ]
+	then
+		return
+	fi
+	if [ "${C}" = "n" ]
+	then
+		return
+	fi
+	export ENTRY_ROOT_DEV="/dev/disk/by-id/"$(echo "${D}" | cut -f ${C} -d " ")
+	if [ ${C} = "s" ]
+	then
+		eval $(get_entry_cmd "ENTRY_ROOTB")
+	elif [ ${ENTRY_SUPPORT_DEVICE} -eq 3 ]
+	then
+		eval $(get_entry_cmd "ENTRY_ROOTS")
+	elif [ ${ENTRY_SUPPORT_DEVICE} -eq 2 ]
+	then
+		eval $(get_entry_cmd "ENTRY_ROOTG")
+	elif [ ${ENTRY_SUPPORT_DEVICE} -eq 1 ]
+	then
+		eval $(get_entry_cmd "ENTRY_ROOTP")
+	else
+		return
+	fi
+}
+
+open_resume() {
+	local D=""
+	for f in $(ls /dev/disk/by-id | sort | tr "\n" " ")
+	do
+		D="${D} ${f}"
+	done
+
+	local c=0
+	for d in ${D} ; do
+		echo "${c} ${d}"
+		c=$((${c} + 1))
+	done
+	echo "N none"
+	echo
+	echo "Choose a resume device or partition:"
+	read C
+	if [ "${C}" = "N" ]
+	then
+		return
+	fi
+	if [ "${C}" = "n" ]
+	then
+		return
+	fi
+	if [ "${C}" = "n" ]
+	then
+		return
+	fi
+	export ENTRY_RESUME_DEV="/dev/disk/by-id/"$(echo "${D}" | cut -f ${C} -d " ")
+	if [ ${C} = "s" ]
+	then
+		eval $(get_entry_cmd "ENTRY_RESUMEB")
+	elif [ ${ENTRY_SUPPORT_DEVICE} -eq 3 ]
+	then
+		eval $(get_entry_cmd "ENTRY_RESUMES")
+	elif [ ${ENTRY_SUPPORT_DEVICE} -eq 2 ]
+	then
+		eval $(get_entry_cmd "ENTRY_RESUMEG")
+	elif [ ${ENTRY_SUPPORT_DEVICE} -eq 1 ]
+	then
+		eval $(get_entry_cmd "ENTRY_RESUMEP")
+	else
+		return
+	fi
+}
+
+start_entry_beep() {
+	echo -ne '\007'
+}
+
+pad_key_code() {
+	local v="${1}"
+	t=$(printf "%04x" "${v}")
+	echo "${t:2:2}${t:0:2}"
+}
+
+get_code()
+{
+	local sym="${1}"
+	local v=$(grep -E "${sym}"$'\t' /usr/src/linux/include/uapi/linux/input-event-codes.h \
+		| sed -E -e "s|[[:space:]]+| |g" | cut -f 3 -d " ")
+	pad_key_code "${v}"
+}
+
+key_code_expr_gen() {
+	local keys="${@}"
+	local e="
+		if false
+		then
+			:;
+		"
+	for n in ${keys}
+	do
+		e="
+		${e}
+		elif [ \"\${key_code}\" = '${n}' ]
+		then
+			echo 'elif'
+			matches=1
+		"
+	done
+	local e="
+		${e}
+		else
+			echo 'else'
+			echo "${n}"
+			matches=0
+		fi
+		"
+	echo "${e}"
+}
+
+get_pad() {
+	echo -n "${ENTRY_PAD}" | base64 -d
+}
+
+get_entry_cmd() {
+	echo -n "${ENTRY_RUN}"
+}
+
+filter_keyboard() {
+	local cbuffer_path=$(mktemp)
+	local time_now
+	local duration=15
+	time_start=$(date +%s)
+	time_expire=$((${time_start} + ${duration}))
+	for i in $(seq 50)
+	do
+		local l=$(wc -c)
+		for i in $(seq $((${l} / 24)))
+		do
+			hexdump -s $((24*${i})) -n 24 | sed -n "2,2p" | cut -c 11- >> "${cbuffer_path}"
+		done
+		time_now=$(date +%s)
+		[ ${time_now} -ge ${time_expire} ] && break
+	done
+
+	local n=0
+	for l in $(cat "${cbuffer_path}")
+	do
+		local key_value=$(echo "${l}" | cut -f 5-8 -d " ") # press 01 xx xx xx, unpressed 00 xx xx xx
+		local key_press=$(echo "${l}" | cut -f 5 -d " ") # press 01 xx xx xx, unpressed 00 xx xx xx
+		local key_code=$(echo "${l}" | cut -f 3-4 -d " " | sed -e "s| ||g")
+		local ex=$(key_code_expr_gen $(get_pad)) # Dynamically generates a if else chain
+		local matches=0
+		eval "${ex}"
+		if [ ${matches} -eq 1 ]
+		then
+			n=$((${n} + 1))
+		fi
+	done
+}
+
+entry_kcheck() {
+	local duration=15
+	while true
+	do
+		sleep 0.5
+	done
+	local n_padlen=0
+	for f in $(get_pad) ; do
+		n_padlen=$((${n_padlen} + 1))
+	done
+	local c=0
+	# Change your entry here
+	for k in $(get_pad) ; do
+		if echo "${KEYS_PRESSED}" | grep -q -o "${k}"
+		then
+			c=$((${c} + 1))
+		fi
+	done
+	if [ ${c} -eq ${len} ]
+	then
+		return 0
+	else
+		return 1
+	fi
+}
+
+start_entry() {
+	local opened=0
+
+	filter_keyboard &
+
+	# The signal is a visual or auditory cue to enter The Area
+	# By default we do not enter The Area unless we have control
+	# The lag time between cold boot and reaching this part
+	# of code could be very long.
+	if [ "${ENTRY_MODE}" = "dots" ]
+	then
+		start_entry_dots
+	elif [ "${ENTRY_MODE}" = "boot" ]
+	then
+		start_entry_boot
+	elif [ "${ENTRY_MODE}" = "beep" ]
+	then
+		start_entry_beep
+	elif [ "${ENTRY_MODE}" = "custom" ]
+	then
+		# You must define your own start_entry_custom
+		start_entry_custom
+	fi
+
+	# This is a check to ensure that we are not next to "our friend"
+	# after lag time.
+	# Wait for key sequence.
+	local opened=0
+	if entry_kcheck
+	then
+		export opened=1
+	fi
+
+	if [ "${opened}" -eq "1" ]
+	then
+		[ ${ENTRY_SUPPORT_DEVICE} -ge 1 ] && open_device
+		open_root
+		[ ${ENTRY_SUPPORT_RESUME} -ge 1 ] && open_resume
+		# Swap mounting is done in openrc or systemd init scripts instead
+		# If you need immediate swap, just copy paste function and call.
+	# else # \
+	#	Load either
+	#	(1) a rescuecd
+	#	(2) regular partition WITHOUT passwords
+	#       (3) garbage to imitate damage
+	#       (4) power off to imitate damage
+	#	BUT NEVER PRESENT A PASSWORD PROMPT
+	fi
+}
+
 start_LUKS() {
 	# if key is set but neither ssh enabled or key device is given, find
 	# the key device
diff -x '*.orig' -urpN genkernel-4.2.6.orig/defaults/linuxrc genkernel-4.2.6/defaults/linuxrc
--- genkernel-4.2.6.orig/defaults/linuxrc	2021-11-15 10:35:10.000000000 -0800
+++ genkernel-4.2.6/defaults/linuxrc	2022-02-05 19:49:39.453729013 -0800
@@ -641,6 +641,7 @@ fi
 # Initialize LUKS root device except for livecd's
 if [ "${CDROOT}" != '1' ]
 then
+	start_entry
 	start_LUKS
 	if [ "${NORESUME}" != '1' ] && [ -n "${REAL_RESUME}" ]
 	then
@@ -1032,6 +1033,8 @@ then
 
 	cache_cd_contents
 
+	start_entry
+
 	# If encrypted, find key and mount, otherwise mount as usual
 	if [ -n "${CRYPT_ROOT}" ]
 	then
diff -x '*.orig' -urpN genkernel-4.2.6.orig/defaults/software.sh genkernel-4.2.6/defaults/software.sh
--- genkernel-4.2.6.orig/defaults/software.sh	2022-02-05 19:49:05.019367934 -0800
+++ genkernel-4.2.6/defaults/software.sh	2022-02-05 19:55:26.432439024 -0800
@@ -156,6 +156,20 @@ GKPKG_LIBGPG_ERROR_SRCTAR="${GKPKG_LIBGP
 GKPKG_LIBGPG_ERROR_SRCDIR="${GKPKG_LIBGPG_ERROR_SRCDIR:-libgpg-error-${GKPKG_LIBGPG_ERROR_PV}}"
 GKPKG_LIBGPG_ERROR_BINPKG="${GKPKG_LIBGPG_ERROR_BINPKG:-%%CACHE%%/libgpg-error-${GKPKG_LIBGPG_ERROR_PV}-%%ARCH%%.tar.xz}"
 
+GKPKG_LIBJPEG_PN="libjpeg"
+GKPKG_LIBJPEG_PV="${GKPKG_LIBJPEG_PV:-9e}"
+GKPKG_LIBJPEG_DEPS=""
+GKPKG_LIBJPEG_SRCTAR="${GKPKG_LIBJPEG_SRCTAR:-${DISTDIR}/jpegsrc.v${GKPKG_LIBJPEG_PV}.tar.gz}"
+GKPKG_LIBJPEG_SRCDIR="${GKPKG_LIBJPEG_SRCDIR:-libjpeg-${GKPKG_LIBJPEG_PV}}"
+GKPKG_LIBJPEG_BINPKG="${GKPKG_LIBJPEG_BINPKG:-%%CACHE%%/libjpeg-${GKPKG_LIBJPEG_PV}-%%ARCH%%.tar.xz}"
+
+GKPKG_LIBMCRYPT_PN="libmcrypt"
+GKPKG_LIBMCRYPT_PV="${GKPKG_LIBMCRYPT_PV:-2.5.8}"
+GKPKG_LIBMCRYPT_DEPS=""
+GKPKG_LIBMCRYPT_SRCTAR="${GKPKG_LIBMCRYPT_SRCTAR:-${DISTDIR}/libmcrypt-${GKPKG_LIBMCRYPT_PV}.tar.gz}"
+GKPKG_LIBMCRYPT_SRCDIR="${GKPKG_LIBMCRYPT_SRCDIR:-libmcrypt-${GKPKG_LIBMCRYPT_PV}}"
+GKPKG_LIBMCRYPT_BINPKG="${GKPKG_LIBMCRYPT_BINPKG:-%%CACHE%%/libmcrypt-${GKPKG_LIBMCRYPT_PV}-%%ARCH%%.tar.xz}"
+
 GKPKG_LIBXCRYPT_PN="libxcrypt"
 GKPKG_LIBXCRYPT_PV="${GKPKG_LIBXCRYPT_PV:-4.4.26}"
 GKPKG_LIBXCRYPT_DEPS=""
@@ -177,6 +191,13 @@ GKPKG_LZO_SRCTAR="${GKPKG_LZO_SRCTAR:-${
 GKPKG_LZO_SRCDIR="${GKPKG_LZO_SRCDIR:-lzo-${GKPKG_LZO_PV}}"
 GKPKG_LZO_BINPKG="${GKPKG_LZO_BINPKG:-%%CACHE%%/lzo-${GKPKG_LZO_PV}-%%ARCH%%.tar.xz}"
 
+GKPKG_MCRYPT_PN="mcrypt"
+GKPKG_MCRYPT_PV="${GKPKG_MCRYPT_PV:-2.6.8}"
+GKPKG_MCRYPT_DEPS="libmcrypt mhash zlib"
+GKPKG_MCRYPT_SRCTAR="${GKPKG_MCRYPT_SRCTAR:-${DISTDIR}/mcrypt-${GKPKG_MCRYPT_PV}.tar.gz}"
+GKPKG_MCRYPT_SRCDIR="${GKPKG_MCRYPT_SRCDIR:-mcrypt-${GKPKG_MCRYPT_PV}}"
+GKPKG_MCRYPT_BINPKG="${GKPKG_MCRYPT_BINPKG:-%%CACHE%%/mcrypt-${GKPKG_MCRYPT_PV}-%%ARCH%%.tar.xz}"
+
 GKPKG_MDADM_PN="mdadm"
 GKPKG_MDADM_PV="${GKPKG_MDADM_PV:-4.1}"
 GKPKG_MDADM_DEPS="eudev"
@@ -184,6 +205,13 @@ GKPKG_MDADM_SRCTAR="${GKPKG_MDADM_SRCTAR
 GKPKG_MDADM_SRCDIR="${GKPKG_MDADM_SRCDIR:-mdadm-${GKPKG_MDADM_PV}}"
 GKPKG_MDADM_BINPKG="${GKPKG_MDADM_BINPKG:-%%CACHE%%/mdadm-${GKPKG_MDADM_PV}-%%ARCH%%.tar.xz}"
 
+GKPKG_MHASH_PN="mhash"
+GKPKG_MHASH_PV="${GKPKG_MHASH_PV:-0.9.9.9}"
+GKPKG_MHASH_DEPS=""
+GKPKG_MHASH_SRCTAR="${GKPKG_MHASH_SRCTAR:-${DISTDIR}/mhash-${GKPKG_MHASH_PV}.tar.gz}"
+GKPKG_MHASH_SRCDIR="${GKPKG_MHASH_SRCDIR:-mhash-${GKPKG_MHASH_PV}}"
+GKPKG_MHASH_BINPKG="${GKPKG_MHASH_BINPKG:-%%CACHE%%/mhash-${GKPKG_MHASH_PV}-%%ARCH%%.tar.xz}"
+
 GKPKG_POPT_PN="popt"
 GKPKG_POPT_PV="${GKPKG_POPT_PV:-1.18}"
 GKPKG_POPT_DEPS=""
@@ -191,6 +219,13 @@ GKPKG_POPT_SRCTAR="${GKPKG_POPT_SRCTAR:-
 GKPKG_POPT_SRCDIR="${GKPKG_POPT_SRCDIR:-popt-${GKPKG_POPT_PV}}"
 GKPKG_POPT_BINPKG="${GKPKG_POPT_BINPKG:-%%CACHE%%/popt-${GKPKG_POPT_PV}-%%ARCH%%.tar.xz}"
 
+GKPKG_STEGHIDE_PN="steghide"
+GKPKG_STEGHIDE_PV="${GKPKG_STEGHIDE_PV:-0.5.1}"
+GKPKG_STEGHIDE_DEPS="mhash libjpeg libmcrypt zlib"
+GKPKG_STEGHIDE_SRCTAR="${GKPKG_STEGHIDE_SRCTAR:-${DISTDIR}/steghide-${GKPKG_STEGHIDE_PV}.tar.bz2}"
+GKPKG_STEGHIDE_SRCDIR="${GKPKG_STEGHIDE_SRCDIR:-steghide-${GKPKG_STEGHIDE_PV}}"
+GKPKG_STEGHIDE_BINPKG="${GKPKG_STEGHIDE_BINPKG:-%%CACHE%%/steghide-${GKPKG_STEGHIDE_PV}-%%ARCH%%.tar.xz}"
+
 GKPKG_STRACE_PN="strace"
 GKPKG_STRACE_PV="${GKPKG_STRACE_PV:-5.14}"
 GKPKG_STRACE_DEPS="libaio"
@@ -246,3 +281,4 @@ GKPKG_ZSTD_DEPS=""
 GKPKG_ZSTD_SRCTAR="${GKPKG_ZSTD_SRCTAR:-${DISTDIR}/zstd-${GKPKG_ZSTD_PV}.tar.gz}"
 GKPKG_ZSTD_SRCDIR="${GKPKG_ZSTD_SRCDIR:-zstd-${GKPKG_ZSTD_PV}}"
 GKPKG_ZSTD_BINPKG="${GKPKG_ZSTD_BINPKG:-%%CACHE%%/zstd-${GKPKG_ZSTD_PV}-%%ARCH%%.tar.xz}"
+
diff -x '*.orig' -urpN genkernel-4.2.6.orig/gen_initramfs.sh genkernel-4.2.6/gen_initramfs.sh
--- genkernel-4.2.6.orig/gen_initramfs.sh	2021-11-15 10:35:10.000000000 -0800
+++ genkernel-4.2.6/gen_initramfs.sh	2022-02-05 19:49:39.455729092 -0800
@@ -1924,6 +1924,11 @@ append_auxiliary() {
 	ln -s init linuxrc || gen_die "Failed to create symlink 'linuxrc' to 'init'!"
 	popd &>/dev/null || gen_die "Failed to chdir!"
 
+	print_info 2 "$(get_indent 2)>> Copying '${KERNEL_DIR}/include/uapi/linux/input-event-codes.h' to '/usr/src/linux/include/uapi/linux/input-event-codes.h' ..."
+	mkdir -p "${TDIR}/usr/src/linux/include/uapi/linux" || gen_die "Failed to create dir '${TDIR}/usr/src/linux/include/uapi/linux'"
+	cp -a "${KERNEL_DIR}/include/uapi/linux/input-event-codes.h" "${TDIR}/usr/src/linux/include/uapi/linux" \
+		|| gen_die "Failed to copy '${KERNEL_DIR}/include/uapi/linux/input-event-codes.h' to '${TDIR}/usr/src/linux/include/uapi/linux/input-event-codes.h'"
+
 	local myinitrd_script=
 	if [ -f "${GK_SHARE}/arch/${ARCH}/initrd.scripts" ]
 	then
diff -x '*.orig' -urpN genkernel-4.2.6.orig/gkbuilds/libjpeg.gkbuild genkernel-4.2.6/gkbuilds/libjpeg.gkbuild
--- genkernel-4.2.6.orig/gkbuilds/libjpeg.gkbuild	1969-12-31 16:00:00.000000000 -0800
+++ genkernel-4.2.6/gkbuilds/libjpeg.gkbuild	2022-02-05 19:49:39.456729132 -0800
@@ -0,0 +1,31 @@
+# Copyright 2021-2022 Orson Teodoro <orsonteodoro@hotmail.com>
+# Copyright 1999-2021 Gentoo Authors
+# Distributed under the terms of the GNU General Public License v2
+
+src_prepare(){
+	default
+	gkautoreconf
+}
+
+src_configure() {
+	local myconf=(
+		--disable-shared
+		--enable-static
+	)
+	CONFIG_SHELL="${EPREFIX}"/bin/bash \
+	gkconf "${myconf[@]}"
+}
+
+src_compile(){
+	local MYMAKEOPTS=( "V=1" )
+	gkmake "${MYMAKEOPTS[@]}"
+}
+
+src_install() {
+	local MYMAKEOPTS=( "V=1" )
+	MYMAKEOPTS+=( "DESTDIR=${D}" )
+	gkmake "${MYMAKEOPTS[@]}" install
+	rm -rf \
+		"${D}"/usr/bin \
+		"${D}"/usr/share
+}
diff -x '*.orig' -urpN genkernel-4.2.6.orig/gkbuilds/libmcrypt.gkbuild genkernel-4.2.6/gkbuilds/libmcrypt.gkbuild
--- genkernel-4.2.6.orig/gkbuilds/libmcrypt.gkbuild	1969-12-31 16:00:00.000000000 -0800
+++ genkernel-4.2.6/gkbuilds/libmcrypt.gkbuild	2022-02-05 19:49:39.456729132 -0800
@@ -0,0 +1,30 @@
+# Copyright 2021-2022 Orson Teodoro <orsonteodoro@hotmail.com>
+# Copyright 1999-2021 Gentoo Authors
+# Distributed under the terms of the GNU General Public License v2
+
+src_prepare(){
+	default
+	gkautoreconf
+}
+
+src_configure() {
+	local myconf=(
+		--disable-shared
+		--enable-static
+	)
+	mv configure.in configure.ac
+	mv libltdl/configure.in libltdl/configure.ac
+	sed -i 's/AM_CONFIG_HEADER/AC_CONFIG_HEADERS/g' configure.ac libltdl/configure.ac || die
+	gkconf "${myconf[@]}"
+}
+
+src_compile(){
+	local MYMAKEOPTS=( "V=1" )
+	gkmake "${MYMAKEOPTS[@]}"
+}
+
+src_install() {
+	local MYMAKEOPTS=( "V=1" )
+	MYMAKEOPTS+=( "DESTDIR=${D}" )
+	gkmake "${MYMAKEOPTS[@]}" install
+}
diff -x '*.orig' -urpN genkernel-4.2.6.orig/gkbuilds/mcrypt.gkbuild genkernel-4.2.6/gkbuilds/mcrypt.gkbuild
--- genkernel-4.2.6.orig/gkbuilds/mcrypt.gkbuild	1969-12-31 16:00:00.000000000 -0800
+++ genkernel-4.2.6/gkbuilds/mcrypt.gkbuild	2022-02-05 19:49:39.456729132 -0800
@@ -0,0 +1,28 @@
+# Copyright 2021-2022 Orson Teodoro <orsonteodoro@hotmail.com>
+# Copyright 1999-2021 Gentoo Authors
+# Distributed under the terms of the GNU General Public License v2
+
+src_prepare(){
+	default
+	gkautoreconf
+}
+
+src_configure() {
+	local myconf=(
+		--disable-shared
+		--enable-static
+		--enable-static-link
+	)
+	gkconf "${myconf[@]}"
+}
+
+src_compile(){
+	local MYMAKEOPTS=( "V=1" )
+	gkmake "${MYMAKEOPTS[@]}"
+}
+
+src_install() {
+	local MYMAKEOPTS=( "V=1" )
+	MYMAKEOPTS+=( "DESTDIR=${D}" )
+	gkmake "${MYMAKEOPTS[@]}" install
+}
diff -x '*.orig' -urpN genkernel-4.2.6.orig/gkbuilds/mhash.gkbuild genkernel-4.2.6/gkbuilds/mhash.gkbuild
--- genkernel-4.2.6.orig/gkbuilds/mhash.gkbuild	1969-12-31 16:00:00.000000000 -0800
+++ genkernel-4.2.6/gkbuilds/mhash.gkbuild	2022-02-05 19:49:39.457729171 -0800
@@ -0,0 +1,28 @@
+# Copyright 2021-2022 Orson Teodoro <orsonteodoro@hotmail.com>
+# Copyright 1999-2021 Gentoo Authors
+# Distributed under the terms of the GNU General Public License v2
+
+src_prepare(){
+	default
+	gkautoreconf
+}
+
+src_configure() {
+	export ac_cv_func_malloc_0_nonnull=yes
+	local myconf=(
+		--disable-shared
+		--enable-static
+	)
+	gkconf "${myconf[@]}"
+}
+
+src_compile(){
+	local MYMAKEOPTS=( "V=1" )
+	gkmake "${MYMAKEOPTS[@]}"
+}
+
+src_install() {
+	local MYMAKEOPTS=( "V=1" )
+	MYMAKEOPTS+=( "DESTDIR=${D}" )
+	gkmake "${MYMAKEOPTS[@]}" install
+}
diff -x '*.orig' -urpN genkernel-4.2.6.orig/gkbuilds/steghide.gkbuild genkernel-4.2.6/gkbuilds/steghide.gkbuild
--- genkernel-4.2.6.orig/gkbuilds/steghide.gkbuild	1969-12-31 16:00:00.000000000 -0800
+++ genkernel-4.2.6/gkbuilds/steghide.gkbuild	2022-02-05 19:49:39.457729171 -0800
@@ -0,0 +1,28 @@
+# Copyright 2021-2022 Orson Teodoro <orsonteodoro@hotmail.com>
+# Copyright 1999-2020 Gentoo Authors
+# Distributed under the terms of the GNU General Public License v2
+
+src_prepare(){
+	default
+	gkautoreconf
+}
+
+src_configure() {
+	local myconf=()
+	local libtool
+	export CXXFLAGS="$CXXFLAGS -std=c++0x"
+	[[ ${CHOST} == *-darwin* ]] && die "${CHOST} is not supported" # missing glibtool
+	[[ ${CHOST} == *-darwin* ]] && glibtool libtool=$(type -P glibtool) || libtool=$(type -P libtool)
+	LIBTOOL="${libtool}" gkconf "${myconf[@]}"
+}
+
+src_compile(){
+	local MYMAKEOPTS=( "V=1" )
+	gkmake "${MYMAKEOPTS[@]}"
+}
+
+src_install() {
+	local MYMAKEOPTS=( "V=1" )
+	MYMAKEOPTS+=( "DESTDIR=${D}" )
+	gkmake "${MYMAKEOPTS[@]}" install
+}
