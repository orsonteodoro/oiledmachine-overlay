Patch Author:  Orson Teodoro <orsonteodoro@hotmail.com>
Patch status:  In Development / Work In Progress (WIP)
Date: Sat Sep 11 09:50:54 PM PDT 2021 (Unix time: 1631422254)

Do not run in production yet!

Added PGO trainers for use in genkernel.  The PGO trainer script can be used
outside of genkernel and should be designed for other distros.

The pgo_trainer_p2p may need changes to run under sandbox like firejail
with a new profile and maybe sudo changes.

diff -x '*.rej' -x '*.orig' -urpN genkernel-4.2.3.orig/gen_cmdline.sh genkernel-4.2.3/gen_cmdline.sh
--- genkernel-4.2.3.orig/gen_cmdline.sh	2021-09-19 20:27:08.960482899 -0700
+++ genkernel-4.2.3/gen_cmdline.sh	2021-09-19 20:30:44.515490002 -0700
@@ -13,6 +13,7 @@ longusage() {
   echo "  initramfs			Build only the ramdisk/initramfs"
   echo "  kernel			Build only the kernel and modules"
   echo "  ramdisk			Build only the ramdisk/initramfs"
+  echo "  train				Train the kernel to generate a PGO profile"
   echo
   echo "Available Options: "
   echo "  Configuration settings"
@@ -25,6 +26,7 @@ longusage() {
   echo "	--cleanup		Clean up temporary directories on exit"
   echo "	--no-cleanup		Do not remove any temporary directories on exit"
   echo "	--compiler-noise        See all the compilation flags while building"
+  echo "	--debug-kernel		Don't allow PGO patches interfere with debugging (gcov, debugfs)"
   echo "  Kernel Configuration settings"
   echo "	--menuconfig		Run menuconfig after oldconfig"
   echo "	--no-menuconfig		Do not run menuconfig after oldconfig"
@@ -84,6 +86,32 @@ longusage() {
   echo "	--kernel-modules-prefix=<dir>"
   echo "				Prefix to kernel module destination, modules"
   echo "				will be installed in <prefix>/lib/modules"
+  echo "  Kernel PGO settings"
+  echo "	--pgi			Build with phase 1 PGI instrumentaton"
+  echo "	--pgt-2d-draw		Run phase 2 PGT trainer for video card benchmarks with 2D drawing xscreensavers"
+  echo "	--pgt-3d-ogl1.3		Run phase 2 PGT trainer for video card benchmarks with OpenGL 1.3 xscreensavers"
+  echo "	--pgt-all		Run phase 2 PGT trainer for with all benchmarks"
+  echo "	--pgt-all-non-root	Run phase 2 PGT trainer for with all benchmarks that should run as non-root"
+  echo "	--pgt-crypto-chn	Run phase 2 PGT trainer for Crypto API CHN hashes and ciphers"
+  echo "	--pgt-crypto-common	Run phase 2 PGT trainer for Crypto API common hashes and ciphers"
+  echo "	--pgt-crypto-kor	Run phase 2 PGT trainer for Crypto API KOR ciphers"
+  echo "	--pgt-crypto-less-common"
+  echo "				Run phase 2 PGT trainer for Crypto API less common hashes and ciphers"
+  echo "	--pgt-crypto-old	Run phase 2 PGT trainer for Crypto API for deprecated hashes and ciphers"
+  echo "	--pgt-crypto-rus	Run phase 2 PGT trainer for Crypto API RUS hashes"
+  echo "	--pgt-crypto-std	Run phase 2 PGT trainer for Crypto API industry standard hashes and ciphers"
+  echo "	--pgt-custom		Run phase 2 PGT trainer for with a custom benchmark script"
+  echo "	--pgt-filesystem	Run phase 2 PGT trainer for the filesystem"
+  echo "	--pgt-emerge1		Run phase 2 PGT trainer for CPU, disk, and memory subsystem through emerging xorg-server"
+  echo "	--pgt-emerge2		Run phase 2 PGT trainer for extreme memory and multithreading use"
+  echo "	--pgt-memory		Run phase 2 PGT trainer for the memory subsystem"
+  echo "	--pgt-network		Run phase 2 PGT trainer for network subsystem by downloading the linux tarball with ICMP ping and UDP traceroute tests"
+  echo "	--pgt-p2p		Run phase 2 PGT trainer for P2P which measures CPU, CPU/IO schedulers, network, memory"
+  echo "	--pgt-reset		Resets or empties the PGO profile if you quit a test accidently"
+  echo "	--pgt-sudo		Allow use of sudo for tracking progress of non-root PGO trainers"
+  echo "	--pgt-webcam		Run phase 2 PGO trainer for the webcam"
+  echo "	--pgt-yt		Run phase 2 PGO trainer for web streaming, measuring network, CPU, audio"
+  echo "	--pgo			Build with phase 3 PGO optimized"
   echo "  Low-Level Compile settings"
   echo "	--cfi			Use Clang/LLVM to build a CFI protected kernel"
   echo "	--clang-kernel		Use Clang/LLVM to build the kernel"
@@ -937,20 +965,123 @@ parse_cmdline() {
 			CMD_STRIP_TYPE=none
 			print_info 3 "CMD_STRIP_TYPE: ${CMD_STRIP_TYPE}"
 			;;
+		--debug-kernel)
+			CMD_DEBUG_KERNEL=1
+			print_info 3 "CMD_DEBUG_KERNEL: ${CMD_DEBUG_KERNEL}"
+			;;
+		--pgi)
+			CMD_PGI="yes"
+			print_info 3 "CMD_PGI: ${CMD_PGI}"
+			;;
+		--pgt-2d-draw)
+			CMD_PGT_2D_DRAW="yes"
+			print_info 3 "CMD_PGT_2D_DRAW: ${CMD_PGT_2D_DRAW}"
+			;;
+		--pgt-3d-ogl1.3)
+			CMD_PGT_3D_OGL1_3="yes"
+			print_info 3 "CMD_PGT_3D_OGL1_3: ${CMD_PGT_3D_OGL1_3}"
+			;;
+		--pgt-all)
+			CMD_PGT_ALL="yes"
+			print_info 3 "CMD_PGT_ALL: ${CMD_PGT_ALL}"
+			;;
+		--pgt-all-non-root)
+			CMD_PGT_ALL_NON_ROOT="yes"
+			print_info 3 "CMD_PGT_ALL_NON_ROOT: ${CMD_PGT_ALL_NON_ROOT}"
+			;;
+		--pgt-crypto-chn)
+			CMD_PGT_CRYPTO_CHN="yes"
+			print_info 3 "CMD_CRYPTO_CHN: ${CMD_CRYPTO_CHN}"
+			;;
+		--pgt-crypto-common)
+			CMD_PGT_CRYPTO_COMMON="yes"
+			print_info 3 "CMD_CRYPTO_COMMON: ${CMD_CRYPTO_COMMON}"
+			;;
+		--pgt-crypto-kor)
+			CMD_PGT_CRYPTO_KOR="yes"
+			print_info 3 "CMD_CRYPTO_KOR: ${CMD_CRYPTO_KOR}"
+			;;
+		--pgt-crypto-less-common)
+			CMD_PGT_CRYPTO_LESS_COMMON="yes"
+			print_info 3 "CMD_CRYPTO_LESS_COMMON: ${CMD_CRYPTO_LESS_COMMON}"
+			;;
+		--pgt-crypto-old)
+			CMD_PGT_CRYPTO_OLD="yes"
+			print_info 3 "CMD_CRYPTO_OLD: ${CMD_CRYPTO_OLD}"
+			;;
+		--pgt-crypto-rus)
+			CMD_PGT_CRYPTO_RUS="yes"
+			print_info 3 "CMD_CRYPTO_RUS: ${CMD_CRYPTO_RUS}"
+			;;
+		--pgt-crypto-std)
+			CMD_PGT_CRYPTO_STD="yes"
+			print_info 3 "CMD_CRYPTO_STD: ${CMD_CRYPTO_STD}"
+			;;
+		--pgt-custom)
+			CMD_PGT_CUSTOM="yes"
+			print_info 3 "CMD_PGT_CUSTOM: ${CMD_PGT_CUSTOM}"
+			;;
+		--pgt-filesystem)
+			CMD_PGT_FILESYSTEM="yes"
+			print_info 3 "CMD_PGT_FILESYSTEM: ${CMD_PGT_FILESYSTEM}"
+			;;
+		--pgt-emerge1)
+			CMD_PGT_EMERGE1="yes"
+			print_info 3 "CMD_PGT_EMERGE1: ${CMD_PGT_EMERGE1}"
+			;;
+		--pgt-emerge2)
+			CMD_PGT_EMERGE2="yes"
+			print_info 3 "CMD_PGT_EMERGE2: ${CMD_PGT_EMERGE2}"
+			;;
+		--pgt-memory)
+			CMD_PGT_MEMORY="yes"
+			print_info 3 "CMD_PGT_MEMORY: ${CMD_PGT_MEMORY}"
+			;;
+		--pgt-network)
+			CMD_PGT_NETWORK="yes"
+			print_info 3 "CMD_PGT_NETWORK: ${CMD_PGT_NETWORK}"
+			;;
+		--pgt-p2p)
+			CMD_PGT_P2P="yes"
+			print_info 3 "CMD_PGT_P2P: ${CMD_PGT_P2P}"
+			;;
+		--pgt-reset)
+			CMD_PGT_RESET="yes"
+			print_info 3 "CMD_PGT_RESET: ${CMD_PGT_RESET}"
+			;;
+		--pgt-sudo)
+			ALLOW_SUDO=1
+			print_info 3 "ALLOW_SUDO: ${ALLOW_SUDO}"
+			;;
+		--pgt-webcam)
+			CMD_PGT_WEBCAM="yes"
+			print_info 3 "CMD_PGT_WEBCAM: ${CMD_PGT_WEBCAM}"
+			;;
+		--pgt-yt)
+			CMD_PGT_YT="yes"
+			print_info 3 "CMD_PGT_YT: ${CMD_PGT_YT}"
+			;;
+		--pgo)
+			CMD_PGO="yes"
+			print_info 3 "CMD_PGO: ${CMD_PGO}"
+			;;
 		all)
 			BUILD_KERNEL="yes"
 			BUILD_MODULES="yes"
 			BUILD_RAMDISK="yes"
+			TRAIN="no"
 			;;
 		ramdisk|initramfs)
 			BUILD_KERNEL="no"
 			BUILD_MODULES="no"
 			BUILD_RAMDISK="yes"
+			TRAIN="no"
 			;;
 		kernel)
 			BUILD_KERNEL="yes"
 			BUILD_MODULES="yes"
 			BUILD_RAMDISK="no"
+			TRAIN="no"
 			;;
 		bzImage)
 			BUILD_KERNEL="yes"
@@ -958,6 +1089,13 @@ parse_cmdline() {
 			BUILD_RAMDISK="no"
 			CMD_RAMDISKMODULES="no"
 			print_info 3 "CMD_RAMDISKMODULES: ${CMD_RAMDISKMODULES}"
+			TRAIN="no"
+			;;
+		train)
+			BUILD_KERNEL="no"
+			BUILD_MODULES="no"
+			BUILD_RAMDISK="no"
+			TRAIN="yes"
 			;;
 		--help)
 			longusage
diff -x '*.rej' -x '*.orig' -urpN genkernel-4.2.3.orig/gen_compile.sh genkernel-4.2.3/gen_compile.sh
--- genkernel-4.2.3.orig/gen_compile.sh	2021-09-19 20:27:08.960482899 -0700
+++ genkernel-4.2.3/gen_compile.sh	2021-09-19 20:27:34.816483751 -0700
@@ -128,6 +128,13 @@ compile_generic() {
 				compile_cmd+=( "CLANG_FLAGS='${CMD_KERNEL_CLANG_FLAGS}'" )
 			fi
 
+			# Already added PGI flags in patch
+
+			if isTrue "${CMD_PGO}" && isTrue "${CMD_LLVM_KERNEL}"
+			then
+				compile_cmd+=( KCFLAGS=-fprofile-use="${KERNEL_OUTPUTDIR}/vmlinux.profdata" )
+			fi
+
 			compile_cmd+=( "HOSTAR='$(tc-getBUILD_AR)'" )
 			compile_cmd+=( "HOSTCC='$(tc-getBUILD_CC)'" )
 			compile_cmd+=( "HOSTCXX='$(tc-getBUILD_CXX)'" )
diff -x '*.rej' -x '*.orig' -urpN genkernel-4.2.3.orig/gen_configkernel.sh genkernel-4.2.3/gen_configkernel.sh
--- genkernel-4.2.3.orig/gen_configkernel.sh	2021-09-19 20:27:08.962482899 -0700
+++ genkernel-4.2.3/gen_configkernel.sh	2021-09-19 20:27:34.817483751 -0700
@@ -1031,6 +1031,25 @@ config_kernel() {
 		fi
 	fi
 
+	if isTrue "${CMD_PGI}" && [ -z "${CMD_DEBUG_KERNEL}" ]
+	then
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for PGI support are set ..."
+		if isTrue "${CMD_LLVM_KERNEL}"
+		then
+			kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CC_HAS_NO_PROFILE_FN_ATTR" "y"
+			kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CC_IS_CLANG" "y"
+			kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_DEBUG_FS" "y"
+			kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_PGO_CLANG" "y"
+		fi
+	fi
+
+	if isTrue "${CMD_PGO}" && [ -z "${CMD_DEBUG_KERNEL}" ]
+	then
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for PGO support are met ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_DEBUG_FS" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_PGO_CLANG" ""
+	fi
+
 	if isTrue "${CMD_LLVM_KERNEL}"
 	then
 		local llvm_slot
diff -x '*.rej' -x '*.orig' -urpN genkernel-4.2.3.orig/gen_determineargs.sh genkernel-4.2.3/gen_determineargs.sh
--- genkernel-4.2.3.orig/gen_determineargs.sh	2021-09-19 20:27:08.963482899 -0700
+++ genkernel-4.2.3/gen_determineargs.sh	2021-09-19 20:27:34.817483751 -0700
@@ -524,12 +524,20 @@ determine_real_args() {
 		can_write_log=yes
 	fi
 
-	if ! isTrue "${can_write_log}"
+	if ! isTrue "${can_write_log}" && ! is_pgt
 	then
 		small_die "Cannot write to '${LOGFILE}'!"
 	fi
 
-	echo ">>> Started genkernel v${GK_V} on: $(date +"%Y-%m-%d %H:%M:%S")" > "${LOGFILE}" 2>/dev/null || small_die "Could not write to '${LOGFILE}'!"
+	if ! is_pgt
+	then
+		echo ">>> Started genkernel v${GK_V} on: $(date +"%Y-%m-%d %H:%M:%S")" > "${LOGFILE}" 2>/dev/null || small_die "Could not write to '${LOGFILE}'!"
+	fi
+
+	if is_pgt
+	then
+		export CMD_TMPDIR="${HOME}/.cache"
+	fi
 
 	dump_debugcache
 
diff -x '*.rej' -x '*.orig' -urpN genkernel-4.2.3.orig/gen_funcs.sh genkernel-4.2.3/gen_funcs.sh
--- genkernel-4.2.3.orig/gen_funcs.sh	2021-07-08 14:09:46.000000000 -0700
+++ genkernel-4.2.3/gen_funcs.sh	2021-09-19 20:27:34.818483751 -0700
@@ -1,6 +1,16 @@
 #!/bin/bash
 # $Id: ab7a7cea08c423b465ffcbdda3909279138f9b97 $
 
+has_pgt() {
+	if declare -f is_pgt 2>/dev/null 1>/dev/null
+	then
+		if is_pgt ; then
+		        return 0
+		fi
+	fi
+	return 1
+}
+
 isTrue() {
 	case "$1" in
 		[Tt][Rr][Uu][Ee])
@@ -159,14 +169,17 @@ print_info() {
 			STR="${STRR}"
 		fi
 
-		if isTrue "${TODEBUGCACHE}"
+		if has_pgt
+		then
+			:;
+		elif isTrue "${TODEBUGCACHE}"
 		then
 			DEBUGCACHE="${DEBUGCACHE}${STR}"
 		else
 			printf "%b" "${STR}" >> "${LOGFILE}"
 		fi
 
-		if [ ${NEWLINE} -ne 0 ]
+		if [ ${NEWLINE} -ne 0 ] && ! has_pgt
 		then
 			if isTrue "${TODEBUGCACHE}"
 			then
@@ -602,7 +615,7 @@ cleanup() {
 	GK_TIME_END=$(date +%s)
 	let GK_TIME_RUNTIME_SECONDS=${GK_TIME_END}-${GK_TIME_START}
 	let GK_TIME_RUNTIME_DAYS=${GK_TIME_RUNTIME_SECONDS}/86400
-	TZ= printf ">>> Ended on: $(date +"%Y-%m-%d %H:%M:%S") (after %d days%(%k hours %M minutes %S seconds)T)\n" ${GK_TIME_RUNTIME_DAYS} ${GK_TIME_RUNTIME_SECONDS} >> "${LOGFILE}" 2>/dev/null
+	! has_pgt && TZ= printf ">>> Ended on: $(date +"%Y-%m-%d %H:%M:%S") (after %d days%(%k hours %M minutes %S seconds)T)\n" ${GK_TIME_RUNTIME_DAYS} ${GK_TIME_RUNTIME_SECONDS} >> "${LOGFILE}" 2>/dev/null
 }
 
 clear_tmpdir() {
@@ -2117,7 +2130,7 @@ make_bootdir_writable() {
 			;;
 	esac
 
-	if [ ! -w "${BOOTDIR}" ]
+	if [ ! -w "${BOOTDIR}" ] && ! has_pgt
 	then
 		gen_die "Cannot write to bootdir '${BOOTDIR}'!"
 	fi
diff -x '*.rej' -x '*.orig' -urpN genkernel-4.2.3.orig/genkernel genkernel-4.2.3/genkernel
--- genkernel-4.2.3.orig/genkernel	2021-09-19 20:27:08.964482899 -0700
+++ genkernel-4.2.3/genkernel	2021-09-19 20:31:05.681490700 -0700
@@ -80,6 +80,7 @@ LOGLEVEL=${LOGLEVEL:-1}
 source "${GK_SHARE}"/defaults/compression_methods.sh || small_die "Could not read '${GK_SHARE}/defaults/compression_methods.sh'"
 source "${GK_SHARE}"/defaults/software.sh || small_die "Could not read '${GK_SHARE}/defaults/software.sh'"
 source "${GK_SHARE}"/defaults/config.sh || small_die "Could not read '${GK_SHARE}/defaults/config.sh'"
+source "${GK_SHARE}"/gen_pgo.sh || small_die "Could not read '${GK_SHARE}/gen_pgo.sh'"
 source "${GK_SHARE}"/gen_funcs.sh || small_die "Could not read '${GK_SHARE}/gen_funcs.sh'"
 source "${GK_SHARE}"/gen_cmdline.sh || small_die "Could not read '${GK_SHARE}/gen_cmdline.sh'"
 source "${GK_SHARE}"/gen_arch.sh || small_die "Could not read '${GK_SHARE}/gen_arch.sh'"
@@ -109,7 +110,7 @@ done
 unset GK_OPTION
 
 # Check if no action is specified...
-if ! isTrue "${BUILD_KERNEL}" && ! isTrue "${BUILD_RAMDISK}"
+if ! isTrue "${BUILD_KERNEL}" && ! isTrue "${BUILD_RAMDISK}" && ! isTrue "${TRAIN}"
 then
 	usage
 	exit 1
@@ -225,11 +226,105 @@ fi
 isTrue "${CMD_INSTALL}" && make_bootdir_writable
 
 check_disk_space_requirements
+check_pgo_requirements
+
+for pgx in \
+	"${CMD_PGI}" \
+	"${CMD_PGO}" \
+	"${CMD_PGT_ALL}" \
+	"${CMD_PGT_ALL_NON_ROOT}" \
+	"${CMD_PGT_CUSTOM}" \
+	"${CMD_PGT_CRYPTO_STD}" \
+	"${CMD_PGT_CRYPTO_COMMON}" \
+	"${CMD_PGT_CRYPTO_LESS_COMMON}" \
+	"${CMD_PGT_FILESYSTEM}" \
+	"${CMD_PGT_EMERGE1}" \
+	"${CMD_PGT_EMERGE2}" \
+	"${CMD_PGT_MEMORY}" \
+	"${CMD_PGT_NETWORK}" \
+	"${CMD_PGT_P2P}" \
+	"${CMD_PGT_WEBCAM}" ; do
+	if isTrue "${pgx}" ; then
+		if [ -n "${CMD_LLVM_SLOT}" ] ; then
+			llvm_slot=${CMD_LLVM_SLOT}
+			if (( ${llvm_slot} < "13" )) ; then
+				print_info 1 "$(get_indent 1)>> PGO requires both clang and llvm >= 13 with commits after Jun 21, 2021"
+				exit 1
+			fi
+		else
+			llvm_slot=$(ls "${BROOT}/usr/lib/llvm" | sort -rV | head -n 1)
+			if (( ${llvm_slot} < "13" )) ; then
+				print_info 1 "$(get_indent 1)>> PGO requires both clang and llvm >= 13 with commits after Jun 21, 2021"
+				exit 1
+			fi
+		fi
+	fi
+done
+
+if isTrue "${CMD_PGI}" && isTrue "${CMD_PGO}"
+then
+	print_info 1 "$(get_indent 1)>> --pgi with --pgo is not allowed"
+	return 1
+fi
+
+for pgt in "${CMD_PGT_ALL}" \
+	"${CMD_PGT_ALL_NON_ROOT}" \
+	"${CMD_PGT_CUSTOM}" \
+	"${CMD_PGT_CRYPTO_STD}" \
+	"${CMD_PGT_CRYPTO_COMMON}" \
+	"${CMD_PGT_CRYPTO_LESS_COMMON}" \
+	"${CMD_PGT_FILESYSTEM}" \
+	"${CMD_PGT_EMERGE1}" \
+	"${CMD_PGT_EMERGE2}" \
+	"${CMD_PGT_MEMORY}" \
+	"${CMD_PGT_NETWORK}" \
+	"${CMD_PGT_P2P}" \
+	"${CMD_PGT_WEBCAM}" ; do
+	if isTrue "${CMD_PGI}" && isTrue "${pgt}"
+	then
+		print_info 1 "$(get_indent 1)>> --pgi with a --pgt is not allowed"
+		return 1
+	fi
+	if isTrue "${CMD_PGO}" && isTrue "${pgt}"
+	then
+		print_info 1 "$(get_indent 1)>> --pgo with a --pgt is not allowed"
+		return 1
+	fi
+done
+
+if isTrue "${CMD_PGO}" && [ ! -e "${KERNEL_OUTPUTDIR}/.pgt-trained" ]
+then
+	print_info 1 "$(get_indent 1)>> --pgo requires --pgt training first"
+	return 1
+fi
 
 if isTrue "${BUILD_KERNEL}" && ! isTrue "${KERNCACHE_IS_VALID}"
 then
 	print_info 1 '' 1 0
 
+	if isTrue "${CMD_PGI}" || isTrue "${CMD_PGO}"
+	then
+		if [ -n "${CMD_LLVM_SLOT}" ] ; then
+			llvm_slot=${CMD_LLVM_SLOT}
+		else
+			llvm_slot=$(ls "${BROOT}/usr/lib/llvm" | sort -rV | head -n 1)
+		fi
+		export PATH="${BROOT}/usr/lib/llvm/${llvm_slot}/bin:${PATH}"
+	fi
+
+	if isTrue "${CMD_PGO}"
+	then
+		profraw_path="/sys/kernel/debug/pgo/vmlinux.profraw"
+		print_info 1 "$(get_indent 1)>> Collecting and merging PGO data:"
+		if [ ! -e "${profraw_path}" ] ; then
+			print_info 1 "$(get_indent 1)>> Missing ${profraw_path}"
+			exit 1
+		fi
+		cp -a "${profraw_path}" "${KERNEL_OUTPUTDIR}/vmlinux.profraw" || exit 1
+		llvm-profdata merge --output="${KERNEL_OUTPUTDIR}/vmlinux.profdata" \
+			"${KERNEL_OUTPUTDIR}/vmlinux.profraw" || exit 1
+	fi
+
 	# Configure kernel
 	config_kernel
 
@@ -559,6 +654,47 @@ fi
 
 isTrue "${CMD_INSTALL}" && restore_boot_mount_state
 
+if isTrue "${CMD_PGI}" || isTrue "${CMD_PGT_RESET}"
+then
+	rm -f "${KERNEL_OUTPUTDIR}/.pgt-inited"
+	rm -f "${KERNEL_OUTPUTDIR}/.pgt-trained"
+fi
+
+if is_pgt
+then
+	if [ ! -e "${KERNEL_OUTPUTDIR}/.pgt-inited" ] ; then
+		echo 1 > /sys/kernel/debug/pgo/reset
+		touch "${KERNEL_OUTPUTDIR}/.pgt-inited"
+	fi
+fi
+
+if isTrue "${CMD_PGT_ALL}"
+then
+	pgo_trainer_all
+elif isTrue "${CMD_PGT_ALL_NON_ROOT}"
+then
+	pgo_trainer_all_non_root
+else
+	isTrue "${CMD_PGT_2D_DRAW}" && pgo_trainer_2d_draw
+	isTrue "${CMD_PGT_3D_OGL1_3}" && pgo_trainer_3d_ogl1_3
+	isTrue "${CMD_PGT_CUSTOM}" && pgo_trainer_custom
+	isTrue "${CMD_PGT_CRYPTO_CHN}" && pgo_trainer_crypto_chn
+	isTrue "${CMD_PGT_CRYPTO_COMMON}" && pgo_trainer_crypto_common
+	isTrue "${CMD_PGT_CRYPTO_KOR}" && pgo_trainer_crypto_kor
+	isTrue "${CMD_PGT_CRYPTO_LESS_COMMON}" && pgo_trainer_crypto_less_common
+	isTrue "${CMD_PGT_CRYPTO_OLD}" && pgo_trainer_crypto_deprecated
+	isTrue "${CMD_PGT_CRYPTO_RUS}" && pgo_trainer_crypto_rus
+	isTrue "${CMD_PGT_CRYPTO_STD}" && pgo_trainer_crypto_std
+	isTrue "${CMD_PGT_FILESYSTEM}" && pgo_trainer_filesystem
+	isTrue "${CMD_PGT_EMERGE1}" && pgo_trainer_emerge1
+	isTrue "${CMD_PGT_EMERGE2}" && pgo_trainer_emerge2
+	isTrue "${CMD_PGT_MEMORY}" && pgo_trainer_memory
+	isTrue "${CMD_PGT_NETWORK}" && pgo_trainer_network
+	isTrue "${CMD_PGT_P2P}" && pgo_trainer_p2p
+	isTrue "${CMD_PGT_WEBCAM}" && pgo_trainer_webcam
+	isTrue "${CMD_PGT_YT}" && pgo_trainer_yt
+fi
+
 print_info 1 '' 1 0
 print_info 1 'Do NOT report kernel bugs as genkernel bugs unless your bug'
 print_info 1 'is about the default genkernel configuration...'
diff -x '*.rej' -x '*.orig' -urpN genkernel-4.2.3.orig/genkernel.8 genkernel-4.2.3/genkernel.8
--- genkernel-4.2.3.orig/genkernel.8	2021-09-19 20:27:08.965482899 -0700
+++ genkernel-4.2.3/genkernel.8	2021-09-19 20:33:27.354495368 -0700
@@ -52,6 +52,31 @@ All that is needed to run genkernel is j
 .\}
 .sp
 This would produce a kernel, asking you what how to configure it to your desire, leaving alone any existing compiled object files, but not installing anything\&.
+.sp
+PGO training requires you to pass --pgi on the first phase with either ALL, bzImage, kernel ACTIONs; one or several --pgt phases with the \fItrain\fR ACTION; --pgo on the last phase with either ALL, bzImage, kernel ACTIONs.
+.sp
+.SH "PGO STEPS"
+.PP
+(1) Emerge a source based kernel package >= 5.13 with applied PGO and profraw compat patches
+(See the \fBSee Also\fR section for how to obtain and apply patches)
+.PP
+.sp
+(2) Run \fIgenkernel --pgi all\fR
+.PP
+.sp
+(3) Reboot
+.PP
+.sp
+(4) Run \fIgenkernel --pgt-all train\fR
+.PP
+.sp
+(optional) Run \fIgenkernel --pgt-yt train\fR in X as a normal user
+.PP
+.sp
+(5) Run \fIgenkernel --pgo all\fR
+.PP
+.sp
+(6) Reboot
 .SH "ACTIONS"
 .sp
 An action tells genkernel what you want it to do \- the following actions are supported:
@@ -80,6 +105,11 @@ Build only the kernel and the modules\&.
 .RS 4
 Build only the ramdisk/initramfs\&.
 .RE
+.PP
+\fBtrain\fR
+.RS 4
+Train the kernel to generate a PGO profile\&.
+.RE
 .SH "OPTIONS"
 .sp
 Genkernel supports the following options which alter its behaviour\&. Certain options have \fB\-\-no\-\fR variants which do the opposite thing\&. You can specify your options in any order\&.
@@ -111,6 +141,11 @@ Turns on, or off, output in color using
 .RS 4
 Turns on or off the full post\-run cleanup for debug purposes\&.
 .RE
+.PP
+\fB\-\-debug\-kernel\fR
+.RS 4
+Don't allow PGO patches interfere with debugging (gcov, debugfs)\&.
+.RE
 .SS "KERNEL CONFIGURATION"
 .PP
 \fB\-\-\fR[\fBno\-\fR]\fBmenuconfig\fR
@@ -356,6 +391,127 @@ to force usage of default kernel config\
 Prefix to kernel module destination, modules will be installed in
 \fI<prefix>/lib/modules\fR\&.
 .RE
+.SS "KERNEL PGO SETTINGS"
+.PP
+\fB\-\-pgi\fR
+.RS 4
+Build with phase 1 PGI instrumentaton\&.
+.RE
+.PP
+\fB\-\-pgt\-2d\-draw\fR
+.RS 4
+Run phase 2 PGT trainer for video card benchmarks with 2D drawing xscreensavers\&.
+.RE
+.PP
+\fB\-\-pgt\-3d\-ogl1.3\fR
+.RS 4
+Run phase 2 PGT trainer for video card benchmarks with OpenGL 1.3 xscreensavers\&.
+.RE
+.PP
+\fB\-\-pgt\-all\fR
+.RS 4
+Run phase 2 PGT trainer for with all benchmarks\&
+.RE
+.PP
+\fB\-\-pgt\-all-non-root\fR
+.RS 4
+Run phase 2 PGT trainer for with all benchmarks that should run as non-root\&
+.RE
+.PP
+\fB\-\-pgt\-crypto\-chn\fR
+.RS 4
+Run phase 2 PGT trainer for Crypto API CHN hashes and ciphers\&
+.RE
+.PP
+\fB\-\-pgt\-crypto\-common\fR
+.RS 4
+Run phase 2 PGT trainer for Crypto API common hashes and ciphers\&
+.RE
+.PP
+\fB\-\-pgt\-crypto\-kor\fR
+.RS 4
+Run phase 2 PGT trainer for Crypto API KOR ciphers\&
+.RE
+.PP
+\fB\-\-pgt\-crypto\-less\-common\fR
+.RS 4
+Run phase 2 PGT trainer for Crypto API less common hashes and ciphers\&
+.RE
+.PP
+\fB\-\-pgt\-crypto\-old\fR
+.RS 4
+Run phase 2 PGT trainer for Crypto API for deprecated hashes and ciphers\&
+.RE
+.PP
+\fB\-\-pgt\-crypto\-rus\fR
+.RS 4
+Run phase 2 PGT trainer for Crypto API RUS hashes\&
+.RE
+.PP
+\fB\-\-pgt\-crypto\-std\fR
+.RS 4
+Run phase 2 PGT trainer for Crypto API industry standard hashes and ciphers\&
+.RE
+.PP
+\fB\-\-pgt\-custom\fR
+.RS 4
+Run phase 2 PGT trainer for with a custom benchmark script\&
+.RE
+.PP
+\fB\-\-pgt\-filesystem\fR
+.RS 4
+Run phase 2 PGT trainer for the filesystem\&
+.RE
+.PP
+\fB\-\-pgt\-emerge1\fR
+.RS 4
+Run phase 2 PGT trainer for CPU, disk, and memory subsystem through emerging xorg-server\&
+.RE
+.PP
+\fB\-\-pgt\-emerge2\fR
+.RS 4
+Run phase 2 PGT trainer for extreme memory and multithreading use\&
+.RE
+.PP
+\fB\-\-pgt\-memory\fR
+.RS 4
+Run phase 2 PGT trainer for the memory subsystem\&
+.RE
+.PP
+\fB\-\-pgt\-network\fR
+.RS 4
+Run phase 2 PGT trainer for network subsystem by downloading the linux tarball with ICMP ping and UDP traceroute tests\&
+.RE
+.PP
+\fB\-\-pgt\-p2p\fR
+.RS 4
+Run phase 2 PGT trainer for P2P which measures CPU, CPU/IO schedulers, network, memory\&
+.RE
+.PP
+\fB\-\-pgt\-reset\fR
+.RS 4
+Resets or empties the PGO profile if you quit a test accidently\&
+.RE
+.PP
+\fB\-\-pgt\-sudo\fR
+.RS 4
+Allow use of sudo for tracking progress in non-root PGO trainers\&
+.RE
+.PP
+\fB\-\-pgt\-webcam\fR
+.RS 4
+Run phase 2 PGO trainer for the webcam\&
+.RE
+.PP
+\fB\-\-pgt\-yt\fR
+.RS 4
+Run phase 2 PGO trainer for web streaming, measuring network, CPU, audio\&
+.RE
+.PP
+\fB\-\-pgo\fR
+.RS 4
+Build with phase 3 PGO optimized\&
+.RE
 .SS "LOW\-LEVEL COMPILATION OPTIONS"
 .PP
 \fB\-\-cfi\fR
@@ -1625,6 +1781,27 @@ This file will not be included in initra
 The initrd scripts have limited support for network booting\&. This is activated if the \fBip\fR=<\&...> kernel parameter was given\&. Please refer to the genkernel guide at \fIhttps://wiki\&.gentoo\&.org/wiki/Genkernel\fR for more information\&.
 .sp
 The initrd scripts will extract any *\&.tar\&.gz files found in the \fI/add\fR directory of the livecd into the root filesystem during boot\&. This way it is easy to extend a netbooted LiveCD i\&.e\&. add custom tools, or other kernel modules\&.
+.SH "ENVIRONMENT VARIABLES"
+.sp
+PGO_P2P_URI - The URI must have a filename to replace the placeholder torrent.  (Only public domain assets or open source project torrents should be used.)
+.sp
+PGO_TRAINER_NETWORK_TCP_CONGESTIONS - string separated list from /proc/sys/net/ipv4/tcp_allowed_congestion_control to select for PGO training.
+.sp
+PGO_FILESYSTEMS_LIST - a string separated list of selected quintuples in this format -- ioscheduler_name&fs_name&dev_name&mount_point&test_dir -- to PGO train.
+.PP
+.RS 4
+* io_scheduler_name must be one of the names listed in `cat $(find /sys/devices/ -path "*sda*scheduler")`, where sda is replaced with the block device of interest.  It will be used to switch to that scheduler.
+.PP
+* fs_name must match the driver name.  These are listed in ${KERNEL_DIR}/fs as one the subdirectories.
+.PP
+* dev_name must the basename to the corresponding path listed in find /sys/ -name "scheduler".
+.PP
+* mount_point must be abspath to the mount point.  It must not contain a space in the abspath.
+.PP
+* test_dir must be a decent size folder like similar to /usr/bin that is used for grep tests and sequential read tests.  It also is an abspath relative to mount_point.  Read only tests are only performed in this directory.
+.RE
+.sp
+PGO_TRAINER_YT_URI - a custom URI to a video.  By default it will show a sample of the 2021 USA inauguration.
 .SH "REPORTING BUGS"
 .sp
 If you believe you have found a bug in the genkernel scripts, then please file a bug on the Gentoo Linux Bugzilla against product "Gentoo Hosted Projects" component "genkernel", i\&.e\&. at \fIhttps://bugs\&.gentoo\&.org/enter_bug\&.cgi?product=Gentoo%20Hosted%20Projects&component=genkernel\fR\&.
@@ -1763,3 +1940,11 @@ AUFS/Overlayfs by Zero_Chaos <zerochaos@
 \fI/etc/initramfs\&.mounts\fR \- additional required mounts before switching to real root
 .sp
 \fI/etc/genkernel\&.conf\fR \- genkernel configuration file
+.sp
+\fIhttps://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/patch/?h=for-next/clang/pgo&id=a15058eaefffc37c31326b59fa08b267b2def603&id2=fca41af18e10318e4de090db47d9fa7169e1bf2f\fR \- PGO patch
+.sp
+\fIhttps://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/log/?h=for-next/clang/pgo\fR \- PGO patch commit history
+.sp
+\fIhttps://raw.githubusercontent.com/orsonteodoro/oiledmachine-overlay/master/sys-kernel/ot-sources/files/clang-pgo-support-profraw-v6-to-v8.patch\fR \- profraw v6 to v8 compat patch
+.sp
+\fIhttps://wiki.gentoo.org/wiki//etc/portage/patches\fR - Instructions for applying per-package user patches
diff -x '*.rej' -x '*.orig' -urpN genkernel-4.2.3.orig/gen_pgo.sh genkernel-4.2.3/gen_pgo.sh
--- genkernel-4.2.3.orig/gen_pgo.sh	1969-12-31 16:00:00.000000000 -0800
+++ genkernel-4.2.3/gen_pgo.sh	2021-09-19 20:31:57.999492424 -0700
@@ -0,0 +1,1064 @@
+#!/bin/bash
+# Copyright 2021 Orson Teodoro <orsonteodoro@hotmail.com>
+# License GPL-2+ or MIT, your choice
+
+PGO_SAMPLE_SIZE=30 # statistics rule of 30
+PGO_SAMPLE_SIZE_MEMORY=3 # Cut short due to length of time per run
+PGO_MAX_FILESIZE_DEFAULT=26214400 # 25 MB
+#CHECK_REQUIREMENTS=0 # 1 or 0 or unset, for standalone mode only
+ALLOW_SUDO_=${ALLOW_SUDO:=0} # 1 or 0
+PAGE_SIZE_=${PAGE_SIZE:=$(getconf PAGESIZE)}
+K_PAGE_SIZE_=$(( ${PAGE_SIZE} / 1024 ))
+PGO_TRAINER_YT_URI_=${PGO_TRAINER_YT_URI:=https://www.youtube.com/watch?v=UlbyOeMCL0g}
+
+PGO_DISTRO="gentoo" # \
+# If set to gentoo, script integrates with genkernel otherwise run in standalone mode.
+# KERNEL_OUTPUTDIR envvar should be set to the kernel sources if not using gentoo
+# KERNEL_DIR envvar should be set to the kernel sources if not using gentoo
+
+if [[ "${PGO_DISTRO}" =~ ("linux"|"standalone") ]] ; then
+print_info() {
+	local error_code="${1}"
+	local msg="${2}"
+	echo "${msg}"
+}
+get_indent() {
+	local ntabs="${1}"
+	local i
+	for i in $(seq ${ntabs}) ; do
+		echo -en "\t"
+	done
+}
+fi
+
+is_true() {
+	local arg="${1}"
+	if [[ -n "${arg}" && "${arg}" == "1" ]]
+	then
+		return 0
+	elif [[ -n "${arg}" && "${arg,,}" == "yes" ]]
+	then
+		return 0
+	fi
+	return 1
+}
+
+is_pgt() {
+	if is_true "${CMD_PGT_ALL}" \
+		|| is_true "${CMD_PGT_2D_DRAW}" \
+		|| is_true "${CMD_PGT_3D_OGL1_3}" \
+		|| is_true "${CMD_PGT_CUSTOM}" \
+		|| is_true "${CMD_PGT_CRYPTO_CHN}" \
+		|| is_true "${CMD_PGT_CRYPTO_COMMON}" \
+		|| is_true "${CMD_PGT_CRYPTO_KOR}" \
+		|| is_true "${CMD_PGT_CRYPTO_LESS_COMMON}" \
+		|| is_true "${CMD_PGT_CRYPTO_OLD}" \
+		|| is_true "${CMD_PGT_CRYPTO_RUS}" \
+		|| is_true "${CMD_PGT_CRYPTO_STD}" \
+		|| is_true "${CMD_PGT_FILESYSTEM}" \
+		|| is_true "${CMD_PGT_EMERGE1}" \
+		|| is_true "${CMD_PGT_EMERGE2}" \
+		|| is_true "${CMD_PGT_MEMORY}" \
+		|| is_true "${CMD_PGT_NETWORK}" \
+		|| is_true "${CMD_PGT_P2P}" \
+		|| is_true "${CMD_PGT_WEBCAM}" \
+		|| is_true "${CMD_PGT_YT}"
+	then
+		return 0
+	fi
+	return 1
+}
+
+is_genkernel() {
+	if [[ "${PGO_DISTRO}" == "gentoo" ]] ; then
+		return 0
+	else
+		return 1
+	fi
+}
+
+marked_as_trained() {
+	! is_genkernel && return
+	if (( ${trained} == 1 )) ; then
+		if [[ "${USER}" == "root" ]] ; then
+			touch "${KERNEL_OUTPUTDIR}/.pgt-trained"
+		elif which sudo 2>/dev/null 1>/dev/null \
+			&& ( groups | grep -q -e "wheel" ) \
+			&& (( ${ALLOW_SUDO_} == 1 )) ; then
+			print_info 1 "$(get_indent 1)>> sudo is required to mark PGO progress"
+			sudo touch "${KERNEL_OUTPUTDIR}/.pgt-trained"
+		fi
+	fi
+}
+
+get_total_memory() {
+	local t=0
+	for x in $(grep -E -e "(MemTotal|SwapTotal)" /proc/meminfo \
+		| sed -E -e "s|[ ]+| |g" | cut -f 2 -d " ") ; do
+		t=$((${t}+ ${x}))
+	done
+	echo $((${t}*1024))
+}
+
+get_total_ram() {
+	local t=0
+	for x in $(grep -E -e "(MemTotal)" /proc/meminfo \
+		| sed -E -e "s|[ ]+| |g" | cut -f 2 -d " ") ; do
+		t=$((${t}+ ${x}))
+	done
+	echo $((${t}*1024))
+}
+
+get_total_free_memory() {
+	local t=0
+	for x in $(grep -E -e "(MemFree|SwapFree)" /proc/meminfo \
+		| sed -E -e "s|[ ]+| |g" | cut -f 2 -d " ") ; do
+		t=$((${t}+ ${x}))
+	done
+	echo $((${t}*1024))
+}
+
+get_total_used_memory() {
+	echo $(( $(get_total_memory) - $(get_total_free_memory) ))
+}
+
+get_unswappable_size() {
+	local t=0
+	# For per-config settings, see https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/proc/meminfo.c
+	# It is unknown, if these fields are overapping.
+	for x in $(grep -E -e "(Unevictable|SUnreclaim|KernelStack|Mlocked)" /proc/meminfo \
+		| sed -E -e "s|[ ]+| |g" | cut -f 2 -d " ") ; do
+		t=$((${t}+ ${x}))
+	done
+	echo $((${t}*1024))
+}
+
+get_total_swappable() {
+	echo $(( $(get_total_ram) - $(get_unswappable_size) ))
+}
+
+pid_exist() {
+	local pid="${1}"
+	ps -p ${pid} 2>/dev/null 1>/dev/null
+}
+
+is_oom() {
+	local pid="${1}"
+	if dmesg | grep -F -e "Out of memory: Killed process ${pid} " ; then
+		return 0
+	fi
+	return 1
+}
+
+pgo_trainer_memory() {
+	local m0=0 # Is swapping code paths profiled?
+	local m1=0 # Is OOM code paths profiled?
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running the PGO memory trainer"
+
+	# It stalls at ~2G per process
+	# Let it generate n processes so that bytes(n*2G) > total_memory_bytes
+	local nprocs=$(python -c "print(round($(get_total_memory) / (2*1073741824) + 1))")
+
+	free_mem_resources() {
+		print_info 1 "$(get_indent 1)>> Freeing memory"
+		kill -9 $(get_cmd_pids "cat /dev/urandom | od -t x1")
+		exit 1
+	}
+
+	trap free_mem_resources INT
+
+	local n_oom=0
+	for i in $(seq ${PGO_SAMPLE_SIZE_MEMORY}) ; do
+		local bytes_read=0
+		print_info 1 "$(get_indent 1)>> This may freeze the computer temporarily.  Ctrl+c to stop profiling. (run:  ${i}/${PGO_SAMPLE_SIZE})"
+		unset bash_pids
+		for c in $(seq ${nprocs}) ; do
+			print_info 1 "$(get_indent 1)>> Generating random data to swap and trigger OOM (process #:  ${c})"
+			bash -c "O=\$(cat /dev/urandom | od -t x1)" &
+			bash_pids[${c}]=$!
+			renice ${bash_pids[${c}]} -p 19
+			which ionice 2>/dev/null 1>/dev/null && ionice -c 3 -p ${bash_pids[${c}]}
+		done
+
+		print_info 1 "$(get_indent 1)>> Letting memory algorithms do work.  Please wait"
+
+		dmesg -C
+		unset swap_maker_done
+		for c in $(seq ${nprocs}) ; do
+			swap_maker_done[${c}]=0
+		done
+		local oom_found=0
+		local quit=0
+		while true ; do
+			sleep 0.2
+			for c in $(seq ${nprocs}) ; do
+				bash_pid=${bash_pids[${c}]}
+				if is_oom ${bash_pid} && (( ${swap_maker_done[${c}]} == 0 )) ; then
+					swap_maker_done[${c}]=1
+					m1=0
+					oom_found=1
+					print_info 1 "$(get_indent 1)>> Swap maker OOM detected"
+				elif ! pid_exist ${bash_pid} ; then
+					print_info 1 "$(get_indent 1)>> Missing swap maker.  Stopping test."
+					quit=1
+				fi
+			done
+			(( ${oom_found} == 1 || ${quit} == 1 )) && break
+		done
+
+		for c in $(seq ${nprocs}) ; do
+			bash_pid=${bash_pids[${c}]}
+			if pid_exist ${bash_pid} ; then
+				print_info 1 "$(get_indent 1)>> Killing swap maker pid ${bash_pid}"
+				kill -9 ${bash_pid}
+			fi
+		done
+		m0=1
+	done
+	print_info 1 "$(get_indent 1)>> Memory training done."
+	(( $(( ${m0} + ${m1} )) == 2 )) && trained=1 && marked_as_trained
+	renice $$ -p 0
+	which ionice 2>/dev/null 1>/dev/null && ionice -c 0 -p $$
+}
+
+pgo_trainer_emerge1() {
+	local trained=0
+	if [ -d /usr/portage/x11-base/xorg-server ] ; then
+		pushd /usr/portage/x11-base/xorg-server
+			local f=$(basename $(find /usr/portage/x11-base/xorg-server -name "*.ebuild" \
+				| sort -V | head -n 1))
+			print_info 1 "$(get_indent 1)>> Running the PGO trainer with \`ebuild ${f} unpack prepare compile\`"
+			ebuild ${f} clean unpack prepare compile && trained=1
+			ebuild ${f} clean
+		popd
+	else
+		if [ -d "${PGO_TRAINER_PORTAGE_DIR}/x11-base/xorg-server" ]
+			pushd "${PGO_TRAINER_PORTAGE_DIR}/x11-base/xorg-server"
+				local f=$(basename $(find "${PGO_TRAINER_PORTAGE_DIR}/x11-base/xorg-server" -name "*.ebuild" \
+					| sort -V | head -n 1))
+				print_info 1 "$(get_indent 1)>> Running the PGO trainer with \`ebuild ${f} unpack prepare compile\`"
+				ebuild ${f} clean unpack prepare compile && trained=1
+				ebuild ${f} clean
+			popd
+		then
+			print_info 1 "$(get_indent 1)>> Set PGO_TRAINER_PORTAGE_DIR in /etc/genkernel.conf to base abspath to the portage tree."
+		fi
+	fi
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_emerge2() {
+	print_info 1 "$(get_indent 1)>> Running the PGO trainer for very high memory use and/or very high IO "
+	print_info 1 "$(get_indent 1)>> This PGO test has not been implemented yet"
+}
+
+_cipher_not_recommended() {
+	local name="${1}"
+	local reason="${2}"
+	if grep -q -e ": ${name}" /proc/crypto ; then
+		print_info 1 "$(get_indent 1)>> ${name} is not recommended for hashing or as a cipher for securing data.  Reason:  ${reason}"
+	fi
+}
+
+_use_crypto_with_mode() {
+	local mode_of_operation="${1}"
+	local cipher="${2}"
+	local min_key_size="${3}"
+	local max_key_size="${4}"
+	local inc="${5}"
+	local block_size="${6}"
+	if grep -q ": ${mode_of_operation}(${cipher})" /proc/crypto ; then
+		for x in $(seq ${min_key_size} ${inc} ${max_key_size}) ; do
+			for try in $(seq ${PGO_SAMPLE_SIZE}) ; do
+				cryptsetup benchmark -c ${cipher}-${mode_of_operation} -s ${x} && trained=1
+			done
+		done
+	fi
+}
+
+_use_hash() {
+	local name="${1}"
+	local len="${2}"
+	local blocksize="${3}"
+	if (( ${len} == 160 )) && [[ "${name}" =~ sha ]] ; then
+		name="sha1"
+	fi
+	if grep -q -e ": ${name}" /proc/crypto ; then
+		for try in $(seq ${PGO_SAMPLE_SIZE}) ; do
+			# cryptsetup only supports block ciphers
+			cryptsetup benchmark -h ${name} -s ${len} && trained=1
+		done
+	fi
+}
+
+pgo_trainer_crypto_std() {
+	local trained=0
+	if ! which cryptsetup 2>/dev/null 1>/dev/null ; then
+		print_info 1 "$(get_indent 1)>> Missing cryptsetup.  Emerge sys-fs/cryptsetup."
+		return
+	fi
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for industry standard hashes"
+	_cipher_not_recommended "sha1" "obsolete, insecure"
+	unset BS
+	declare -Ax BS=(
+		[160]="512" # sha1
+		[224]="512"
+		[256]="512"
+		[384]="1024"
+		[512]="1024"
+	)
+	for ks in 160 224 256 384 512 ; do
+		_use_hash "sha${ks}" ${ks} ${BS[${ks}]}
+	done
+	unset BS
+	declare -Ax BS=(
+		[224]="1152"
+		[256]="1088"
+		[384]="832"
+		[512]="576"
+	)
+	for ks in 224 256 384 512 ; do
+		_use_hash "sha3-${ks}" ${ks} ${BS[${ks}]}
+	done
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for industry standard ciphers"
+	_use_crypto_with_mode "cbc" "aes" 128 256 64 128
+	_use_crypto_with_mode "ctr" "aes" 128 256 64 128
+	_use_crypto_with_mode "xts" "aes" 256 512 128 128
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_crypto_common() {
+	local trained=0
+	if ! which cryptsetup 2>/dev/null 1>/dev/null ; then
+		print_info 1 "$(get_indent 1)>> Missing cryptsetup.  Emerge sys-fs/cryptsetup."
+		return
+	fi
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for common hashes"
+	_use_hash "rmd160" 160 512
+	for ks in 160 256 384 512 ; do
+		_use_hash "wp${ks}" ${ks} 512
+	done
+	for ks in 160 256 384 512 ; do
+		_use_hash "blake2b-${ks}" ${ks} 1024
+	done
+	for ks in 128 160 224 256 ; do
+		_use_hash "blake2s-${ks}" ${ks} 512
+	done
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for common ciphers"
+	_use_crypto_with_mode "cbc" "cast6" 128 256 32 128
+	_use_crypto_with_mode "ctr" "cast6" 128 256 32 128
+	_use_crypto_with_mode "xts" "cast6" 256 512 64 128
+	_use_crypto_with_mode "cbc" "twofish" 128 256 64 128
+	_use_crypto_with_mode "ctr" "twofish" 128 256 64 128
+	_use_crypto_with_mode "xts" "twofish" 256 512 128 128
+	_use_crypto_with_mode "cbc" "serpent" 128 256 64 128
+	_use_crypto_with_mode "ctr" "serpent" 128 256 64 128
+	_use_crypto_with_mode "xts" "serpent" 256 512 128 128
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_crypto_less_common() {
+	local trained=0
+	if ! which cryptsetup 2>/dev/null 1>/dev/null ; then
+		print_info 1 "$(get_indent 1)>> Missing cryptsetup.  Emerge sys-fs/cryptsetup."
+		return
+	fi
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for less common ciphers"
+	_use_crypto_with_mode "cbc" "anubis" 128 320 32 128
+	_use_crypto_with_mode "xts" "anubis" 256 640 64 128
+	_use_crypto_with_mode "cbc" "camellia" 128 256 32 128
+	_use_crypto_with_mode "xts" "camellia" 256 512 64 128
+	_use_crypto_with_mode "cbc" "cast5" 40 128 32 64
+	_use_crypto_with_mode "cbc" "fcrypt" 64 64 64 64
+	_use_crypto_with_mode "cbc" "khazad" 128 128 128 64
+	_use_crypto_with_mode "ctr" "khazad" 128 128 128 64
+	_use_crypto_with_mode "cbc" "tea" 128 128 128 64
+	_use_crypto_with_mode "ctr" "tea" 128 128 128 64
+	_use_crypto_with_mode "cbc" "xeta" 128 128 128 64
+	_use_crypto_with_mode "ctr" "xeta" 128 128 128 64
+	_use_crypto_with_mode "cbc" "xtea" 128 128 128 64
+	_use_crypto_with_mode "ctr" "xtea" 128 128 128 64
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_crypto_deprecated() {
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for deprecated / insecure hashes"
+	_use_hash "michael_mic" 64 64 # TKIP
+
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for deprecated / insecure ciphers"
+	# Deprecated or outdated if 64 block size.
+	# See https://en.wikipedia.org/wiki/Cipher_security_summary
+	_cipher_not_recommended "arc4" "ARC4 is considered insecure"
+	_use_crypto_with_mode "ecb" "arc4" 2048 2048 2048 1 # WEP
+	_cipher_not_recommended "blowfish" "Blowfish is considered insecure"
+	_use_crypto_with_mode "cbc" "blowfish" 32 448 32 64
+	_use_crypto_with_mode "ctr" "blowfish" 32 448 32 64
+	_cipher_not_recommended "des" "DES is considered insecure"
+	_use_crypto_with_mode "cbc" "des3" 64 64 64 64
+	_use_crypto_with_mode "ctr" "des3" 64 64 64 64
+	_cipher_not_recommended "des3_ede" "DES is considered insecure"
+	_use_crypto_with_mode "cbc" "des3_ede" 192 192 192 64
+	_use_crypto_with_mode "ctr" "des3_ede" 192 192 192 64
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_crypto_chn() {
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for CHN hashes"
+	_use_hash "sm3" 256 512
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for CHN cipher"
+	_use_crypto_with_mode "cbc" "sm4" 128 128 128 128
+	_use_crypto_with_mode "ctr" "sm4" 128 128 128 128
+	_use_crypto_with_mode "xts" "sm4" 256 256 256 128
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_crypto_kor() {
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for KOR ciphers"
+	_use_crypto_with_mode "cbc" "seed" 128 256 64 128
+	_use_crypto_with_mode "ctr" "seed" 128 256 64 128
+	_use_crypto_with_mode "xts" "seed" 256 512 128 128
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_crypto_rus() {
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running the cryptsetup PGO trainer for RUS hashes"
+	for ks in 256 512 ; do
+		_use_hash "streebog${ks}" ${ks} 512
+	done
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+_pgo_trainer_filesystem_sequential_reads() {
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running sequential reads"
+	local sample_set=()
+	local c=0
+	for f in $(find "${mount_point}/usr/bin" -type f| shuf) ; do
+		[ -L "${f}" ] && continue
+		sample_set+=( "${f}" )
+		c=$((${c} + 1))
+		(( ${c} > 500 )) && break
+	done
+	local READ_LIMIT=${PGO_MAX_FILESIZE_DEFAULT} # Don't read gigabytes / terabytes
+	for f in ${sample_set[@]} ; do
+		for try in $(seq ${PGO_SAMPLE_SIZE}) ; do
+			# 08907: value too great for base (error token is "08907")
+			local srand1=$(echo "${RANDOM}" | sed -E -e "s|^[0]+||g")
+			local srand2=$(echo "${RANDOM}" | sed -E -e "s|^[0]+||g")
+			local rand=$(( ${srand1}${srand2} ))
+			local nbytes=$(( ${rand} % ${READ_LIMIT} ))
+			print_info 1 "$(get_indent 1)>> Reading the first ${nbytes} bytes from ${f}"
+			head -c ${nbytes} "${f}" 2>/dev/null > /dev/null && trained=1
+		done
+	done
+	return ${trained}
+}
+
+_pgo_trainer_filesystem_random_reads_single_page() {
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running random reads single page at a time"
+	local sample_set=()
+	local c=0
+	for f in $(find "${mount_point}/usr/bin" -type f| shuf) ; do
+		[ -L "${f}" ] && continue
+		# File must be >=2 pages
+		local filesize=$(stat -c "%s" "${f}")
+		if (( ${filesize} > 8192 && ${filesize} < ${PGO_MAX_FILESIZE:=26214400} )) ; then # 25 MiB
+			sample_set+=( "${f}" )
+			c=$((${c} + 1))
+			(( ${c} > 500 )) && break
+		fi
+	done
+	# Read random pagesize parts of a file
+	local sandbox_dir=$(mktemp -p "${mount_point_tmp_path}" -d)
+	[[ "$?" != "0" ]] \
+		&& print_info 1 "$(get_indent 1)>> Failed to create sandbox dir.  Skipping test." \
+		&& return
+	pushd "${sandbox_dir}"
+		for f in ${sample_set[@]} ; do
+			for try in $(seq ${PGO_SAMPLE_SIZE}) ; do
+				local file_size=$(stat -c "%s" "${f}")
+				(( ${file_size} == 0 )) && continue # avoid mod by zero
+				local npages=$((${file_size} / ${PAGE_SIZE_}))
+				local srand=$(echo "${RANDOM}" | sed -E -e "s|^[0]+||g") # 08907: value too great for base (error token is "08907")
+				local page_index=$(( ${srand} % ${npages} ))
+				print_info 1 "$(get_indent 1)>> Reading ${f} at page_index ${page_index}."
+				dd if="${f}" of="dump.dat" ibs=${K_PAGE_SIZE_}K skip=${page_index} count=1 && trained=1
+				local size_x=$(stat -c "%s" "dump.dat")
+				if (( ${size_x} != ${PAGE_SIZE_} )) ; then
+					print_info 1 "$(get_indent 1)>> Failed reading a page of a file.  Filesize was ${size_x}."
+				fi
+			done
+		done
+	popd
+	[[ -d "${sandbox_dir}" && "${sandbox_dir}" != "." ]] \
+		&& rm -rf "${sandbox_dir}"
+	return ${trained}
+}
+
+_pgo_trainer_filesystem_random_writes_single_page() {
+	local sandbox_dir=$(mktemp -p "${mount_point_tmp_path}" -d)
+	print_info 1 "$(get_indent 1)>> Running random writes single page at a time"
+	# Write data in a single file pagesize writes
+	[[ "$?" != "0" ]] \
+		&& print_info 1 "$(get_indent 1)>> Failed to create sandbox dir.  Skipping test." \
+		&& return
+	local trained=0
+	pushd "${sandbox_dir}"
+		f="test.img"
+		dd if=/dev/zero of=${f} bs=${K_PAGE_SIZE_}K iflag=fullblock,count_bytes count=${PGO_MAX_FILESIZE_DEFAULT}
+		for try in $(seq ${PGO_SAMPLE_SIZE}) ; do
+			local file_size=$(stat -c "%s" "${f}")
+			(( ${file_size} == 0 )) && continue # avoid mod by zero
+			local npages=$((${file_size} / ${PAGE_SIZE_}))
+			local page_index=$(( ${RANDOM}${RANDOM} % ${npages} ))
+			print_info 1 "$(get_indent 1)>> Writing ${f} at page_index ${page_index}."
+			dd if=${f} of=${f} ibs=${K_PAGE_SIZE_}K seek=${page_index} count=1 conv=notrunc && trained=1
+			file_size=$(stat -c "%s" "${f}")
+			print_info 1 "$(get_indent 1)>> New filesize is ${file_size}."
+			local size_x=$(stat -c "%s" "${f}")
+		done
+	popd
+	[[ -d "${sandbox_dir}" && "${sandbox_dir}" != "." ]] \
+		&& rm -rf "${sandbox_dir}"
+	return ${trained}
+}
+
+_pgo_trainer_filesystem_grep() {
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running grep finds"
+	local sample_set=()
+	local c=0
+	print_info 1 "$(get_indent 1)>> Finding suitable files.  Please wait."
+	for f in $(find "${mount_point}/usr/bin" -type f| shuf) ; do
+		[ -L "${f}" ] && continue
+		filesize=$(stat -c "%s" "${f}")
+		if (( ${filesize} < ${PGO_MAX_FILESIZE:=${PGO_MAX_FILESIZE_DEFAULT}} )) ; then
+			# Don't read terabytes
+			sample_set+=( "${f}" )
+			c=$((${c} + 1))
+			(( ${c} > 500 )) && break
+		fi
+	done
+	for f in ${sample_set[@]} ; do
+		local file_size=$(stat -c "%s" "${f}")
+		grep -q -i "copyright" "${f}" && echo "Found pattern in ${f}" && trained=1
+	done
+	return ${trained}
+}
+
+pgo_trainer_filesystem() {
+	local trained=0
+	local ngroups=0
+	local d_i=0
+	unset results
+	print_info 1 "$(get_indent 1)>> Running the filesystem PGO trainer"
+	pgo_filesystem_list=${PGO_FILESYSTEMS_LIST="unk:unk:unk:/:/usr/bin"}
+	for x in ${pgo_filesystem_list} ; do
+		local io_scheduler_name=$(echo "${x}" | cut -f 1 -d ":")
+		local fs_name=$(echo "${x}" | cut -f 2 -d ":")
+		local dev_name=$(echo "${x}" | cut -f 3 -d ":")
+		local mount_point=$(echo "${x}" | cut -f 4 -d ":")
+		local test_dir=$(echo "${x}" | cut -f 5 -d ":")
+		print_info 1 "$(get_indent 1)>> io_scheduler_name:  ${io_scheduler_name}"
+		print_info 1 "$(get_indent 1)>> fs_name:  ${fs_name}"
+		print_info 1 "$(get_indent 1)>> dev_name:  ${dev_name}"
+		print_info 1 "$(get_indent 1)>> mount_point:  ${mount_point}"
+		print_info 1 "$(get_indent 1)>> test_dir (read-only):  ${test_dir}"
+		if [[ "${mount_point}" == "" || "${mount_point}" == "." ]] ; then
+			print_info 1 "$(get_indent 1)>> Mount point is empty or just a period.  Skipping this mount point.  quintuple: ${x}"
+			continue
+		fi
+		if [[ -z "${test_dir}" || ! -e "${mount_point}/${test_dir}" ]] ; then
+			print_info 1 "$(get_indent 1)>> test_dir is invalid.  Skipping this mountpoint.  quintuple: ${x}"
+			continue
+		fi
+		if (( $(find /sys/devices/ -path "*${dev_name}*scheduler" | wc -l) == 1 )) \
+			&& cat $(find /sys/devices/ -path "*${dev_name}*scheduler") | grep -q -e "${io_scheduler_name}" ; then
+			#echo "${io_scheduler_name}" > $(find /sys/devices/ -path "*${dev_name}*scheduler")
+			# IO scheduler switching is bugged.
+			:;
+		fi
+		local mount_point_tmp_path="${mount_point}/tmp.pgo."$(head -c 7 /dev/random \
+			| od -t x2 | cut -c 9- | head -n 1 | sed -e "s| ||g" \
+			| head -c 7)
+		mkdir -p "${mount_point_tmp_path}"
+		[[ "$?" != "0" || ! -d "${mount_point_tmp_path}" ]] \
+			&& print_info 1 "$(get_indent 1)>> Failed to create PGO tmp dir for mountpoint.  Skipping test." \
+			&& return
+		ngroups=$((${ngroups} + 1))
+		_pgo_trainer_filesystem_sequential_reads
+		results[${d_i}]=$(echo $?)
+		d_i=$((${d_i} + 1))
+		_pgo_trainer_filesystem_random_reads_single_page
+		results[${d_i}]=$(echo $?)
+		d_i=$((${d_i} + 1))
+		_pgo_trainer_filesystem_random_writes_single_page
+		results[${d_i}]=$(echo $?)
+		d_i=$((${d_i} + 1))
+		_pgo_trainer_filesystem_grep
+		results[${d_i}]=$(echo $?)
+		d_i=$((${d_i} + 1))
+
+		# TODO multi file reads
+		[[ -d "${mount_point_tmp_path}" && "${mount_point_tmp_path}" != "." ]] \
+			&& rm -rf "${mount_point_tmp_path}"
+	done
+
+	local ntests=4
+	if (( ${#results[@]} > 0 )) ; then
+		trained=1
+		for result in ${results[@]} ; do
+			(( ${result} == 0 )) && trained=0
+		done
+		(( ${#result[@]} / ${ntests} != ${ngroups} )) && trained=0
+	fi
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_network() {
+	local m0=0 # Is ICMP code paths profiled?
+	local m1=0 # Is UDP code paths profiled?
+	local m2=0 # Is TCP code paths profiled?
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running the network PGO trainer"
+	# See /proc/sys/net/ipv4/tcp_congestion_control
+	# See /proc/sys/net/ipv4/tcp_available_congestion_control
+	local tcp_congestions
+	if [[ -e /proc/sys/net/ipv4/tcp_congestion_control ]] ; then
+		print_info 1 "$(get_indent 1)>> TCP congestion control is $(cat /proc/sys/net/ipv4/tcp_congestion_control)."
+		print_info 1 "$(get_indent 1)>> To train multiple particular TCP congestion control set PGO_TRAINER_NETWORK_TCP_CONGESTIONS as a string in /etc/genkernel.conf."
+		local tcp_congestion=$(cat /proc/sys/net/ipv4/tcp_congestion_control)
+		tcp_congestions=${PGO_TRAINER_NETWORK_TCP_CONGESTIONS:=${tcp_congestion}}
+	else
+		tcp_congestions="unknown"
+	fi
+
+	# Test both IPv4/IPv6
+	local domains=(
+		kernel.org
+		freenode.org
+		gentoo.org
+		github.com
+		gitlab.com
+		sourceforge.com
+		wikipedia.org
+	)
+
+	for domain in $(echo ${domains[@]} | shuf) ; do
+		# Test ICMP
+		if which ping 2>/dev/null 1>/dev/null ; then
+			ping -c 1 ${domain} && m0=1
+		else
+			print_info 1 "$(get_indent 1)>> Missing ping.  Emerge net-misc/iputils."
+		fi
+		# Test UDP
+		if which traceroute 2>/dev/null 1>/dev/null ; then
+			traceroute ${domain} && m1=1
+		else
+			print_info 1 "$(get_indent 1)>> Missing traceroute.  Emerge net-analyzer/traceroute."
+		fi
+	done
+	for tcp_congestion in ${tcp_congestions} ; do
+		if [[ -e "/proc/sys/net/ipv4/tcp_congestion_control" ]] \
+			&& grep -q -e "${tcp_congestion}" /proc/sys/net/ipv4/tcp_allowed_congestion_control ; then
+			print_info 1 "$(get_indent 1)>> TCP congestion control: ${tcp_congestion} is set"
+			echo "${tcp_congestion}" > /proc/sys/net/ipv4/tcp_congestion_control
+		fi
+		# Test TCP
+		if \
+			which curl 2>/dev/null 1>/dev/null ; then
+			# Total size for linux-5.14.tar.xz is 120669872
+			if curl --output /dev/null -r 0-1048576 https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.14.tar.xz ; then
+				m2=1
+			else
+				print_info 1 "$(get_indent 1)>> Failed to download the kernel"
+			fi
+		else
+			print_info 1 "$(get_indent 1)>> Missing curl.  emerge net-misc/curl"
+		fi
+	done
+	(( $(( ${m0} + ${m1} + ${m2} )) == 3 )) && trained=1 && marked_as_trained
+}
+
+get_cmd_pids() {
+	local cmd="${@}"
+	ps -aux | sed -E -e "s|[ ]+| |g" \
+		| grep -e "${cmd}"  \
+		| grep -v -e "grep.*${cmd}" \
+		| cut -f 2 -d " "
+}
+
+get_cmd_pid() {
+	local cmd="${@}"
+	get_cmd_pids "${cmd}" | head -n 1
+}
+
+pgo_trainer_p2p() {
+	if [[ "${USER}" == "root" ]] ; then
+		print_info 1 "$(get_indent 1)>> You must be a non-root user to run the p2p test"
+		return
+	fi
+	local trained=0
+	local url=${PGO_P2P_URI:="https://download.documentfoundation.org/libreoffice/stable/7.1.6/win/x86_64/LibreOffice_7.1.6_Win_x64.msi.torrent"}
+	local sandbox_dir=$(mktemp -d)
+	[[ "$?" != "0" ]] \
+		&& print_info 1 "$(get_indent 1)>> Failed to create sandbox dir.  Skipping test." \
+		&& return
+	pushd "${sandbox_dir}"
+		export BN=$(basename "${url}")
+		wget -O "${BN}" "${url}"
+		ctorrent -dd "${BN}" 2>&1 >"${sandbox_dir}/ctorrent.log"
+		stop_ctorrent() {
+			print_info 1 "$(get_indent 1)>> Stopping ctorrent"
+			kill -9 $(get_cmd_pid "ctorrent -dd ${BN}")
+			sleep 1
+			# Wipe sandbox
+			[[ -d "${sandbox_dir}" && "${sandbox_dir}" != "." ]] \
+				&& rm -rf "${sandbox_dir}"
+			exit 1
+		}
+		trap stop_ctorrent INT
+		print_info 1 "$(get_indent 1)>> Running the PGO trainer for p2p.  Do \`tail -f ${sandbox_dir}/ctorrent.log\` for progress."
+		local time_now=$(date +%s)
+		local time_expire=$(( ${time_now} + 60 ))
+		while true ; do
+			sleep 0.2s
+			time_now=$(date +%s)
+			(( ${time_now} > ${time_expire} )) && trained=1 && break
+		done
+		kill -9 $(get_cmd_pid "ctorrent -dd ${BN}")
+		dl_size=$(grep -E -o "[0-9]+MB,[0-9]MB" "${sandbox_dir}/ctorrent.log" | cut -f 1 -d "," | sed -e "s|MB||g")
+		dl_rates=$(grep -E -o "[0-9],[0-9]K/s" "${sandbox_dir}/ctorrent.log" | cut -f 1 -d ",")
+		for x in ${dl_size} ; do
+			(( ${x} > 1 )) && trained=1
+		done
+		for x in ${dl_rates} ; do
+			(( ${x} > 1 )) && trained=1
+		done
+	popd
+	[[ -d "${sandbox_dir}" && "${sandbox_dir}" != "." ]] \
+		&& rm -rf "${sandbox_dir}"
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_webcam() {
+	local m0=0 # Is encoding still photos code paths profiled?
+	local m1=0 # Is decoding stills profiled?
+	local m2=0 # Is encoding movies code paths profiled?
+	local m3=0 # is decoding stills profiled?
+	local trained=0
+	print_info 1 "$(get_indent 1)>> Running the webcam PGO trainer for still photos"
+	if ! which ffmpeg 2>/dev/null 1>/dev/null ; then
+		print_info 1 "$(get_indent 1)>> Missing ffmpeg.  Install the media-video/ffmpeg[encode,libv4l] package"
+		return
+	fi
+	if ! which v4l2-ctl 2>/dev/null 1>/dev/null ; then
+		print_info 1 "$(get_indent 1)>> Missing ffmpeg.  Install the media-libs/libv4l[utils] package"
+		return
+	fi
+
+	local sandbox_dir=$(mktemp -d)
+	[[ "$?" != "0" ]] \
+		&& print_info 1 "$(get_indent 1)>> Failed to create sandbox dir.  Skipping test." \
+		&& return
+	pushd "${sandbox_dir}"
+		for i in $(seq 0 10) ; do
+			local d="/dev/video${i}"
+			if test -e "${d}" ; then
+				local resolutions=$(v4l2-ctl -d ${d} \
+					--list-formats-ext \
+					| grep "Size:" \
+					| grep -E -o -e "[0-9]+x[0-9]+")
+				for res in ${resolutions} ; do
+					for try in $(seq ${PGO_SAMPLE_SIZE}) ; do
+						ffmpeg -y -f video4linux2 -s ${res} -i ${d} -frames 1 test.jpg && m0=1
+						# Decode also to simulate part of video conferencing.
+						ffmpeg -y -i test.jpg -f null - && m1=1
+					done
+				done
+			fi
+		done
+		for i in $(seq 0 10) ; do
+			local d="/dev/video${i}"
+			if test -e "${d}" ; then
+				local resolutions=$(v4l2-ctl -d ${d} \
+					--list-formats-ext \
+					| grep "Size:" \
+					| grep -E -o -e "[0-9]+x[0-9]+")
+				for res in ${resolutions} ; do
+					for try in $(seq ${PGO_SAMPLE_SIZE}) ; do
+						ffmpeg -y -f video4linux2 -s ${res} -i ${d} -t 5 test.webm && m2=1
+						# Decode also to simulate part of video conferencing.
+						ffmpeg -y -i test.webm -f null - && m3=1
+					done
+				done
+			fi
+		done
+	popd
+	[[ -d "${sandbox_dir}" && "${sandbox_dir}" != "." ]] \
+		&& rm -rf "${sandbox_dir}"
+	(( $(( ${m0} + ${m1} + ${m2} + ${m3} )) == 4 )) && trained=1 && marked_as_trained
+}
+
+pgo_trainer_2d_draw() {
+	local trained=0
+	local ran_test=0
+	if [[ -n "${DISPLAY}" || (-n "${XDG_SESSION_TYPE}" && "${XDG_SESSION_TYPE}" == "x11") ]] ; then
+		local cpus=$(lscpu | grep -E -e "CPU\(s\):" | head -n 1 | grep -E -o -e "[0-9]+")
+		local tpc=$(lscpu | grep -E -e "Thread\(s\) per core:" | head -n 1 | grep -E -o -e "[0-9]+")
+		local threads=$((${cpus} * ${tpc}))
+		print_info 1 "$(get_indent 1)>> Running the PGO trainer for 2D drawing with ${threads} threads"
+		for f in $(find /usr/lib*/misc/xscreensaver -type f | shuf) ; do
+			if ldd "${f}" 2>/dev/null | grep -q -e "libGL" ; then
+				:;
+			else
+				for i in $(seq $((${threads}))) ; do
+					timeout 5 "${f}" 2>/dev/null &
+					trained=1
+				done
+				sleep 5
+			fi
+		done
+		ran_test=1
+	fi
+	if [[ -n "${XDG_SESSION_TYPE}" && "${XDG_SESSION_TYPE}" == "wayland" ]] ; then
+		ran_test=1
+	fi
+	if (( ${ran_test} == 0 )) ; then
+		print_info 1 "$(get_indent 1)>> You must run genkernel in x11 or wayland"
+	fi
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_3d_ogl1_3() {
+	local trained=0
+	local ran_test=0
+	if [[ -n "${DISPLAY}" || (-n "${XDG_SESSION_TYPE}" && "${XDG_SESSION_TYPE}" == "x11") ]] ; then
+		local cpus=$(lscpu | grep -E -e "CPU\(s\):" | head -n 1 | grep -E -o -e "[0-9]+")
+		local tpc=$(lscpu | grep -E -e "Thread\(s\) per core:" | head -n 1 | grep -E -o -e "[0-9]+")
+		local threads=$((${cpus} * ${tpc}))
+		print_info 1 "$(get_indent 1)>> Running the PGO trainer for 3D drawing using Opengl ~1.3 ${threads} threads"
+		for f in $(find /usr/lib*/misc/xscreensaver -type f | shuf) ; do
+			if ldd "${f}" 2>/dev/null | grep -q -e "libGL" ; then
+				for i in $(seq $((${threads}))) ; do
+					timeout 5 "${f}" 2>/dev/null &
+					trained=1
+				done
+				sleep 5
+			fi
+		done
+	fi
+	if [[ -n "${XDG_SESSION_TYPE}" && "${XDG_SESSION_TYPE}" == "wayland" ]] ; then
+		ran_test=1
+	fi
+	if (( ${ran_test} == 0 )) ; then
+		print_info 1 "$(get_indent 1)>> You must run genkernel in x11 or wayland"
+	fi
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+_launch_video0_cr() {
+	local sandbox_dir=$(mktemp -d)
+	[[ "$?" != "0" ]] \
+		&& print_info 1 "$(get_indent 1)>> Failed to create sandbox dir.  Skipping test." \
+		&& return
+	pushd "${sandbox_dir}"
+		cat <<EOF >"watch_video.py"
+#!/usr/bin/env python3
+from selenium import webdriver
+from selenium.webdriver.common.keys import Keys
+from selenium.webdriver.common.by import By
+from selenium.common.exceptions import NoSuchElementException
+import time
+driver = webdriver.Chrome()
+driver.get("${PGO_TRAINER_YT_URI_}")
+time.sleep(20) # wait for browser to load
+time.sleep(1)
+try:
+        driver.find_element(By.XPATH, "//*[text() = 'Dismiss']").click()
+except NoSuchElementException:
+        pass
+try:
+        driver.find_element(By.XPATH, "//*[text() = 'Not now']").click()
+except NoSuchElementException:
+        pass
+time.sleep(1)
+try:
+        driver.find_element(By.XPATH, "//button[contains(@class, 'ytp-play-button')]").click()
+except NoSuchElementException:
+        pass
+time.sleep(2*60)
+driver.close()
+EOF
+		:;
+		python3 watch_video.py && trained=1
+	popd
+	[[ -d "${sandbox_dir}" && "${sandbox_dir}" != "." ]] \
+		&& rm -rf "${sandbox_dir}"
+}
+
+_launch_video0_ff() {
+	local sandbox_dir=$(mktemp -d)
+	[[ "$?" != "0" ]] \
+		&& print_info 1 "$(get_indent 1)>> Failed to create sandbox dir.  Skipping test." \
+		&& return
+	pushd "${sandbox_dir}"
+		cat <<EOF >"watch_video.py"
+#!/usr/bin/env python3
+from selenium import webdriver
+from selenium.webdriver.common.keys import Keys
+from selenium.webdriver.common.by import By
+from selenium.common.exceptions import NoSuchElementException
+import time
+driver = webdriver.Firefox()
+driver.get("${PGO_TRAINER_YT_URI_}")
+time.sleep(20) # wait for browser to load
+time.sleep(1)
+try:
+        driver.find_element(By.XPATH, "//*[text() = 'Dismiss']").click()
+except NoSuchElementException:
+        pass
+try:
+        driver.find_element(By.XPATH, "//*[text() = 'Not now']").click()
+except NoSuchElementException:
+        pass
+time.sleep(1)
+try:
+        driver.find_element(By.XPATH, "//button[contains(@class, 'ytp-play-button')]").click()
+except NoSuchElementException:
+        pass
+time.sleep(2*60)
+driver.close()
+EOF
+		:;
+		python3 watch_video.py && trained=1
+	popd
+	[[ -d "${sandbox_dir}" && "${sandbox_dir}" != "." ]] \
+		&& rm -rf "${sandbox_dir}"
+}
+
+pgo_trainer_yt() {
+	local trained=0
+	local ran_test=0
+	if [[ "${USER}" == "root" ]] ; then
+		print_info 1 "$(get_indent 1)>> You must be a non-root user to run the yt test"
+		return
+	fi
+	if [[ -n "${DISPLAY}" || (-n "${XDG_SESSION_TYPE}" && "${XDG_SESSION_TYPE}" == "x11") ]] ; then
+		if which chromedriver 2>/dev/null 1>/dev/null ; then
+			_launch_video0_cr
+			ran_test=1
+		elif which geckodriver 2>/dev/null 1>/dev/null ; then
+			_launch_video0_ff
+			ran_test=1
+		fi
+	fi
+	if (( ${ran_test} == 0 )) ; then
+		print_info 1 "$(get_indent 1)>> You must run genkernel in x11 or wayland"
+	fi
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_custom() {
+	local trained=0
+	DIR=$(dirname "$BASH_SOURCE")
+	if [[ -x "${DIR}/pgo-custom.sh" ]] ; then
+		local perms=$(stat -c "%a" "${DIR}/pgo-custom.sh")
+		local u=$(stat -c "%G" "${DIR}/pgo-custom.sh")
+		local g=$(stat -c "%U" "${DIR}/pgo-custom.sh")
+		if [[ "${perms}" == "750" \
+			&& ( ( "${u}" == "portage" && "${g}" == "portage" ) \
+				|| ( "${g}" == "wheel" ) \
+				|| ( "${u}" == "root" && "${g}" == "root" ) ) ]] ; then
+			print_info 1 "$(get_indent 1)>> Running the PGO custom trainer(s)"
+			./pgo-custom.sh
+			trained=1
+		else
+			print_info 1 "$(get_indent 1)>> Wrong permissions for pgo-custom.sh"
+			print_info 1 "$(get_indent 1)>> Inspect the file for malicious modifications."
+			print_info 1 "$(get_indent 1)>> Then, reset permissions to 750 and owner to"
+			print_info 1 "$(get_indent 1)>> root/root, ${USER}/wheel, or portage/portage."
+		fi
+	fi
+	(( ${trained} == 1 )) && marked_as_trained
+}
+
+pgo_trainer_all() {
+	print_info 1 "$(get_indent 1)>> Running the all PGO trainers"
+	pgo_trainer_2d_draw
+	pgo_trainer_3d_ogl1_3
+	pgo_trainer_crypto_std
+	pgo_trainer_crypto_kor
+	pgo_trainer_crypto_chn
+	pgo_trainer_crypto_rus
+	pgo_trainer_crypto_common
+	pgo_trainer_crypto_less_common
+	pgo_trainer_crypto_deprecated
+	pgo_trainer_custom
+	pgo_trainer_emerge1
+	pgo_trainer_emerge2
+	pgo_trainer_filesystem
+	pgo_trainer_memory
+	pgo_trainer_network
+	pgo_trainer_webcam
+}
+
+pgo_trainer_all_non_root() {
+	pgo_trainer_p2p
+	pgo_trainer_yt
+}
+
+check_pgo_applied() {
+	if [ ! -d "${KERNEL_DIR}/kernel/pgo" ] ; then
+		print_info 1 "$(get_indent 1)>>"
+		print_info 1 "$(get_indent 1)>> Missing pgo directory.  Did you apply the patch"
+		print_info 1 "$(get_indent 1)>> from:"
+		print_info 1 "$(get_indent 1)>> https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/patch/?h=for-next/clang/pgo&id=a15058eaefffc37c31326b59fa08b267b2def603&id2=fca41af18e10318e4de090db47d9fa7169e1bf2f"
+		print_info 1 "$(get_indent 1)>>"
+		print_info 1 "$(get_indent 1)>> Commit history:"
+		print_info 1 "$(get_indent 1)>> https://git.kernel.org/pub/scm/linux/kernel/git/kees/linux.git/log/?h=for-next/clang/pgo"
+		print_info 1 "$(get_indent 1)>>"
+		exit 1
+	fi
+}
+
+check_pgo_profraw_fixes_applied() {
+	if [ ! -e "${KERNEL_DIR}/kernel/pgo/pgo.h" ] ; then
+		print_info 1 "$(get_indent 1)>>"
+		print_info 1 "$(get_indent 1)>> Missing PGO header"
+		print_info 1 "$(get_indent 1)>>"
+		exit 1
+	fi
+	if ! grep -q -e "binary_id_size" "${KERNEL_DIR}/kernel/pgo/pgo.h" ; then
+		print_info 1 "$(get_indent 1)>>"
+		print_info 1 "$(get_indent 1)>> Missing profraw header fix for multislot llvm"
+		print_info 1 "$(get_indent 1)>> or for recent llvm releases"
+		print_info 1 "$(get_indent 1)>>"
+		print_info 1 "$(get_indent 1)>> Apply the following patch to the kernel sources:"
+		print_info 1 "$(get_indent 1)>> https://raw.githubusercontent.com/orsonteodoro/oiledmachine-overlay/master/sys-kernel/ot-sources/files/clang-pgo-support-profraw-v6-to-v8.patch"
+		print_info 1 "$(get_indent 1)>>"
+		exit 1
+	fi
+}
+
+check_pgo_requirements() {
+	if ( is_genkernel && [[ -n "${CMD_PGI}" || -n "${CMD_PGO}" ]] ) \
+		|| ( ! is_genkernel && true ) ; then
+		check_pgo_applied
+		check_pgo_profraw_fixes_applied
+	fi
+}
+
+if ! is_genkernel ; then
+main() {
+	[[ -n "${CHECK_REQUIREMENTS}" && "${CHECK_REQUIREMENTS}" == "1" ]] && check_pgo_requirements
+	pgo_trainer_all
+}
+main
+fi
