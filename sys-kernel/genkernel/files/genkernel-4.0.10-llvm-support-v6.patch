Subject:       Support Clang/LLVM for LTO and CFI for the kernel only for genkernel
Patch Author:  Orson Teodoro <orsonteodoro@hotmail.com>
Patch Status:  Complete
Date:          Fri Sep 24 04:11:24 PM PDT 2021 (Unix time: 1632525084)

v6 - Split --lto from --clang-kernel for older kernels
v5 - Always disable cfi permissive
     Filter supported arches for cfi
v4 - Added --scs option
     Added --llvm-slot=
     Override user options based on clang/llvm related options
     The genkernel override is to make it convenient to activate LTO, CFI, SCS
     (You should configure it twice and save the menuconfig twice just to make sure
     the switch from GCC to Clang/LLVM went smooth.)
     Man page update with changes for new options
v3 - Updated man page
v2 - Added utils support (experimental)
     Changed --clang to --clang-kernel
     Changed --llvm to --llvm-kernel
     Added --llvm-utils
     Added --clang-utils
     Dropped --pgo
     See genkernel-4.0.x/json-c/0.13.1/json-c-0.13.1-clang.patch folder for json-c patch
     Force busybox to be built with gcc
     Force lvm2 to be built with gcc
     Use llvm-ranlib
v1.1 Utilize more of the llvm toolchain
v1   Added llvm support

diff -urp genkernel-4.0.10.orig/arch/ppc64le/config.sh genkernel-4.0.10/arch/ppc64le/config.sh
--- genkernel-4.0.10.orig/arch/ppc64le/config.sh	2020-07-20 09:05:15.000000000 -0700
+++ genkernel-4.0.10/arch/ppc64le/config.sh	2021-09-24 16:14:30.005446122 -0700
@@ -18,9 +18,34 @@ DEFAULT_KERNEL_MAKE=make
 DEFAULT_UTILS_MAKE=make
 
 DEFAULT_KERNEL_CC=gcc
+DEFAULT_KERNEL_AR=ar
 DEFAULT_KERNEL_AS=as
-DEFAULT_KERNEL_LD=ld
+DEFAULT_KERNEL_LD=ld.bfd
+DEFAULT_KERNEL_NM=nm
+DEFAULT_KERNEL_OBJCOPY=objcopy
+DEFAULT_KERNEL_OBJDUMP=objdump
+DEFAULT_KERNEL_RANLIB=ranlib
+DEFAULT_KERNEL_READELF=readelf
+DEFAULT_KERNEL_STRIP=strip
+
+DEFAULT_KERNEL_LLVM_CC=clang
+DEFAULT_KERNEL_LLVM_AR=llvm-ar
+DEFAULT_KERNEL_LLVM_AS=llvm-as
+DEFAULT_KERNEL_LLVM_CLANG_FLAGS="-integrated-as"
+DEFAULT_KERNEL_LLVM_LD=ld.lld
+DEFAULT_KERNEL_LLVM_NM=llvm-nm
+DEFAULT_KERNEL_LLVM_OBJCOPY=llvm-objcopy
+DEFAULT_KERNEL_LLVM_OBJDUMP=llvm-objdump
+DEFAULT_KERNEL_LLVM_RANLIB=llvm-ranlib
+DEFAULT_KERNEL_LLVM_READELF=llvm-readelf
+DEFAULT_KERNEL_LLVM_STRIP=llvm-strip
 
 DEFAULT_UTILS_CC=gcc
+DEFAULT_UTILS_CXX=g++
 DEFAULT_UTILS_AS=as
 DEFAULT_UTILS_LD=ld
+
+DEFAULT_UTILS_LLVM_CC=clang
+DEFAULT_UTILS_LLVM_CXX=clang++
+DEFAULT_UTILS_LLVM_AS=llvm-as
+DEFAULT_UTILS_LLVM_LD=ld.lld
diff -urp genkernel-4.0.10.orig/defaults/config.sh genkernel-4.0.10/defaults/config.sh
--- genkernel-4.0.10.orig/defaults/config.sh	2020-07-20 09:05:15.000000000 -0700
+++ genkernel-4.0.10/defaults/config.sh	2021-09-24 16:14:30.006446122 -0700
@@ -41,8 +41,27 @@ DEFAULT_KERNEL_MAKE=make
 DEFAULT_UTILS_MAKE=make
 
 DEFAULT_KERNEL_CC=gcc
+DEFAULT_KERNEL_AR=ar
 DEFAULT_KERNEL_AS=as
-DEFAULT_KERNEL_LD=ld
+DEFAULT_KERNEL_LD=ld.bfd
+DEFAULT_KERNEL_NM=nm
+DEFAULT_KERNEL_OBJCOPY=objcopy
+DEFAULT_KERNEL_OBJDUMP=objdump
+DEFAULT_KERNEL_RANLIB=ranlib
+DEFAULT_KERNEL_READELF=readelf
+DEFAULT_KERNEL_STRIP=strip
+
+DEFAULT_KERNEL_LLVM_CC=clang
+DEFAULT_KERNEL_LLVM_AR=llvm-ar
+DEFAULT_KERNEL_LLVM_AS=llvm-as
+DEFAULT_KERNEL_LLVM_CLANG_FLAGS="-integrated-as"
+DEFAULT_KERNEL_LLVM_LD=ld.lld
+DEFAULT_KERNEL_LLVM_NM=llvm-nm
+DEFAULT_KERNEL_LLVM_OBJCOPY=llvm-objcopy
+DEFAULT_KERNEL_LLVM_OBJDUMP=llvm-objdump
+DEFAULT_KERNEL_LLVM_RANLIB=llvm-ranlib
+DEFAULT_KERNEL_LLVM_READELF=llvm-readelf
+DEFAULT_KERNEL_LLVM_STRIP=llvm-strip
 
 DEFAULT_UTILS_CFLAGS="-Os -pipe -fomit-frame-pointer"
 DEFAULT_UTILS_CC=gcc
@@ -50,5 +69,10 @@ DEFAULT_UTILS_CXX=g++
 DEFAULT_UTILS_AS=as
 DEFAULT_UTILS_LD=ld
 
+DEFAULT_UTILS_LLVM_CC=clang
+DEFAULT_UTILS_LLVM_CXX=clang++
+DEFAULT_UTILS_LLVM_AS=llvm-as
+DEFAULT_UTILS_LLVM_LD=ld.lld
+
 PORTAGE_CHOST="$(portageq envvar CHOST)"
 DEFAULT_CHOST="${PORTAGE_CHOST:-$(${DEFAULT_UTILS_CC} -dumpmachine 2>/dev/null)}"
diff -urp genkernel-4.0.10.orig/gen_cmdline.sh genkernel-4.0.10/gen_cmdline.sh
--- genkernel-4.0.10.orig/gen_cmdline.sh	2021-09-24 16:13:54.602444955 -0700
+++ genkernel-4.0.10/gen_cmdline.sh	2021-09-24 16:15:34.624448251 -0700
@@ -86,6 +86,17 @@ longusage() {
   echo "	--module-prefix=<dir>	Prefix to kernel module destination, modules"
   echo "				will be installed in <prefix>/lib/modules"
   echo "  Low-Level Compile settings"
+  echo "	--cfi			Use Clang/LLVM to build a CFI protected kernel"
+  echo "	--clang-kernel		Use Clang/LLVM to build the kernel"
+  echo "	--clang-slot=(11|12|13|14)"
+  echo "				Use a specific Clang/LLVM slot instead of maximum"
+  echo "	--clang-utils		Use Clang/LLVM to build utils (experimental)"
+  echo "	--llvm-kernel		Use Clang/LLVM to build the kernel"
+  echo "	--llvm-slot=(11|12|13|14)"
+  echo "				Use a specific Clang/LLVM slot instead of maximum"
+  echo "	--llvm-utils		Use Clang/LLVM to build utils (experimental)"
+  echo "	--lto			Use Clang/LLVM to build a LTO optimized kernel"
+  echo "	--scs			Use Clang/LLVM to build a SCS protected kernel"
   echo "	--cross-compile=<target-triplet>"
   echo "				Target triple (i.e. aarch64-linux-gnu) to build for"
   echo "	--kernel-as=<assembler>	Assembler to use for kernel"
@@ -820,6 +831,37 @@ parse_cmdline() {
 		--config=*)
 			print_info 3 "CMD_GK_CONFIG: "${*#*=}""
 			;;
+		--lto)
+			CMD_LLVM_KERNEL=1
+			CMD_LTO=1
+			print_info 3 "CMD_LLVM_KERNEL: ${CMD_LLVM_KERNEL}"
+			print_info 3 "CMD_LTO: ${CMD_LTO}"
+		--clang|--clang-kernel|--llvm|--llvm-kernel|--lto)
+			CMD_LLVM_KERNEL=1
+			print_info 3 "CMD_LLVM_KERNEL: ${CMD_LLVM_KERNEL}"
+			;;
+		--clang-slot=*|--llvm-slot=*)
+			CMD_LLVM_SLOT="${*#*=}"
+			print_info 3 "CMD_LLVM_SLOT: ${CMD_LLVM_SLOT}"
+			;;
+		--cfi)
+			CMD_CFI=1
+			CMD_LLVM_KERNEL=1
+			print_info 3 "CMD_LLVM_KERNEL: ${CMD_LLVM_KERNEL}"
+			print_info 3 "CMD_CFI: ${CMD_CFI}"
+			;;
+		--scs)
+			CMD_CFI=1
+			CMD_LLVM_KERNEL=1
+			CMD_SCS=1
+			print_info 3 "CMD_CFI: ${CMD_CFI}"
+			print_info 3 "CMD_LLVM_KERNEL: ${CMD_LLVM_KERNEL}"
+			print_info 3 "CMD_SCS: ${CMD_SCS}"
+			;;
+		--clang-utils|--llvm-utils)
+			CMD_LLVM_UTILS=1
+			print_info 3 "CMD_LLVM_UTILS: ${CMD_LLVM_UTILS}"
+			;;
 		--nice)
 			CMD_NICE=10
 			print_info 3 "CMD_NICE: ${CMD_NICE}"
Only in genkernel-4.0.10: gen_cmdline.sh.orig
diff -urp genkernel-4.0.10.orig/gen_compile.sh genkernel-4.0.10/gen_compile.sh
--- genkernel-4.0.10.orig/gen_compile.sh	2021-09-24 16:13:54.603444955 -0700
+++ genkernel-4.0.10/gen_compile.sh	2021-09-24 16:14:30.007446122 -0700
@@ -112,11 +112,22 @@ compile_generic() {
 			compile_cmd+=( "ARCH='${KERNEL_ARCH}'" )
 
 			local tc_var
-			for tc_var in AS AR CC LD NM OBJCOPY OBJDUMP READELF STRIP
+			for tc_var in AS AR CC LD NM OBJCOPY OBJDUMP RANLIB READELF STRIP
 			do
 				compile_cmd+=( "${tc_var}='$(TC_PROG_TYPE=KERNEL tc-get${tc_var})'" )
 			done
 
+			if [[ -n "${CMD_LLVM_KERNEL}" && "${CMD_LLVM_KERNEL}" == "1" ]] ; then
+				local llvm_slot
+				if [ -n "${CMD_LLVM_SLOT}" ] ; then
+					llvm_slot=${CMD_LLVM_SLOT}
+				else
+					llvm_slot=$(ls "${BROOT}/usr/lib/llvm" | sort -rV | head -n 1)
+				fi
+				export PATH="${BROOT}/usr/lib/llvm/${llvm_slot}/bin:${PATH}"
+				compile_cmd+=( "CLANG_FLAGS='${CMD_KERNEL_CLANG_FLAGS}'" )
+			fi
+
 			compile_cmd+=( "HOSTAR='$(tc-getBUILD_AR)'" )
 			compile_cmd+=( "HOSTCC='$(tc-getBUILD_CC)'" )
 			compile_cmd+=( "HOSTCXX='$(tc-getBUILD_CXX)'" )
Only in genkernel-4.0.10: gen_compile.sh.orig
diff -urp genkernel-4.0.10.orig/gen_configkernel.sh genkernel-4.0.10/gen_configkernel.sh
--- genkernel-4.0.10.orig/gen_configkernel.sh	2020-07-20 09:05:15.000000000 -0700
+++ genkernel-4.0.10/gen_configkernel.sh	2021-09-24 16:18:03.193453147 -0700
@@ -995,6 +995,98 @@ config_kernel() {
 		fi
 	fi
 
+	enable_lto_clang() {
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for LTO support are set ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_ARCH_SUPPORTS_LTO_CLANG" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_ARCH_SUPPORTS_LTO_CLANG_THIN" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_FTRACE_MCOUNT_USE_RECORDMCOUNT" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_GCOV_KERNEL" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_HAS_LTO_CLANG" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_KALLSYMS" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_KASAN" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_KASAN_HW_TAGS" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO_CLANG" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO_CLANG_FULL" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO_CLANG_THIN" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO_NONE" ""
+	}
+
+	disable_lto_clang() {
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for LTO support are unset ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_HAS_LTO_CLANG" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO_CLANG" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO_CLANG_FULL" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO_CLANG_THIN" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LTO_NONE" "y"
+	}
+
+	if isTrue "${CMD_LTO}"
+	then
+		if isTrue "${CMD_LLVM_KERNEL}"
+		then
+			enable_lto_clang
+		else
+			disable_lto_clang
+		fi
+	else
+		disable_lto_clang
+	fi
+
+	if isTrue "${CMD_LLVM_KERNEL}"
+	then
+		local llvm_slot
+		if [ -n "${CMD_LLVM_SLOT}" ] ; then
+			llvm_slot=${CMD_LLVM_SLOT}
+		else
+			llvm_slot=$(ls "${BROOT}/usr/lib/llvm" | sort -rV | head -n 1)
+		fi
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for Clang/LLVM support are set ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_AS_IS_LLVM" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_AS_VERSION" "${llvm_slot}0000"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CC_IS_CLANG" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CC_VERSION_TEXT" "clang version ${llvm_slot}.0.0"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_GCC_VERSION" "0"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CLANG_VERSION" "${llvm_slot}0000"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_GCC_VERSION" "0"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LD_IS_LLD" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LD_VERSION" "0"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LLD_VERSION" "${llvm_slot}0000"
+	else
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for Clang/LLVM support are unset ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_AS_IS_LLVM" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CC_IS_CLANG" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_LD_IS_LLD" ""
+		local gcc_v=$(gcc --version | head -n 1 | cut -f 3 -d " ")
+		local gcc_major_v=$(printf "%02d" $(echo ${gcc_v} | cut -f 1 -d "."))
+		local gcc_minor_v=$(printf "%02d" $(echo ${gcc_v} | cut -f 1 -d "."))
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_GCC_VERSION" "${gcc_major_v}${gcc_minor_v}00"
+	fi
+
+	if isTrue "${CMD_CFI}" && ( [ "${ARCH}" = "arm64" ] || [ "${ARCH}" = "x86_64" ] )
+	then
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for CFI support are set ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_ARCH_SUPPORTS_CFI_CLANG" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CFI_CLANG" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CFI_PERMISSIVE" ""
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_KALLSYMS" "y"
+	else
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for CFI support are unset ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CFI_CLANG" ""
+	fi
+
+	if isTrue "${CMD_SCS}" && [ "${ARCH}" = "arm64" ]
+	then
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for SCS support are set ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CFI_CLANG_SHADOW" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_MODULES" "y"
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_MODULES" "y"
+	else
+		print_info 2 "$(get_indent 1)>> Ensure that required kernel options for SCS support are unset ..."
+		kconfig_set_opt "${KERNEL_OUTPUTDIR}/.config" "CONFIG_CFI_CLANG_SHADOW" ""
+	fi
+
 	if [ -f "${KCONFIG_MODIFIED_MARKER}" ]
 	then
 		if isTrue "${OLDCONFIG}"
diff -urp genkernel-4.0.10.orig/gen_determineargs.sh genkernel-4.0.10/gen_determineargs.sh
--- genkernel-4.0.10.orig/gen_determineargs.sh	2020-07-20 09:05:15.000000000 -0700
+++ genkernel-4.0.10/gen_determineargs.sh	2021-09-24 16:14:30.008446122 -0700
@@ -258,6 +258,26 @@ determine_output_filenames() {
 	done
 }
 
+kernel_default() {
+	local gcc_default="${1}"
+	local llvm_default="${2}"
+	if [[ -n "${CMD_LLVM_KERNEL}" && "${CMD_LLVM_KERNEL}" == "1" ]] ; then
+		echo "${llvm_default}"
+	else
+		echo "${gcc_default}"
+	fi
+}
+
+utils_default() {
+	local gcc_default="${1}"
+	local llvm_default="${2}"
+	if [[ -n "${CMD_LLVM_UTILS}" && "${CMD_LLVM_UTILS}" == "1" ]] ; then
+		echo "${llvm_default}"
+	else
+		echo "${gcc_default}"
+	fi
+}
+
 determine_real_args() {
 	# Unset known variables which will interfere with _tc-getPROG().
 	local tc_var tc_varname_build tc_vars=$(get_tc_vars)
@@ -306,13 +326,21 @@ determine_real_args() {
 	set_config_with_override STRING KERNEL_MAKE                           CMD_KERNEL_MAKE                           "${DEFAULT_KERNEL_MAKE}"
 	set_config_with_override STRING UTILS_CFLAGS                          CMD_UTILS_CFLAGS                          "${DEFAULT_UTILS_CFLAGS}"
 	set_config_with_override STRING UTILS_MAKE                            CMD_UTILS_MAKE                            "${DEFAULT_UTILS_MAKE}"
-	set_config_with_override STRING KERNEL_CC                             CMD_KERNEL_CC                             "${DEFAULT_KERNEL_CC}"
-	set_config_with_override STRING KERNEL_LD                             CMD_KERNEL_LD                             "${DEFAULT_KERNEL_LD}"
-	set_config_with_override STRING KERNEL_AS                             CMD_KERNEL_AS                             "${DEFAULT_KERNEL_AS}"
-	set_config_with_override STRING UTILS_CC                              CMD_UTILS_CC                              "${DEFAULT_UTILS_CC}"
-	set_config_with_override STRING UTILS_CXX                             CMD_UTILS_CXX                             "${DEFAULT_UTILS_CXX}"
-	set_config_with_override STRING UTILS_LD                              CMD_UTILS_LD                              "${DEFAULT_UTILS_LD}"
-	set_config_with_override STRING UTILS_AS                              CMD_UTILS_AS                              "${DEFAULT_UTILS_AS}"
+	set_config_with_override STRING KERNEL_CC                             CMD_KERNEL_CC                             $(kernel_default "${DEFAULT_KERNEL_CC}" "${DEFAULT_KERNEL_LLVM_CC}")
+	set_config_with_override STRING KERNEL_CLANG_FLAGS                    CMD_KERNEL_CLANG_FLAGS                    "${DEFAULT_KERNEL_LLVM_CLANG_FLAGS}"
+	set_config_with_override STRING KERNEL_LD                             CMD_KERNEL_LD                             $(kernel_default "${DEFAULT_KERNEL_LD}" "${DEFAULT_KERNEL_LLVM_LD}")
+	set_config_with_override STRING KERNEL_AR                             CMD_KERNEL_AR                             $(kernel_default "${DEFAULT_KERNEL_AR}" "${DEFAULT_KERNEL_LLVM_AR}")
+	set_config_with_override STRING KERNEL_AS                             CMD_KERNEL_AS                             $(kernel_default "${DEFAULT_KERNEL_AS}" "${DEFAULT_KERNEL_LLVM_AS}")
+	set_config_with_override STRING KERNEL_NM                             CMD_KERNEL_NM                             $(kernel_default "${DEFAULT_KERNEL_NM}" "${DEFAULT_KERNEL_LLVM_NM}")
+	set_config_with_override STRING KERNEL_OBJCOPY                        CMD_KERNEL_OBJCOPY                        $(kernel_default "${DEFAULT_KERNEL_OBJCOPY}" "${DEFAULT_KERNEL_LLVM_OBJCOPY}")
+	set_config_with_override STRING KERNEL_OBJDUMP                        CMD_KERNEL_OBJDUMP                        $(kernel_default "${DEFAULT_KERNEL_OBJDUMP}" "${DEFAULT_KERNEL_LLVM_OBJDUMP}")
+	set_config_with_override STRING KERNEL_RANLIB                         CMD_KERNEL_RANLIB                         $(kernel_default "${DEFAULT_KERNEL_RANLIB}" "${DEFAULT_KERNEL_LLVM_RANLIB}")
+	set_config_with_override STRING KERNEL_READELF                        CMD_KERNEL_READELF                        $(kernel_default "${DEFAULT_KERNEL_READELF}" "${DEFAULT_KERNEL_LLVM_READELF}")
+	set_config_with_override STRING KERNEL_STRIP                          CMD_KERNEL_STRIP                          $(kernel_default "${DEFAULT_KERNEL_STRIP}" "${DEFAULT_KERNEL_LLVM_STRIP}")
+	set_config_with_override STRING UTILS_CC                              CMD_UTILS_CC                              $(utils_default "${DEFAULT_UTILS_CC}" "${DEFAULT_UTILS_LLVM_CC}")
+	set_config_with_override STRING UTILS_CXX                             CMD_UTILS_CXX                             $(utils_default "${DEFAULT_UTILS_CXX}" "${DEFAULT_UTILS_LLVM_CXX}")
+	set_config_with_override STRING UTILS_LD                              CMD_UTILS_LD                              $(utils_default "${DEFAULT_UTILS_LD}" "${DEFAULT_UTILS_LLVM_LD}")
+	set_config_with_override STRING UTILS_AS                              CMD_UTILS_AS                              $(utils_default "${DEFAULT_UTILS_AS}" "${DEFAULT_UTILS_LLVM_AS}")
 
 	set_config_with_override STRING CROSS_COMPILE                         CMD_CROSS_COMPILE
 	set_config_with_override STRING BOOTDIR                               CMD_BOOTDIR                               "/boot"
diff -urp genkernel-4.0.10.orig/genkernel genkernel-4.0.10/genkernel
--- genkernel-4.0.10.orig/genkernel	2020-07-20 09:05:15.000000000 -0700
+++ genkernel-4.0.10/genkernel	2021-09-24 16:14:30.009446122 -0700
@@ -364,6 +364,15 @@ if isTrue "${BUILD_RAMDISK}"
 then
 	print_info 1 '' 1 0
 
+	if [[ -n "${CMD_LLVM_UTILS}" && "${CMD_LLVM_UTILS}" == "1" ]] ; then
+		if [ -n "${CMD_LLVM_SLOT}" ] ; then
+			llvm_slot=${CMD_LLVM_SLOT}
+		else
+			llvm_slot=$(ls "${BROOT}/usr/lib/llvm" | sort -rV | head -n 1)
+		fi
+		export PATH="${BROOT}/usr/lib/llvm/${llvm_slot}/bin:${PATH}"
+	fi
+
 	# Compile initramfs
 	create_initramfs
 else
diff -urp genkernel-4.0.10.orig/genkernel.8 genkernel-4.0.10/genkernel.8
--- genkernel-4.0.10.orig/genkernel.8	2020-07-20 09:05:15.000000000 -0700
+++ genkernel-4.0.10/genkernel.8	2021-09-24 16:14:30.009446122 -0700
@@ -358,6 +358,51 @@ Prefix to kernel module destination, mod
 .RE
 .SS "LOW\-LEVEL COMPILATION OPTIONS"
 .PP
+\fB\-\-cfi\fR
+.RS 4
+Use Clang/LLVM to build a CFI protected kernel\&.
+.RE
+.PP
+\fB\-\-clang\-kernel\fR
+.RS 4
+Use Clang/LLVM to build the kernel\&.
+.RE
+.PP
+\fB\-\-clang\-slot\fR=<slot>
+.RS 4
+Use a specific Clang/LLVM slot instead of maximum\&.
+.RE
+.PP
+\fB\-\-clang\-utils\fR
+.RS 4
+Use Clang/LLVM to build utils (experimental)\&.
+.RE
+.PP
+\fB\-\-llvm\-kernel\fR
+.RS 4
+Use Clang/LLVM to build the kernel\&.
+.RE
+.PP
+\fB\-\-llvm\-slot\fR=<slot>
+.RS 4
+Use a specific Clang/LLVM slot instead of maximum\&.
+.RE
+.PP
+\fB\-\-llvm\-utils\fR
+.RS 4
+Use Clang/LLVM to build utils (experimental)\&.
+.RE
+.PP
+\fB\-\-lto\fR
+.RS 4
+Use Clang/LLVM to build a LTO optimized kernel\&.
+.RE
+.PP
+\fB\-\-scs\fR
+.RS 4
+Use Clang/LLVM to build a SCS protected kernel\&.
+.RE
+.PP
 \fB\-\-cross\-compile\fR=<target triplet>
 .RS 4
 Target triple (i\&.e\&. aarch64\-linux\-gnu) to build for\&. Only needed when the system running genkernel has a different architecture like the system which should boot the created kernel/initramfs\&.
diff -urp genkernel-4.0.10.orig/gkbuilds/busybox.gkbuild genkernel-4.0.10/gkbuilds/busybox.gkbuild
--- genkernel-4.0.10.orig/gkbuilds/busybox.gkbuild	2020-07-20 09:05:15.000000000 -0700
+++ genkernel-4.0.10/gkbuilds/busybox.gkbuild	2021-09-24 16:14:30.010446122 -0700
@@ -1,7 +1,28 @@
 # Copyright 1999-2020 Gentoo Authors
 # Distributed under the terms of the GNU General Public License v2
 
+use_gcc_toolchain() {
+	# This package does not work with clang/llvm toolchain.
+	# Reason:  Builds fine but segfaults or panics.
+	export CC=gcc
+	export CXX=g++
+	export AS=as
+	export AR=ar
+	export LD=ld.bfd
+	export NM=nm
+	export OBJCOPY=objcopy
+	export OBJDUMP=objdump
+	export RANLIB=ranlib
+	export READELF=readelf
+	export STRIP=strip
+	export HOSTAR=${CHOST}-ar
+	export HOSTCC=${CHOST}-gcc
+	export HOSTCXX=${CHOST}-g++
+	export HOSTLD=${CHOST}-ld.bfd
+}
+
 src_prepare() {
+	use_gcc_toolchain
 	default
 
 	# flag cleanup
diff -urp genkernel-4.0.10.orig/gkbuilds/lvm.gkbuild genkernel-4.0.10/gkbuilds/lvm.gkbuild
--- genkernel-4.0.10.orig/gkbuilds/lvm.gkbuild	2020-07-20 09:05:15.000000000 -0700
+++ genkernel-4.0.10/gkbuilds/lvm.gkbuild	2021-09-24 16:14:30.010446122 -0700
@@ -1,7 +1,28 @@
 # Copyright 1999-2019 Gentoo Authors
 # Distributed under the terms of the GNU General Public License v2
 
+use_gcc_toolchain() {
+	# This package does not work with clang/llvm toolchain.
+	# Reason:  Build time failure
+	export CC=gcc
+	export CXX=g++
+	export AS=as
+	export AR=ar
+	export LD=ld.bfd
+	export NM=nm
+	export OBJCOPY=objcopy
+	export OBJDUMP=objdump
+	export RANLIB=ranlib
+	export READELF=readelf
+	export STRIP=strip
+	export HOSTAR=${CHOST}-ar
+	export HOSTCC=${CHOST}-gcc
+	export HOSTCXX=${CHOST}-g++
+	export HOSTLD=${CHOST}-ld.bfd
+}
+
 src_configure() {
+	use_gcc_toolchain
 
 	append-ldflags -Wl,-rpath-link,${BROOT}/usr/lib
 
