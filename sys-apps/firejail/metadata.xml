<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild fork on the oiledmachine overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="person">
    <!-- Ebuild originator -->
    <email>expeditioneer@gentoo.org</email>
    <name>Dennis Lamm</name>
  </maintainer>
  <longdescription lang="en">
    Firejail is a SUID program that reduces the risk of security breaches by
    restricting the running environment of untrusted applications using Linux
    namespaces and seccomp-bpf. It allows a process and all its descendants to 
    have their own private view of the globally shared kernel resources, such as
    the network stack, process table,
    mount table.

    This is the regular version. For a long term support version see
    sys-apps/firejail-lts.
  </longdescription>
  <!--

    oiledmachine-overlay ebuild changes and ebuild additions:

      -Improved xpra support
      -Enable or disable sound forwarding
      -/usr/local/bin wrapper auto generation
      ROP attack mitigations
      Support for hardened mallocs

    Ebuild fork goals:

      -Minimize install bloat
      -Make it easier to use program sandboxed.

    Wrapper versus symlink

    Firejail can use symlink from /usr/bin/firefail to
    /usr/local/bin/PROFILE_NAME, but it runs /usr/bin/PROGRAM_NAME with
    PROFILE_NAME only if PROGRAM_NAME is the same as PROFILE_NAME.  Some
    programs, however, cannot be paired correctly because the profile name is
    unconventional or the capitalization issue.

    This is why a shell wrapper script is used instead.  The shell wrapper will
    tell firejail to run CORRECT_PROGRAM_NAME with PROFILE_NAME.  These
    compatiblity wrappers will be autogenerated by the ebuild.  So correctness
    increases but the startup latency will decrease a little because of the
    shell script startup cost.


    Build time environment variables for USE=wrapper

    If the PROFILE_NAME starts with a number, it must be prefixed with the _ character.

    APPARMOR_PROFILE[PROFILE_NAME] - Set app armor protection.
    Valid values - default, APPARMOR_PROFILE_NAME, unset (default off)

    ARGS[PROFILE_NAME] - Add the raw list of args to the wrapper for full control

    AUTO_BLACKLIST - Disable auto adding wrapper to /usr/local/bin as a space delimited list
    Valid values - PROFILE_NAME, unset (permit app)

    COMMAND[PROGRAM_NAME] - Create a wrapper without a profile.
    Valid values - 1 (create), 0 (don't create)

    The COMMAND[PROGRAM_NAME]="1" can be used to increase coverage of
    sandboxed programs typically those without a PROFILE_NAME.  This
    can use all the VAR_NAME[PROFILE_NAME] environment variables.

    LANDLOCK[PROFILE_NAME] - Restrict app file access.
    Valid values - 1 (restrict), 0 (unrestrict), unset (unrestrict)

    LANDLOCK_PROC[PROFILE_NAME] - Restrict proc
    Valid values - no, ro, rw, unset (don't apply)

    LANDLOCK_READ[PROFILE_NAME] - Add read rule path is comma separated
    Valid values - PATH1; PATH1,PATH2; PATH1,PATH2,...; unset (don't apply)

    LANDLOCK_WRITE[PROFILE_NAME] - Add write rule path is comma separated
    Valid values - PATH1; PATH1,PATH2; PATH1,PATH2,...; unset (don't apply)

    LANDLOCK_EXECUTE[PROFILE_NAME] - Add execute rule path is comma separated
    Valid values - PATH1; PATH1,PATH2; PATH1,PATH2,...; unset (don't apply)

    MALLOC_BACKEND[PROFILE_NAME] - Set the hardened allocator
    Valid values - hardened_malloc, mimalloc, scudo, unset (ptmalloc default since none are endorsed upstream)

                        | ASLR   | freed data remittance policy[7]            | ARM64 MTE[3]
    hardened_malloc     | yes[6] | small allocs zeroed, large allocs unerased | optional
    mimalloc            | yes[8] | eager cryptographic erase                  | no
    scudo               | yes[2] | zeroed immediate or zeroed when full delay | optional
    unset (ptmalloc[5]) | [1]    | left unsanitized                           | no[4]

    [1] Only if RANDOMIZE_BASE (KALSR) is enabled in the kernel config and active.  Otherwise, it does not perform proactive mixing.
    [2] Depends on KALSR and may use linear function
    [3] Buffer overflow and use-after-free protection
    [4] MTE is default on in the Linux Kernel
    [5] glibc implementation
    [6] Proactive via ChaCha8
    [7] Using zeros for erasing makes it easier to find keys or sensitive data strings.
    [8] Proactive via ChaCha20

    PATH_CORRECTION[PROFILE_NAME] - Set the correct path to the binary package.

    SCUDO_FREE_IMMEDIATE[PROFILE_NAME] - Free the keys in the heap immediately.
    Valid values:
    1 (clear immediately for mitigation against cold-boot-attack and DMA based attacks.)
    0 (delayed free for mitigation against use-after-free heap attacks.)

    SECCOMP[PROFILE_NAME] - Enable seccomp sandboxing with defaults
    Valid values:  1 (enable), 0 (disable/default), unset (disable)

    SECCOMP_BLOCK[PROFILE_NAME] - Enable seccomp with blacklisted syscalls separated with comma
    Valid values:  SYSCALL1; SYSCALL1,SYSCALL2; SYSCALL1,SYSCALL2,...; unset (don't apply)

    SECCOMP_KEEP[PROFILE_NAME] - Enable seccomp with whitelisted syscalls separated with comma
    Valid values:  SYSCALL1; SYSCALL1,SYSCALL2; SYSCALL1,SYSCALL2,...; unset (don't apply)

    XEPHYR_WH[PROFILE_NAME] - Set the default window size for x11 apps that
    are sandboxed with the zephyr backend.
    Valid values:  WIDTHxHEIGHT, 800x600 (default)

    X_BACKEND[PROFILE_NAME] - Select the x11 sandbox backend.
    Valid values:
    /dev/null - uses xvfb
    auto - tries xpra first, xephyr second
    disable - do not add any flags
    headless - uses the xvfb
    game - uses xpra
    gaming - uses xpra
    none - do not add any flags
    opengl - uses xpra
    xephyr - runs the program using xephyr
    xpra - runs the program using xpra
    xvfb - runs the program using xvfb
    unset - default as auto if x11 app.  otherwise, it will default to none for cli apps.

    Variables are in all capitals.

    Examples:

    Contents of /etc/portage/env/firejail.conf:

      APPARMOR_PROFILE["chromium"]="chromium-browser"
      APPARMOR_PROFILE["firefox"]="default"
      ARGS[_7z]="--noprinters"
      AUTO_BLACKLIST="node cargo"
      LANDLOCK["chromium"]=1
      LANDLOCK["firefox"]=1
      MALLOC_BACKEND["keepassxc"]="mimalloc"
      MALLOC_BACKEND["chromium"]="scudo"
      PATH_CORRECTION["spotify"]="/opt/spotify/spotify-client/spotify"
      SCUDO_FREE_IMMEDIATE["keepassxc"]=1
      SECCOMP["dillo"]=1
      XEPHYR_WH["chromium"]="1920x1080"
      XEPHYR_WH["firefox"]="1920x1080"
      X_BACKEND["chromium"]="xephyr"
      X_BACKEND["firefox"]="xpra"
      X_BACKEND["xchat"]="auto"

      COMMAND["upscayl"]=1
      ARGS["upscayl"]="--nosound --noprinters --noprofile --noprinters"
      MALLOC_BACKEND["upscayl"]="mimalloc"
      PATH_CORRECTION["upscayl"]="/usr/bin/upscayl"
      X_BACKEND["upscayl"]="xpra"

    Contents of /etc/portage/package.env:

      sys-apps/firejail firejail.conf


    Analysis and explanations:

    /etc/portage/env/firejail.conf is a fixed path.  It should not be
    customizable.  This is to make associative arrays work.

    By default in this ebuild, scudo will free memory blocks with a delay.  This
    delay is to mitigate against use-after-free.  This delay is dangerous for
    cold boot attacks or maybe DMA based ones since freeing blocks is not
    eager but event based on size.

    This is why we choose the mimalloc which does eager free.  The keychain has
    to be purged ASAP after the program has been killed without a chance of
    calling its graceful cleaner routine.

    By default, paths are assumed to be /usr/bin/PROGRAM_NAME.  You may want
    to fix the profile name paring with PATH_CORRECTION for binary packages.


    Auto adding/generating wrappers with USE=auto with USE=wrapper

    The auto USE flag can be used to auto add wrappers to /usr/local/bin with
    AUTO_BLACKLIST[PROFILE_NAME].  This will sandbox more X apps for more cautious
    people but increase protection and decrease data theft from biased programs.
    The BLACKLIST is to prevent an unbootable system, prevent a broken package
    manager, or those those prefer some games/apps to be more performant.


    What should be sandboxed?

    1. Proprietary programs which are considered untrusted
    2. End of Life programs/versions
    3. Binary only programs
    4. Network based programs
    5. Programs that are capable of loading user generated content

    If a program does not have a PROFILE_NAME.profile, you should either
    make a .profile which is preferred or use the COMMAND environment
    variable.


    Next round of proposals.

  -->
  <upstream>
    <remote-id type="cpe">cpe:/a:firejail_project:firejail</remote-id>
    <remote-id type="github">netblue30/firejail</remote-id>
  </upstream>
  <use>
    <flag name="auto">
      Auto add wrappers to /usr/local/bin if the program exists.
    </auto>
    <flag name="apparmor">
      Enable support for custom AppArmor profiles
    </flag>
    <flag name="chroot">
      Enable chrooting to custom directory
    </flag>
    <flag name="contrib">
      Install contrib scripts
    </flag>
    <flag name="dbusproxy">
      Enable D-Bus proxy support
    </flag>
    <flag name="file-transfer">
      Enable file transfers between sandboxes and the host system
    </flag>
    <flag name="globalcfg">
      Enable global config file
    </flag>
    <flag name="hardened_malloc">
      Enable support for hardened_malloc as a hardened allocator.
    </flag>
    <flag name="landlock">
      Enable support for the kernel's Landlock Linux Security Module (LSM).
    </flag>
    <flag name="mimalloc">
      Enable support for mimalloc as a hardened allocator.
    </flag>
    <flag name="network">
      Enable networking features
    </flag>
    <flag name="overlayfs">
      Enable overlayfs
    </flag>
    <flag name="private-home">
      Enable private home feature
    </flag>
    <flag name="scudo">
      Enable support for Scudo as a hardened allocator.
    </flag>
    <flag name="seccomp">
      Enable system call filtering
    </flag>
    <flag name="selfrando">
      Enable Selfrando to shuffle functions which may contain ROP gadgets to
      mitigate against ROP attack using ChaCha20 as the PSRNG (Pseudo Random
      Number Generator).

      If the USE flag is disabled, it will do ROP mitigations using
      shuffle-sections linker option.
        - For mold, it will use Fisher-Yates Shuffing with Xorshift with
          modulo math PSRNG.
        - For lld, it will use std::shuffle with Mersenne Twister (mt19937)
          PSRNG.
    </flag>
    <flag name="selinux">
      Enable SELinux labeling support
    </flag>
    <flag name="test">
      Performs basic testing
    </flag>
    <flag name="test-profiles">
      Performs testing on the FireJail profiles.  Expect longer testing time.
    </flag>
    <flag name="test-x11">
      Performs testing on the x11 portions
    </flag>
    <flag name="userns">
      Enable attaching a new user namespace to a sandbox (--noroot option)
    </flag>
    <flag name="x11">
      Enable X11 sandboxing for GUIs in restricted untrusted mode.
      (It may crash programs or programs may not prefer untrusted mode.)
    </flag>
    <flag name="xpra">
      Enable xpra support for windowed apps and better OpenGL support.
    </flag>
    <flag name="xvfb">
      Enable xvfb support for sandboxing remote access or headless servers.
    </flag>
    <flag name="xephyr">
      Enable xephyr support for windowed apps.
    </flag>
    <flag name="wrapper">
      Add USE enabled wrappers to /etc/local/bin to immediately use the program
      sandboxed. (EXPERIMENTAL)
    </flag>
  </use>
</pkgmetadata>
