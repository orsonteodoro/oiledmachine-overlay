Subject:  Allow to use real network

Based on https://github.com/Soheil-ab/Orca/issues/1#issuecomment-683734454

This file has inconsistent line endings.
* LF is used for actor.sh, orca-real-network.sh.
* CRLF is used for orca-server-mahimahi.sh.

diff -urpN orca-1.0_p9999.orig/actor.sh orca-1.0_p9999/actor.sh
--- orca-1.0_p9999.orig/actor.sh	2023-02-13 02:27:45.550584399 -0800
+++ orca-1.0_p9999/actor.sh	2023-02-13 02:30:32.026589884 -0800
@@ -34,7 +34,7 @@ $path/orca-server-mahimahi $port $path $
 #sudo killall -s15 python
 #sleep 10
 echo "Finished."
-if [ ${first_time} -eq 2 ] || [ ${first_time} -eq 4 ]
+if [ ${first_time} -eq 2 ] || [ ${first_time} -eq 4 ] || [ ${first_time} -eq 5 ]
 then
     echo "Doing Some Analysis ..."
     out="sum-${log}.tr"
diff -urpN orca-1.0_p9999.orig/orca-real-network.sh orca-1.0_p9999/orca-real-network.sh
--- orca-1.0_p9999.orig/orca-real-network.sh	1969-12-31 16:00:00.000000000 -0800
+++ orca-1.0_p9999/orca-real-network.sh	2023-02-13 02:29:45.006588335 -0800
@@ -0,0 +1,71 @@
+if [ $# -eq 0 ]
+then
+    source setup.sh
+    first_time=5
+    port_base=44444
+
+    max_steps=500000
+    eval_duration=30
+    num_actors=1
+    epoch=20
+    memory_size=$((max_steps*num_actors))
+
+    scheme_=${ORCA_SCHEME:-"cubic"}
+    cur_dir=`pwd -P`
+    dir="${cur_dir}/rl-module"
+
+    sed "s/\"num_actors\"\: 1/\"num_actors\"\: $num_actors/" $cur_dir/params_base_eval.json > "${dir}/params.json"
+    sed -i "s/\"memsize\"\: 2553600/\"memsize\"\: $memory_size/" "${dir}/params.json"
+    sudo killall -s9 python client orca-server-mahimahi
+
+    #Bring up the actor(s):
+    act_id=0
+    act_port=$port_base
+
+    #Use a wired48 link for both down & up links (you just need to change the downlink side, if you need.)
+    dl=48
+    downl="wired$dl"
+    upl="wired48"
+    #one-way delay=10ms
+    del=10
+    bdp=$((2*dl*del/12))     #12Mbps=1pkt per 1 ms ==> BDP=2*del*BW=2*del*dl/12
+    qs=$((2*bdp))
+
+    # For the Step-scenraio, you can use follwoing parameters:
+    #downl="step-10s-3-level"
+    #qs=1000
+    #eval_duration=60
+
+    ./actor.sh ${act_port} $epoch ${first_time} $scheme_ $dir $act_id $downl $upl $del $eval_duration $qs 0 &
+    pids="$pids $!"
+
+    #in case you need more actors: increase number actor's id and port. and run actor.sh again ...
+    #act_id=$((act_id+1))
+    #act_port=$((port_base+act_id))
+    #sleep 2
+
+    #Wait for them ...
+    for pid in $pids
+    do
+        echo "waiting for $pid"
+        wait $pid
+    done
+    #Make sure that learner and actors are down ...
+    for i in `seq 0 $((num_actors))`
+    do
+        sudo killall -s15 python
+        sudo killall -s15 orca-server-mahimahi
+        sudo killall -s15 client
+    done
+else
+    echo
+    echo "usage: $0"
+    echo
+    echo "ENV_VARS:"
+    echo
+    echo "  ORCA_SCHEME: cubic (default), vegas, westwood, illinois, bbr, yeah, veno, scal, htcp, cdg, hybla, ..."
+    echo
+    echo "Prebuilt is based on cubic, but remaining require training new learned models."
+    echo
+fi
+
diff -urpN orca-1.0_p9999.orig/src/orca-server-mahimahi.cc orca-1.0_p9999/src/orca-server-mahimahi.cc
--- orca-1.0_p9999.orig/src/orca-server-mahimahi.cc	2023-02-13 02:27:46.010584414 -0800
+++ orca-1.0_p9999/src/orca-server-mahimahi.cc	2023-02-13 02:33:30.290595759 -0800
@@ -80,7 +80,7 @@ int main(int argc, char **argv)
 
 void usage()
 {
-	DBGMARK(0,0,"./server [port] [path to ddpg.py] [Report Period: 20 msec] [First Time: 1=yes(learn), 0=no(continue learning), 2=evaluate] [actor id=0, 1, ...] [downlink] [uplink] [one-way delay]\n");
+	DBGMARK(0,0,"./server [port] [path to ddpg.py] [Report Period: 20 msec] [First Time: 1=yes(learn), 0=no(continue learning), 2=evaluate, 4=standalone evaluate, 5=real-network(production)] [actor id=0, 1, ...] [downlink] [uplink] [one-way delay]\n");
 }
 
 void start_server(int flow_num, int client_port)
@@ -145,16 +145,20 @@ void start_server(int flow_num, int clie
     }
 
     char container_cmd[500];
-    sprintf(container_cmd,"sudo -u `whoami` %s/client $MAHIMAHI_BASE 1 %d",path,client_port);
+    if (first_time!=5)
+        sprintf(container_cmd,"sudo -u `whoami` %s/client $MAHIMAHI_BASE 1 %d",path,client_port);
     char cmd[1000];
     char final_cmd[1000];
 
-    if (first_time==4 || first_time==2)
+    if (first_time==5)
+        ;
+    else if (first_time==4 || first_time==2)
         sprintf(cmd, "sudo -u `whoami`   mm-delay %d mm-link %s/../traces/%s %s/../traces/%s --downlink-log=%s/log/down-%s --uplink-queue=droptail --uplink-queue-args=\"packets=%d\" --downlink-queue=droptail --downlink-queue-args=\"packets=%d\" -- sh -c \'%s\' &",delay_ms,path,uplink,path,downlink,path,log_file,qsize,qsize,container_cmd);
     else
         sprintf(cmd, "sudo -u `whoami`  mm-delay %d mm-link %s/../traces/%s %s/../traces/%s --uplink-queue=droptail --uplink-queue-args=\"packets=%d\" --downlink-queue=droptail --downlink-queue-args=\"packets=%d\" -- sh -c \'%s\' &",delay_ms,path,uplink,path,downlink,qsize,qsize,container_cmd);
     
-    sprintf(final_cmd,"%s",cmd);
+    if (first_time!=5)
+        sprintf(final_cmd,"%s",cmd);
 
     DBGPRINT(DBGSERVER,0,"%s\n",final_cmd);
     info->trace=trace;
@@ -192,7 +196,7 @@ void start_server(int flow_num, int clie
         sprintf(cmd,"/home/`whoami`/venv/bin/python %s/d5.py --tb_interval=1 --base_path=%s --task=%d --job_name=actor --train_dir=%s --mem_r=%d --mem_w=%d &",path,path,actor_id,path,(int)key,(int)key_rl);
         DBGPRINT(0,0,"Starting RL Module (Without load) ...\n%s",cmd);
     }
-    else if (first_time==2 || first_time==4){
+    else if (first_time==2 || first_time==4 || first_time==5){
         sprintf(cmd,"/home/`whoami`/venv/bin/python %s/d5.py --tb_interval=1 --base_path=%s --load --eval --task=%d --job_name=actor --train_dir=%s  --mem_r=%d --mem_w=%d &",path,path,actor_id,path,(int)key,(int)key_rl);
         DBGPRINT(0,0,"Starting RL Module (No learning) ...\n%s",cmd);
     }
