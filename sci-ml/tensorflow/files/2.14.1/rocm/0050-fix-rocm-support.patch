Forward port of https://gist.github.com/raw/ed891528aacf0c5baf3a789e5e9aaead
Context:  https://bugs.gentoo.org/705712#c29
--- a/third_party/gpus/rocm_configure.bzl.orig	2023-11-10 13:47:47.000000000 -0800
+++ b/third_party/gpus/rocm_configure.bzl	2024-03-13 13:23:06.308803972 -0700
@@ -35,7 +35,7 @@ _ROCM_TOOLKIT_PATH = "ROCM_PATH"
 _TF_ROCM_AMDGPU_TARGETS = "TF_ROCM_AMDGPU_TARGETS"
 _TF_ROCM_CONFIG_REPO = "TF_ROCM_CONFIG_REPO"
 
-_DEFAULT_ROCM_TOOLKIT_PATH = "/opt/rocm"
+_DEFAULT_ROCM_TOOLKIT_PATH = "@ESYSROOT_ROCM_PATH@"
 
 def verify_build_defines(params):
     """Verify all variables that crosstool/BUILD.rocm.tpl expects are substituted.
@@ -175,36 +175,28 @@ def _rocm_include_path(repository_ctx, r
     inc_dirs = []
 
     # Add HSA headers (needs to match $HSA_PATH)
-    inc_dirs.append(rocm_config.rocm_toolkit_path + "/hsa/include")
+    inc_dirs.append(rocm_config.rocm_toolkit_path + "/include/hsa") # oteodoro:  changed for distro
 
     # Add HIP headers (needs to match $HIP_PATH)
-    inc_dirs.append(rocm_config.rocm_toolkit_path + "/hip/include")
+    inc_dirs.append(rocm_config.rocm_toolkit_path + "/include/hip") # oteodoro:  changed for distro
     if int(rocm_config.rocm_version_number) >= 50200:
         inc_dirs.append(rocm_config.rocm_toolkit_path + "/include")
         inc_dirs.append(rocm_config.rocm_toolkit_path + "/include/hip")
+        inc_dirs.append(rocm_config.rocm_toolkit_path + "/include/rocblas") # oteodoro:  changed for distro
         inc_dirs.append(rocm_config.rocm_toolkit_path + "/include/rocprim")
+        inc_dirs.append(rocm_config.rocm_toolkit_path + "/include/rocrand") # oteodoro:  changed for distro
         inc_dirs.append(rocm_config.rocm_toolkit_path + "/include/rocsolver")
-        inc_dirs.append(rocm_config.rocm_toolkit_path + "/include/rocblas")
 
     # Add HIP-Clang headers (realpath relative to compiler binary)
     rocm_toolkit_path = realpath(repository_ctx, rocm_config.rocm_toolkit_path, bash_bin)
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/8.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/9.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/10.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/11.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/12.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/13.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/14.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/15.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/16.0.0/include")
-    inc_dirs.append(rocm_toolkit_path + "/llvm/lib/clang/17.0.0/include")
+    inc_dirs.append("@ESYSROOT_CLANG_PATH@/include")     # oteodoro:  changed for distro
 
     # Support hcc based off clang 10.0.0 (for ROCm 3.3)
     inc_dirs.append(rocm_toolkit_path + "/hcc/compiler/lib/clang/10.0.0/include/")
     inc_dirs.append(rocm_toolkit_path + "/hcc/lib/clang/10.0.0/include")
 
     # Add hcc headers
-    inc_dirs.append(rocm_toolkit_path + "/hcc/include")
+    inc_dirs.append(rocm_toolkit_path + "/include/hcc") # oteodoro:  changed for distro
 
     return inc_dirs
 
@@ -345,15 +337,16 @@ def _find_libs(repository_ctx, rocm_conf
     libs_paths = [
         (name, _rocm_lib_paths(repository_ctx, name, path))
         for name, path in [
-            ("amdhip64", rocm_config.rocm_toolkit_path + "/hip"),
-            ("rocblas", rocm_config.rocm_toolkit_path),
-            (hipfft_or_rocfft, rocm_config.rocm_toolkit_path),
+            ("amdhip64", rocm_config.rocm_toolkit_path),        # oteodoro:  sorted for distro
             ("hiprand", rocm_config.rocm_toolkit_path),
+            ("hipsparse", rocm_config.rocm_toolkit_path),       # oteodoro:  sorted for distro
             ("MIOpen", miopen_path),
             ("rccl", rccl_path),
-            ("hipsparse", rocm_config.rocm_toolkit_path),
-            ("roctracer64", rocm_config.rocm_toolkit_path + "/roctracer"),
+            ("rocblas", rocm_config.rocm_toolkit_path),         # oteodoro:  sorted for distro
+            ("rocrand", rocm_config.rocm_toolkit_path),         # oteodoro:  sorted for distro
             ("rocsolver", rocm_config.rocm_toolkit_path),
+            ("roctracer64", rocm_config.rocm_toolkit_path),     # oteodoro:  changed/sorted for distro
+            (hipfft_or_rocfft, rocm_config.rocm_toolkit_path),  # oteodoro:  sorted for distro
         ]
     ]
     if int(rocm_config.rocm_version_number) >= 40500:
@@ -481,18 +474,19 @@ def _create_dummy_repository(repository_
         "rocm:BUILD",
         {
             "%{hip_lib}": _lib_name("hip"),
-            "%{rocblas_lib}": _lib_name("rocblas"),
             "%{hipblas_lib}": _lib_name("hipblas"),
-            "%{miopen_lib}": _lib_name("miopen"),
-            "%{rccl_lib}": _lib_name("rccl"),
             "%{hipfft_or_rocfft}": _lib_name("hipfft"),
             "%{hipfft_or_rocfft_lib}": _lib_name("hipfft"),
+            "%{hipblaslt_lib}": _lib_name("hipblaslt"),        # oteodoro:  sorted for distro
             "%{hiprand_lib}": _lib_name("hiprand"),
+            "%{hipsolver_lib}": _lib_name("hipsolver"),        # oteodoro:  sorted for distro
             "%{hipsparse_lib}": _lib_name("hipsparse"),
-            "%{roctracer_lib}": _lib_name("roctracer64"),
+            "%{miopen_lib}": _lib_name("miopen"),              # oteodoro:  sorted for distro
+            "%{rocblas_lib}": _lib_name("rocblas"),            # oteodoro:  sorted for distro
+            "%{rccl_lib}": _lib_name("rccl"),                  # oteodoro:  sorted for distro
+            "%{rocrand_lib}": _lib_name("rocrand"),            # oteodoro:  sorted for distro
             "%{rocsolver_lib}": _lib_name("rocsolver"),
-            "%{hipsolver_lib}": _lib_name("hipsolver"),
-            "%{hipblaslt_lib}": _lib_name("hipblaslt"),
+            "%{roctracer_lib}": _lib_name("roctracer64"),      # oteodoro:  sorted for distro
             "%{copy_rules}": "",
             "%{rocm_headers}": "",
         },
@@ -584,43 +578,116 @@ def _create_local_rocm_repository(reposi
     copy_rules = [
         make_copy_dir_rule(
             repository_ctx,
-            name = "rocm-include",
-            src_dir = rocm_toolkit_path + "/include",
-            out_dir = "rocm/include",
-            exceptions = ["gtest", "gmock"],
+            name = "hip-include",
+            src_dir = rocm_toolkit_path + "/include/hip",      # oteodoro:  sections in copy_rules sorted/changed for distro
+            out_dir = "rocm/include/hip",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "hipblas-include",
+            src_dir = rocm_toolkit_path + "/include/hipblas",
+            out_dir = "rocm/include/hipblas",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "hipcub-include",
+            src_dir = rocm_toolkit_path + "/include/hipcub",
+            out_dir = "rocm/include/hipcub",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = hipfft_or_rocfft + "-include",
+            src_dir = rocm_toolkit_path + "/include/" + hipfft_or_rocfft,
+            out_dir = "rocm/include/" + hipfft_or_rocfft,
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "hiprand-include",
+            src_dir = rocm_toolkit_path + "/include/hiprand",
+            out_dir = "rocm/include/hiprand",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "hipsolver-include",
+            src_dir = rocm_toolkit_path + "/include/hipsolver",
+            out_dir = "rocm/include/hipsolver",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "hipsparse-include",
+            src_dir = rocm_toolkit_path + "/include/hipsparse",
+            out_dir = "rocm/include/hipsparse",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "miopen-include",
+            src_dir = rocm_toolkit_path + "/include/miopen",
+            out_dir = "rocm/include/miopen",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "rocblas-include",
+            src_dir = rocm_toolkit_path + "/include/rocblas",
+            out_dir = "rocm/include/rocblas",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "rocblas-hsaco",
+            src_dir = rocm_toolkit_path + "/@ROCM_LIBDIR@/rocblas/library",
+            out_dir = "rocm/lib/rocblas/lib/library",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "rccl-include",
+            src_dir = rocm_toolkit_path + "/include/rccl",
+            out_dir = "rocm/include/rccl",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "rocprim-include",
+            src_dir = rocm_toolkit_path + "/include/rocprim",
+            out_dir = "rocm/include/rocprim",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "rocrand-include",
+            src_dir = rocm_toolkit_path + "/include/rocrand",
+            out_dir = "rocm/include/rocrand",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "rocsolver-include",
+            src_dir = rocm_toolkit_path + "/include/rocsolver",
+            out_dir = "rocm/include/rocsolver",
+        ),
+        make_copy_dir_rule(
+            repository_ctx,
+            name = "roctracer-include",
+            src_dir = rocm_toolkit_path + "/include/roctracer",
+            out_dir = "rocm/include/roctracer",
         ),
     ]
 
-    # explicitly copy (into the local_config_rocm repo) the $ROCM_PATH/hiprand/include and
-    # $ROCM_PATH/rocrand/include dirs, only once the softlink to them in $ROCM_PATH/include
-    # dir has been removed. This removal will happen in a near-future ROCm release.
-    hiprand_include = ""
-    hiprand_include_softlink = rocm_config.rocm_toolkit_path + "/include/hiprand"
-    softlink_exists = files_exist(repository_ctx, [hiprand_include_softlink], bash_bin)
-    if not softlink_exists[0]:
-        hiprand_include = '":hiprand-include",\n'
-        copy_rules.append(
-            make_copy_dir_rule(
-                repository_ctx,
-                name = "hiprand-include",
-                src_dir = rocm_toolkit_path + "/hiprand/include",
-                out_dir = "rocm/include/hiprand",
-            ),
-        )
-
-    rocrand_include = ""
-    rocrand_include_softlink = rocm_config.rocm_toolkit_path + "/include/rocrand"
-    softlink_exists = files_exist(repository_ctx, [rocrand_include_softlink], bash_bin)
-    if not softlink_exists[0]:
-        rocrand_include = '":rocrand-include",\n'
-        copy_rules.append(
-            make_copy_dir_rule(
-                repository_ctx,
-                name = "rocrand-include",
-                src_dir = rocm_toolkit_path + "/rocrand/include",
-                out_dir = "rocm/include/rocrand",
-            ),
-        )
+    # Copy include files individually.  Only copy those at the root of
+    # /usr/include.
+    copy_rules.append(make_copy_files_rule(
+    repository_ctx,
+    name = "files",
+        srcs = [
+            "@ESYSROOT_ROCM_PATH@/include/hipblas/hipblas.h",           # oteodoro:  sorted/updated for distro
+            "@ESYSROOT_ROCM_PATH@/include/hipblas/hipblas-export.h",
+            "@ESYSROOT_ROCM_PATH@/include/hipblas/hipblas-version.h",
+            "@ESYSROOT_ROCM_PATH@/include/rccl/nccl_net.h",
+            "@ESYSROOT_ROCM_PATH@/include/rccl/rccl.h",
+        ],
+        outs = [
+            "rocm/include/hipblas.h",
+            "rocm/include/hipblas-export.h",
+            "rocm/include/hipblas-version.h",
+            "rocm/include/nccl_net.h",
+            "rocm/include/rccl.h",
+        ],
+    ))
 
     rocm_libs = _find_libs(repository_ctx, rocm_config, hipfft_or_rocfft, miopen_path, rccl_path, bash_bin)
     rocm_lib_srcs = []
@@ -636,7 +703,7 @@ def _create_local_rocm_repository(reposi
         outs = rocm_lib_outs,
     ))
 
-    clang_offload_bundler_path = rocm_toolkit_path + "/llvm/bin/clang-offload-bundler"
+    clang_offload_bundler_path = "@ESYSROOT_LLVM_PATH@/bin/clang-offload-bundler" # oteodoro:  changed for distro
 
     # copy files mentioned in third_party/gpus/rocm/BUILD
     copy_rules.append(make_copy_files_rule(
@@ -670,26 +737,39 @@ def _create_local_rocm_repository(reposi
 
     repository_dict = {
         "%{hip_lib}": rocm_libs["amdhip64"].file_name,
-        "%{rocblas_lib}": rocm_libs["rocblas"].file_name,
         "%{hipfft_or_rocfft}": hipfft_or_rocfft,
         "%{hipfft_or_rocfft_lib}": rocm_libs[hipfft_or_rocfft].file_name,
         "%{hiprand_lib}": rocm_libs["hiprand"].file_name,
+        "%{hipsparse_lib}": rocm_libs["hipsparse"].file_name,           # oteodoro:  section sorted for distro
         "%{miopen_lib}": rocm_libs["MIOpen"].file_name,
         "%{rccl_lib}": rocm_libs["rccl"].file_name,
-        "%{hipsparse_lib}": rocm_libs["hipsparse"].file_name,
-        "%{roctracer_lib}": rocm_libs["roctracer64"].file_name,
+        "%{rocblas_lib}": rocm_libs["rocblas"].file_name,
+        "%{rocrand_lib}": rocm_libs["rocrand"].file_name,
         "%{rocsolver_lib}": rocm_libs["rocsolver"].file_name,
+        "%{roctracer_lib}": rocm_libs["roctracer64"].file_name,
         "%{copy_rules}": "\n".join(copy_rules),
-        "%{rocm_headers}": ('":rocm-include",\n' +
-                            hiprand_include +
-                            rocrand_include),
+        "%{rocm_headers}": ('":files",\n' +                              # oteodoro:  section changed/sorted for distro
+                            '":hip-include",\n' +
+                            '":hipblas-include",\n' +
+                            '":hipcub-include",\n' +
+                            '":' + hipfft_or_rocfft + '-include",\n' +
+                            '":hiprand-include",\n' +
+                            '":hipsolver-include",\n' +
+                            '":hipsparse-include",\n' +
+                            '":miopen-include",\n' +
+                            '":rocblas-include",\n' +
+                            '":rccl-include",\n' +
+                            '":rocprim-include",\n' +
+                            '":rocrand-include",\n' +
+                            '":rocsolver-include",\n' +
+                            '":roctracer-include"'),
     }
     if rocm_libs["hipblaslt"] != None:
         repository_dict["%{hipblaslt_lib}"] = rocm_libs["hipblaslt"].file_name
 
     if rocm_version_number >= 40500:
-        repository_dict["%{hipsolver_lib}"] = rocm_libs["hipsolver"].file_name
         repository_dict["%{hipblas_lib}"] = rocm_libs["hipblas"].file_name
+        repository_dict["%{hipsolver_lib}"] = rocm_libs["hipsolver"].file_name  # oteodoro:  sorted for distro
 
     repository_ctx.template(
         "rocm/BUILD",
@@ -727,7 +807,7 @@ def _create_local_rocm_repository(reposi
     rocm_defines["%{host_compiler_path}"] = "clang/bin/crosstool_wrapper_driver_is_not_gcc"
 
     rocm_defines["%{cxx_builtin_include_directories}"] = to_list_of_strings(
-        host_compiler_includes + _rocm_include_path(repository_ctx, rocm_config, bash_bin),
+        host_compiler_includes + _rocm_include_path(repository_ctx, rocm_config, bash_bin) + ['@ESYSROOT_ROCM_PATH@/include/hip', '@ESYSROOT_LLVM_PATH@/include'],  # oteodoro:  changed for distro
     )
 
     verify_build_defines(rocm_defines)
@@ -751,11 +831,11 @@ def _create_local_rocm_repository(reposi
         tpl_paths["crosstool:clang/bin/crosstool_wrapper_driver_rocm"],
         {
             "%{cpu_compiler}": str(cc),
-            "%{hipcc_path}": rocm_config.rocm_toolkit_path + "/hip/bin/hipcc",
+            "%{hipcc_path}": rocm_config.rocm_toolkit_path + "/bin/hipcc",        # oteodoro:  changed for distro
             "%{hipcc_env}": _hipcc_env(repository_ctx),
-            "%{rocr_runtime_path}": rocm_config.rocm_toolkit_path + "/lib",
+            "%{rocr_runtime_path}": rocm_config.rocm_toolkit_path + "/@ROCM_LIBDIR@",  # oteodoro:  changed for distro
             "%{rocr_runtime_library}": "hsa-runtime64",
-            "%{hip_runtime_path}": rocm_config.rocm_toolkit_path + "/hip/lib",
+            "%{hip_runtime_path}": rocm_config.rocm_toolkit_path + "/@ROCM_LIBDIR@",   # oteodoro:  changed for distro
             "%{hip_runtime_library}": "amdhip64",
             "%{crosstool_verbose}": _crosstool_verbose(repository_ctx),
             "%{gcc_host_compiler_path}": str(cc),
