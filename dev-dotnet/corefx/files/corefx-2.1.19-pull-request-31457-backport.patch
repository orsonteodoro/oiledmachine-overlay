Original author:  Dan Moseley (aka danmosemsft)
Pull request:  https://github.com/dotnet/corefx/pull/31457
URI:  https://github.com/dotnet/corefx/commit/a0e4d78a74b241289dcf0c4c1c6fa026e394a150.patch
Notes:  Backport to 2.1.19 for managed CoreFx ; by Orson Teodoro
----
diff -urp corefx-2.1.19.orig/dir.props corefx-2.1.19/dir.props
--- corefx-2.1.19.orig/dir.props	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/dir.props	2020-06-17 22:46:45.168269851 -0700
@@ -230,6 +230,8 @@
   <!-- Language configuration -->
   <PropertyGroup>
     <LangVersion>latest</LangVersion> <!-- default to allowing all language features -->
+    <!-- Enables Strict mode for Roslyn compiler -->
+    <Features>strict</Features>
     <WarningLevel>4</WarningLevel>
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
   </PropertyGroup>
diff -urp corefx-2.1.19.orig/src/Microsoft.CSharp/tests/Microsoft.CSharp.Tests.csproj corefx-2.1.19/src/Microsoft.CSharp/tests/Microsoft.CSharp.Tests.csproj
--- corefx-2.1.19.orig/src/Microsoft.CSharp/tests/Microsoft.CSharp.Tests.csproj	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/Microsoft.CSharp/tests/Microsoft.CSharp.Tests.csproj	2020-06-17 22:43:52.251520288 -0700
@@ -4,6 +4,11 @@
   <PropertyGroup>
     <ProjectGuid>{82B54697-0251-47A1-8546-FC507D0F3B08}</ProjectGuid>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
+    <!-- 
+    We wish to test operations that would result in
+    "Operator '-' cannot be applied to operands of type 'ushort' and 'EnumArithmeticTests.UInt16Enum'"
+    -->
+    <Features>$(Features.Replace('strict', '')</Features>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'netstandard-Debug|AnyCPU'" />
   <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'netstandard-Release|AnyCPU'" />
@@ -41,4 +46,4 @@
     <Service Include="{82A7F48D-3B50-4B1E-B82E-3ADA8210C358}" />
   </ItemGroup>
   <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
-</Project>
\ No newline at end of file
+</Project>
Only in corefx-2.1.19/src/Microsoft.CSharp/tests: Microsoft.CSharp.Tests.csproj.orig
Only in corefx-2.1.19/src/Microsoft.CSharp/tests: Microsoft.CSharp.Tests.csproj.rej
diff -urp corefx-2.1.19.orig/src/System.Data.SqlClient/tests/Tools/TDS/TDS/AllHeaders/TDSTraceHeader.cs corefx-2.1.19/src/System.Data.SqlClient/tests/Tools/TDS/TDS/AllHeaders/TDSTraceHeader.cs
--- corefx-2.1.19.orig/src/System.Data.SqlClient/tests/Tools/TDS/TDS/AllHeaders/TDSTraceHeader.cs	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/System.Data.SqlClient/tests/Tools/TDS/TDS/AllHeaders/TDSTraceHeader.cs	2020-06-17 22:43:00.909516850 -0700
@@ -68,7 +68,7 @@ namespace Microsoft.SqlServer.TDS.AllHea
             byte[] guidBytes = new byte[16];
 
             // Check if activity ID is available
-            if (ActivityID != null)
+            if (ActivityID != Guid.Empty)
             {
                 guidBytes = ActivityID.ToByteArray();
             }
diff -urp corefx-2.1.19.orig/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/LoudListener.cs corefx-2.1.19/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/LoudListener.cs
--- corefx-2.1.19.orig/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/LoudListener.cs	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/System.Diagnostics.Tracing/tests/BasicEventSourceTest/LoudListener.cs	2020-06-17 22:43:00.909516850 -0700
@@ -27,7 +27,7 @@ namespace BasicEventSourceTests
             t_lastEvent = eventData;
 
             Debug.Write(string.Format("Event {0} ", eventData.EventId));
-            Debug.Write(string.Format(" (activity {0}{1}) ", eventData.ActivityId, eventData.RelatedActivityId != null ? "->" + eventData.RelatedActivityId : ""));
+            Debug.Write(string.Format(" (activity {0}{1}) ", eventData.ActivityId, eventData.RelatedActivityId != Guid.Empty ? "->" + eventData.RelatedActivityId : ""));
             Debug.WriteLine(string.Format(" ({0}).", eventData.Payload != null ? string.Join(", ", eventData.Payload) : ""));
         }
 
diff -urp corefx-2.1.19.orig/src/System.IO.Pipelines/src/System/IO/Pipelines/PipeAwaitable.cs corefx-2.1.19/src/System.IO.Pipelines/src/System/IO/Pipelines/PipeAwaitable.cs
--- corefx-2.1.19.orig/src/System.IO.Pipelines/src/System/IO/Pipelines/PipeAwaitable.cs	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/System.IO.Pipelines/src/System/IO/Pipelines/PipeAwaitable.cs	2020-06-17 22:43:00.909516850 -0700
@@ -29,6 +29,7 @@ namespace System.IO.Pipelines
             _canceledState = CanceledState.NotCanceled;
             _completion = completed ? s_awaitableIsCompleted : s_awaitableIsNotCompleted;
             _completionState = null;
+            _cancellationToken = CancellationToken.None;
             _cancellationTokenRegistration = default;
             _synchronizationContext = null;
             _executionContext = null;
diff -urp corefx-2.1.19.orig/src/System.Management/src/System/Management/ManagementScope.cs corefx-2.1.19/src/System.Management/src/System/Management/ManagementScope.cs
--- corefx-2.1.19.orig/src/System.Management/src/System/Management/ManagementScope.cs	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/System.Management/src/System/Management/ManagementScope.cs	2020-06-17 22:43:00.909516850 -0700
@@ -382,7 +382,7 @@ namespace System.Management
         static bool LoadDelegate<TDelegate>(ref TDelegate delegate_f, IntPtr hModule, string procName) where TDelegate : class
         {
             IntPtr procAddr = Interop.Kernel32.GetProcAddress(hModule, procName);
-            return procAddr != null &&
+            return procAddr != IntPtr.Zero &&
                 (delegate_f = Marshal.GetDelegateForFunctionPointer<TDelegate>(procAddr)) != null;
         }
 
diff -urp corefx-2.1.19.orig/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.MultiAgent.cs corefx-2.1.19/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.MultiAgent.cs
--- corefx-2.1.19.orig/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.MultiAgent.cs	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/System.Net.Http/src/System/Net/Http/CurlHandler/CurlHandler.MultiAgent.cs	2020-06-17 22:43:00.909516850 -0700
@@ -1229,7 +1229,6 @@ namespace System.Net.Http
                     asyncRead = easy._requestContentStream.ReadAsync(
                        new Memory<byte>(sts.Buffer, 0, Math.Min(sts.Buffer.Length, length)), easy._cancellationToken);
                 }
-                Debug.Assert(asyncRead != null, "Badly implemented stream returned a null task from ReadAsync");
 
                 // Even though it's "Async", it's possible this read could complete synchronously or extremely quickly.  
                 // Check to see if it did, in which case we can also satisfy the libcurl request synchronously in this callback.
diff -urp corefx-2.1.19.orig/src/System.Runtime/tests/System/HandleTests.cs corefx-2.1.19/src/System.Runtime/tests/System/HandleTests.cs
--- corefx-2.1.19.orig/src/System.Runtime/tests/System/HandleTests.cs	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/System.Runtime/tests/System/HandleTests.cs	2020-06-17 22:43:02.669585525 -0700
@@ -16,7 +16,7 @@ public static class HandleTests
         Type t = typeof(Derived);
         FieldInfo f = t.GetField(nameof(Base.MyField));
         RuntimeFieldHandle h = f.FieldHandle;
-        Assert.True(h.Value != null);
+        Assert.True(h.Value != IntPtr.Zero);
     }
 
     [Fact]
diff -urp corefx-2.1.19.orig/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs corefx-2.1.19/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
--- corefx-2.1.19.orig/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs	2020-06-17 22:43:02.669585525 -0700
@@ -19,7 +19,6 @@ namespace System.Security.Cryptography
 
         private IncrementalHash(HashAlgorithmName name, HashProvider hash)
         {
-            Debug.Assert(name != null);
             Debug.Assert(!string.IsNullOrEmpty(name.Name));
             Debug.Assert(hash != null);
 
@@ -29,7 +28,6 @@ namespace System.Security.Cryptography
 
         private IncrementalHash(HashAlgorithmName name, HMACCommon hmac)
         {
-            Debug.Assert(name != null);
             Debug.Assert(!string.IsNullOrEmpty(name.Name));
             Debug.Assert(hmac != null);
 
diff -urp corefx-2.1.19.orig/src/System.Transactions.Local/src/System.Transactions.Local.csproj corefx-2.1.19/src/System.Transactions.Local/src/System.Transactions.Local.csproj
--- corefx-2.1.19.orig/src/System.Transactions.Local/src/System.Transactions.Local.csproj	2020-05-27 22:14:18.000000000 -0700
+++ corefx-2.1.19/src/System.Transactions.Local/src/System.Transactions.Local.csproj	2020-06-17 22:45:01.454221134 -0700
@@ -5,6 +5,11 @@
     <ProjectGuid>{E97557E3-7DB1-4828-ACA5-44D8C68B6698}</ProjectGuid>
     <IsPartialFacadeAssembly>true</IsPartialFacadeAssembly>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
+    <!-- 
+    There are many instances of comparing an instance of a struct with null. Until these are all fixed,
+    disable the diagnostic.
+    -->
+    <Features>$(Features.Replace('strict', '')</Features>
   </PropertyGroup>
   <!-- Default configurations to help VS understand the options -->
   <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'netcoreapp-Debug|AnyCPU'" />
@@ -64,4 +69,4 @@
     <Compile Include="System\Transactions\TransactionsEtwProvider.cs" />
   </ItemGroup>
   <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.targets))\dir.targets" />
-</Project>
\ No newline at end of file
+</Project>
Only in corefx-2.1.19/src/System.Transactions.Local/src: System.Transactions.Local.csproj.orig
Only in corefx-2.1.19/src/System.Transactions.Local/src: System.Transactions.Local.csproj.rej
