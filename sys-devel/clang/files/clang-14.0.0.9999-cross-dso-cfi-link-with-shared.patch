Subject:  Emit linker options when -fsanitize-cfi-cross-dso is used with -shared (v2)
Patch Status:  Testing (zlib rebuild works, more packages being tested)
Patch Author:  Orson Teodoro <orsonteodoro@hotmail.com>
Date: Fri Oct  8 01:21:21 PM PDT 2021 (Unix time: 1633724481)

License header for clang/lib/Driver/ToolChains/CommonArgs.cpp:

//===--- CommonArgs.cpp - Args handling for multiple toolchains -*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

DO NOT APPLY THIS PATCH IN PRODUCTION UNTIL THE PATCH STATUS ABOVE IS SET TO WORKING.

WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

Fixes the below error when linking a shared library with -shared:
ld.lld: error: undefined symbol: __cfi_slowpath

v2: Fix breakage when using built Cross-DSO zlib
v1: Initial release

--- clang/lib/Driver/ToolChains/Gnu.cpp.orig	2021-10-09 09:51:06.368525700 -0700
+++ clang/lib/Driver/ToolChains/Gnu.cpp	2021-10-09 10:03:58.156551132 -0700
@@ -566,6 +566,11 @@ void tools::gnutools::Linker::ConstructJ
     CmdArgs.push_back("--no-demangle");
 
   bool NeedsSanitizerDeps = addSanitizerRuntimes(ToolChain, Args, CmdArgs);
+  // Prevent missing -pthread when reusing Cross-DSO CFIed zlib from           // oteodoro: Set flag to link -pthread and -ldl
+  // borking the system.                                                       // oteodoro: when -shared and fsanitize-cfi-cross-dso
+  bool NeedsSanitizerCrossDsoCfiDeps =                                         // oteodoro: Begin section change
+      (Args.hasArg(options::OPT_fsanitize_cfi_cross_dso) &&                    // oteodoro: are used together.
+       Args.hasArg(options::OPT_shared));                                      // oteodoro: End section change
   bool NeedsXRayDeps = addXRayRuntime(ToolChain, Args, CmdArgs);
   addLinkerCompressDebugSectionsOption(ToolChain, Args, CmdArgs);
   AddLinkerInputs(ToolChain, Inputs, Args, CmdArgs, JA);
@@ -593,7 +598,7 @@ void tools::gnutools::Linker::ConstructJ
       if (IsStatic || IsStaticPIE)
         CmdArgs.push_back("--start-group");
 
-      if (NeedsSanitizerDeps)
+      if (NeedsSanitizerDeps || NeedsSanitizerCrossDsoCfiDeps)
         linkSanitizerRuntimeDeps(ToolChain, CmdArgs);
 
       if (NeedsXRayDeps)
--- clang/lib/Driver/ToolChains/CommonArgs.cpp.orig	2021-10-09 09:51:06.308525698 -0700
+++ clang/lib/Driver/ToolChains/CommonArgs.cpp	2021-10-09 09:52:45.378528962 -0700
@@ -967,6 +967,16 @@ bool tools::addSanitizerRuntimes(const T
   if (SanArgs.hasCrossDsoCfi() && !AddExportDynamic)
     CmdArgs.push_back("--export-dynamic-symbol=__cfi_check");
 
+  if (Args.hasArg(options::OPT_fsanitize_cfi_cross_dso)                // oteodoro: Begin section add
+    && Args.hasArg(options::OPT_shared)) {                             // oteodoro:
+    CmdArgs.push_back("--whole-archive");                              // oteodoro:
+    if (SanArgs.needsCfiRt() && SanArgs.linkRuntimes())                // oteodoro:
+      CmdArgs.push_back(TC.getCompilerRTArgString(Args, "cfi"));       // oteodoro: Added section for -shared linkage
+    if (SanArgs.needsCfiDiagRt() && SanArgs.linkRuntimes())            // oteodoro: with -fsanitize-cfi-cross-dso
+      CmdArgs.push_back(TC.getCompilerRTArgString(Args, "cfi_diag"));  // oteodoro:
+    CmdArgs.push_back("--no-whole-archive");                           // oteodoro:
+  }                                                                    // oteodoro: End section add
+
   return !StaticRuntimes.empty() || !NonWholeStaticRuntimes.empty();
 }
 
