<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- ebuild fork on the oiledmachine overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <longdescription>
    The goal of the Clang project is to create a new C, C++, Objective C and
    Objective C++ front-end for the LLVM compiler.

    Features and Goals

    Some of the goals for the project include the following:

    End-User Features:
    Fast compiles and low memory use
    Expressive diagnostics
    GCC compatibility
    Utility and Applications:

    Modular library based architecture
    Support diverse clients (refactoring, static analysis, code generation, etc)
    Allow tight integration with IDEs
    Use the LLVM BSD License
    Internal Design and Implementation:

    A real-world, production quality compiler
    A simple and hackable code base
    A single unified parser for C, Objective C, C++, and Objective C++
    Conformance with C/C++/ObjC and their variants


    The oiledmachine overlay modifies these ebuilds for hardened support to
    ensure that packages built with clang/llvm are properly protected with the
    equivalent security defaults as its counterpart (Hardened GCC 10.3.0).

    Default ON doesn't necessarily mean hardcoded always ON.  If the package
    does not specify the option, the default ON value will be the one used
    so the flags below will be implied in use.

    Default ON patch status:
    present -- _FORITIFY_SOURCE=2
    testing --  -fstack-clash-protection (x86/x86_64 only)
    SSP canary is verified but strength is unverified --  -fstack-protector-strong
    unverified --param=ssp-buffer-size=4
    present -- -Wl,relro -Wl,now
    present -- PIE

    Secondary patches:
    testing -- -shared and fsanitize-cfi-cross-dso

    Verification is done via the app-admin/checksec package.

    When all testing switches to works for the Default ON set, then it is ready
    for production. To ensure Full RELRO is applied default ON set LD="${CC}" or
    LD="ld.lld", The lld package on this overlay has been modified for
    Full RELRO default ON.  However, packages may override the defaults if they
    are problematic or accidently lower the security level unintentionally, so
    you need to recheck the build log to be certain.

    While the toolchain-funcs.eclass only recognize hardened gcc existance
    in the ssp checking functions, you may verify a hardenedized counterpart
    though `clang --version` if using these patches from this overlay which
    also report the default ON hardened options.

    When using -stdlib=libc++, add -static-libstdc++ in front of it for a
    proper CFI build.


    LTO+PGO+BOLT (ebuild mod in development)

    * clang-14.0.0.9999-r1 -- experimental ebuild containing mod
    * clang-14.0.0.9999-r2 -- for stable reliable ebuild


    Deterministic reliable builds

    Due to the problematic design of the live ebuild system, it
    is recommened to use a commit snapshot on the same slot for all
    LLVM live packages.  To have deterministic builds, per-package
    environmental variable must be set by adding the following once a
    successful build of LLVM has been discovered:

Contents of /etc/portage/env/llvm-14-commit.conf:
EGIT_OVERRIDE_COMMIT_LLVM_LLVM_PROJECT="ADD_40_DIGIT_COMMIT_HERE"

Contents of /etc/portage/package.env:
sys-devel/llvm:14 llvm-14-commit.conf
sys-devel/clang:14 llvm-14-commit.conf
=sys-libs/compiler-rt-14* llvm-14-commit.conf
=sys-libs/compiler-rt-sanitizers-14* llvm-14-commit.conf
=sys-libs/libcxx-14* llvm-14-commit.conf
=sys-libs/libcxxabi-14* llvm-14-commit.conf
=sys-libs/libomp-14* llvm-14-commit.conf
=sys-devel/lld-14* llvm-14-commit.conf

  Then, emerge -1 all of the above ebuilds.

  Replace 14 with the particular slots of the live ebuilds that you are
  interested.  When you need to update, just add and remove a # in front
  of EGIT_OVERRIDE_COMMIT_LLVM_LLVM_PROJECT to switch on and off when
  updating the 40 digit hash code again.  For the best success only pick
  the commits with a green checkmark in the commit history:
  https://github.com/llvm/llvm-project/commit/ADD_40_DIGIT_COMMIT_HERE

  References:
[1] https://research.facebook.com/publications/bolt-a-practical-binary-optimizer-for-data-centers-and-beyond/
  </longdescription>
  <use>
    <flag name="pgo-lto-bolt">Build an optimized build that combines
      PGO with LTO with BOLT.  This will build the compiler 5 times which
      may take 5 days to complete on slower machines, but upstream claims it
      may result in around 20-50% runtime performance gain.[1]
    </flag>
    <flag name="default-compiler-rt">Use compiler-rt instead of libgcc as the
      default rtlib for clang</flag>
    <flag name="default-libcxx">Use libc++ instead of libstdc++ as the default
      stdlib for clang</flag>
    <flag name="jemalloc">Use jemalloc for better concurrency to improve
      processing time during the BOLT optimization phase</flag>
    <flag name="tcmalloc">Use TCMalloc for better concurrency to improve
      processing time during the BOLT optimization phase</flag>
    <flag name="default-lld">Use lld as the default linker for clang</flag>
    <flag name="hardened">Match the hardened default on settings from hardened
      GCC</flag>
    <flag name="static-analyzer">Install the Clang static analyzer</flag>

    <flag name="rN">(INTERNAL USE ONLY: oiledmachine-overlay) bumped revisions
      to reuse ccache [for faster rebuilds on very large packages] while
      applying ebuild fixes.</flag>
  </use>
</pkgmetadata>
