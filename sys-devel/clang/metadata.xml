<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild fork on the oiledmachine overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- Ebuild originators -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <!--

    oiledmachine-overlay notes:

    The oiledmachine overlay modifies these ebuilds for hardened support to
    ensure that packages built with clang/llvm are properly protected with the
    equivalent security defaults as its counterpart (Hardened GCC 10.3.0).

    Default ON doesn't necessarily mean hardcoded always ON.  If the package
    does not specify the option, the default ON value will be the one used
    so the flags below will be implied in use.

    Default ON patch status:
    present - _FORITIFY_SOURCE=2
    testing - -fstack-clash-protection (x86/x86_64 only)
    SSP canary is verified but strength is unverified - -fstack-protector-strong
    unverified -param=ssp-buffer-size=4
    present - -Wl,relro -Wl,now
    present - PIE

    Secondary patches:
    testing - -shared and fsanitize-cfi-cross-dso

    Verification is done via the app-admin/checksec package.

    When all testing switches to works for the Default ON set, then it is ready
    for production. To ensure Full RELRO is applied default ON set LD="${CC}" or
    LD="ld.lld", The lld package on this overlay has been modified for
    Full RELRO default ON.  However, packages may override the defaults if they
    are problematic or accidently lower the security level unintentionally, so
    you need to recheck the build log to be certain.

    While the toolchain-funcs.eclass only recognize hardened gcc existance
    in the ssp checking functions, you may verify a hardenedized counterpart
    though `clang ~~version`, replacing ~ with -, if using these patches from
    this overlay which also report the default ON hardened options.

    When using -stdlib=libc++, add -static-libstdc++ in front of it for a
    proper CFI build.



    PGO/BOLTing

    The optimize.sh script has been provided to automate PGO/BOLT training with
    the least effort and to make it practically usable/accessible to the
    community.

    The goal of the optimize.sh script in its current form is to improve build
    times.  Different use cases will be considered later.  The script will
    manage PGO/BOLT optimization for the entire LLVM/Clang toolchain.  The
    current iteration needs work and more trainers will be added as we figure
    out which packages can be built by clang.


    Add the following to /etc/portage/env/clang-pgo-training.conf:

#OVERLAY_DIR="/usr/local/oiledmachine-overlay" # if using older README.md instructions
OVERLAY_DIR="/var/db/repos/oiledmachine-overlay" # if using eselect repository
CLANG_SLOTS="14 15 16 17 18"
CLANG_EPGO="1"
CLANG_EBOLT="0"
CLANG_TRAINERS="lld"


    To run the optimizer do:

    CLANG_PHASES="PGI PGT PGO" \
    ./optimize.sh


    # Alternatively,
    CLANG_PHASES="PGI PGT PGO BGI BGT BGO" \
    ./optimize.sh


    optimize.sh Environment variables:

    CLANG_PHASES - A space separated list of PGO/BOLT phases, which may be used to skip over previous steps.  "PGI PGT PGO" (default).  Acceptable values PGI, PGT, PGO, BGI, BGT, BGO.
    CLANG_SLOTS - A space separated list of slots to build.  "14 15 16 17 18" (default)
    CLANG_TRAINERS - A space separated list of packages to build.  "lld" (default)
    CLANG_WIPE_PGO_PROFILES - 1 to delete PGO/BOLT profiles, 0 or unset to use cached profiles.
    OVERLAY_DIR - The absolute path to the repository containing ebuilds to perform training on.


    Training cost:

    lld - low


    Training purpose:

    lld - basic compile


    The above trainers are still a WIP (Work In Progress).

  References:
[1] https://research.facebook.com/publications/bolt-a-practical-binary-optimizer-for-data-centers-and-beyond/
[2] https://llvm.org/docs/HowToBuildWithPGO.html
  -->
  <use>
    <flag name="cet">
      Enable -fcf-protection=full as the default when building all packages with
      clang.
    </flag>
    <flag name="default-compiler-rt">
      Use compiler-rt instead of libgcc as the default rtlib for clang
    </flag>
    <flag name="default-fortify-source-2">
      Sets _FORITIFY_SOURCE=2 as default when building all packages with clang.
      It requires -O1 or higher for all built packages.
    </flag>
    <flag name="default-fortify-source-3">
      Sets _FORITIFY_SOURCE=3 as default.
      It requires -O1 or higher for all built packages.
    </flag>
    <flag name="default-full-relro">
      Sets Full RELRO as default ON when building all packages with clang.
    </flag>
    <flag name="default-libcxx">
      Use libc++ instead of libstdc++ as the default stdlib for clang
    </flag>
    <flag name="default-lld">
      Use lld as the default linker for clang
    </flag>
    <flag name="default-partial-relro">
      Sets Partial RELRO as default ON when building all packages with clang.
    </flag>
    <flag name="default-ssp-buffer-size">
      Sets the default SSP buffer size to 4 bytes to increase protection
      coverage.
    </flag>
    <flag name="default-stack-clash-protection">
      Sets Stack Clash Protection (SCP) as default ON when building all
      packages with clang.
    </flag>
    <flag name="ebolt">
      Optimize code layout for better cache and branch prediction.  This may
      improve performance by 15%.  This uses event based bolt where one
      step is performed per emerge.  To progress to the next step you
      re-emerge the ebuild with the BOLT training perf profile.
    </flag>
    <flag name="epgo">
      Use event based Profile Guided Optimization to optimize the ebuild.
      One PGO step per emerge is performed.  When a patch version bump
      happens, it does only the PGO step.  It may result in 20% build
      reduction with the optimized build.
    </flag>
    <flag name="extra">
      Build extra tools (clangd, clang-tidy and a few more)
    </flag>
    <flag name="fallback-commit">
      Rollback commit for reliable working patches and for missing symbols
      avoidance.
    </flag>
    <flag name="hardened">
      Match the hardened default on settings from hardened GCC.  It also
      changes the --version that may use it as detection for full hardened
      support.

      For this ebuild, it is for backwards compatibility.  You may individually
      pick the default_* instead.  So if you use a more advanced SSP algorithm,
      you can use that instead.

      The distro uses full CET with Hardened GCC with the hardened USE flag.  It
      is unknown if this is safe to use in non-CET hardware.  This is why it is
      optional in this ebuild for non-CET, but for CET hardware the cet USE
      flag should be ON.
    </flag>
    <flag name="hardened-compat">
      Add the version patch but allow for flexible configuration.  This is
      for ebuild compatibility in clang hardened contexts.
    </flag>
    <flag name="ieee-long-double">
      Use accelerated 128-bit IEEE long double ABI (ppc64le only)
    </flag>
    <flag name="pie">
      Build all packages with PIE ON when building with clang.
    </flag>
    <flag name="pgo">
      Build with Profile Guided Optimization which may reduce compile times of
      other packages by 20%, with the PGOed llvm package.
    </flag>
    <flag name="ssp">
      Sets (Stack Smashing Protection) SSP, specifically
      -fstack-protector-strong, as default ON when building all packages with
      clang.
    </flag>
    <flag name="static-analyzer">
      Install the Clang static analyzer
    </flag>
    <flag name="rN">
      (INTERNAL USE ONLY: oiledmachine-overlay) bumped revisions to reuse ccache
      [for faster rebuilds on very large packages] while applying ebuild fixes.
    </flag>
  </use>
</pkgmetadata>
