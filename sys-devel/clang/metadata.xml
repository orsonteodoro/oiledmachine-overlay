<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- ebuild fork on the oiledmachine overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <longdescription>
    The goal of the Clang project is to create a new C, C++, Objective C and
    Objective C++ front-end for the LLVM compiler.

    Features and Goals

    Some of the goals for the project include the following:

    End-User Features:
    Fast compiles and low memory use
    Expressive diagnostics
    GCC compatibility
    Utility and Applications:

    Modular library based architecture
    Support diverse clients (refactoring, static analysis, code generation, etc)
    Allow tight integration with IDEs
    Use the LLVM BSD License
    Internal Design and Implementation:

    A real-world, production quality compiler
    A simple and hackable code base
    A single unified parser for C, Objective C, C++, and Objective C++
    Conformance with C/C++/ObjC and their variants


    The oiledmachine overlay modifies these ebuilds for hardened support to
    ensure that packages built with clang/llvm are properly protected with the
    equivalent security flags as its counterpart (Hardened GCC 10.3.0).

    Default ON patch status:
    testing -- _FORITIFY_SOURCE=2
    testing --  -fstack-clash-protection
    testing --  -fstack-protector-strong with --param=ssp-buffer-size=4
    testing -- -Wl,relro -Wl,now

    When all testing switches to works, then it is ready for production.
    To ensure Full RELRO is applied default ON set LD="${CC}", but may
    sometimes not work.  The feasibility of hardcoding Full RELRO in lld
    is still being investigated.

    While the toolchain-funcs.eclass only recognize hardened gcc existance
    in the ssp checking functions, you may verify a hardenedized counterpart
    though `clang --version` if using these patches from this overlay which
    also report the default ON hardened options.
  </longdescription>
  <use>
    <flag name="default-compiler-rt">Use compiler-rt instead of libgcc as the
      default rtlib for clang</flag>
    <flag name="default-libcxx">Use libc++ instead of libstdc++ as the default
      stdlib for clang</flag>
    <flag name="default-lld">Use lld as the default linker for clang</flag>
    <flag name="hardened">Match the hardened default on settings from hardened
      GCC</flag>
    <flag name="static-analyzer">Install the Clang static analyzer</flag>
  </use>
</pkgmetadata>
