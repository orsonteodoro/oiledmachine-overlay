Subject:  Distro does not build llvm with LLVM_ENABLE_DUMP, so make it toggable.
Patch author:   Orson Teodoro <orsonteodoro@hotmail.com>
Date:  Fri Feb 11 07:09:44 PM PST 2022 (Unix time:  1644635384)
Patch status:  Testing

License header for patched file:

// Copyright 2014 The Souper Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

-DNDEBUG is required when LLVM is built without dump because of headers issue with dump().
When codepaths related to dump() are disabled the headers
still want to link to it with this error:
ld.lld: error: libsouperPass.so: undefined reference to llvm::cfg::Update<llvm::BasicBlock*>::dump() const

diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/CMakeLists.txt souper-69536e134478ae1d44c912c90c3db96ad06437c1/CMakeLists.txt
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/CMakeLists.txt	2022-02-12 16:27:39.538444480 -0800
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/CMakeLists.txt	2022-02-12 16:34:34.571096876 -0800
@@ -529,7 +529,12 @@ add_custom_target(check
   USES_TERMINAL)
 
 # we want assertions even in release mode!
-string(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
+string(FIND ${LLVM_CONFIG_H_DATA} "LLVM_ENABLE_DUMP A" LLVM_ENABLE_DUMP_RESULT)										# oteodoro:  added line
+if(${LLVM_ENABLE_DUMP_RESULT} GREATER_EQUAL -1)														# oteodoro:  added line
+  add_definitions(-DNDEBUG)																	# oteodoro:  added line
+else()																				# oteodoro:  added line
+  string(REPLACE "-DNDEBUG" "" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")										# oteodoro:  indent line
+endif()																				# oteodoro:  added line
 
 if(FEATURE_EXTERNAL_CACHE)			# oteodoro:  add line
 add_library(profileRuntime STATIC
Only in souper-69536e134478ae1d44c912c90c3db96ad06437c1: CMakeLists.txt.orig
diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Pass/Pass.cpp souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Pass/Pass.cpp
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Pass/Pass.cpp	2022-02-12 16:27:39.492442690 -0800
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Pass/Pass.cpp	2022-02-12 16:28:15.683831543 -0800
@@ -228,9 +228,11 @@ public:
 
     if (DebugLevel > 1) {
       errs() << "\n";
+#ifdef LLVM_ENABLE_DUMP								// oteodoro:  added line
       errs() << "; entering Souper's runOnFunction() for " << FunctionName << "()\n\n";
       F->getParent()->dump();
       errs() << "\n";
+#endif										// oteodoro:  added line
     }
 
     InstContext IC;
@@ -367,8 +369,10 @@ public:
       if (DebugLevel > 1) {
         if (DebugLevel > 2) {
           if (DebugLevel > 4) {
+#ifdef LLVM_ENABLE_DUMP								// oteodoro:  added line
             errs() << "\nModule before replacement:\n";
             F->getParent()->dump();
+#endif										// oteodoro:  added line
           } else {
             errs() << "\nFunction before replacement:\n";
             F->print(errs());
@@ -412,8 +416,10 @@ public:
 
       if (DebugLevel > 2) {
         if (DebugLevel > 4) {
+#ifdef LLVM_ENABLE_DUMP								// oteodoro:  added line
           errs() << "\nModule after replacement:\n";
           F->getParent()->dump();
+#endif										// oteodoro:  added line
         } else {
           errs() << "\nFunction after replacement:\n\n";
           F->print(errs());
