Subject:  Updated report_fatal_error calls without std::string but with Twine
          instead for LLVM 14 RC1 and LLVM 15 init
Patch author:   Orson Teodoro <orsonteodoro@hotmail.com>
Date:  Fri Feb 11 07:09:44 PM PST 2022 (Unix time:  1644635384)
Patch status:  Testing

License header for patched files:

// Copyright 2014 The Souper Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/include/souper/Tool/GetSolver.h.in souper-69536e134478ae1d44c912c90c3db96ad06437c1/include/souper/Tool/GetSolver.h.in
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/include/souper/Tool/GetSolver.h.in	2022-02-11 22:30:54.829802076 -0800
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/include/souper/Tool/GetSolver.h.in	2022-02-11 23:11:32.272656529 -0800
@@ -15,6 +15,7 @@
 #ifndef SOUPER_TOOL_GETSOLVER_H
 #define SOUPER_TOOL_GETSOLVER_H
 
+#include "llvm/ADT/Twine.h"							// oteodoro:  added line
 #include "llvm/Support/CommandLine.h"
 #include "souper/Extractor/Solver.h"
 #ifdef USE_EXTERNAL_CACHE							// oteodoro:  added line
@@ -59,7 +60,7 @@ static bool exists_and_executable(const
 static std::unique_ptr<SMTLIBSolver> GetUnderlyingSolver() {
   std::string Z3PathStr(Z3Path);
   if (!exists_and_executable(Z3Path))
-    llvm::report_fatal_error("Solver '" + Z3PathStr + "' does not exist or is not executable");
+    llvm::report_fatal_error(llvm::Twine("Solver '") + llvm::Twine(Z3PathStr.c_str()) + llvm::Twine("' does not exist or is not executable"));	// oteodoro:  changed line
   return createZ3Solver(makeExternalSolverProgram(Z3PathStr),
                         KeepSolverInputs);
 }
diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Codegen/Codegen.cpp souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Codegen/Codegen.cpp
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Codegen/Codegen.cpp	2021-06-09 12:16:44.000000000 -0700
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Codegen/Codegen.cpp	2022-02-11 23:13:53.684426230 -0800
@@ -17,6 +17,7 @@
 #include "souper/Codegen/Codegen.h"
 #include "souper/Inst/Inst.h"
 #include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/Twine.h"				// oteodoro:  added line
 #include "llvm/IR/Dominators.h"
 #include "llvm/IR/IRBuilder.h"
 #include "llvm/IR/LLVMContext.h"
@@ -316,8 +317,8 @@ llvm::Value *Codegen::getValue(Inst *I)
   // FIXME: [US]{Add,Sub,Mul}O
   // FIXME: PHI
 
-  report_fatal_error((std::string) "Unhandled Souper instruction " +
-                     Inst::getKindName(I->K) + " in Codegen::getValue()");
+  report_fatal_error(llvm::Twine("Unhandled Souper instruction ") +					// oteodoro:  changed line
+                     llvm::Twine(Inst::getKindName(I->K)) + llvm::Twine(" in Codegen::getValue()"));	// oteodoro:  changed line
 }
 
 static std::vector<llvm::Type *>
diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Infer/ConstantSynthesis.cpp souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Infer/ConstantSynthesis.cpp
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Infer/ConstantSynthesis.cpp	2021-06-09 12:16:44.000000000 -0700
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Infer/ConstantSynthesis.cpp	2022-02-11 23:13:56.158527134 -0800
@@ -15,6 +15,7 @@
 #define DEBUG_TYPE "souper"
 
 #include "llvm/ADT/APInt.h"
+#include "llvm/ADT/Twine.h"				// oteodoro:  added line
 #include "llvm/Support/CommandLine.h"
 #include "souper/Infer/ConstantSynthesis.h"
 #include "souper/Infer/Interpreter.h"
@@ -244,7 +245,7 @@ Inst *getConstConstraint(Inst::Kind K, u
     return IC.getConst(llvm::APInt(1, true));
 
   default:
-    llvm::report_fatal_error("unmatched: " + (std::string)Inst::getKindName(K));
+    llvm::report_fatal_error(llvm::Twine("unmatched: ") + llvm::Twine(Inst::getKindName(K)));		// oteodoro:  changed line
   }
 }
 
diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Infer/InstSynthesis.cpp souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Infer/InstSynthesis.cpp
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Infer/InstSynthesis.cpp	2021-06-09 12:16:44.000000000 -0700
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Infer/InstSynthesis.cpp	2022-02-11 23:13:57.466580481 -0800
@@ -12,6 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+#include "llvm/ADT/Twine.h"				// oteodoro:  added line
 #include "llvm/Support/CommandLine.h"
 #include "llvm/Support/raw_ostream.h"
 #include "souper/Extractor/ExprBuilder.h"
@@ -326,9 +327,9 @@ void InstSynthesis::setCompLibrary() {
       else if (K == Inst::ZExt || K == Inst::SExt || K == Inst::Trunc)
         report_fatal_error("don't use zext/sext/trunc explicitly");
       else if (K == Inst::None)
-        report_fatal_error("unknown instruction: " + KindStr);
+        report_fatal_error(llvm::Twine("unknown instruction: ") + llvm::Twine(KindStr.c_str()));		// oteodoro:  changed line
       else if (UnsupportedCompKinds.count(K))
-        report_fatal_error("unsupported instruction: " + KindStr);
+        report_fatal_error(llvm::Twine("unsupported instruction: ") + llvm::Twine(KindStr.c_str()));	// oteodoro:  changed line
       else
         Kinds.push_back(K);
     }
@@ -773,7 +774,7 @@ Inst *InstSynthesis::getComponentInputCo
     if (DebugLevel > 2)
       llvm::outs() << "false\n";
     if (Ante == IC.getConst(APInt(1, false)))
-      report_fatal_error("no input available for " + getLocVarStr(L_x.first));
+      report_fatal_error(llvm::Twine("no input available for ") + llvm::Twine(getLocVarStr(L_x.first).c_str()));		// oteodoro:  changed line
     Ret = IC.getInst(Inst::And, 1, {Ret, Ante});
   }
 
@@ -929,8 +930,8 @@ Inst *InstSynthesis::createInstFromWirin
     LocVar Match = getWiringLocVar(OpLoc, LineWiring);
     assert(CompInstMap.count(Match) && "unknown matching location variable");
     if (!CompInstMap.count(Match))
-      report_fatal_error("synthesis bug: component input " +
-                         getLocVarStr(OpLoc) + " not wired");
+      report_fatal_error(llvm::Twine("synthesis bug: component input ") +				// oteodoro:  changed line
+                         llvm::Twine(getLocVarStr(OpLoc).c_str()) + llvm::Twine(" not wired"));		// oteodoro:  changed line
     // Store wiring locations
     auto Left = getLocVarStr(OpLoc, LOC_PREFIX);
     auto Right = getLocVarStr(Match, LOC_PREFIX);
diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Infer/Interpreter.cpp souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Infer/Interpreter.cpp
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Infer/Interpreter.cpp	2021-06-09 12:16:44.000000000 -0700
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Infer/Interpreter.cpp	2022-02-11 23:13:58.735632237 -0800
@@ -12,6 +12,7 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+#include "llvm/ADT/Twine.h"				// oteodoro:  added line
 #include "souper/Infer/Interpreter.h"
 
 namespace souper {
@@ -445,9 +446,9 @@ namespace souper {
     }
 
     default:
-      llvm::report_fatal_error("unimplemented instruction kind " +
-                               std::string(Inst::getKindName(Inst->K)) +
-                               " in interpreter");
+      llvm::report_fatal_error(llvm::Twine("unimplemented instruction kind ") +	// oteodoro:  changed line
+                               llvm::Twine(Inst::getKindName(Inst->K)) +		// oteodoro:  changed line
+                               llvm::Twine(" in interpreter"));			// oteodoro:  changed line
     }
   }
 
diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/KVStore/KVStore.cpp souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/KVStore/KVStore.cpp
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/KVStore/KVStore.cpp	2021-06-09 12:16:44.000000000 -0700
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/KVStore/KVStore.cpp	2022-02-11 23:13:52.488377450 -0800
@@ -15,6 +15,9 @@
 #include "souper/KVStore/KVStore.h"
 #include "souper/KVStore/KVSocket.h"
 
+#include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/Twine.h"				// oteodoro:  added line
+#include "llvm/ADT/StringRef.h"				// oteodoro:  added line
 #include "llvm/Support/CommandLine.h"
 #include "hiredis.h"
 
@@ -52,8 +55,8 @@ void KVStore::KVImpl::connect() {
     if (!Ctx)
       llvm::report_fatal_error("Can't allocate redis context\n");
     if (Ctx->err)
-      llvm::report_fatal_error((llvm::StringRef)"Redis UNIX connection error: " +
-			       Ctx->errstr + "\n");
+      llvm::report_fatal_error(llvm::Twine("Redis UNIX connection error: ") +					// oteodoro:  changed line
+			       llvm::Twine(StringRef(Ctx->errstr, sizeof(Ctx->errstr))) + llvm::Twine("\n"));	// oteodoro:  changed line
   } else {
     // TODO: support connecting to other machines
     const char *hostname = "127.0.0.1";
@@ -61,8 +64,8 @@ void KVStore::KVImpl::connect() {
     if (!Ctx)
       llvm::report_fatal_error("Can't allocate redis context\n");
     if (Ctx->err)
-      llvm::report_fatal_error((llvm::StringRef)"Redis TCP connection error: " +
-			       Ctx->errstr + "\n");
+      llvm::report_fatal_error(llvm::Twine("Redis TCP connection error: ") +					// oteodoro:  changed line
+			       llvm::Twine(StringRef(Ctx->errstr, sizeof(Ctx->errstr))) + llvm::Twine("\n"));	// oteodoro:  changed line
     if (redisEnableKeepAlive(Ctx) != REDIS_OK)
       llvm::report_fatal_error("Can't enable redis keepalive\n");
   }
@@ -88,8 +91,8 @@ void KVStore::KVImpl::hIncrBy(llvm::Stri
   }
   if (reply->type != REDIS_REPLY_INTEGER)
     llvm::report_fatal_error(
-        "Redis protocol error for static profile, didn't expect reply type "
-        + std::to_string(reply->type));
+        llvm::Twine("Redis protocol error for static profile, didn't expect reply type ")			// oteodoro:  changed line
+        + llvm::Twine(std::to_string(reply->type).c_str()));							// oteodoro:  changed line
   freeReplyObject(reply);
 }
 
@@ -112,8 +115,8 @@ bool KVStore::KVImpl::hGet(llvm::StringR
     return true;
   } else {
     llvm::report_fatal_error(
-        "Redis protocol error for cache lookup, didn't expect reply type " +
-        std::to_string(reply->type));
+        llvm::Twine("Redis protocol error for cache lookup, didn't expect reply type ") +			// oteodoro:  changed line
+        llvm::Twine(std::to_string(reply->type).c_str()));							// oteodoro:  changed line
   }
 }
 
@@ -122,11 +125,11 @@ void KVStore::KVImpl::hSet(llvm::StringR
   redisReply *reply = (redisReply *)redisCommand(Ctx, "HSET %s %s %s",
       Key.data(), Field.data(), Value.data());
   if (!reply || Ctx->err)
-    llvm::report_fatal_error((llvm::StringRef)"Redis error: " + Ctx->errstr);
+    llvm::report_fatal_error(llvm::Twine("Redis error: ") + llvm::Twine(StringRef(Ctx->errstr, sizeof(Ctx->errstr))));	// oteodoro:  changed line
   if (reply->type != REDIS_REPLY_INTEGER) {
     llvm::report_fatal_error(
-        "Redis protocol error for cache fill, didn't expect reply type " +
-        std::to_string(reply->type));
+        llvm::Twine("Redis protocol error for cache fill, didn't expect reply type ") +
+        llvm::Twine(std::to_string(reply->type).c_str()));
   }
   freeReplyObject(reply);
 }
diff -urp souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Pass/Pass.cpp souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Pass/Pass.cpp
--- souper-69536e134478ae1d44c912c90c3db96ad06437c1.orig/lib/Pass/Pass.cpp	2022-02-11 22:30:54.876803952 -0800
+++ souper-69536e134478ae1d44c912c90c3db96ad06437c1/lib/Pass/Pass.cpp	2022-02-11 23:13:50.522297263 -0800
@@ -15,6 +15,7 @@
 #define DEBUG_TYPE "souper"
 
 #include "llvm/ADT/Statistic.h"
+#include "llvm/ADT/Twine.h"				// oteodoro:  added line
 #include "llvm/Analysis/DemandedBits.h"
 #include "llvm/Analysis/LazyValueInfo.h"
 #include "llvm/Analysis/LoopInfo.h"
@@ -216,7 +217,7 @@ public:
 
   bool runOnFunction(Function *F) {
     if (Verify && verifyFunction(*F))
-      llvm::report_fatal_error("function " + F->getName() + " broken before Souper");
+      llvm::report_fatal_error(llvm::Twine("function ") + llvm::Twine(F->getName()) + llvm::Twine(" broken before Souper"));		// oteodoro:  changed line
 
     std::string FunctionName;
     if (F->hasLocalLinkage()) {
