<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- ebuild only in the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <longdescription>
    Souper is an LLVM IR optimizer pass that can reduce a binary by around 4.4%
    but with a 2% runtime performance slowdown tradeoff.  [The savings may
    become substantial when storing GiBs or TiBs of compiled code.]  However,
    an increase in binary size may happen, and longer than usual build times
    may be observed.[1, 2, 3]

    It automatically generates random code sequences of optimized code
    sequences.  Because of this random code generation, two additional CFLAGS
    can be used as input to additional functions when computing the cost.

    Ricer notes:

    Two profile options can improve optimization over time but require the
    external-cache USE flag.


    Extra CFLAGS to pass directly to clang/clang++:

     * -mllvm -souper-static-profile -- can be used to add performance profiling
          counters for size
     * -g -mllvm -souper-dynamic-profile -- can be used to add performance
          profiling counters for execution speed

    Use of these counters may improve optimization over time after recompiling.
    See the academic paper on how this really works.

    If you do not want to use the wrapper, see the contents of the sclang
    wrapper to see how each of these extra args are invoked.

    The above settings correspond to sclang front-end ENVIRONMENT VARIABLES as
    well:

      *  SOUPER_STATIC_PROFILE=1
      *  SOUPER_DYNAMIC_PROFILE=1

    Using souper with frontend wrappers via CC/CXX:

    The wrapper scripts simplify passing args to clang/clang++ without getting
    too technical when to use -Xclang or -mllvm.

    Set CC/CXX for the wrapper for highest built llvm-N USE flag:

      CC=sclang
      CXX=sclang++

    Alternatively, you can set to a specific slot as follows: 
   
      CC=sclang-N	# where N=[11,12,13,14] corresponds to clang-N
      CXX=sclang++-N	# where N=[11,12,13,14] corresponds to clang++-N

    For a full list of supported wrapper commands see `sclang --help`.


    Using souper via CFLAGS:

    Do it in the new school way:

      COMMON_FLAGS="${COMMON_FLAGS} -Xclang -load -Xclang /usr/lib/souper/14/lib64/libsouperPass.so"

    or in old the school way:

      CFLAGS="${CFLAGS} -Xclang -load -Xclang /usr/lib/souper/14/lib64/libsouperPass.so"
      CXXFLAGS="${CXXFLAGS} -Xclang -load -Xclang /usr/lib/souper/14/lib64/libsouperPass.so"

    It's required to use a bashrc script to delete/replace these settings if
    this is applied systemwide with a per package switcher.  If it is a GCC
    only package, these flags should be deleted.

    As an alternative, you can apply it individually with package.env
    configuration (.conf) to easily adjust these especially for packages that
    require older versions of Clang / LLVM.

    When using the C{,XX}FLAGS, some c{,xx}flags may not be accepted more than
    once.  A work around for this problem is not to specify it again as LDFLAGS.


    The external cache:

    The external cache uses Redis as a database backend.  By default, this is
    not utilized but requires at least static or dynamic profiling to activate
    using the external cache.  It is recommended to use static profile to speed
    up future lookups.  You can specify both static and dynamic together.  By
    default it will use TCP communication as an IPC between Souper and Redis,
    but you can use the faster UNIX sockets with the SOUPER_CACHE_UNIX
    environment variable with sclang/sclang++ wrappers or
    -mllvm -souper-external-cache-unix C{,XX}FLAGS.

    Ebuild support for external cache is a Work In Progress (WIP).  Currently,
    the TCP IPC only works, but the UNIX domain sockets will be complete sooner
    or later.

    Then, you need add -mllvm -souper-external-cache-unix to per-package
    C{,XX}FLAGS to utilize the UNIX domain sockets IPC.


    Environment variables:

      EXTERNAL_CACHE_SOCK_PATH -- path to Redis .sock file used when using UNIX
           sockets.


    Running Souper-ed packages:

    Only native ABI is currently supported, but the the wrappers (sclang{,++})
    need more modifications to be  more multiabi aware when referencing
    libraries.  Multiabi support is still undergoing development and testing.

    The following are required to per-package LDFLAGS:

      LDFLAGS="${LDFLAGS} -Wl,--no-as-needed -Wl,-lLLVM-12 -Wl,-rpath=/usr/lib/souper/12/lib64 -Wl,-rpath=/usr/lib/llvm/12/lib64"

    You should only link with the same LLVM version or only one LLVM version.
    If a package has and is using a specific LLVM version, you can only link
    Souper with the same LLVM version and the lib64 should be replaced
    with the corresponding folder for that ABI.

    Testing notes:

    Only the UNIX socket with Redis and with the llvm-12 USE flag has been
    tested with the built program at least working.

    References:
    [1] https://research.google/pubs/pub46467/
    [2] page 2, par 1
    [3] page 9, par 7
  </longdescription>
  <upstream>
    <bugs-to>https://github.com/google/souper/issues</bugs-to>
    <doc lang="en">https://github.com/google/souper#using-souper</doc>
    <remote-id type="github">google/souper</remote-id>
  </upstream>
  <use>
    <flag name="debug">
      Allow use of assertions for correctness checking.
    </flag>
    <flag name="dump">
      Allow use of dump functions to increase verbosity of helpful debug
      information.  Only useful for developers or testers.
    </flag>
    <flag name="external-cache">
      An external query cache to reduce time cost of looking up the most
      frequent encountered code sequences mapped to the to cheapest code
      sequence while skipping steps to obtain it.

      Note the use of an external cache can increase the cost of RAM in the
      order of 100s of MB but the time savings is amortized (meaning high
      initial cost but decreased over time).  Without Redis the time cost could
      be 5-25x times larger in the initial compilation relative to warm cache
      runs.[2]

      It is recommended to hardmask newer versions of Redis in package.mask.
    </flag>
    <flag name="openrc">
      Install OpenRC daemon scripts for the external-cache.
    </flag>
    <flag name="support-tools">
      Install extra tools designed for compiler developers
    </flag>
    <flag name="usockets">
      Use UNIX domain sockets as IPC communication between Redis and Souper.
    </flag>
    <flag name="tcp">
      Use TCP as IPC communication Redis and Souper.
    </flag>
    <flag name="rN">FOR INTERNAL USE ONLY.  Revision bumps to preserve
      ccache paths for fast rebuilds.
    </flag>
  </use>
</pkgmetadata>
