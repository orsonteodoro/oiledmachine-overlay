<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- ebuild only in the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <longdescription>
    Souper is an LLVM IR optimizer pass that can reduce a binary by around 4.4%
    but with a 2% runtime performance slowdown tradeoff.[1]

    It automatically generates random code sequences of optimized code
    sequences.  Because of this random code generation, two additional CFLAGS
    can be used as input to additional functions when computing the cost.

    Ricer notes:

    Two profile options can improve optimization over time but require the redis
    USE flag.


    Extra CFLAGS to pass directly to clang/clang++:

     * -mllvm -souper-static-profile -- can be used to add performance counters for
          size
     * -g -mllvm -souper-dynamic-profile -- can be used to add performance counters for
          execution speed

    If you do not want to use the wrapper, see the contents of the wrapper
    to see how each of these extra args are invoked.

    The above settings correspond to sclang front-end ENVIRONMENT VARIABLES as
    well:

      *  SOUPER_STATIC_PROFILE
      *  SOUPER_DYNAMIC_PROFILE


    Using souper with fontend wrappers:

    The wrapper scripts simplify passing args to clang/clang++ without getting
    too technical when to use -Xclang or -mllvm.

    sclang can be used in place of clang when setting CC environment variable.

    sclang++ can be used in place of clang++ when setting CXX environment
    variable.

    These wrappers are located in /usr/lib/souper/14/bin, where 14 is the LLVM
    version.

    For a full list of supported wrapper commands see `sclang --help`.

    Using souper Via CFLAGS in the new school way:

      COMMON_FLAGS="${COMMON_FLAGS} -Xclang -load -Xclang /usr/lib/souper/14/lib64/libsouperPass.so"

    or in old the school way:

      CFLAGS="${CFLAGS} -Xclang -load -Xclang /usr/lib/souper/14/lib64/libsouperPass.so"
      CXXFLAGS="${CXXFLAGS} -Xclang -load -Xclang /usr/lib/souper/14/lib64/libsouperPass.so"

    It's recommended to use a bashrc script with package.env changes to
    dynamically adjust these especially for packages that require older versions
    of clang/llvm.  You may also apply them per-package wise.

    References:
    [1] https://research.google/pubs/pub46467/
  </longdescription>
  <upstream>
    <bugs-to>https://github.com/google/souper/issues</bugs-to>
    <doc lang="en">https://github.com/google/souper#using-souper</doc>
    <remote-id type="github">google/souper</remote-id>
  </upstream>
  <use>
    <flag name="debug">
      Allow use of assertions for correctness checking.  Upstream defaults
      and hardcodes this ON even on release builds.
    </flag>
    <flag name="dump">
      Allow use of dump functions to increase verbosity of helpful debug
      information.  Only useful for developers or testers.  Upstream defaults
      and hardcodes this ON even on release builds.
    </flag>
    <flag name="support-tools">
      Install extra tools designed for compiler developers
    </flag>
    <flag name="redis">
      Use the Redis DB as an external query cache to reduce time cost
      of looking up the most frequent encountered code sequences mapped to
      the to cheapest code sequence while skipping steps to obtain it.

      Note the use of redis can increase the cost of RAM in the order
      of 100s of MB but the time savings is amortized (meaning high
      initial cost but decreased over time).  Without redis the time cost
      could be 6.28-13x times larger in the initial compilation
      relative to warm cache runs.

      It is recommended to hardmask newer versions of Redis in package.mask.
    </flag>
    <flag name="rN">FOR INTERNAL USE ONLY.  Revision bumps to preserve
      ccache paths for fast rebuilds.
    </flag>
  </use>
</pkgmetadata>
