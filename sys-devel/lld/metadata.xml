<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="project">
    <!-- ebuild fork only on the oiledmachine overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <longdescription>
    This ebuild fork enables Full RELRO ON by default.  This is to match the
    same RELRO level of the binutils counterpart.

    eclass/ebuild creators can check the -v to determine if the linker meets the
    required default RELRO security level for the app, but it can be overridden
    by changing the linker from now to lazy binding or from relro to norelro
    binding which the -v will not dynamically change and recognize.  One still
    needs to check the build logs to see if the program unecessarily overrides
    the default.

    PGO

    Steps to optimize:
    1. Bootstrap the build to rid of bugs and symbol errors.
    2. Instrument the build
    3. Train.  Just set lld as the default compiler and emerge a couple
       of ebuilds.
    4. Optimize the build


    BOLT

    Steps to optimize
    1. Bootstrap if you haven't yet
    2. Instrument the build
    3. Train
    4. Optimize the build

    BOLT + PGO.

    We recommend doing PGO to completion first then BOLT to completion
    afterwards.


    Draft sample script with buildself trainer

#!/bin/bash
SLOT=13
OVERLAY_DIR="/usr/local/oiledmachine-overlay"

trainer() {
	export CC="clang-${SLOT}"
	export CXX="clang++-${SLOT}"
	export LD="clang-${SLOT}"
	pushd "${OVERLAY_DIR}/sys-devel"
		export CFLAGS="-O2 -pipe"
		export CXXFLAGS="-O2 -pipe"
		export LDFLAGS="-O2 -pipe"
		ebuild $(realpath ./lld-${SLOT}*.ebuild | tail -n 1) clean unpack prepare compile

		export CFLAGS="-O2 -flto=thin -pipe"
		export CXXFLAGS="-O2 -flto=thin -pipe"
		export LDFLAGS="-O2 -fuse-ld=lld -flto=thin -pipe"
		ebuild $(realpath ./lld-${SLOT}*.ebuild | tail -n 1) clean unpack prepare compile
	popd

	# Static linking should be trained.  Try
	emerge -1vuDN dev-lang/go
}

main() {
	emerge -1vuDN "sys-devel/lld:${SLOT}[-epgo,-ebolt]"
	emerge -1vO "sys-devel/lld:${SLOT}[epgo,-ebolt]"
	trainer
	emerge -1vO "sys-devel/lld:${SLOT}[epgo,ebolt]"
	trainer
	emerge -1vO "sys-devel/lld:${SLOT}[epgo,ebolt]"
}

main

#DONE

    Deterministic reliable builds

    Due to the problematic design of the live ebuild system, it
    is recommened to use a commit snapshot on the same slot for all
    LLVM live packages.  To have deterministic builds, per-package
    environmental variable must be set by adding the following once a
    successful build of LLVM has been discovered:

Contents of /etc/portage/env/llvm-16-commit.conf:
EGIT_OVERRIDE_COMMIT_LLVM_LLVM_PROJECT="ADD_40_DIGIT_COMMIT_HERE"

Contents of /etc/portage/package.env:
sys-devel/llvm:16 llvm-16-commit.conf
sys-devel/clang:16 llvm-16-commit.conf
=sys-libs/compiler-rt-16* llvm-16-commit.conf
=sys-libs/compiler-rt-sanitizers-16* llvm-16-commit.conf
=sys-libs/libcxx-16* llvm-16-commit.conf
=sys-libs/libcxxabi-16* llvm-16-commit.conf
=sys-libs/libomp-16* llvm-16-commit.conf
=sys-devel/lld-16* llvm-16-commit.conf

  Then, emerge -1vuDN all of the above ebuilds.

  Replace 16 with the particular slots of the live ebuilds that you are
  interested.  When you need to update, just add and remove a # in front
  of EGIT_OVERRIDE_COMMIT_LLVM_LLVM_PROJECT to switch on and off when
  updating the 40 digit hash code again.  For the best success only pick
  the commits with a green checkmark in the commit history:
  https://github.com/llvm/llvm-project/commits/main
  </longdescription>
  <use>
    <flag name="default-full-relro">
      Enables Full RELRO by default when linking other packages.
    </flag>
    <flag name="default-no-relro">
      Disables RELRO by default when linking other packages.
    </flag>
    <flag name="default-partial-relro">
      Enables Partial RELRO by default when linking other packages.
    </flag>
    <flag name="hardened">
      Adds changes to --version, for use for packages that may use it
      to detect hardened compilers.

      This USE flag is for backwards compatibility.
    </flag>
    <flag name="hardened-compat">
      Add the version patch but allow for flexible configuration.  This is
      for ebuild compatibility in clang hardened contexts.
    </flag>
    <flag name="ebolt">
      Builds with the event based BOLT strategy.
    </flag>
    <flag name="epgo">
      Builds with the event based Profile Guided Optimization strategy.
    </flag>
    <flag name="r1">
      Revision bump (FOR INTERNAL USE ONLY)
    </flag>
  </use>
</pkgmetadata>
