diff -urp llvm-project-rocm-5.7.0.orig/clang/lib/Driver/ToolChains/AMDGPU.cpp llvm-project-rocm-5.7.0/clang/lib/Driver/ToolChains/AMDGPU.cpp
--- llvm-project-rocm-5.7.0.orig/clang/lib/Driver/ToolChains/AMDGPU.cpp	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/clang/lib/Driver/ToolChains/AMDGPU.cpp	2023-10-04 21:27:26.363235541 -0700
@@ -241,11 +241,11 @@ RocmInstallationDetector::getInstallatio
       }
     }
 
-    // Some versions of the rocm llvm package install to /opt/rocm/llvm/bin
-    // Some versions of the aomp package install to /opt/rocm/aomp/bin
+    // Some versions of the rocm llvm package install to @EPREFIX_LLVM_PATH@/bin
+    // Some versions of the aomp package install to @EPREFIX_ROCM_PATH@/aomp/bin
     if (ParentName == "llvm" || ParentName.startswith("aomp"))
       ParentDir = llvm::sys::path::parent_path(ParentDir);
-    // Some versions of the aomp package install to /opt/rocm/aomp/bin
+    // Some versions of the aomp package install to @EPREFIX_ROCM_PATH@/aomp/bin
     // and it seems ParentDir is already pointing to correct place.
     return Candidate(ParentDir.str(), /*StrictChecking=*/true);
   };
@@ -271,7 +271,7 @@ RocmInstallationDetector::getInstallatio
   ROCmSearchDirs.emplace_back(D.ResourceDir,
                               /*StrictChecking=*/true);
 
-  ROCmSearchDirs.emplace_back(D.SysRoot + "/opt/rocm",
+  ROCmSearchDirs.emplace_back("@ROCM_PATH@",
                               /*StrictChecking=*/true);
 
   // Find the latest /opt/rocm-{release} directory.
@@ -423,11 +423,11 @@ void RocmInstallationDetector::detectDev
     return;
 
   // Find device libraries in a legacy ROCm directory structure
-  // ${ROCM_ROOT}/amdgcn/bitcode/*
+  // ${ROCM_ROOT}/@LIBDIR@/amdgcn/bitcode/*
   auto &ROCmDirs = getInstallationPathCandidates();
   for (const auto &Candidate : ROCmDirs) {
     LibDevicePath = Candidate.Path;
-    llvm::sys::path::append(LibDevicePath, "amdgcn", "bitcode");
+    llvm::sys::path::append(LibDevicePath, "@LIBDIR@", "amdgcn", "bitcode");
     HasDeviceLibrary = CheckDeviceLib(LibDevicePath, Candidate.StrictChecking);
     if (HasDeviceLibrary)
       return;
diff -urp llvm-project-rocm-5.7.0.orig/clang/tools/amdgpu-arch/CMakeLists.txt llvm-project-rocm-5.7.0/clang/tools/amdgpu-arch/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/clang/tools/amdgpu-arch/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/clang/tools/amdgpu-arch/CMakeLists.txt	2023-10-04 21:23:52.031234246 -0700
@@ -8,12 +8,12 @@
 
 set(LLVM_LINK_COMPONENTS Support)
 
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 
 add_clang_tool(amdgpu-arch AMDGPUArch.cpp)
 
 # If we find the HSA runtime we link with it directly.
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 if(hsa-runtime64_FOUND AND NOT (LLVM_BUILD_32_BITS OR CMAKE_SIZEOF_VOID_P EQUAL 4))
   message(STATUS "Building amdgpu-arch linked against libhsa")
   set_target_properties(amdgpu-arch PROPERTIES INSTALL_RPATH_USE_LINK_PATH ON)
diff -urp llvm-project-rocm-5.7.0.orig/compiler-rt/CMakeLists.txt llvm-project-rocm-5.7.0/compiler-rt/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/compiler-rt/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/compiler-rt/CMakeLists.txt	2023-10-04 21:24:00.271234295 -0700
@@ -486,12 +486,12 @@ endif()
 
 if(SANITIZER_AMDGPU)
   list(APPEND SANITIZER_COMMON_CFLAGS -DSANITIZER_AMDGPU=1)
-  find_path(HSA_INCLUDE hsa.h HINTS ${SANITIZER_HSA_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/include/hsa ${CMAKE_INSTALL_PREFIX}/../include/hsa /opt/rocm/include/hsa PATH_SUFFIXES hsa)
+  find_path(HSA_INCLUDE hsa.h HINTS ${SANITIZER_HSA_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/include/hsa ${CMAKE_INSTALL_PREFIX}/../include/hsa @ESYSROOT_ROCM_PATH@/include/hsa PATH_SUFFIXES hsa)
   include_directories(${HSA_INCLUDE})
   find_path(COMgr_INCLUDE amd_comgr.h.in HINTS ${SANITIZER_COMGR_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include)
   if (NOT COMgr_INCLUDE)
     add_compile_definitions(AMD_COMGR)
-    find_path(COMgr_INCLUDE amd_comgr.h HINTS ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include /opt/rocm/include)
+    find_path(COMgr_INCLUDE amd_comgr.h HINTS ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include @ESYSROOT_ROCM_PATH@/include)
   endif()
   include_directories(${COMgr_INCLUDE})
 endif()
diff -urp llvm-project-rocm-5.7.0.orig/compiler-rt/test/asan/lit.cfg.py llvm-project-rocm-5.7.0/compiler-rt/test/asan/lit.cfg.py
--- llvm-project-rocm-5.7.0.orig/compiler-rt/test/asan/lit.cfg.py	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/compiler-rt/test/asan/lit.cfg.py	2023-10-04 21:27:26.347235541 -0700
@@ -255,13 +255,13 @@ if config.host_os == 'NetBSD':
 def configure_rocm(config, test_rocm_path):
     if (not os.path.isdir(test_rocm_path)):
         print("no directory found")
-        test_rocm_path = os.path.join('/opt','rocm')
+        test_rocm_path = "@EPREFIX_ROCM_PATH@"
         if (not os.path.isdir(test_rocm_path)):
             test_rocm_path = os.path.abspath(os.path.join(config.llvm_install_dir, os.pardir))
             if (not os.path.isdir(test_rocm_path)):
                 sys.exit("ROCM installation not found, try exporting ASAN_TEST_ROCM variable")
 
-    test_device_libs  = os.path.join(test_rocm_path, 'amdgcn', 'bitcode')
+    test_device_libs  = os.path.join(test_rocm_path, '@LIBDIR@', 'amdgcn', 'bitcode')
     test_hip_path     = os.path.join(test_rocm_path, 'hip')
     hipcc             = os.path.join(test_hip_path, 'bin', 'hipcc')
 
Only in llvm-project-rocm-5.7.0/compiler-rt/test/asan: lit.cfg.py.orig
diff -urp llvm-project-rocm-5.7.0.orig/libc/cmake/modules/prepare_libc_gpu_build.cmake llvm-project-rocm-5.7.0/libc/cmake/modules/prepare_libc_gpu_build.cmake
--- llvm-project-rocm-5.7.0.orig/libc/cmake/modules/prepare_libc_gpu_build.cmake	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/libc/cmake/modules/prepare_libc_gpu_build.cmake	2023-10-04 21:20:44.131233110 -0700
@@ -31,7 +31,7 @@ endif()
 # Identify any locally installed AMD GPUs on the system using 'amdgpu-arch'.
 find_program(LIBC_AMDGPU_ARCH
              NAMES amdgpu-arch
-             PATHS ${LLVM_BINARY_DIR}/bin /opt/rocm/llvm/bin/)
+             PATHS ${LLVM_BINARY_DIR}/bin @ESYSROOT_LLVM_PATH@/bin/)
 
 # Identify any locally installed NVIDIA GPUs on the system using 'nvptx-arch'.
 find_program(LIBC_NVPTX_ARCH
diff -urp llvm-project-rocm-5.7.0.orig/libc/utils/gpu/loader/CMakeLists.txt llvm-project-rocm-5.7.0/libc/utils/gpu/loader/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/libc/utils/gpu/loader/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/libc/utils/gpu/loader/CMakeLists.txt	2023-10-04 21:23:59.119234288 -0700
@@ -1,7 +1,7 @@
 add_library(gpu_loader OBJECT Main.cpp)
 target_include_directories(gpu_loader PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
 
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 if(hsa-runtime64_FOUND)
   add_subdirectory(amdgpu)
 else()
diff -urp llvm-project-rocm-5.7.0.orig/mlir/lib/Dialect/GPU/CMakeLists.txt llvm-project-rocm-5.7.0/mlir/lib/Dialect/GPU/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/mlir/lib/Dialect/GPU/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/mlir/lib/Dialect/GPU/CMakeLists.txt	2023-10-04 21:19:23.183232621 -0700
@@ -133,7 +133,7 @@ if(MLIR_ENABLE_ROCM_CONVERSIONS)
       "Building mlir with ROCm support requires the AMDGPU backend")
   endif()
 
-  set(DEFAULT_ROCM_PATH "/opt/rocm" CACHE PATH "Fallback path to search for ROCm installs")
+  set(DEFAULT_ROCM_PATH "@EPREFIX_ROCM_PATH@" CACHE PATH "Fallback path to search for ROCm installs")
   target_compile_definitions(obj.MLIRGPUTransforms
     PRIVATE
     __DEFAULT_ROCM_PATH__="${DEFAULT_ROCM_PATH}"
diff -urp llvm-project-rocm-5.7.0.orig/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp llvm-project-rocm-5.7.0/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp
--- llvm-project-rocm-5.7.0.orig/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp	2023-10-04 21:27:26.307235540 -0700
@@ -281,7 +281,7 @@ SerializeToHsacoPass::translateToLLVMIR(
   std::optional<SmallVector<std::unique_ptr<llvm::Module>, 3>> mbModules;
   std::string theRocmPath = getRocmPath();
   llvm::SmallString<32> bitcodePath(theRocmPath);
-  llvm::sys::path::append(bitcodePath, "amdgcn", "bitcode");
+  llvm::sys::path::append(bitcodePath, "@LIBDIR@", "amdgcn", "bitcode");
   mbModules = loadLibraries(bitcodePath, libraries, llvmContext);
 
   if (!mbModules) {
diff -urp llvm-project-rocm-5.7.0.orig/mlir/lib/ExecutionEngine/CMakeLists.txt llvm-project-rocm-5.7.0/mlir/lib/ExecutionEngine/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/mlir/lib/ExecutionEngine/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/mlir/lib/ExecutionEngine/CMakeLists.txt	2023-10-04 21:23:57.219234277 -0700
@@ -205,7 +205,7 @@ if(LLVM_ENABLE_PIC)
     # Configure ROCm support.
     if (NOT DEFINED ROCM_PATH)
       if (NOT DEFINED ENV{ROCM_PATH})
-        set(ROCM_PATH "/opt/rocm" CACHE PATH "Path to which ROCm has been installed")
+        set(ROCM_PATH "@ESYSROOT_ROCM_PATH@" CACHE PATH "Path to which ROCm has been installed")
       else()
         set(ROCM_PATH $ENV{ROCM_PATH} CACHE PATH "Path to which ROCm has been installed")
       endif()
diff -urp llvm-project-rocm-5.7.0.orig/openmp/libomptarget/DeviceRTL/CMakeLists.txt llvm-project-rocm-5.7.0/openmp/libomptarget/DeviceRTL/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/openmp/libomptarget/DeviceRTL/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/openmp/libomptarget/DeviceRTL/CMakeLists.txt	2023-10-04 21:24:03.863234317 -0700
@@ -196,7 +196,7 @@ function(compileDeviceRTLLibrary target_
         HINTS
         ${CMAKE_INSTALL_PREFIX}
         PATHS
-        /opt/rocm)
+        @ESYSROOT_ROCM_PATH@)
       if(AMDDeviceLibs_DIR)
 	      set(amd_device_libs_found ON)
         libomptarget_say("DeviceRTLs ${target_cpu}: Getting ROCm device libs from ${AMDDeviceLibs_DIR}")
diff -urp llvm-project-rocm-5.7.0.orig/openmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txt llvm-project-rocm-5.7.0/openmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/openmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/openmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txt	2023-10-04 21:24:05.691234328 -0700
@@ -17,7 +17,7 @@ endif()
 find_package(AMDDeviceLibs REQUIRED CONFIG PATHS
 	${CMAKE_BINARY_DIR}/../../tools/ROCMDEVLIBS
 	${CMAKE_INSTALL_PREFIX}
-	/opt/rocm)
+	@ESYSROOT_ROCM_PATH@)
 if(AMDDeviceLibs_DIR)
   libomptarget_say("Getting ROCm device libs from ${AMDDeviceLibs_DIR}")
 else()
diff -urp llvm-project-rocm-5.7.0.orig/openmp/libomptarget/hostexec/CMakeLists.txt llvm-project-rocm-5.7.0/openmp/libomptarget/hostexec/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/openmp/libomptarget/hostexec/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/openmp/libomptarget/hostexec/CMakeLists.txt	2023-10-04 21:24:02.159234307 -0700
@@ -16,7 +16,7 @@ if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMA
   message(FATAL_ERROR "Direct configuration not supported, please use parent directory!")
 endif()
 
-find_package(hsa-runtime64 1.2.0 QUIET HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm/hsa)
+find_package(hsa-runtime64 1.2.0 QUIET HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@/hsa)
 if (hsa-runtime64_FOUND)
    list(APPEND HOSTRPC_ARCHS "amdgcn")
    add_library(amdgcn_hostexec_services STATIC 
diff -urp llvm-project-rocm-5.7.0.orig/openmp/libomptarget/hostexec/CMakeLists.txt.with400files llvm-project-rocm-5.7.0/openmp/libomptarget/hostexec/CMakeLists.txt.with400files
--- llvm-project-rocm-5.7.0.orig/openmp/libomptarget/hostexec/CMakeLists.txt.with400files	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/openmp/libomptarget/hostexec/CMakeLists.txt.with400files	2023-10-04 21:28:16.015235841 -0700
@@ -16,7 +16,7 @@ if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMA
   message(FATAL_ERROR "Direct configuration not supported, please use parent directory!")
 endif()
 
-find_package(hsa-runtime64 1.2.0 QUIET HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm/hsa)
+find_package(hsa-runtime64 1.2.0 QUIET HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@/hsa)
 if (hsa-runtime64_FOUND)
    list(APPEND HOSTRPC_ARCHS "amdgcn")
    add_library(amdgcn_hostexec_services STATIC 
diff -urp llvm-project-rocm-5.7.0.orig/openmp/libomptarget/hostrpc/services/CMakeLists.txt llvm-project-rocm-5.7.0/openmp/libomptarget/hostrpc/services/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/openmp/libomptarget/hostrpc/services/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/openmp/libomptarget/hostrpc/services/CMakeLists.txt	2023-10-04 21:21:19.963233327 -0700
@@ -1,5 +1,5 @@
 
-find_package(hsa-runtime64 1.2.0 REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 1.2.0 REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 add_library(hostrpc_services STATIC hostcall.cpp hostrpc_execute_service.c hostrpc_externs.c urilocator.cpp devsanitizer.cpp)
 set_property(TARGET hostrpc_services PROPERTY POSITION_INDEPENDENT_CODE ON)
 if(SANITIZER_AMDGPU)
diff -urp llvm-project-rocm-5.7.0.orig/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt llvm-project-rocm-5.7.0/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt	2023-10-04 21:22:02.479233584 -0700
@@ -22,7 +22,7 @@ endif()
 
 # as of rocm-3.7, hsa is installed with cmake packages and kmt is found via hsa
 find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS
-${CMAKE_INSTALL_PREFIX} /opt/rocm)
+${CMAKE_INSTALL_PREFIX} @ESYSROOT_ROCM_PATH@)
 
 if(hsa-runtime64_DIR)
 message("FOUND hsa-runtime64 at ${hsa-runtime64_DIR}")
@@ -34,7 +34,7 @@ return()
 endif()
 
 # libhsakmt.a
-find_library ( HSAKMT_LIB libhsakmt.a REQURIED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_library ( HSAKMT_LIB libhsakmt.so REQURIED HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@ @ESYSROOT_ROCM_PATH@/@LIBDIR@)
 get_filename_component ( HSAKMT_LIB_PATH ${HSAKMT_LIB} DIRECTORY )
 link_directories (${HSAKMT_LIB_PATH})
 
diff -urp llvm-project-rocm-5.7.0.orig/openmp/libomptarget/plugins/amdgpu/rtl_test/buildrun.sh llvm-project-rocm-5.7.0/openmp/libomptarget/plugins/amdgpu/rtl_test/buildrun.sh
--- llvm-project-rocm-5.7.0.orig/openmp/libomptarget/plugins/amdgpu/rtl_test/buildrun.sh	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/openmp/libomptarget/plugins/amdgpu/rtl_test/buildrun.sh	2023-10-04 21:29:23.327236248 -0700
@@ -1,11 +1,11 @@
 CLOC_PATH=/usr/bin
-AOMP=${AOMP:-/opt/rocm/aomp}
+AOMP=${AOMP:-@EPREFIX_ROCM_PATH@/aomp}
 AOMPRT_REPOS=${AOMPRT_REPOS:-$HOME/git/aomp}
 RT_REPO_NAME=${RT_REPO_NAME:-openmp}
 
 $CLOC_PATH/cloc.sh -ll -vv -opt 2  hw.cl
 
-g++ rtl_test.cpp -lelf -L/usr/lib/x86_64-linux-gnu -lomptarget -lpthread -L${AOMP}/lib -I$AOMPRT_REPOS/$RT_REPO_NAME/libamdgcn}/src -L/opt/rocm/lib -lhsa-runtime64 -g -o rtl_test
+g++ rtl_test.cpp -lelf -L/usr/lib/x86_64-linux-gnu -lomptarget -lpthread -L${AOMP}/@LIBDIR@ -I$AOMPRT_REPOS/$RT_REPO_NAME/libamdgcn}/src -L@EPREFIX_ROCM_PATH@/@LIBDIR@ -lhsa-runtime64 -g -o rtl_test
 
-LD_LIBRARY_PATH=/opt/rocm/lib:$AOMP/lib:$LD_LIBRARY_PATH ./rtl_test hw.hsaco
+LD_LIBRARY_PATH=@EPREFIX_ROCM_PATH@/@LIBDIR@:$AOMP/@LIBDIR@:$LD_LIBRARY_PATH ./rtl_test hw.hsaco
 
diff -urp llvm-project-rocm-5.7.0.orig/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt llvm-project-rocm-5.7.0/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt
--- llvm-project-rocm-5.7.0.orig/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt	2023-08-29 10:32:08.000000000 -0700
+++ llvm-project-rocm-5.7.0/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt	2023-10-04 21:23:18.495234043 -0700
@@ -20,7 +20,7 @@ if (NOT LIBOMPTARGET_BUILD_AMDGPU_PLUGIN
 endif()
 
 # libhsakmt.a
-find_library ( HSAKMT_LIB libhsakmt.a REQURIED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_library ( HSAKMT_LIB libhsakmt.so REQURIED HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@ @ESYSROOT_ROCM_PATH@/@LIBDIR@)
 get_filename_component ( HSAKMT_LIB_PATH ${HSAKMT_LIB} DIRECTORY )
 link_directories (${HSAKMT_LIB_PATH})
 
@@ -34,12 +34,12 @@ pkg_check_modules(drm REQUIRED IMPORTED_
 find_library(numa libnuma.so REQUIRED HINTS /usr/lib/x86_64-linux-gnu/)
 
 # as of rocm-3.7, hsa is installed with cmake packages and kmt is found via hsa
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 
 # Check for COMGr package , ASan requires COMGr with minimum version 2.4
 if(SANITIZER_AMDGPU)
   add_definitions(-DSANITIZER_AMDGPU=1)
-  find_package(amd_comgr QUIET 2.4.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+  find_package(amd_comgr QUIET 2.4.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 endif()
 
 if(NOT (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(ppc64le)|(aarch64)$" AND CMAKE_SYSTEM_NAME MATCHES "Linux"))
--- a/openmp/libomptarget/DeviceRTL/CMakeLists.txt.orig	2023-10-04 21:34:11.735237990 -0700
+++ b/openmp/libomptarget/DeviceRTL/CMakeLists.txt	2023-10-04 21:38:57.119239715 -0700
@@ -233,7 +233,7 @@ function(compileDeviceRTLLibrary target_
     )
     list(APPEND bc_files
       ${CMAKE_BINARY_DIR}/libm-amdgcn-${target_cpu}.bc
-      ${CMAKE_BINARY_DIR}/libomptarget/hostexec/libhostexec-amdgcn-${target_cpu}.bc
+      ${CMAKE_BINARY_DIR}/projects/openmp/libomptarget/hostexec/libhostexec-amdgcn-${target_cpu}.bc
     )
     if (EXISTS ${CMAKE_BINARY_DIR}/../../tools/ROCMDEVLIBS)
       add_dependencies(touch-target-${target_cpu}
