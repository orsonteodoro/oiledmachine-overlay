--- a/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp.orig	2023-06-14 10:03:33.000000000 -0700
+++ b/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp	2023-09-16 12:06:17.210880158 -0700
@@ -281,7 +281,7 @@ SerializeToHsacoPass::translateToLLVMIR(
   std::optional<SmallVector<std::unique_ptr<llvm::Module>, 3>> mbModules;
   std::string theRocmPath = getRocmPath();
   llvm::SmallString<32> bitcodePath(theRocmPath);
-  llvm::sys::path::append(bitcodePath, "amdgcn", "bitcode");
+  llvm::sys::path::append(bitcodePath, "@LIBDIR@", "amdgcn", "bitcode");
   mbModules = loadLibraries(bitcodePath, libraries, llvmContext);
 
   if (!mbModules) {
--- a/compiler-rt/test/asan/lit.cfg.py.orig	2023-06-14 10:03:33.000000000 -0700
+++ b/compiler-rt/test/asan/lit.cfg.py	2023-09-16 12:13:18.138866637 -0700
@@ -253,13 +253,13 @@ if config.host_os == 'NetBSD':
 def configure_rocm(config, test_rocm_path):
     if (not os.path.isdir(test_rocm_path)):
         print("no directory found")
-        test_rocm_path = os.path.join('/opt','rocm')
+        test_rocm_path = os.path.join('/usr','@LIBDIR@','rocm','@ROCM_SLOT@')
         if (not os.path.isdir(test_rocm_path)):
             test_rocm_path = os.path.abspath(os.path.join(config.llvm_install_dir, os.pardir))
             if (not os.path.isdir(test_rocm_path)):
                 sys.exit("ROCM installation not found, try exporting ASAN_TEST_ROCM variable")
 
-    test_device_libs  = os.path.join(test_rocm_path, 'amdgcn', 'bitcode')
+    test_device_libs  = os.path.join(test_rocm_path, '@LIBDIR@', 'amdgcn', 'bitcode')
     test_hip_path     = os.path.join(test_rocm_path, 'hip')
     hipcc             = os.path.join(test_hip_path, 'bin', 'hipcc')
 
--- a/clang/lib/Driver/ToolChains/AMDGPU.cpp.orig	2023-06-14 10:03:33.000000000 -0700
+++ b/clang/lib/Driver/ToolChains/AMDGPU.cpp	2023-09-16 12:12:24.154868371 -0700
@@ -423,11 +423,11 @@ void RocmInstallationDetector::detectDev
     return;
 
   // Find device libraries in a legacy ROCm directory structure
-  // ${ROCM_ROOT}/amdgcn/bitcode/*
+  // ${ROCM_ROOT}/@LIBDIR@/amdgcn/bitcode/*
   auto &ROCmDirs = getInstallationPathCandidates();
   for (const auto &Candidate : ROCmDirs) {
     LibDevicePath = Candidate.Path;
-    llvm::sys::path::append(LibDevicePath, "amdgcn", "bitcode");
+    llvm::sys::path::append(LibDevicePath, "@LIBDIR@", "amdgcn", "bitcode");
     HasDeviceLibrary = CheckDeviceLib(LibDevicePath, Candidate.StrictChecking);
     if (HasDeviceLibrary)
       return;
