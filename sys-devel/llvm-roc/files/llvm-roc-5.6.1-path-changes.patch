diff -urp llvm-project-rocm-5.6.1.orig/clang/lib/Driver/ToolChains/AMDGPU.cpp llvm-project-rocm-5.6.1/clang/lib/Driver/ToolChains/AMDGPU.cpp
--- llvm-project-rocm-5.6.1.orig/clang/lib/Driver/ToolChains/AMDGPU.cpp	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/clang/lib/Driver/ToolChains/AMDGPU.cpp	2023-10-05 00:35:25.035303697 -0700
@@ -241,11 +241,11 @@ RocmInstallationDetector::getInstallatio
       }
     }
 
-    // Some versions of the rocm llvm package install to /opt/rocm/llvm/bin
-    // Some versions of the aomp package install to /opt/rocm/aomp/bin
+    // Some versions of the rocm llvm package install to @EPREFIX_LLVM_PATH@/bin
+    // Some versions of the aomp package install to @EPREFIX_ROCM_PATH@/aomp/bin
     if (ParentName == "llvm" || ParentName.startswith("aomp"))
       ParentDir = llvm::sys::path::parent_path(ParentDir);
-    // Some versions of the aomp package install to /opt/rocm/aomp/bin
+    // Some versions of the aomp package install to @EPREFIX_ROCM_PATH@/aomp/bin
     // and it seems ParentDir is already pointing to correct place.
     return Candidate(ParentDir.str(), /*StrictChecking=*/true);
   };
@@ -271,7 +271,7 @@ RocmInstallationDetector::getInstallatio
   ROCmSearchDirs.emplace_back(D.ResourceDir,
                               /*StrictChecking=*/true);
 
-  ROCmSearchDirs.emplace_back(D.SysRoot + "/opt/rocm",
+  ROCmSearchDirs.emplace_back("@ROCM_PATH@",
                               /*StrictChecking=*/true);
 
   // Find the latest /opt/rocm-{release} directory.
@@ -423,11 +423,11 @@ void RocmInstallationDetector::detectDev
     return;
 
   // Find device libraries in a legacy ROCm directory structure
-  // ${ROCM_ROOT}/amdgcn/bitcode/*
+  // ${ROCM_ROOT}/@LIBDIR@/amdgcn/bitcode/*
   auto &ROCmDirs = getInstallationPathCandidates();
   for (const auto &Candidate : ROCmDirs) {
     LibDevicePath = Candidate.Path;
-    llvm::sys::path::append(LibDevicePath, "amdgcn", "bitcode");
+    llvm::sys::path::append(LibDevicePath, "@LIBDIR@", "amdgcn", "bitcode");
     HasDeviceLibrary = CheckDeviceLib(LibDevicePath, Candidate.StrictChecking);
     if (HasDeviceLibrary)
       return;
diff -urp llvm-project-rocm-5.6.1.orig/clang/tools/amdgpu-arch/CMakeLists.txt llvm-project-rocm-5.6.1/clang/tools/amdgpu-arch/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/clang/tools/amdgpu-arch/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/clang/tools/amdgpu-arch/CMakeLists.txt	2023-10-05 00:30:53.275302055 -0700
@@ -8,7 +8,7 @@
 
 set(LLVM_LINK_COMPONENTS Support)
 
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 
 set(AMDGPU_ARCH_DLOPEN_LIBHSA OFF)
 option(AMDGPU_ARCH_FORCE_DLOPEN_LIBHSA "Build with dlopened libhsa" ${AMDGPU_ARCH_DLOPEN_LIBHSA})
diff -urp llvm-project-rocm-5.6.1.orig/compiler-rt/CMakeLists.txt llvm-project-rocm-5.6.1/compiler-rt/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/compiler-rt/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/compiler-rt/CMakeLists.txt	2023-10-05 00:30:58.647302087 -0700
@@ -486,12 +486,12 @@ endif()
 
 if(SANITIZER_AMDGPU)
   list(APPEND SANITIZER_COMMON_CFLAGS -DSANITIZER_AMDGPU=1)
-  find_path(HSA_INCLUDE hsa.h HINTS ${SANITIZER_HSA_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/include/hsa ${CMAKE_INSTALL_PREFIX}/../include/hsa /opt/rocm/include/hsa PATH_SUFFIXES hsa)
+  find_path(HSA_INCLUDE hsa.h HINTS ${SANITIZER_HSA_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/include/hsa ${CMAKE_INSTALL_PREFIX}/../include/hsa @ESYSROOT_ROCM_PATH@/include/hsa PATH_SUFFIXES hsa)
   include_directories(${HSA_INCLUDE})
   find_path(COMgr_INCLUDE amd_comgr.h.in HINTS ${SANITIZER_COMGR_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include)
   if (NOT COMgr_INCLUDE)
     add_compile_definitions(AMD_COMGR)
-    find_path(COMgr_INCLUDE amd_comgr.h HINTS ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include /opt/rocm/include)
+    find_path(COMgr_INCLUDE amd_comgr.h HINTS ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include @ESYSROOT_ROCM_PATH@/include)
   endif()
   include_directories(${COMgr_INCLUDE})
 endif()
diff -urp llvm-project-rocm-5.6.1.orig/compiler-rt/test/asan/lit.cfg.py llvm-project-rocm-5.6.1/compiler-rt/test/asan/lit.cfg.py
--- llvm-project-rocm-5.6.1.orig/compiler-rt/test/asan/lit.cfg.py	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/compiler-rt/test/asan/lit.cfg.py	2023-10-05 00:28:25.727301163 -0700
@@ -253,13 +253,13 @@ if config.host_os == 'NetBSD':
 def configure_rocm(config, test_rocm_path):
     if (not os.path.isdir(test_rocm_path)):
         print("no directory found")
-        test_rocm_path = os.path.join('/opt','rocm')
+        test_rocm_path = "@EPREFIX_ROCM_PATH@"
         if (not os.path.isdir(test_rocm_path)):
             test_rocm_path = os.path.abspath(os.path.join(config.llvm_install_dir, os.pardir))
             if (not os.path.isdir(test_rocm_path)):
                 sys.exit("ROCM installation not found, try exporting ASAN_TEST_ROCM variable")
 
-    test_device_libs  = os.path.join(test_rocm_path, 'amdgcn', 'bitcode')
+    test_device_libs  = os.path.join(test_rocm_path, '@LIBDIR@', 'amdgcn', 'bitcode')
     test_hip_path     = os.path.join(test_rocm_path, 'hip')
     hipcc             = os.path.join(test_hip_path, 'bin', 'hipcc')
 
diff -urp llvm-project-rocm-5.6.1.orig/libc/cmake/modules/prepare_libc_gpu_build.cmake llvm-project-rocm-5.6.1/libc/cmake/modules/prepare_libc_gpu_build.cmake
--- llvm-project-rocm-5.6.1.orig/libc/cmake/modules/prepare_libc_gpu_build.cmake	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/libc/cmake/modules/prepare_libc_gpu_build.cmake	2023-10-05 00:30:57.275302079 -0700
@@ -32,7 +32,7 @@ endif()
 # Identify any locally installed GPUs to use for testing.
 find_program(LIBC_AMDGPU_ARCH
              NAMES amdgpu-arch
-             PATHS ${LLVM_BINARY_DIR}/bin /opt/rocm/llvm/bin/)
+             PATHS ${LLVM_BINARY_DIR}/bin @ESYSROOT_LLVM_PATH@/bin/)
 if(LIBC_AMDGPU_ARCH)
   execute_process(COMMAND ${LIBC_AMDGPU_ARCH}
                   OUTPUT_VARIABLE LIBC_AMDGPU_ARCH_OUTPUT
diff -urp llvm-project-rocm-5.6.1.orig/mlir/lib/Dialect/GPU/CMakeLists.txt llvm-project-rocm-5.6.1/mlir/lib/Dialect/GPU/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/mlir/lib/Dialect/GPU/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/mlir/lib/Dialect/GPU/CMakeLists.txt	2023-10-05 00:30:55.275302067 -0700
@@ -132,7 +132,7 @@ if(MLIR_ENABLE_ROCM_CONVERSIONS)
       "Building mlir with ROCm support requires the AMDGPU backend")
   endif()
 
-  set(DEFAULT_ROCM_PATH "/opt/rocm" CACHE PATH "Fallback path to search for ROCm installs")
+  set(DEFAULT_ROCM_PATH "@EPREFIX_ROCM_PATH@" CACHE PATH "Fallback path to search for ROCm installs")
   target_compile_definitions(obj.MLIRGPUTransforms
     PRIVATE
     __DEFAULT_ROCM_PATH__="${DEFAULT_ROCM_PATH}"
diff -urp llvm-project-rocm-5.6.1.orig/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp llvm-project-rocm-5.6.1/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp
--- llvm-project-rocm-5.6.1.orig/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp	2023-10-05 00:28:25.419301162 -0700
@@ -281,7 +281,7 @@ SerializeToHsacoPass::translateToLLVMIR(
   std::optional<SmallVector<std::unique_ptr<llvm::Module>, 3>> mbModules;
   std::string theRocmPath = getRocmPath();
   llvm::SmallString<32> bitcodePath(theRocmPath);
-  llvm::sys::path::append(bitcodePath, "amdgcn", "bitcode");
+  llvm::sys::path::append(bitcodePath, "@LIBDIR@", "amdgcn", "bitcode");
   mbModules = loadLibraries(bitcodePath, libraries, llvmContext);
 
   if (!mbModules) {
diff -urp llvm-project-rocm-5.6.1.orig/mlir/lib/ExecutionEngine/CMakeLists.txt llvm-project-rocm-5.6.1/mlir/lib/ExecutionEngine/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/mlir/lib/ExecutionEngine/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/mlir/lib/ExecutionEngine/CMakeLists.txt	2023-10-05 00:30:56.235302073 -0700
@@ -201,7 +201,7 @@ if(MLIR_ENABLE_ROCM_RUNNER)
   # Configure ROCm support.
   if (NOT DEFINED ROCM_PATH)
     if (NOT DEFINED ENV{ROCM_PATH})
-      set(ROCM_PATH "/opt/rocm" CACHE PATH "Path to which ROCm has been installed")
+      set(ROCM_PATH "@ESYSROOT_ROCM_PATH@" CACHE PATH "Path to which ROCm has been installed")
     else()
       set(ROCM_PATH $ENV{ROCM_PATH} CACHE PATH "Path to which ROCm has been installed")
     endif()
diff -urp llvm-project-rocm-5.6.1.orig/openmp/libomptarget/DeviceRTL/CMakeLists.txt llvm-project-rocm-5.6.1/openmp/libomptarget/DeviceRTL/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/openmp/libomptarget/DeviceRTL/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/openmp/libomptarget/DeviceRTL/CMakeLists.txt	2023-10-05 00:31:00.763302100 -0700
@@ -194,7 +194,7 @@ function(compileDeviceRTLLibrary target_
         HINTS
         ${CMAKE_INSTALL_PREFIX}
         PATHS
-        /opt/rocm)
+        @ESYSROOT_ROCM_PATH@)
       if(AMDDeviceLibs_DIR)
 	      set(amd_device_libs_found ON)
         libomptarget_say("DeviceRTLs ${target_cpu}: Getting ROCm device libs from ${AMDDeviceLibs_DIR}")
diff -urp llvm-project-rocm-5.6.1.orig/openmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txt llvm-project-rocm-5.6.1/openmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/openmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/openmp/libomptarget/deviceRTLs/amdgcn/CMakeLists.txt	2023-10-05 00:31:03.707302118 -0700
@@ -17,7 +17,7 @@ endif()
 find_package(AMDDeviceLibs REQUIRED CONFIG PATHS
 	${CMAKE_BINARY_DIR}/../../tools/ROCMDEVLIBS
 	${CMAKE_INSTALL_PREFIX}
-	/opt/rocm)
+	@ESYSROOT_ROCM_PATH@)
 if(AMDDeviceLibs_DIR)
   libomptarget_say("Getting ROCm device libs from ${AMDDeviceLibs_DIR}")
 else()
diff -urp llvm-project-rocm-5.6.1.orig/openmp/libomptarget/hostrpc/services/CMakeLists.txt llvm-project-rocm-5.6.1/openmp/libomptarget/hostrpc/services/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/openmp/libomptarget/hostrpc/services/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/openmp/libomptarget/hostrpc/services/CMakeLists.txt	2023-10-05 00:30:59.691302094 -0700
@@ -1,5 +1,5 @@
 
-find_package(hsa-runtime64 1.2.0 REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 1.2.0 REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 add_library(hostrpc_services STATIC hostcall.cpp hostrpc_execute_service.c hostrpc_externs.c urilocator.cpp devsanitizer.cpp)
 set_property(TARGET hostrpc_services PROPERTY POSITION_INDEPENDENT_CODE ON)
 if(SANITIZER_AMDGPU)
diff -urp llvm-project-rocm-5.6.1.orig/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt llvm-project-rocm-5.6.1/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt	2023-10-05 00:31:01.755302106 -0700
@@ -21,7 +21,7 @@ endif()
 
 # as of rocm-3.7, hsa is installed with cmake packages and kmt is found via hsa
 find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS
-  ${CMAKE_INSTALL_PREFIX} /opt/rocm)
+  ${CMAKE_INSTALL_PREFIX} @ESYSROOT_ROCM_PATH@)
 
 if(hsa-runtime64_DIR)
   message("FOUND hsa-runtime64 at ${hsa-runtime64_DIR}")
diff -urp llvm-project-rocm-5.6.1.orig/openmp/libomptarget/plugins/amdgpu/rtl_test/buildrun.sh llvm-project-rocm-5.6.1/openmp/libomptarget/plugins/amdgpu/rtl_test/buildrun.sh
--- llvm-project-rocm-5.6.1.orig/openmp/libomptarget/plugins/amdgpu/rtl_test/buildrun.sh	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/openmp/libomptarget/plugins/amdgpu/rtl_test/buildrun.sh	2023-10-05 00:36:35.259304122 -0700
@@ -1,11 +1,11 @@
 CLOC_PATH=/usr/bin
-AOMP=${AOMP:-/opt/rocm/aomp}
+AOMP=${AOMP:-@EPREFIX_ROCM_PATH@/aomp}
 AOMPRT_REPOS=${AOMPRT_REPOS:-$HOME/git/aomp}
 RT_REPO_NAME=${RT_REPO_NAME:-openmp}
 
 $CLOC_PATH/cloc.sh -ll -vv -opt 2  hw.cl
 
-g++ rtl_test.cpp -lelf -L/usr/lib/x86_64-linux-gnu -lomptarget -lpthread -L${AOMP}/lib -I$AOMPRT_REPOS/$RT_REPO_NAME/libamdgcn}/src -L/opt/rocm/lib -lhsa-runtime64 -g -o rtl_test
+g++ rtl_test.cpp -lelf -L/usr/lib/x86_64-linux-gnu -lomptarget -lpthread -L${AOMP}/@LIBDIR@ -I$AOMPRT_REPOS/$RT_REPO_NAME/libamdgcn}/src -L@EPREFIX_ROCM_PATH@/@LIBDIR@ -lhsa-runtime64 -g -o rtl_test
 
-LD_LIBRARY_PATH=/opt/rocm/lib:$AOMP/lib:$LD_LIBRARY_PATH ./rtl_test hw.hsaco
+LD_LIBRARY_PATH=@EPREFIX_ROCM_PATH@/@LIBDIR@:$AOMP/@LIBDIR@:$LD_LIBRARY_PATH ./rtl_test hw.hsaco
 
diff -urp llvm-project-rocm-5.6.1.orig/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt llvm-project-rocm-5.6.1/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt
--- llvm-project-rocm-5.6.1.orig/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt	2023-08-15 11:01:20.000000000 -0700
+++ llvm-project-rocm-5.6.1/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt	2023-10-05 00:31:02.747302112 -0700
@@ -20,7 +20,7 @@ if (NOT LIBOMPTARGET_BUILD_AMDGPU_PLUGIN
 endif()
 
 # as of rocm-3.7, hsa is installed with cmake packages and kmt is found via hsa
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 
 if(NOT CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(ppc64le)|(aarch64)$" AND CMAKE_SYSTEM_NAME MATCHES "Linux")
   libomptarget_say("Not building AMDGPU NextGen plugin: only support AMDGPU in Linux x86_64, ppc64le, or aarch64 hosts")
