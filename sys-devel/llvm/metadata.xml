<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild fork on the oiledmachine-overlay -->
    <name>Orson Teodoro</name>
    <email>orsonteodoro@hotmail.com</email>
  </maintainer>
  <maintainer type="project">
    <!-- Ebuild originators -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <!--

    oiledmachine-overlay notes:

    This ebuild fork changes the following:

      * Makes available, builds, installs BOLT support.
      * Reduce spam and slowdown with -static-libstdc++.
      * Profile Guided Optimization (PGO) build support.

    For this repo only, due to limited time and lack of time to verify working
    ebuilds completely, only live ebuilds and point releases will be kept.
    Release candidates and inits will be ignored.


    PGO/BOLT optimization:

    See the sys-devel/clang/metadata.xml in the oiledmachine-overlay for
    details about PGO/BOLT training.  The sys-devel/clang ebuild now has the
    trainer script.


    References:
    [1] https://llvm.org/docs/HowToBuildWithPGO.html

    See also
    https://github.com/llvm/llvm-project/blob/main/bolt/README.md#input-binary-requirements
    https://github.com/llvm/llvm-project/blob/main/bolt/docs/OptimizingClang.md

  -->
  <use>
    <flag name="binutils-plugin">
      Build the binutils plugin
    </flag>
    <flag name="bolt">
      Build the Binary Optimization and Layout Tool to improve CPU caching and
      branch prediction using execution sampling data used to optimize code
      layout.  This may improve performance by 15%.  It provides additional
      post build optimizations.
    </flag>
    <flag name="bolt-heatmap">
      Build the llvm-bolt-heatmap program.  The heatmap is a colored command
      line visualization for comparing code layout before and after
      optimization.
    </flag>
    <flag name="dump">
      Build with dump functions to print additional (debugging) information
    </flag>
    <flag name="doc">
      Build and install the HTML documentation and regenerate the man pages
    </flag>
    <flag name="ebolt">
      Perform 1 step BOLT.  You can re-emerge for the last step or use
      `emerge --config sys-devel/llvm-15`, replacing 15 with the version
      you want to complete the final step.
    </flag>
    <flag name="epgo">
      Perform 1 step Event based PGO.  When 3 steps are performed to completion,
      it may reduce compile times by 20%.
    </flag>
    <flag name="exegesis">
      Enable performance counter support for llvm-exegesis tool that can be
      used to measure host machine instruction characteristics
    </flag>
    <flag name="fallback-commit">
      Rollback commit for reliable working patches and for missing symbols
      avoidance.
    </flag>
    <flag name="gold">
      Build the gold linker plugin
    </flag>
    <flag name="jemalloc">
      Use jemalloc to speed up processing time of llvm-bolt.
    </flag>
    <flag name="ncurses">
      Support querying terminal properties using ncurses' terminfo
    </flag>
    <flag name="tcmalloc">
      Use TCMalloc to speed up processing time of llvm-bolt.
    </flag>
    <flag name="xar">
      Support dumping LLVM bitcode sections in Mach-O files
      (uses <pkg>app-arch/xar</pkg>)
    </flag>
    <flag name="z3">
      Enable support for <pkg>sci-mathematics/z3</pkg> constraint solver
    </flag>
    <flag name="ebuild-revision-N">
      FOR INTERNAL USE ONLY.  Bump revision but save CCACHE paths for faster
      rebuilds.
    </flag>
  </use>
</pkgmetadata>
