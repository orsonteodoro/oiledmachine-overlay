<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- ebuild fork only on the oiledmachine-overlay -->
    <name>Orson Teodoro</name>
    <email>orsonteodoro@hotmail.com</email>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originators -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <longdescription>

    This ebuild fork changes the following:

      * Makes available, builds, installs BOLT support.
      * Reduce spam and slowdown with -static-libstdc++.
      * Profile Guided Optimization (PGO) build support.

    For this repo only, due to limited time and lack of time to verify working
    ebuilds completely, only live ebuilds and point releases will be kept.
    Release candidates and inits will be ignored.


    PGO notes:

    PGO is based on 1 step per phase (EPGO), or event based PGO.  The idea
    is to maintain same build times as normal builds but the PGO is a bonus.
    Training is done passively and with real world examples.  The problem
    with active trainers is that it doesn't train the GPU portions or SIMD
    portions but does the minimal basic training.

    Essentially use as normally.  Steps required:

    1.  Bootstrap (resulting in proper built toolchain)
    2.  Switch clang as primary compiler.
    3.  Instrument all Clang / LLVM packages with EPGO.
    4.  Emerge/train a sample of world (10 representative packages and some
        apps that train the shader compiler or alternative compiler
        toolchains that use LLVM as backend) training the compiler toolchain
    5.  Re-emerge again as optimized in the next point release or after step
        4 is completed.


    BOLT (Experimental / WIP)

    BOLT support is only offered is only offered in LLVM 14 or newer.  In its
    current form it requires a recent CPU with LBR support.

    BOLT optimized builds steps:

    1.  emerge -1 llvm-${PV}:${SLOT}[bolt]
    2.  emerge -1 lld
    3.  emerge -1 clang:${PV}:${SLOT}[bolt]
    3.  emerge -1 llvm:${PV}:${SLOT}[bolt,ebolt]
    4.  train the LLVM library by either emerging, compiling shaders, compiling
        wasm based programs.
    5.  emerge --config =llvm-${PV}[bolt,ebolt]  # Fastest
                     or
        emerge =llvm-${PV}[bolt,ebolt] # Deterministic reliable

    Both clang must be built with the same ${SLOT} as llvm, but the llvm backend
    should be the same version or commit as the one used to build with clang.
    BOLT profiling is done within the clang package.  This profile(s) is then
    used in step 4 to generate an optimized libLLVM.so.  libLLVM.so contains the
    binary code (or brains) used as the optimization backend for clang.


    References:
    [1] https://llvm.org/docs/HowToBuildWithPGO.html

    See also
    https://github.com/llvm/llvm-project/blob/main/bolt/README.md#input-binary-requirements
    https://github.com/llvm/llvm-project/blob/main/bolt/docs/OptimizingClang.md

  </longdescription>
  <use>
    <flag name="binutils-plugin">
      Build the binutils plugin
    </flag>
    <flag name="bolt">
      Build the Binary Optimization and Layout Tool to improve CPU caching and
      branch prediction using execution sampling data used to optimize code
      layout.  (EXPERIMENTAL)
    </flag>
    <flag name="dump">
      Build with dump functions to print additional (debugging) information
    </flag>
    <flag name="doc">
      Build and install the HTML documentation and regenerate the man pages
    </flag>
    <flag name="ebolt">
      Perform 1 step BOLT.  You can re-emerge for the last step or use
      `emerge --config sys-devel/llvm-14`, replacing 14 with the version
      you want to complete the final step.
    </flag>
    <flag name="epgo">
      Perform 1 step Event based PGO.
    </flag>
    <flag name="exegesis">
      Enable performance counter support for llvm-exegesis tool that can be
      used to measure host machine instruction characteristics
    </flag>
    <flag name="gold">
      Build the gold linker plugin
    </flag>
    <flag name="ncurses">
      Support querying terminal properties using ncurses' terminfo
    </flag>
    <flag name="epgo">
      Build with Profile Guided Optimizations.
    </flag>
    <flag name="xar">
      Support dumping LLVM bitcode sections in Mach-O files
      (uses <pkg>app-arch/xar</pkg>)
    </flag>
    <flag name="z3">
      Enable support for <pkg>sci-mathematics/z3</pkg> constraint solver
    </flag>
    <flag name="rN">
      FOR INTERNAL USE ONLY.  Bump revision but save CCACHE paths for faster
      rebuilds.
    </flag>
  </use>
</pkgmetadata>
