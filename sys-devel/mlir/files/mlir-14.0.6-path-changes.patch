--- a/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp.orig	2023-09-16 18:14:32.202170462 -0700
+++ b/mlir/lib/Dialect/GPU/Transforms/SerializeToHsaco.cpp	2023-09-16 18:14:55.446169715 -0700
@@ -272,7 +272,7 @@ SerializeToHsacoPass::translateToLLVMIR(
   Optional<SmallVector<std::unique_ptr<llvm::Module>, 3>> mbModules;
   std::string theRocmPath = getRocmPath();
   llvm::SmallString<32> bitcodePath(std::move(theRocmPath));
-  llvm::sys::path::append(bitcodePath, "amdgcn", "bitcode");
+  llvm::sys::path::append(bitcodePath, "@LIBDIR@", "amdgcn", "bitcode");
   mbModules = loadLibraries(bitcodePath, libraries, llvmContext);
 
   if (!mbModules) {
--- a/mlir/lib/ExecutionEngine/CMakeLists.txt.orig	2023-09-16 17:52:48.394212340 -0700
+++ b/mlir/lib/ExecutionEngine/CMakeLists.txt	2023-09-16 17:54:54.182208300 -0700
@@ -185,14 +185,14 @@ if(MLIR_ENABLE_ROCM_RUNNER)
   # Configure ROCm support.
   if (NOT DEFINED ROCM_PATH)
     if (NOT DEFINED ENV{ROCM_PATH})
-      set(ROCM_PATH "/opt/rocm" CACHE PATH "Path to which ROCm has been installed")
+      set(ROCM_PATH "/usr" CACHE PATH "Path to which ROCm has been installed")
     else()
       set(ROCM_PATH $ENV{ROCM_PATH} CACHE PATH "Path to which ROCm has been installed")
     endif()
     set(HIP_PATH "${ROCM_PATH}/hip" CACHE PATH "Path to which HIP has been installed")
   endif()
-  set(CMAKE_MODULE_PATH "${HIP_PATH}/cmake" ${CMAKE_MODULE_PATH})
-  find_package(HIP)
+  set(CMAKE_MODULE_PATH "${HIP_PATH}/@LIBDIR@/cmake" ${CMAKE_MODULE_PATH})
+  find_package(HIP) 
   if (NOT HIP_FOUND)
     message(SEND_ERROR "Building mlir with ROCm support requires a working ROCm and HIP install")
   else()
--- a/mlir/lib/Dialect/GPU/CMakeLists.txt.orig	2023-09-16 17:36:05.842244542 -0700
+++ b/mlir/lib/Dialect/GPU/CMakeLists.txt	2023-09-16 17:38:15.222240387 -0700
@@ -132,7 +132,7 @@ if(MLIR_ENABLE_ROCM_CONVERSIONS)
       "Building mlir with ROCm support requires the AMDGPU backend")
   endif()
 
-  set(DEFAULT_ROCM_PATH "/opt/rocm" CACHE PATH "Fallback path to search for ROCm installs")
+  set(DEFAULT_ROCM_PATH "/usr" CACHE PATH "Fallback path to search for ROCm installs")
   target_compile_definitions(obj.MLIRGPUTransforms
     PRIVATE
     __DEFAULT_ROCM_PATH__="${DEFAULT_ROCM_PATH}"
