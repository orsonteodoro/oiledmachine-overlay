diff -urp llvm-2022-12.orig/clang/tools/amdgpu-arch/CMakeLists.txt llvm-2022-12/clang/tools/amdgpu-arch/CMakeLists.txt
--- llvm-2022-12.orig/clang/tools/amdgpu-arch/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/clang/tools/amdgpu-arch/CMakeLists.txt	2024-02-29 16:18:58.156112457 -0800
@@ -6,7 +6,7 @@
 # //
 # //===----------------------------------------------------------------------===//
 
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 if (NOT ${hsa-runtime64_FOUND})
   message(STATUS "Not building amdgpu-arch: hsa-runtime64 not found")
   return()
diff -urp llvm-2022-12.orig/mlir/lib/Dialect/GPU/CMakeLists.txt llvm-2022-12/mlir/lib/Dialect/GPU/CMakeLists.txt
--- llvm-2022-12.orig/mlir/lib/Dialect/GPU/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/mlir/lib/Dialect/GPU/CMakeLists.txt	2024-02-29 16:18:58.156112457 -0800
@@ -131,7 +131,7 @@ if(MLIR_ENABLE_ROCM_CONVERSIONS)
       "Building mlir with ROCm support requires the AMDGPU backend")
   endif()
 
-  set(DEFAULT_ROCM_PATH "/opt/rocm" CACHE PATH "Fallback path to search for ROCm installs")
+  set(DEFAULT_ROCM_PATH "@ESYSROOT_ROCM_PATH@" CACHE PATH "Fallback path to search for ROCm installs")
   target_compile_definitions(obj.MLIRGPUTransforms
     PRIVATE
     __DEFAULT_ROCM_PATH__="${DEFAULT_ROCM_PATH}"
diff -urp llvm-2022-12.orig/mlir/lib/ExecutionEngine/CMakeLists.txt llvm-2022-12/mlir/lib/ExecutionEngine/CMakeLists.txt
--- llvm-2022-12.orig/mlir/lib/ExecutionEngine/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/mlir/lib/ExecutionEngine/CMakeLists.txt	2024-02-29 16:20:53.843544262 -0800
@@ -200,12 +200,12 @@ if(MLIR_ENABLE_ROCM_RUNNER)
   # Configure ROCm support.
   if (NOT DEFINED ROCM_PATH)
     if (NOT DEFINED ENV{ROCM_PATH})
-      set(ROCM_PATH "/opt/rocm" CACHE PATH "Path to which ROCm has been installed")
+      set(ROCM_PATH "@ESYSROOT_ROCM_PATH@" CACHE PATH "Path to which ROCm has been installed")
     else()
       set(ROCM_PATH $ENV{ROCM_PATH} CACHE PATH "Path to which ROCm has been installed")
     endif()
   endif()
-  list(APPEND CMAKE_PREFIX_PATH ${ROCM_PATH} "${ROCM_PATH}/hip")
+  list(APPEND CMAKE_PREFIX_PATH ${ROCM_PATH} "${ROCM_PATH}/@ROCM_LIBDIR@/cmake/hip")
   find_package(hip REQUIRED)
 
   if (NOT DEFINED ROCM_TEST_CHIPSET)
diff -urp llvm-2022-12.orig/opencl/CMakeLists.txt llvm-2022-12/opencl/CMakeLists.txt
--- llvm-2022-12.orig/opencl/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/opencl/CMakeLists.txt	2024-02-29 16:18:58.156112457 -0800
@@ -23,29 +23,8 @@ set(OCL_LOADER_REPO
 set(OCL_HEADERS_TAG dcd5bede6859d26833cd85f0d6bbcee7382dc9b3)
 set(OCL_LOADER_TAG 792682ad3d877ab38573b997808bab3b43902b70)
 
-# OpenCL Headers
-if(NOT OpenCL_HEADERS)
-  message(STATUS "Will fetch OpenCL headers from ${OCL_HEADERS_REPO}")
-
-  FetchContent_Declare(ocl-headers
-    GIT_REPOSITORY    ${OCL_HEADERS_REPO}
-    GIT_TAG           ${OCL_HEADERS_TAG}
-  )
-else()
-  message(STATUS "OpenCL headers are added manually ${OpenCL_HEADERS}")
-
-  FetchContent_Declare(ocl-headers
-    URL               ${OpenCL_HEADERS}
-  )
-endif()
-
-FetchContent_MakeAvailable(ocl-headers)
-FetchContent_GetProperties(ocl-headers)
 set(OpenCL_INCLUDE_DIR
-  ${ocl-headers_SOURCE_DIR} CACHE PATH "Path to OpenCL Headers")
-
-target_compile_definitions(Headers INTERFACE -DCL_TARGET_OPENCL_VERSION=220)
-add_library(OpenCL-Headers ALIAS Headers)
+  /usr/include CACHE PATH "Path to OpenCL Headers")
 
 # OpenCL Library (ICD Loader)
 
@@ -57,25 +36,4 @@ set(OPENCL_ICD_LOADER_HEADERS_DIR
 # library.
 set(BUILD_SHARED_LIBS ON)
 
-if(NOT OpenCL_LIBRARY_SRC)
-  message(STATUS "Will fetch OpenCL ICD Loader from ${OCL_LOADER_REPO}")
-
-  FetchContent_Declare(ocl-icd
-    GIT_REPOSITORY    ${OCL_LOADER_REPO}
-    GIT_TAG           ${OCL_LOADER_TAG}
-  )
-else()
-  # TODO: add possibility to use prebuilt OpenCL library rather than building
-  #       together with llvm.
-  message(STATUS
-    "OpenCL ICD Loader sources added manually ${OpenCL_LIBRARY_SRC}")
-
-  FetchContent_Declare(ocl-icd
-    URL               ${OpenCL_LIBRARY_SRC}
-  )
-endif()
-
-FetchContent_MakeAvailable(ocl-icd)
-add_library(OpenCL-ICD ALIAS OpenCL)
-
 add_subdirectory(opencl-aot)
diff -urp llvm-2022-12.orig/opencl/opencl-aot/CMakeLists.txt llvm-2022-12/opencl/opencl-aot/CMakeLists.txt
--- llvm-2022-12.orig/opencl/opencl-aot/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/opencl/opencl-aot/CMakeLists.txt	2024-02-29 16:18:58.156112457 -0800
@@ -19,5 +19,5 @@ endif()
 
 target_link_libraries(${OPENCL_AOT_PROJECT_NAME}
   PRIVATE
-    OpenCL-Headers
-    OpenCL-ICD)
+    OpenCL
+)
diff -urp llvm-2022-12.orig/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt llvm-2022-12/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt
--- llvm-2022-12.orig/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/openmp/libomptarget/plugins/amdgpu/CMakeLists.txt	2024-02-29 16:18:58.160112439 -0800
@@ -20,7 +20,7 @@ if (NOT LIBOMPTARGET_BUILD_AMDGPU_PLUGIN
 endif()
 
 # as of rocm-3.7, hsa is installed with cmake packages and kmt is found via hsa
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@)
 
 if(NOT CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(ppc64le)|(aarch64)$" AND CMAKE_SYSTEM_NAME MATCHES "Linux")
   libomptarget_say("Not building AMDGPU plugin: only support AMDGPU in Linux x86_64, ppc64le, or aarch64 hosts")
diff -urp llvm-2022-12.orig/sycl/cmake/modules/AddSYCL.cmake llvm-2022-12/sycl/cmake/modules/AddSYCL.cmake
--- llvm-2022-12.orig/sycl/cmake/modules/AddSYCL.cmake	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/cmake/modules/AddSYCL.cmake	2024-02-29 16:18:58.160112439 -0800
@@ -47,7 +47,7 @@ function(add_sycl_plugin PLUGIN_NAME)
       ${sycl_inc_dir}
     LIBRARIES
       ${ARG_LIBRARIES}
-      OpenCL-Headers
+      OpenCL
   )
 
   install(TARGETS pi_${PLUGIN_NAME}
diff -urp llvm-2022-12.orig/sycl/cmake/modules/AddSYCLUnitTest.cmake llvm-2022-12/sycl/cmake/modules/AddSYCLUnitTest.cmake
--- llvm-2022-12.orig/sycl/cmake/modules/AddSYCLUnitTest.cmake	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/cmake/modules/AddSYCLUnitTest.cmake	2024-02-29 16:18:58.160112439 -0800
@@ -53,7 +53,7 @@ macro(add_sycl_unittest test_dirname lin
   target_link_libraries(${test_dirname}
     PRIVATE
       LLVMTestingSupport
-      OpenCL-Headers
+      OpenCL
       ${SYCL_LINK_LIBS}
     )
   target_include_directories(${test_dirname}
diff -urp llvm-2022-12.orig/sycl/CMakeLists.txt llvm-2022-12/sycl/CMakeLists.txt
--- llvm-2022-12.orig/sycl/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/CMakeLists.txt	2024-02-29 16:18:58.160112439 -0800
@@ -142,7 +142,7 @@ file(COPY ${OpenCL_INCLUDE_DIR}/CL
 # Include OpenCL Headers into final bundle.
 install(DIRECTORY ${OpenCL_INCLUDE_DIR}/CL
         DESTINATION ${SYCL_INCLUDE_DIR}/sycl
-        COMPONENT OpenCL-Headers)
+        COMPONENT OpenCL)
 
 # Option to enable online kernel fusion via a JIT compiler
 option(SYCL_ENABLE_KERNEL_FUSION "Enable kernel fusion via JIT compiler" OFF)
@@ -371,7 +371,7 @@ set( SYCL_TOOLCHAIN_DEPLOY_COMPONENTS
      sycl-post-link
      sycl-ls
      clang-resource-headers
-     OpenCL-Headers
+     OpenCL
      opencl-aot
      sycl-headers
      sycl-headers-extras
@@ -391,9 +391,7 @@ if (TARGET sycl-trace)
   list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS sycl-trace)
 endif()
 
-if(OpenCL_INSTALL_KHRONOS_ICD_LOADER AND TARGET OpenCL-ICD)
-  list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS OpenCL-ICD)
-endif()
+list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS OpenCL)
 
 # Build and install lld as part of the sycl-toolchain if available
 if("lld" IN_LIST LLVM_ENABLE_PROJECTS)
diff -urp llvm-2022-12.orig/sycl/plugins/esimd_emulator/CMakeLists.txt llvm-2022-12/sycl/plugins/esimd_emulator/CMakeLists.txt
--- llvm-2022-12.orig/sycl/plugins/esimd_emulator/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/plugins/esimd_emulator/CMakeLists.txt	2024-02-29 16:18:58.160112439 -0800
@@ -58,6 +58,7 @@ if ((DEFINED USE_DEFAULT_CM_EMU_SOURCE)
       INSTALL_DIR       ${CMAKE_CURRENT_BINARY_DIR}/cm-emu_install
       CMAKE_ARGS        -DLIBVA_INSTALL_PATH=/usr
                         -D__SYCL_EXPLICIT_SIMD_PLUGIN__=true
+                        -DLibFFI_INCLUDE_DIR=${LibFFI_INCLUDE_DIR}
                         -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
       BUILD_BYPRODUCTS  ${LIBCM} ${LIBIGFXCMRT_EMU}
     )
diff -urp llvm-2022-12.orig/sycl/plugins/hip/CMakeLists.txt llvm-2022-12/sycl/plugins/hip/CMakeLists.txt
--- llvm-2022-12.orig/sycl/plugins/hip/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/plugins/hip/CMakeLists.txt	2024-02-29 16:18:58.160112439 -0800
@@ -5,7 +5,7 @@ set(SYCL_BUILD_PI_HIP_PLATFORM "AMD" CAC
 message(STATUS "Including the PI API HIP backend for ${SYCL_BUILD_PI_HIP_PLATFORM}.")
 
 # Set default ROCm installation directory
-set(SYCL_BUILD_PI_HIP_ROCM_DIR "/opt/rocm" CACHE STRING "ROCm installation dir")
+set(SYCL_BUILD_PI_HIP_ROCM_DIR "@ESYSROOT_ROCM_PATH@" CACHE STRING "ROCm installation dir")
 
 if(NOT EXISTS "${SYCL_BUILD_PI_HIP_ROCM_DIR}")
   message(FATAL_ERROR "Couldn't find ROCm installation in '${SYCL_BUILD_PI_HIP_ROCM_DIR}',"
@@ -13,7 +13,7 @@ if(NOT EXISTS "${SYCL_BUILD_PI_HIP_ROCM_
 endif()
 
 # Set HIP include dirs
-set(HIP_HEADERS "${SYCL_BUILD_PI_HIP_ROCM_DIR}/hip/include;${SYCL_BUILD_PI_HIP_ROCM_DIR}/hsa/include")
+set(HIP_HEADERS "${SYCL_BUILD_PI_HIP_ROCM_DIR}/include/hip;${SYCL_BUILD_PI_HIP_ROCM_DIR}/include/hsa")
 
 # Create pi_hip library
 add_sycl_plugin(hip
@@ -33,7 +33,7 @@ if("${SYCL_BUILD_PI_HIP_PLATFORM}" STREQ
 
   set_target_properties(
     rocmdrv PROPERTIES
-      IMPORTED_LOCATION                    "${SYCL_BUILD_PI_HIP_ROCM_DIR}/hip/lib/libamdhip64.so"
+      IMPORTED_LOCATION                    "${SYCL_BUILD_PI_HIP_ROCM_DIR}/@ROCM_LIBDIR@/libamdhip64.so"
       INTERFACE_INCLUDE_DIRECTORIES        "${HIP_HEADERS}"
       INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "${HIP_HEADERS}"
   )
diff -urp llvm-2022-12.orig/sycl/plugins/level_zero/CMakeLists.txt llvm-2022-12/sycl/plugins/level_zero/CMakeLists.txt
--- llvm-2022-12.orig/sycl/plugins/level_zero/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/plugins/level_zero/CMakeLists.txt	2024-02-29 16:18:58.160112439 -0800
@@ -44,7 +44,7 @@ if (NOT DEFINED LEVEL_ZERO_LIBRARY OR NO
                LOG_BUILD 1
                LOG_INSTALL 1
     STEP_TARGETS      configure,build,install
-    DEPENDS           OpenCL-Headers
+    DEPENDS           OpenCL
     BUILD_BYPRODUCTS ${LEVEL_ZERO_LOADER}
   )
   ExternalProject_Add_Step(level-zero-loader llvminstall
@@ -78,7 +78,7 @@ else()
       COMMAND
 	  ${CMAKE_COMMAND} -E copy ${LEVEL_ZERO_LIBRARY_SRC} ${LLVM_LIBRARY_OUTPUT_INTDIR}
       COMMAND
-	  ${CMAKE_COMMAND} -E copy_directory ${LEVEL_ZERO_INCLUDE_DIR} ${LLVM_BINARY_DIR}/include/sycl
+	  ${CMAKE_COMMAND} -E copy_directory ${LEVEL_ZERO_INCLUDE_DIR}/level_zero ${LLVM_BINARY_DIR}/include/sycl/level_zero
       DEPENDS
 	  ${LEVEL_ZERO_LIBRARY}
           ${LEVEL_ZERO_INCLUDE_DIR}
diff -urp llvm-2022-12.orig/sycl/plugins/opencl/CMakeLists.txt llvm-2022-12/sycl/plugins/opencl/CMakeLists.txt
--- llvm-2022-12.orig/sycl/plugins/opencl/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/plugins/opencl/CMakeLists.txt	2024-02-29 16:18:58.160112439 -0800
@@ -15,7 +15,7 @@ add_sycl_plugin(opencl
     "${sycl_inc_dir}/sycl/detail/pi.h"
     "pi_opencl.cpp"
   LIBRARIES
-    OpenCL-ICD
+    OpenCL
 )
 
 set_target_properties(pi_opencl PROPERTIES LINKER_LANGUAGE CXX)
diff -urp llvm-2022-12.orig/sycl/plugins/unified_runtime/CMakeLists.txt llvm-2022-12/sycl/plugins/unified_runtime/CMakeLists.txt
--- llvm-2022-12.orig/sycl/plugins/unified_runtime/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/plugins/unified_runtime/CMakeLists.txt	2024-02-29 16:18:58.164112420 -0800
@@ -3,18 +3,6 @@
 
 include(FetchContent)
 
-set(UNIFIED_RUNTIME_REPO "https://github.com/oneapi-src/unified-runtime.git")
-set(UNIFIED_RUNTIME_TAG fd711c920acc4434cb52ff18b078c082d9d7f44d)
-
-message(STATUS "Will fetch Unified Runtime from ${UNIFIED_RUNTIME_REPO}")
-FetchContent_Declare(unified-runtime
-  GIT_REPOSITORY    ${UNIFIED_RUNTIME_REPO}
-  GIT_TAG           ${UNIFIED_RUNTIME_TAG}
-)
-
-FetchContent_MakeAvailable(unified-runtime)
-FetchContent_GetProperties(unified-runtime)
-
 set(UNIFIED_RUNTIME_SOURCE_DIR
   ${unified-runtime_SOURCE_DIR} CACHE PATH "Path to Unified Runtime Headers")
 set(UNIFIED_RUNTIME_INCLUDE_DIR "${UNIFIED_RUNTIME_SOURCE_DIR}/include")
diff -urp llvm-2022-12.orig/sycl/source/CMakeLists.txt llvm-2022-12/sycl/source/CMakeLists.txt
--- llvm-2022-12.orig/sycl/source/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/source/CMakeLists.txt	2024-02-29 16:18:58.164112420 -0800
@@ -84,7 +84,7 @@ function(add_sycl_rt_library LIB_NAME LI
   )
   #TODO: Remove dependency on opencl headers.
   target_link_libraries(${LIB_OBJ_NAME}
-    PRIVATE OpenCL-Headers
+    PRIVATE OpenCL
   )
 
   find_package(Threads REQUIRED)
diff -urp llvm-2022-12.orig/sycl/tools/sycl-ls/CMakeLists.txt llvm-2022-12/sycl/tools/sycl-ls/CMakeLists.txt
--- llvm-2022-12.orig/sycl/tools/sycl-ls/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/tools/sycl-ls/CMakeLists.txt	2024-02-29 16:18:58.164112420 -0800
@@ -11,7 +11,7 @@ endif()
 target_link_libraries(sycl-ls
   PRIVATE
     ${sycl_lib}
-    OpenCL-Headers
+    OpenCL
 )
 install(TARGETS sycl-ls
   RUNTIME DESTINATION "bin" COMPONENT sycl-ls)
diff -urp llvm-2022-12.orig/sycl/tools/sycl-prof/CMakeLists.txt llvm-2022-12/sycl/tools/sycl-prof/CMakeLists.txt
--- llvm-2022-12.orig/sycl/tools/sycl-prof/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/tools/sycl-prof/CMakeLists.txt	2024-02-29 16:18:58.164112420 -0800
@@ -15,9 +15,7 @@ target_compile_options(sycl-prof PRIVATE
 add_library(sycl_profiler_collector SHARED collector.cpp)
 target_compile_definitions(sycl_profiler_collector PRIVATE XPTI_CALLBACK_API_EXPORTS)
 target_link_libraries(sycl_profiler_collector PRIVATE xptifw)
-if (TARGET OpenCL-Headers)
-  target_link_libraries(sycl_profiler_collector PRIVATE OpenCL-Headers)
-endif()
+target_link_libraries(sycl_profiler_collector PRIVATE OpenCL)
 target_include_directories(sycl_profiler_collector PRIVATE
     "${sycl_inc_dir}"
     "${sycl_src_dir}"
diff -urp llvm-2022-12.orig/sycl/tools/sycl-sanitize/CMakeLists.txt llvm-2022-12/sycl/tools/sycl-sanitize/CMakeLists.txt
--- llvm-2022-12.orig/sycl/tools/sycl-sanitize/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/tools/sycl-sanitize/CMakeLists.txt	2024-02-29 16:18:58.164112420 -0800
@@ -13,9 +13,7 @@ target_compile_options(sycl-sanitize PRI
 add_library(sycl_sanitizer_collector SHARED collector.cpp)
 target_compile_definitions(sycl_sanitizer_collector PRIVATE XPTI_CALLBACK_API_EXPORTS)
 target_link_libraries(sycl_sanitizer_collector PRIVATE xptifw)
-if (TARGET OpenCL-Headers)
-  target_link_libraries(sycl_sanitizer_collector PRIVATE OpenCL-Headers)
-endif()
+target_link_libraries(sycl_sanitizer_collector PRIVATE OpenCL)
 
 target_include_directories(sycl_sanitizer_collector PRIVATE
     "${CMAKE_CURRENT_SOURCE_DIR}/../xpti_helpers/"
diff -urp llvm-2022-12.orig/sycl/tools/sycl-trace/CMakeLists.txt llvm-2022-12/sycl/tools/sycl-trace/CMakeLists.txt
--- llvm-2022-12.orig/sycl/tools/sycl-trace/CMakeLists.txt	2022-12-13 18:40:11.000000000 -0800
+++ llvm-2022-12/sycl/tools/sycl-trace/CMakeLists.txt	2024-02-29 16:18:58.164112420 -0800
@@ -62,9 +62,7 @@ endif()
 
 target_compile_definitions(sycl_pi_trace_collector PRIVATE XPTI_CALLBACK_API_EXPORTS)
 target_link_libraries(sycl_pi_trace_collector PRIVATE xptifw)
-if (TARGET OpenCL-Headers)
-  target_link_libraries(sycl_pi_trace_collector PRIVATE OpenCL-Headers)
-endif()
+target_link_libraries(sycl_pi_trace_collector PRIVATE OpenCL)
 
 target_include_directories(sycl_pi_trace_collector PRIVATE
     "${CMAKE_CURRENT_SOURCE_DIR}/../xpti_helpers/"
