diff -urp llvm-sycl-nightly-20230417.orig/opencl/CMakeLists.txt llvm-sycl-nightly-20230417/opencl/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/opencl/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/opencl/CMakeLists.txt	2024-02-29 15:59:00.786616411 -0800
@@ -23,29 +23,8 @@ set(OCL_LOADER_REPO
 set(OCL_HEADERS_TAG 9ddb236e6eb3cf844f9e2f81677e1045f9bf838e)
 set(OCL_LOADER_TAG 9a3e962f16f5097d2054233ad8b6dad51b6f41b7)
 
-# OpenCL Headers
-if(NOT OpenCL_HEADERS)
-  message(STATUS "Will fetch OpenCL headers from ${OCL_HEADERS_REPO}")
-
-  FetchContent_Declare(ocl-headers
-    GIT_REPOSITORY    ${OCL_HEADERS_REPO}
-    GIT_TAG           ${OCL_HEADERS_TAG}
-  )
-else()
-  message(STATUS "OpenCL headers are added manually ${OpenCL_HEADERS}")
-
-  FetchContent_Declare(ocl-headers
-    URL               ${OpenCL_HEADERS}
-  )
-endif()
-
-FetchContent_MakeAvailable(ocl-headers)
-FetchContent_GetProperties(ocl-headers)
 set(OpenCL_INCLUDE_DIR
-  ${ocl-headers_SOURCE_DIR} CACHE PATH "Path to OpenCL Headers")
-
-target_compile_definitions(Headers INTERFACE -DCL_TARGET_OPENCL_VERSION=300)
-add_library(OpenCL-Headers ALIAS Headers)
+  /usr/include CACHE PATH "Path to OpenCL Headers")
 
 # OpenCL Library (ICD Loader)
 
@@ -57,25 +36,4 @@ set(OPENCL_ICD_LOADER_HEADERS_DIR
 # library.
 set(BUILD_SHARED_LIBS ON)
 
-if(NOT OpenCL_LIBRARY_SRC)
-  message(STATUS "Will fetch OpenCL ICD Loader from ${OCL_LOADER_REPO}")
-
-  FetchContent_Declare(ocl-icd
-    GIT_REPOSITORY    ${OCL_LOADER_REPO}
-    GIT_TAG           ${OCL_LOADER_TAG}
-  )
-else()
-  # TODO: add possibility to use prebuilt OpenCL library rather than building
-  #       together with llvm.
-  message(STATUS
-    "OpenCL ICD Loader sources added manually ${OpenCL_LIBRARY_SRC}")
-
-  FetchContent_Declare(ocl-icd
-    URL               ${OpenCL_LIBRARY_SRC}
-  )
-endif()
-
-FetchContent_MakeAvailable(ocl-icd)
-add_library(OpenCL-ICD ALIAS OpenCL)
-
 add_subdirectory(opencl-aot)
diff -urp llvm-sycl-nightly-20230417.orig/opencl/opencl-aot/CMakeLists.txt llvm-sycl-nightly-20230417/opencl/opencl-aot/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/opencl/opencl-aot/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/opencl/opencl-aot/CMakeLists.txt	2024-02-29 15:59:00.786616411 -0800
@@ -19,5 +19,5 @@ endif()
 
 target_link_libraries(${OPENCL_AOT_PROJECT_NAME}
   PRIVATE
-    OpenCL-Headers
-    OpenCL-ICD)
+    OpenCL
+)
diff -urp llvm-sycl-nightly-20230417.orig/sycl/cmake/modules/AddSYCL.cmake llvm-sycl-nightly-20230417/sycl/cmake/modules/AddSYCL.cmake
--- llvm-sycl-nightly-20230417.orig/sycl/cmake/modules/AddSYCL.cmake	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/cmake/modules/AddSYCL.cmake	2024-02-29 15:59:00.786616411 -0800
@@ -50,7 +50,7 @@ function(add_sycl_plugin PLUGIN_NAME)
       ${sycl_inc_dir}
     LIBRARIES
       ${ARG_LIBRARIES}
-      OpenCL-Headers
+      OpenCL
   )
 
   # Install feature test header
diff -urp llvm-sycl-nightly-20230417.orig/sycl/cmake/modules/AddSYCLUnitTest.cmake llvm-sycl-nightly-20230417/sycl/cmake/modules/AddSYCLUnitTest.cmake
--- llvm-sycl-nightly-20230417.orig/sycl/cmake/modules/AddSYCLUnitTest.cmake	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/cmake/modules/AddSYCLUnitTest.cmake	2024-02-29 15:59:00.786616411 -0800
@@ -53,7 +53,7 @@ macro(add_sycl_unittest test_dirname lin
   target_link_libraries(${test_dirname}
     PRIVATE
       LLVMTestingSupport
-      OpenCL-Headers
+      OpenCL
       ${SYCL_LINK_LIBS}
     )
 
diff -urp llvm-sycl-nightly-20230417.orig/sycl/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/CMakeLists.txt	2024-02-29 15:59:00.786616411 -0800
@@ -142,7 +142,7 @@ file(COPY ${OpenCL_INCLUDE_DIR}/CL
 # Include OpenCL Headers into final bundle.
 install(DIRECTORY ${OpenCL_INCLUDE_DIR}/CL
         DESTINATION ${SYCL_INCLUDE_DIR}/sycl
-        COMPONENT OpenCL-Headers)
+        COMPONENT OpenCL)
 
 # Option to enable online kernel fusion via a JIT compiler
 option(SYCL_ENABLE_KERNEL_FUSION "Enable kernel fusion via JIT compiler" ON)
@@ -399,7 +399,7 @@ set( SYCL_TOOLCHAIN_DEPLOY_COMPONENTS
      sycl-post-link
      sycl-ls
      clang-resource-headers
-     OpenCL-Headers
+     OpenCL
      opencl-aot
      sycl-headers
      sycl-headers-extras
@@ -424,9 +424,7 @@ if (TARGET sycl-trace)
   list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS sycl-trace)
 endif()
 
-if(OpenCL_INSTALL_KHRONOS_ICD_LOADER AND TARGET OpenCL-ICD)
-  list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS OpenCL-ICD)
-endif()
+list(APPEND SYCL_TOOLCHAIN_DEPLOY_COMPONENTS OpenCL)
 
 # Build and install lld as part of the sycl-toolchain if available
 if("lld" IN_LIST LLVM_ENABLE_PROJECTS)
diff -urp llvm-sycl-nightly-20230417.orig/sycl/plugins/esimd_emulator/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/plugins/esimd_emulator/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/plugins/esimd_emulator/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/plugins/esimd_emulator/CMakeLists.txt	2024-02-29 15:59:00.786616411 -0800
@@ -58,6 +58,7 @@ if ((DEFINED USE_DEFAULT_CM_EMU_SOURCE)
       INSTALL_DIR       ${CMAKE_CURRENT_BINARY_DIR}/cm-emu_install
       CMAKE_ARGS        -DLIBVA_INSTALL_PATH=/usr
                         -D__SYCL_EXPLICIT_SIMD_PLUGIN__=true
+                        -DLibFFI_INCLUDE_DIR=${LibFFI_INCLUDE_DIR}
                         -DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>
       BUILD_BYPRODUCTS  ${LIBCM} ${LIBIGFXCMRT_EMU}
     )
diff -urp llvm-sycl-nightly-20230417.orig/sycl/plugins/opencl/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/plugins/opencl/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/plugins/opencl/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/plugins/opencl/CMakeLists.txt	2024-02-29 15:59:00.790616362 -0800
@@ -15,7 +15,7 @@ add_sycl_plugin(opencl
     "${sycl_inc_dir}/sycl/detail/pi.h"
     "pi_opencl.cpp"
   LIBRARIES
-    OpenCL-ICD
+    OpenCL
 )
 
 set_target_properties(pi_opencl PROPERTIES LINKER_LANGUAGE CXX)
diff -urp llvm-sycl-nightly-20230417.orig/sycl/plugins/unified_runtime/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/plugins/unified_runtime/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/plugins/unified_runtime/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/plugins/unified_runtime/CMakeLists.txt	2024-02-29 15:59:00.790616362 -0800
@@ -1,51 +1,58 @@
 # PI Unified Runtime plugin library
 #
-if (NOT DEFINED UNIFIED_RUNTIME_LIBRARY OR NOT DEFINED UNIFIED_RUNTIME_INCLUDE_DIR)
-  include(FetchContent)
-
-  set(UNIFIED_RUNTIME_REPO "https://github.com/oneapi-src/unified-runtime.git")
-  set(UNIFIED_RUNTIME_TAG 74843ea0800e6fb7ce0f82e0ef991fc258f4b9bd)
 
-  message(STATUS "Will fetch Unified Runtime from ${UNIFIED_RUNTIME_REPO}")
-  FetchContent_Declare(unified-runtime
-    GIT_REPOSITORY    ${UNIFIED_RUNTIME_REPO}
-    GIT_TAG           ${UNIFIED_RUNTIME_TAG}
-  )
-
-  # Disable errors from warnings while building the UR.
-  # And remember origin flags before doing that.
-  set(CMAKE_CXX_FLAGS_BAK "${CMAKE_CXX_FLAGS}")
-  if(WIN32)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX-")
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /WX-")
-    # FIXME: Unified runtime build fails with /DUNICODE
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /UUNICODE")
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /UUNICODE")
-    # USE_Z7 forces use of /Z7 instead of /Zi which is broken with sccache
-    set(USE_Z7 ON)
-  else()
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error")
-    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-error")
-  endif()
-
-  # No need to build tests from unified-runtime
-  set(UR_BUILD_TESTS "0" CACHE STRING "0")
+# Includes partial backport of https://github.com/intel/llvm/commit/139b1317278fc777aa36f71096d6639fe6fd3ff0
 
-  FetchContent_GetProperties(unified-runtime)
-  FetchContent_MakeAvailable(unified-runtime)
+option(SYCL_PI_UR_USE_FETCH_CONTENT
+  "Use FetchContent to acquire the Unified Runtime source code" OFF)
+set(SYCL_PI_UR_SOURCE_DIR
+  "" CACHE PATH "Path to root of Unified Runtime repository")
+
+# Disable errors from warnings while building the UR.
+# And remember origin flags before doing that.
+set(CMAKE_CXX_FLAGS_BAK "${CMAKE_CXX_FLAGS}")
+if(WIN32)
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX-")
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /WX-")
+  # FIXME: Unified runtime build fails with /DUNICODE
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /UUNICODE")
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /UUNICODE")
+  # USE_Z7 forces use of /Z7 instead of /Zi which is broken with sccache
+  set(USE_Z7 ON)
+else()
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-error")
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-error")
+endif()
 
-  # Restore original flags
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_BAK}")
+# No need to build tests from unified-runtime
+set(UR_BUILD_TESTS "0" CACHE STRING "0")
 
-  add_library(UnifiedRuntimeLoader ALIAS loader)
+if (SYCL_PI_UR_USE_FETCH_CONTENT)
+  include(FetchContent)
 
   set(UNIFIED_RUNTIME_SOURCE_DIR
     ${unified-runtime_SOURCE_DIR} CACHE PATH "Path to Unified Runtime Headers")
-  set(UNIFIED_RUNTIME_INCLUDE_DIR "${UNIFIED_RUNTIME_SOURCE_DIR}/include")
+elseif(SYCL_PI_UR_SOURCE_DIR)
+  # SYCL_PI_UR_USE_FETCH_CONTENT is OFF and SYCL_PI_UR_SOURCE_DIR has been set,
+  # use the external Unified Runtime source directory.
+  set(UNIFIED_RUNTIME_SOURCE_DIR
+    "${SYCL_PI_UR_SOURCE_DIR}" CACHE PATH
+    "Path to Unified Runtime Headers" FORCE)
+  add_subdirectory(
+    ${UNIFIED_RUNTIME_SOURCE_DIR}
+    ${CMAKE_CURRENT_BINARY_DIR}/unified-runtime)
 endif()
 
+# Restore original flags
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_BAK}")
+
+message(STATUS
+  "Using Unified Runtime source directory: ${UNIFIED_RUNTIME_SOURCE_DIR}")
+
+set(UNIFIED_RUNTIME_INCLUDE_DIR "${UNIFIED_RUNTIME_SOURCE_DIR}/include")
 
-add_library (UnifiedRuntime-Headers INTERFACE)
+add_library(UnifiedRuntimeLoader ALIAS loader)
+add_library(UnifiedRuntime-Headers INTERFACE)
 
 target_include_directories(UnifiedRuntime-Headers
   INTERFACE
diff -urp llvm-sycl-nightly-20230417.orig/sycl/source/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/source/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/source/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/source/CMakeLists.txt	2024-02-29 15:59:00.790616362 -0800
@@ -113,7 +113,7 @@ function(add_sycl_rt_library LIB_NAME LI
   )
   #TODO: Remove dependency on opencl headers.
   target_link_libraries(${LIB_OBJ_NAME}
-    PRIVATE OpenCL-Headers
+    PRIVATE OpenCL
   )
 
   if(SYCL_ENABLE_KERNEL_FUSION)
diff -urp llvm-sycl-nightly-20230417.orig/sycl/tools/sycl-ls/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/tools/sycl-ls/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/tools/sycl-ls/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/tools/sycl-ls/CMakeLists.txt	2024-02-29 15:59:00.790616362 -0800
@@ -11,7 +11,7 @@ endif()
 target_link_libraries(sycl-ls
   PRIVATE
     ${sycl_lib}
-    OpenCL-Headers
+    OpenCL
 )
 install(TARGETS sycl-ls
   RUNTIME DESTINATION "bin" COMPONENT sycl-ls)
diff -urp llvm-sycl-nightly-20230417.orig/sycl/tools/sycl-prof/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/tools/sycl-prof/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/tools/sycl-prof/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/tools/sycl-prof/CMakeLists.txt	2024-02-29 15:59:00.790616362 -0800
@@ -15,9 +15,7 @@ target_compile_options(sycl-prof PRIVATE
 add_library(sycl_profiler_collector SHARED collector.cpp)
 target_compile_definitions(sycl_profiler_collector PRIVATE XPTI_CALLBACK_API_EXPORTS)
 target_link_libraries(sycl_profiler_collector PRIVATE xptifw)
-if (TARGET OpenCL-Headers)
-  target_link_libraries(sycl_profiler_collector PRIVATE OpenCL-Headers)
-endif()
+target_link_libraries(sycl_profiler_collector PRIVATE OpenCL)
 target_include_directories(sycl_profiler_collector PRIVATE
     "${sycl_inc_dir}"
     "${sycl_src_dir}"
diff -urp llvm-sycl-nightly-20230417.orig/sycl/tools/sycl-sanitize/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/tools/sycl-sanitize/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/tools/sycl-sanitize/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/tools/sycl-sanitize/CMakeLists.txt	2024-02-29 15:59:00.790616362 -0800
@@ -13,9 +13,7 @@ target_compile_options(sycl-sanitize PRI
 add_library(sycl_sanitizer_collector SHARED collector.cpp)
 target_compile_definitions(sycl_sanitizer_collector PRIVATE XPTI_CALLBACK_API_EXPORTS)
 target_link_libraries(sycl_sanitizer_collector PRIVATE xptifw)
-if (TARGET OpenCL-Headers)
-  target_link_libraries(sycl_sanitizer_collector PRIVATE OpenCL-Headers)
-endif()
+target_link_libraries(sycl_sanitizer_collector PRIVATE OpenCL)
 
 target_include_directories(sycl_sanitizer_collector PRIVATE
     "${CMAKE_CURRENT_SOURCE_DIR}/../xpti_helpers/"
diff -urp llvm-sycl-nightly-20230417.orig/sycl/tools/sycl-trace/CMakeLists.txt llvm-sycl-nightly-20230417/sycl/tools/sycl-trace/CMakeLists.txt
--- llvm-sycl-nightly-20230417.orig/sycl/tools/sycl-trace/CMakeLists.txt	2023-04-17 11:25:49.000000000 -0700
+++ llvm-sycl-nightly-20230417/sycl/tools/sycl-trace/CMakeLists.txt	2024-02-29 15:59:00.790616362 -0800
@@ -73,9 +73,7 @@ endif()
 
 target_compile_definitions(sycl_pi_trace_collector PRIVATE XPTI_CALLBACK_API_EXPORTS)
 target_link_libraries(sycl_pi_trace_collector PRIVATE xptifw)
-if (TARGET OpenCL-Headers)
-  target_link_libraries(sycl_pi_trace_collector PRIVATE OpenCL-Headers)
-endif()
+target_link_libraries(sycl_pi_trace_collector PRIVATE OpenCL)
 
 target_include_directories(sycl_pi_trace_collector PRIVATE
     "${CMAKE_CURRENT_SOURCE_DIR}/../xpti_helpers/"
