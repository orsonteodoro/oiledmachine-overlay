<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
<maintainer type="project">
	<!-- ebuild originator -->
	<email>media-video@gentoo.org</email>
</maintainer>
<longdescription>
	The oiledmachine-overlay provides this ebuild for PGO/BOLT optimization.

	USE flag status:
		pgo - done
		bolt - WIP/testing

	PGO optimization requires several steps:
	(1) Fetch assets to train with.  They should be licensed under
	public-domain, CC0-1.0, or your own assets.  They need to be
	60 fps, 4k, and at least 3 seconds long for video PGO training.
	For audio training, pick 3 samples 15 seconds each.
	These high quality samples will be used to generate lower
	quality samples.  The long 30 second requirement is to ensure
	sufficient coverage of dynamic range.  In addition, the sample
	will decide the code paths of the chroma subsample to train.
	(2) Emerge FFmpeg the first time to get the PGO toolchain
	installed.
	(3) Configure the following variables, replacing i with a unpadded number:

		FFMPEG_TRAINING_VIDEO_CGI_i               # Computer Generated Imagery
		FFMPEG_TRAINING_VIDEO_SCREENCAST_i
		FFMPEG_TRAINING_VIDEO_FANTASY_i
		FFMPEG_TRAINING_VIDEO_GAMING_i
		FFMPEG_TRAINING_VIDEO_GRAINY_i
		FFMPEG_TRAINING_VIDEO_REALISM_i
		FFMPEG_TRAINING_VIDEO_STILL_i             # Same image used from start to finish in podcasting or music
		FFMPEG_TRAINING_AUDIO_VOICE_i
		FFMPEG_TRAINING_AUDIO_RADIO_i
		FFMPEG_TRAINING_AUDIO_MUSIC_INSTRUMENTAL_i
		FFMPEG_TRAINING_AUDIO_VOCAL_MUSIC_i
		FFMPEG_TRAINING_AV_DEVICE_i
		FFMPEG_TRAINING_AV_MICROPHONE_i

	to the abspath to your asset(s). Only one asset can be used for each
	variable.  The reason for the long list is to ensure dynamic range
	coverage based on typical use.  One may add samples across decades,
	across genres, across live or studio so that the codecs do not
	get parts deoptimized in the PGO process.  It is unnecessary to
	fill all of them out.  For example one may inadvertantly optimize
	for 60s music once only.  These allow to specify more so that
	contemporary music or scenarios also gets optimized.  One may
	inadvertantly cover women radio quality but inadvertantly
	deoptimize for male or lgtbtqia.
	(4) Setup FFMPEG_TRAINING_VIDEO_CODECS, FFMPEG_TRAINING_AUDIO_CODECS,
	FFMPEG_TRAINING_CODECNAME_ARGS, FFMPEG_TRAINING_CODECNAME_ARGS_LOSSLESS,
	per-package envvars.  See below for details.
	(5) Emerge FFmpeg again with an optimized PGO build.

	(Planning) FFMPEG_TRAINING_VIDEO_STREAMING_i is the v4l device to train for
	codec streaming.

	(Planning) FFMPEG_TRAINING_MOBILE_STREAMING_i is a sample for mobile
	training.

	FFMPEG_TRAINING_MAX_ASSETS_PER_TYPE is a number of assets per *_i type.
	Currently it is set to 100 but can be expanded to more than
	that.
	
	FFMPEG_TRAINING_VIDEO_CODECS is a string separated list of elements.
	Each element is in this format vscenario:vencoder:vdecoder:ext:tags.
	Empty elements are shown as :: for inner or : for outer.

	  The value of vscenario can be fantasy, film, grainy, streaming, realism.
	  The value of vencoder matches  ffmpeg -codecs | grep -E -e "[D.][E][V][I.][L.][S.] .*" in parens
	  The value of vdecoder matches  mpv --vd=help
	  The value of ext matches  ffmpeg -formats
	  The value of tags may be added for custom trainers providing metadata
	  for enablement of special optimization options.  Multiple tags
	  may be appended by comma and spaces replaced with _.  Tags can
	  be filtered with bash regex to apply extra args.

	* VA-API codecs are currently not supported for training in the ebuild level.

	Example:
	FFMPEG_TRAINING_VIDEO_CODECS=" fantasy:libvpx-vp9:libvpx-vp9:webm: realism:libvpx-vp9:libvpx-vp9:webm:"

	FFMPEG_TRAINING_AUDIO_CODECS is a string separated list of elements.
	Each element is in this format ascenario:aencoder:adecoder:ext:tags.
	Empty elements are shown as :: for inner or : for outer.

	  The value of ascenario can be voice, radio, music.
	  The value of aencoder matches  ffmpeg -codecs | grep -E -e "[D.][E][A][I.][L.][S.] .*" in parens
	  The value of adecoder matches  mpv --ad=help
	  The value of ext matches  ffmpeg -formats
	  The value of tags may be added for custom trainers providing metadata
	  for enablement of special optimization options.  Multiple tags
	  may be appended by comma and spaces replaced with _.  Tags can
	  be filtered with bash regex to apply extra args.

	Each codec can be supplied additional per-package envvar args to
	pass to ffmpeg in this general form:

	FFMPEG_TRAINING_CODECNAME_ARGS
	FFMPEG_TRAINING_CODECNAME_ARGS_LOSSLESS

	FFMPEG_TRAINING_AUDIO_CODECS=" voice:libopus:libopus:webm: music:libvorbis:libvorbis:ogg:high_profile"

	replacing CODECNAME with uppercases and hyphens with underscores.
	For example, if one wanted to train an imaginary codec libfoo-bar,
	you need to set the variables FFMPEG_TRAINING_LIBFOO_BAR_ARGS
	or FFMPEG_TRAINING_LIBFOO_BAR_ARGS_LOSSLESS.  These args correspond to
	additional  ffmpeg -h full  codec settings for that codec.  You
	should change them to the type of performance or quality settings
	you want to use typically.  Setting the -crf or the -threads is
	something you should set.

	The variables with _LOSSLESS suffix should only add arguments that
	modify performance and not the framerate or quality.

	Both FFMPEG_TRAINING_VIDEO_CODECS and FFMPEG_TRAINING_AUDIO_CODECS are for
	use only for the ffmpeg codebase.  Using another external codec
	in an external ebuild requires that ebuild be modified for
	PGO.

	The cbr and vbr trainers for audio PGO training have additional
	envvars.  Let's pretend that there is an imaginary codec called
	foo.  Foo supports bitrates between 64 and 1411.  We can support
	only discrete values for PGO training.

	# Use this to support 64 kbps, 128 kbps, 256 kbps, 320 kbps, 1411 kbps
	FFMPEG_TRAINING_CBR_TABLE_FOO_MUSIC="128 256 320 1411"
	FFMPEG_TRAINING_CBR_TABLE_FOO_RADIO="64"
	FFMPEG_TRAINING_CBR_TABLE_FOO_VOICE="32"

	The codec will match the suffix with the asset scenario to
	not waste time on unlikely parings encountered in the real world.

	Foo also can be used for VBR encoding.  The user needs to supply
	the ffmpeg option and the value.

	# Train with -vbr 1, -vbr 2, -vbr 3, -vbr 4
	FFMPEG_TRAINING_VBR_OPTION_FOO="-vbr"
	FFMPEG_TRAINING_VBR_TABLE_LIBFOO_FOO_MUSIC="7 8 9"
	FFMPEG_TRAINING_VBR_TABLE_LIBFOO_FOO_RADIO="2 3"

	It is recommended to only train codecs that reflect typical use.
	Not doing so will result in increased code size and performance
	degradation.


	Audio Video (AV) capture training (Work in Progress)

	Do not use the USE=trainer-av-streaming this feature until portage is
	patched with mitigations.

	This is accessible via the trainer-av-streaming USE flag.  Note
	it will require access to either camera, X11, or KMS.  The reason why
	is to reduce CPU load that may result in decoding other assets and
	to similate or replicate the conditions similar to live streaming.

	It also requires some permission changes for the portage account
	such as either adding portage to video group or changing the /dev/video*
	device with +rw ACL changes for portage in order to capture from the
	camera.  These should be temporary changes and the permitted
	permissions should be removed after training.  It also requires
	FEATURES="${FEATURES} -ipc-sandbox -pid-sandbox" permissions in order
	to train for a screencasting scenario.  When performing screencasting
	training (which is always enabled), it will take a grab of the screen
	which is a big security/privacy issue.  When portage is fixed with
	trap INT, trap QUIT, trap HUP, etc support, some mitigation can be
	achieved but not total especially in brownout or low battery
	situation.  It is recommended to only use this training only during
	controlled setting when no passwords or private accounts are being
	used.
	

	FFMPEG_TRAINING_AV_CODECS must be set as a space separated list of elements.

	Each element is in the format avscenario:vencoder:vdecoder:aencoder:adecoder:container:tags
	Empty elements are shown as :: for inner or : for outer.

	  The value of avscenario can be live-streaming
	  The value of vencoder matches  ffmpeg -codecs | grep -E -e "[D.][E][V][I.][L.][S.] .*" in parens
	  The value of vdecoder matches  mpv --vd=help ; you may specify none
	  The value of aencoder matches  ffmpeg -codecs | grep -E -e "[D.][E][A][I.][L.][S.] .*" in parens
	  The value of adecoder matches  mpv --ad=help ; you may specify none
	  The value of container matches  ffmpeg -formats ; if you don't know put unknown.
	  The value of tags may be added for custom trainers providing metadata
	  for enablement of special optimization options.  Multiple tags
	  may be appended by comma and spaces replaced with _.  Tags can
	  be filtered with bash regex to apply extra args.

	* The decoders may be used in the future for simulating video conferencing
	* The avscenario may be expanded to include video-conferencing.
	* live-streaming assumes client side only.  No network training currently.
	* The permissions for /dev/video* require either portage be in the video
	  group or Access Control List (ACL) of the /dev/video* have portage with
	  rw- permission in order to to do training with the capture device.
	  

	See the above section how to setup these variables.


	AV environment variables

	FFMPEG_TRAINING_STREAMING_UPLOAD_BANDWIDTH - Upload bandwidth in Mbps
	(megabits) that the host machine supports.  Anything exceeding that
	will not be trained.  Decimal values supported.

	FFMPEG_TRAINING_AV_STREAMING_WS - This is a weighted function formula
	that uses a weighted sum for sorting recommendations.  You must
	place the formula in single quotes.  This can be used to control the
	recommended codec or preference for FPS or quality or other aspects
	based on sum of subscores.  The score without your formula is maxed out
	at less than the approaching 60000 Kbps corresponding to total_bitrate.
	If the term exceeds that number, then it is a dominator term and has
	more influence over sorting the list with higher scores climbing to
	more to the top of recommended.  The idea is to boost the score of
	aspects that you are more interested in.  Some people are more
	interested in audio.  Others may be interested in video quality.
	Some may prefer FPS over video quality or vice-versa.

	Available variables:

	  ${abitrate} -- audio bitrate in kbps.  Some sites cap it at 256 kbps.
	  ${asample_rate} -- audio sample rate.  Some sites cap it at 44.8 kHz.
	  ${vquality} -- 1 for low, 2 for mid, 3 for high video quality
	  ${is_30fps} -- 1 for true
	  ${is_60fps} -- 1 for true
	  ${fps} -- frames per second.  Max is 60
	  ${mic} -- 1 for true
	  ${total_bitrate} -- in kbps summing the audio and video bitrates

        * It is recommended to normalize the variables from [0,1].
	* It may be left unset, it will fall back to the total bitrate.
	* If set, the score formula is replaced with your formula starting
	  at zero score.
	* Have at least one term dominating the total_bitrate in order
	  to be satisfied about recommendation sorting.  Total bitrates
	  may range from 6000 to 60000 for live streaming.
	* You may want to leave the total_bitrate in so that the worst case
	  sorting if all other terms are zeroed or are too small, it can be
	  still be sorted in a satisfactory way with it as fallback, or
	  as a way to break ties with scores sharing the same score
	  with just dominating factors.  If all scores are the same 60000,
	  the total_bitrate term can break theses ties.

	General formula:
	score = a_1*x_1 + a_2*x_2 + .... + a_n*x_n, where a_i are weights and x_i
	are one of the variables above of your choosing.

	Example:
	FFMPEG_TRAINING_AV_STREAMING_WS='200000*${is_60fps} + 100000*(${aquality}/3) + ${total_bitrate}'

	This formula just says I like 60 fps more than quality.


	Custom training resolutions

	Set FFMPEG_TRAINING_CUSTOM_VOD_RESOLUTIONS as a space separated list of
	sublists to control training Video On Demand (VOD).

	Sublist format:
	fps;width;height;dynamic_range

	dynamic range - sdr or hdr only
	fps - 24, 25, 30, or 60 mostly.

	Example:
	FFMPEG_TRAINING_CUSTOM_VOD_RESOLUTIONS="30;1280;720;sdr 60;1280;720;sdr"

	Set FFMPEG_TRAINING_CUSTOM_STREAMING_RESOLUTIONS as a space separated
	list of sublists for level of detail for streaming:

	Sublist format:
	fps;width;height;bitrate;sample_rate;microphone

	Example:
	FFMPEG_TRAINING_CUSTOM_STREAMING_RESOLUTIONS="30;1980;1080;128;44.1;1 30;640;360;128;44.1;1"	

	bitrate is in Kbps (kilobits per second).
	sample rate is in kHZ (kilohertz).

	Setting this will override the defaults which trains all.


	Environment variables related to training

	FFMPEG_TRAINING_264_HW_LEVEL_SUPPORTED - A space delimited list of hw
	supported levels.  Check the technical manual for details.

	FFMPEG_TRAINING_256_PRESET - A string representing speed to compression
	ratio.  See the wiki for details under preset.  (This may be changed or
	removed and appied to FFMPEG_TRAINING_CUSTOM_STREAMING_RESOLUTIONS
	instead).  Currently allowed only for trainer-av-streaming USE flag.
	Examples:
	FFMPEG_TRAINING_256_PRESET="superfast" # blocky artifacts
	FFMPEG_TRAINING_256_PRESET="ultrafast" # unsharp edges but fast encoding
	FFMPEG_TRAINING_256_PRESET="medium" # default

	FFMPEG_TRAINER_VAAPI_SCALE_ALG - Choose either CPU or GPU
	VA-API scaling.  Acceptable values:  gpu (default), igp, cpu.


	Custom training

	Since it would be impratical to permute and PGO train all the possible
	features and settings of the software, customized PGO training is
	provided (See README.md of overlay) to allow people to script their own
	trainers.  You may also define additional per-package environment
	variable assigned assets.  See the ebuild for ways to use the
	variables.

</longdescription>
<use>
  <!-- added to ebuild by oiledmachine-overlay -->
  <flag name="trainer-audio-cbr">
    Use the CBR audio trainer.
  </flag>
  <flag name="trainer-audio-vbr">
    Use the VBR audio trainer.
  </flag>
  <flag name="trainer-audio-lossless">
    Use the lossless audio trainer.
  </flag>
  <flag name="trainer-video-2-pass-constrained-quality">
    Performs an addtional 2 pass training.  Two pass improves quality and rate
    control.  This step can be skipped for live streamers.</flag>
  <flag name="trainer-video-constrained-quality">
    Use the 1 pass constrained quality video trainer.
  </flag>
  <flag name="trainer-video-lossless">
    Use the lossless video trainer.
  </flag>
  <flag name="trainer-av-streaming">
    Use the audio video stream trainer.  This will access the camera, X11, or
    active KMS plane as sources of data.  Currently it will train for bitrates
    requested by live streaming websites, but it may be updated later to train
    with the network connections.
  </flag>
  <flag name="ssp">
    Build with stack smashing protection
  </flag>
  <!-- For license compatibility checking -->
  <!-- Deal with the restrictive first then back to the permissive. -->
  <flag name="apache2_0">Checks Apache-2.0 license compatibility</flag>
  <flag name="gpl2">Checks GPL-2.0 license compatibility</flag>
  <flag name="gpl2x">Checks GPL-2.0+ license compatibility</flag>
  <flag name="gpl3">Checks GPL-3 license compatibility</flag>
  <flag name="lgpl2">Checks LGPL-2 license compatibility</flag>
  <flag name="lgpl2x">Checks LGPL-2.0+ license compatibility</flag>
  <flag name="lgpl2_1">Checks LGPL-2.1 license compatibility</flag>
  <flag name="lgpl2_1x">Checks LGPL-2.1+ license compatibility</flag>
  <flag name="lgpl3">Checks LGPL-3.0 license compatibility</flag>
  <flag name="mpl2_0">Checks MPL-2.0 license compatibility</flag>
  <flag name="debug">Relax license restrictions</flag>

  <!-- modified -->
  <!-- The gpl USE flag should be replaced with gpl2 USE flag -->
  <flag name="gpl">
    Synonym for the gpl2 USE flag to build a GPL-2.0 (only) package.  Certain
    license incompatibilities may be encountered.  This USE flag is kept for
    compatibility.
  </flag>

  <!-- added by ebuild originators -->
  <flag name="amr">
    Enables Adaptive Multi-Rate Audio support
  </flag>
  <flag name="amrenc">
    Enables Adaptive Multi-Rate Audio encoding support with
    <pkg>media-libs/vo-amrwbenc</pkg>.
  </flag>
  <flag name="appkit">
    Enables Apple AppKit framework
  </flag>
  <flag name="bluray">
    Enable playback of Blu-ray filesystems
  </flag>
  <flag name="bs2b">
    Enables <pkg>media-libs/libbs2b</pkg> based Bauer stereo-to-binaural filter.
  </flag>
  <flag name="cdio">
    Enables audio CD grabbing with <pkg>dev-libs/libcdio</pkg>.
  </flag>
  <flag name="chromaprint">
    Enables audio fingerprinting support with <pkg>media-libs/chromaprint</pkg>.
  </flag>
  <flag name="chromium">
    Builds libffmpeg.so to enable media playback in Chromium-based browsers like
    Opera and Vivaldi.
  </flag>
  <flag name="codec2">
    Enables codec2 low bit rate speech codec support via
    <pkg>media-libs/codec2</pkg>.
  </flag>
  <flag name="cpudetection">
    Enables runtime CPU detection (useful for bindist, compatibility on other
    CPUs)
  </flag>
  <flag name="cuda">
    Enables CUDA-based acceleration. Mostly used for specific filters.
  </flag>
  <flag name="dav1d">
    Enables AV1 decoding via <pkg>media-libs/dav1d</pkg>.
  </flag>
  <flag name="fdk">
    Use external fdk-aac library for AAC encoding
  </flag>
  <flag name="flite">
    Adds a text-to-speech filter based on <pkg>app-accessibility/flite</pkg>.
  </flag>
  <flag name="frei0r">
    Enable frei0r wrapping in libavfilter
  </flag>
  <flag name="fribidi">
    Enables fribidi support in the drawtext filter.
  </flag>
  <flag name="gcrypt">
    Enables gcrypt support: Needed for rtmp(t)e support if openssl, librtmp or
    gmp is not used.
  </flag>
  <flag name="gme">
    Enables support for <pkg>media-libs/game-music-emu</pkg> for playing various
    video game music formats.
  </flag>
  <flag name="hardcoded-tables">
    Use pre-calculated tables rather than calculating them on the fly.
  </flag>
  <flag name="iec61883">
    Support for FireWire DV/HDV input device using
    <pkg>media-libs/libiec61883</pkg>.
  </flag>
  <flag name="kvazaar">
    Enables <pkg>media-libs/kvazaar</pkg> based HEVC encoder.
  </flag>
  <flag name="libaom">
    Enables <pkg>media-libs/libaom</pkg> based AV1 codec support.
  </flag>
  <flag name="libaribb24">
    Enables ARIB text and caption decoding via <pkg>media-libs/aribb24</pkg>.
  </flag>
  <flag name="libdrm">
    Enables <pkg>x11-libs/libdrm</pkg> support for better screen grabbing and
    hardware accelerated codecs.
  </flag>
  <flag name="libilbc">
    Enables iLBC de/encoding via <pkg>media-libs/libilbc</pkg>.
  </flag>
  <flag name="librtmp">
    Enables Real Time Messaging Protocol using librtmp
    (<pkg>media-video/rtmpdump</pkg>) in addition to FFmpeg's native
    implementation.
  </flag>
  <flag name="libsoxr">
    Enables audio resampling through <pkg>media-libs/soxr</pkg>.
  </flag>
  <flag name="libtesseract">
    Enables the OCR filter via <pkg>app-text/tesseract</pkg>.
  </flag>
  <flag name="libv4l">
    Uses <pkg>media-libs/libv4l</pkg> for video4linux instead of direct calls.
    Adds support for more devices via the userspace library.
  </flag>
  <flag name="libxml2">
    Uses <pkg>dev-libs/libxml2</pkg> to enable dash demuxing support.
  </flag>
  <flag name="lv2">
    Enables lv2 audio filter wrapper.
  </flag>
  <flag name="mipsdspr1">
    Enables MIPS DSP ASE R1 optimizations.
  </flag>
  <flag name="mipsdspr2">
    Enables MIPS DSP ASE R2 optimizations.
  </flag>
  <flag name="mipsfpu">
    Enables floating point MIPS optimizations.
  </flag>
  <flag name="mmal">
    Enables Multi-Media Abstraction Layer (MMAL) decoding support: Available
    e.g. on the Raspberry Pi.
  </flag>
  <flag name="network">
    Enables network streaming support
  </flag>
  <flag name="opencl">
    Enable OpenCL support
  </flag>
  <flag name="openh264">
    Enables H.264 encoding suppoprt via <pkg>media-libs/openh264</pkg>.
  </flag>
  <flag name="openssl">
    Enables <pkg>dev-libs/openssl</pkg> support. Adds support for encrypted
    network protocols (TLS/HTTPS).
  </flag>
  <flag name="pic">
    Force shared libraries to be built as PIC (this is slower)
  </flag>
  <flag name="postproc">
    Build and install libpostproc.
  </flag>
  <flag name="rav1e">
    Enables AV1 encoding support via <pkg>media-video/rav1e</pkg>.
  </flag>
  <flag name="rubberband">
    Adds time-stretching and pitch-shifting audio filter based on
    <pkg>media-libs/rubberband</pkg>.
  </flag>
  <flag name="snappy">
    Enable <pkg>app-arch/snappy</pkg> support. Required for e.g. Vidvox Hap encoder.
  </flag>
  <flag name="sndio">
    Enable support for the <pkg>media-sound/sndio</pkg> backend
  </flag>
  <flag name="srt">
    Enable support for Secure Reliable Transport (SRT) via <pkg>net-libs/srt</pkg>
  </flag>
  <flag name="ssh">
    Enable SSH/sftp support via <pkg>net-libs/libssh</pkg>.
  </flag>
  <flag name="twolame">
    Enables MP2 encoding via <pkg>media-sound/twolame</pkg> as an alternative to
    the internal encoder.
  </flag>
  <flag name="vidstab">
    Enables video stabilization filter using vid.stab library
    (<pkg>media-libs/vidstab</pkg>).
  </flag>
  <flag name="vpx">
    Enables VP8 and VP9 codec support using libvpx: Decoding does not require
    this to be enabled but libvpx can also be used for decoding; encoding
    requires this useflag to be enabled though.
  </flag>
  <flag name="vulkan">
    Enables support for the vulkan API for GPU offload.
  </flag>
  <flag name="x265">
   Enables HEVC encoding with <pkg>media-libs/x265</pkg>.
  </flag>
  <flag name="zeromq">
    Enables <pkg>net-libs/zeromq</pkg> support with the zmq/azmq filters.
  </flag>
  <flag name="zimg">
    Enables <pkg>media-libs/zimg</pkg> based scale filter.
  </flag>
  <flag name="zvbi">
    Enables <pkg>media-libs/zvbi</pkg> based teletext decoder.
  </flag>
  <flag name="rN">
    (FOR INTERNAL USE ONLY) Ebuild fork revision.
  </flag>
</use>
<slots>
  <slot name="0">
    For building against. This is the only slot that provides headers and
    command line tools. Binary compatibility slots come and go as required, so
    always pin dependencies to this slot when appropriate.
   </slot>
</slots>
</pkgmetadata>
