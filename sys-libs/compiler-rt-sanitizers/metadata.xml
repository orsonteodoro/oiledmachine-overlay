<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- ebuild fork only on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <longdescription>
    These ebuilds forks fix several problems:

    13.0.0.9999 - merge conflict fix with compiler-rt package
    all - Override config-ix.cmake SIMD checks related to sse3/sse4.2
          with USE flag overrides.  This fixes the possibility for
          missing crc32 sse4.2 intrinsic function.


    Deterministic reliable builds

    Due to the problematic design of the live ebuild system, it
    is recommened to use a commit snapshot on the same slot for all
    LLVM live packages.  To have deterministic builds, per-package
    environmental variable must be set by adding the following once a
    successful build of LLVM has been discovered:

Contents of /etc/portage/env/llvm-16-commit.conf:
EGIT_OVERRIDE_COMMIT_LLVM_LLVM_PROJECT="ADD_40_DIGIT_COMMIT_HERE"

Contents of /etc/portage/package.env:
sys-devel/llvm:16 llvm-16-commit.conf
sys-devel/clang:16 llvm-16-commit.conf
=sys-libs/compiler-rt-16* llvm-16-commit.conf
=sys-libs/compiler-rt-sanitizers-16* llvm-16-commit.conf
=sys-libs/libcxx-16* llvm-16-commit.conf
=sys-libs/libcxxabi-16* llvm-16-commit.conf
=sys-libs/libomp-16* llvm-16-commit.conf
=sys-devel/lld-16* llvm-16-commit.conf

  Then, emerge -1vuDN all of the above ebuilds.

  Replace 16 with the particular slots of the live ebuilds that you are
  interested.  When you need to update, just add and remove a # in front
  of EGIT_OVERRIDE_COMMIT_LLVM_LLVM_PROJECT to switch on and off when
  updating the 40 digit hash code again.  For the best success only pick
  the commits with a green checkmark in the commit history:
  https://github.com/llvm/llvm-project/commit/ADD_40_DIGIT_COMMIT_HERE
  </longdescription>
  <use>
    <flag name="clang">
      Force building using the installed Clang (rather than the default CC/CXX).
    </flag>
    <flag name="libfuzzer">
      Build the fuzzing runtime.
    </flag>
    <flag name="memprof">
      Build the memory profiler runtime.
    </flag>
    <flag name="orc">
      Build the ORC JIT API that could be utilized for LLVM optimization,
      concurrent JIT, (cross-compiled) expression evaluation, optimized
      interpreter code.
    </flag>
    <flag name="profile">
      Build the profiling runtime which is used during Profile Guided
      Optimization (PGO).
    </flag>
    <flag name="sanitize">
      Build the sanitizer runtimes.
    </flag>
    <flag name="xray">
      Build the XRay runtime for dynamic profiling.
    </flag>

    <flag name="asan">
      Build the Address Sanitizer runtime for reporting invalid memory/pointer
      violations.
    </flag>
    <flag name="dfsan">
      Build the Data Flow Sanitizer runtime for detect code issues through
      generic data flows analysis.
    </flag>
    <flag name="lsan">
      Build the [Memory] Leak Sanitizer runtime.
    </flag>
    <flag name="msan">
      Build the Memory Sanitizer runtime for uninitalized value checks.
    </flag>
    <flag name="hwasan">
      Build the Hardware ASAN runtime on supported hardware.  Lower memory cost
      compared to non hardware assisted ASAN.  64-bit only.
    </flag>
    <flag name="tsan">
      Build the Thread Sanitizer runtime for data races detection.
    </flag>
    <flag name="ubsan">
      Build the Undefined Behavior Sanitizer runtime for out-of-bounds,
      overflows, disallowed dereferencing checks.
    </flag>
    <flag name="safestack">
      Build the SafeStack runtime for stack buffer overflow protection using
      disjoint safe/unsafe stacks instead of canaries and additional
      measures to protect and hide the safe stack.
    </flag>
    <flag name="cfi">
      Build the Control Flow Integrity (CFI) runtime to abort the program on
      undefined behavior that may lead to control flow attacks.

      It ensures the derived dynamic type is of the (static) source type.
      Checks are made with pointers, objects, functions, types, dynamic libs.
      Unrelated types and not derived dynamic types are violations.
    </flag>
    <flag name="scudo">
      Build the Scudo Hardened Allocator for mitigation against heap based
      attacks with memory allocated from *alloc functions.

      Features guard pages for large allocations and delayed deallocation for
      use-after-free mitigation.  A LD_PRELOAD standalone version is made
      available.
    </flag>
    <flag name="shadowcallstack">
      Build the ShadowCallStack (SCS) runtime to protect against overwritten
      return addresses using a disjoint, isolated, hidden SCS.  SCS is a
      better alternative to fstack-protector and SafeStack.
    </flag>
    <flag name="gwp-asan">
      Build the GWP-ASAN runtime for ASAN in production builds/environments.

      (It's recommend to also enable scudo to easily deploy gwp-asan.)
    </flag>
  </use>
</pkgmetadata>
