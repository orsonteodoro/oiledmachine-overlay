<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild fork only the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- Ebuild originators -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <!--

    oiledmachine-overlay notes:

    These ebuilds forks fix several problems:

    13.0.0.9999 - merge conflict fix with compiler-rt package
    all - Override config-ix.cmake SIMD checks related to sse3/sse4.2
          with USE flag overrides.  This fixes the possibility for
          missing crc32 sse4.2 intrinsic function.

  -->
  <use>
    <flag name="asan">
      Build the Address Sanitizer runtime for reporting invalid memory/pointer
      violations.
    </flag>
    <flag name="cfi">
      Build the Control Flow Integrity (CFI) runtime to abort the program on
      undefined behavior that may lead to control flow attacks.

      It ensures the derived dynamic type is of the (static) source type.
      Checks are made with pointers, objects, functions, types, dynamic libs.
      Unrelated types and not derived dynamic types are violations.
    </flag>
    <flag name="clang">
      Force building using the installed Clang (rather than the default CC/CXX).
    </flag>
    <flag name="dfsan">
      Build the Data Flow Sanitizer runtime for detect code issues through
      generic data flows analysis.
    </flag>
    <flag name="fallback-commit">
      Rollback commit for reliable working patches and for missing symbols
      avoidance.
    </flag>
    <flag name="gwp-asan">
      Build the GWP-ASAN runtime for ASAN in production builds/environments.

      (It's recommend to also enable scudo to easily deploy gwp-asan.)
    </flag>
    <flag name="hwasan">
      Build the Hardware ASAN runtime on supported hardware.  Lower memory cost
      compared to non hardware assisted ASAN.  64-bit only.
    </flag>
    <flag name="libfuzzer">
      Build the libFuzzer engine used to generate and mutate input files from
      a corpus set to be fed into to target functions.  As new coverage is
      discovered, the corpus set expands.  libFuzzer should be combined with one
      or more sanitizers such as asan, ubsan, msan, lsan which are detected and
      logged during fuzzing.
    </flag>
    <flag name="lsan">
      Build the [Memory] Leak Sanitizer runtime.
    </flag>
    <flag name="memprof">
      Build the memory profiler runtime.
    </flag>
    <flag name="msan">
      Build the Memory Sanitizer runtime for uninitalized value checks.
    </flag>
    <flag name="orc">
      Build the ORC JIT API that could be utilized for LLVM optimization,
      concurrent JIT, (cross-compiled) expression evaluation, optimized
      interpreter code.
    </flag>
    <flag name="profile">
      Build the profiling runtime which is required by Clang PGO (Profile
      Guided Optimization).
    </flag>
    <flag name="safestack">
      Build the SafeStack runtime for stack buffer overflow protection using
      disjoint safe/unsafe stacks instead of canaries and additional
      measures to protect and hide the safe stack.

      For the x86_64 implementation, there are several criticisms of
      SafeStack.  There seems to be a consensus of no benefit in using this.
      One researcher noted a information disclosure attack/vulnerability.
    </flag>
    <flag name="sanitize">
      Build the sanitizer runtimes.
    </flag>
    <flag name="scudo">
      Build the Scudo Hardened Allocator for mitigation against heap based
      attacks with memory allocated from *alloc functions.

      It features guard pages for large allocations, delayed deallocation for
      use-after-free mitigation, randomization of blocks or thread cache
      assignment.  A LD_PRELOAD standalone version is made available.
    </flag>
    <flag name="shadowcallstack">
      Build the ShadowCallStack (SCS) runtime to protect against overwritten
      return addresses using a disjoint, isolated, hidden SCS.  SCS is a
      better alternative to fstack-protector and SafeStack.
    </flag>
    <flag name="tsan">
      Build the Thread Sanitizer runtime for data races detection where one
      of the threads is a writer of a multithread variable which is illegal
      in c++11.
    </flag>
    <flag name="ubsan">
      Build the Undefined Behavior Sanitizer runtime for out-of-bounds,
      overflows, disallowed dereferencing checks.
    </flag>
    <flag name="xray">
      Build the XRay runtime for dynamic profiling.
    </flag>
  </use>
</pkgmetadata>
