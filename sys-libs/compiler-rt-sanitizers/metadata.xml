<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- ebuild fork only on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>llvm@gentoo.org</email>
  </maintainer>
  <longdescription>
    These ebuilds forks fix several problems:

    13.0.0.9999 - merge conflict fix with compiler-rt package
    all - Override config-ix.cmake SIMD checks related to sse3/sse4.2
          with USE flag overrides.  This fixes the possibility for
          missing crc32 sse4.2 intrinsic function.


    Deterministic reliable builds

    Due to the problematic design of the live ebuild system, it
    is recommened to use a commit snapshot on the same slot for all
    LLVM live packages.  To have deterministic builds, per-package
    environmental variable must be set by adding the following once a
    successful build of LLVM has been discovered:

Contents of /etc/portage/env/llvm-14-commit.conf:
EGIT_OVERRIDE_COMMIT_LLVM_LLVM_PROJECT="ADD_40_DIGIT_COMMIT_HERE"

Contents of /etc/portage/package.env:
sys-devel/llvm:14 llvm-14-commit.conf
sys-devel/clang:14 llvm-14-commit.conf
=sys-libs/compiler-rt-14* llvm-14-commit.conf
=sys-libs/compiler-rt-sanitizers-14* llvm-14-commit.conf
=sys-libs/libcxx-14* llvm-14-commit.conf
=sys-libs/libcxxabi-14* llvm-14-commit.conf
=sys-libs/libomp-14* llvm-14-commit.conf
=sys-devel/lld-14* llvm-14-commit.conf

  Then, emerge -1vuDN all of the above ebuilds.

  Replace 14 with the particular slots of the live ebuilds that you are
  interested.  When you need to update, just add and remove a # in front
  of EGIT_OVERRIDE_COMMIT_LLVM_LLVM_PROJECT to switch on and off when
  updating the 40 digit hash code again.  For the best success only pick
  the commits with a green checkmark in the commit history:
  https://github.com/llvm/llvm-project/commit/ADD_40_DIGIT_COMMIT_HERE
  </longdescription>
  <use>
    <flag name="clang">
      Force building using the installed Clang (rather than the default CC/CXX).
    </flag>
    <flag name="libfuzzer">
      Build the fuzzing runtime.
    </flag>
    <flag name="memprof">
      Build the memory profiler runtime.
    </flag>
    <flag name="orc">
      Build the ORC runtime.
    </flag>
    <flag name="profile">
      Build the profiling runtime which is used during Profile Guided
      Optimization (PGO).
    </flag>
    <flag name="sanitize">
      Build the sanitizer runtimes.
    </flag>
    <flag name="xray">
      Build the XRay runtime.
    </flag>

    <flag name="asan">
      Build the Address Sanitizer runtime.
    </flag>
    <flag name="dfsan">
      Build the Data Flow Sanitizer runtime.
    </flag>
    <flag name="lsan">
      Build the Leak Sanitizer runtime.
    </flag>
    <flag name="msan">
      Build the Memory Sanitizer runtime.
    </flag>
    <flag name="hwasan">
      Build the Hardware ASAN runtime.
    </flag>
    <flag name="tsan">
      Build the Thread Sanitizer runtime.
    </flag>
    <flag name="ubsan">
      Build the Undefined Behavior Sanitizer runtime.
    </flag>
    <flag name="safestack">
      Build the SafeStack runtime.
    </flag>
    <flag name="cfi">
      Build the Control Flow Integrity runtime.
    </flag>
    <flag name="scudo">
      Build the Scudo Hardened Allocator.
    </flag>
    <flag name="shadowcallstack">
      Build the ShadowCallStack runtime.
    </flag>
    <flag name="gwp-asan">
      Build the GWP-ASAN runtime.
    </flag>
  </use>
</pkgmetadata>
