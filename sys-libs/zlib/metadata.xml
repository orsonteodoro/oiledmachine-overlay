<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- ebuild fork only on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>base-system@gentoo.org</email>
    <name>Gentoo Base System</name>
  </maintainer>
  <upstream>
    <remote-id type="github">madler/zlib</remote-id>
    <remote-id type="cpe">cpe:/a:gnu:zlib</remote-id>
  </upstream>
  <longdescription>
    This ebuild fork introduces hardening flags and PGO.

    IMPORTANT:
    Only use the cfi* and pgo USE flags after the stage 3 or stage 4
    bootstrapping process.  If you have problems during or before
    "emerge -e @system" try temporarly adding to your
    /etc/portage/package.use/zlib the line "sys-libs/zlib -pgo -clang"
    and disabling the trainers.  After emerging @system, you can
    then remove that line.

    PGO instructions
    (1) emerge the zlib ebuild without pgo USE flag
    (2) emerge pigz
    (3) emerge with pgo USE flag and at least one trainer USE flag.
        For web, the default compression levels are recommended.  Also,
        consider 8 and max for image compression if using png often
        used on the web.

    The pgo-custom USE flag can be extended for your particular
    typical use pattern.  For example, you may add a custom script
    to optimize for web use.  You will need to supply your own
    custom per-package user patch and it must be placed in ${S}.

    You may set the following per-package envvars:

    MINIZIP_PGO_SHORT_N_ITERATIONS=X, where X >= 1 will only affect the
    pgo-trainer-...-short, pgo-trainer-...-store,
    pgo-trainer-...-max-compression USE flags.  The default is 30.

    MINIZIP_PGO_LONG_N_ITERATIONS=X, where X >= 1 will only affect the
    pgo-trainer-...-long USE flags.  The default is 300.

    MINIZIP_PGO_MAX_FILES=N, where N >= 1 will limit the number of
    files to add to archived binary zip files.  The default is
    500.

    At least one
${PORTAGE_DISTDIR}/pgo/assets/{apng,bmp,gif,images,jpeg,png,svg,tiff,webp}
    folder is required for pgo-trainer-zlib-images USE flag.
    Image assets will not be provided but you may provide your own
    or obtain them from the web if they are marked public domain or
    permissive or license compatible.
  </longdescription>
  <use>
    <flag name="cfi">Build with full CFI with all schemes</flag>
    <flag name="cfi-cast">Build with cfi-cast</flag>
    <flag name="cfi-icall">Build with cfi-icall</flag>
    <flag name="cfi-vcall">Build with cfi-vcall</flag>
    <flag name="hardened">Build with Full RELRO, noexecstack, SSP.
      For the non-hardened profile, set USE_HARDENED_PROFILE_DEFAULTS=1 in
      make.conf to use the hardened profile settings or fallback to the browser
      defaults.  See ebuild for details.</flag>
    <flag name="lto">Use link time optimization.</flag>
    <flag name="minizip">include the minizip library for quick and dirty zip
      extraction</flag>
    <flag name="pgo">Build with Profiled Guided Optimizations</flag>
    <flag name="pgo-custom">Run a custom PGO optimization script</flag>
    <flag name="pgo-trainer-minizip-binary-long">Run the PGO trainer against
      text files for minizip only with N=300 so that each compression level
      is PGO trained fairly</flag>
    <flag name="pgo-trainer-minizip-binary-max-compression">Run the PGO trainer
      against text files for minizip only abridged training with N=30 with
      maximum compression level</flag>
    <flag name="pgo-trainer-minizip-binary-short">Run the PGO trainer against
      text files for minizip only abridged training with N=30 so that essential
      code paths do not get deoptimized</flag>
    <flag name="pgo-trainer-minizip-binary-store">Run the PGO trainer against
      text files for minizip only abridged training with N=30 with store
      only archival</flag>
    <flag name="pgo-trainer-minizip-text-long">Run the PGO trainer against
      binary files for minizip only with N=300 so that each compression level
      is PGO trained fairly</flag>
    <flag name="pgo-trainer-minizip-text-max-compression">Run the PGO trainer
      against binary files for minizip only abridged training with with N=30
      with maximum compression level</flag>
    <flag name="pgo-trainer-minizip-text-short">Run the PGO trainer against
      binary files for minizip only abridged training version with with N=30 so
      that code paths do not get deoptimized</flag>
    <flag name="pgo-trainer-minizip-text-store">Run the PGO trainer against
      binary files for minizip only abridged training with with N=30 with
      store only archival</flag>
    <flag name="pgo-trainer-zlib-binary-all">Run the PGO trainer against text
      files for zlib only with all compression levels</flag>
    <flag name="pgo-trainer-zlib-binary-default">Run the PGO trainer against text
      files for zlib only with compression level 6</flag>
    <flag name="pgo-trainer-zlib-binary-max">Run the PGO trainer against text
      files for zlib only with compression level 9</flag>
    <flag name="pgo-trainer-zlib-binary-min">Run the PGO trainer against text
      files for zlib only with compression level 1</flag>
    <flag name="pgo-trainer-zlib-binary-random">Run the PGO trainer against text
      files for zlib only with random compression levels</flag>
    <flag name="pgo-trainer-zlib-images-all">Run the PGO trainer against image
      files for zlib only with all compression levels</flag>
    <flag name="pgo-trainer-zlib-images-default">Run the PGO trainer against image
      files for zlib only with compression level 6</flag>
    <flag name="pgo-trainer-zlib-images-max">Run the PGO trainer against image
      files for zlib only with compression level 9, which is also used
      by libpng as the default for saving</flag>
    <flag name="pgo-trainer-zlib-images-level-8">Run the PGO trainer against
      image files for zlib only with compression level 8, used for memory
      compression in libpng</flag>
    <flag name="pgo-trainer-zlib-images-min">Run the PGO trainer against image
      files for zlib only with compression level 1</flag>
    <flag name="pgo-trainer-zlib-images-random">Run the PGO trainer against image
      files for zlib only with random compression levels</flag>
    <flag name="pgo-trainer-zlib-text-all">Run the PGO trainer against binary
      files for zlib only with all compression levels</flag>
    <flag name="pgo-trainer-zlib-text-default">Run the PGO trainer against binary
      files for zlib only with compression level 6</flag>
    <flag name="pgo-trainer-zlib-text-max">Run the PGO trainer against binary
      files for zlib only with compression level 9</flag>
    <flag name="pgo-trainer-zlib-text-min">Run the PGO trainer against binary
      files for zlib only with compression level 1</flag>
    <flag name="pgo-trainer-zlib-text-random">Run the PGO trainer against binary
      files for zlib only with random compression levels</flag>
    <flag name="shadowcallstack">Enable backward edge protection (arm64
      only)</flag>
  </use>
</pkgmetadata>
