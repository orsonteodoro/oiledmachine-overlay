diff -urp work1/libcxx/CMakeLists.txt work/libcxx/CMakeLists.txt
--- work1/libcxx/CMakeLists.txt	2021-09-07 15:34:14.099802721 -0700
+++ work/libcxx/CMakeLists.txt	2021-09-07 15:36:58.678152461 -0700
@@ -83,6 +83,15 @@ include(CMakeDependentOption)
 include(HandleCompilerRT)
 
 # Basic options ---------------------------------------------------------------
+option(CFI "Enable full CFI." OFF)
+option(CFI_CAST "Enable cfi-derived-cast, cfi-unrelated-cast." OFF)
+option(CFI_ICALL "Enable cfi-icall." OFF)
+option(CFI_VCALL "Enable cfi-vcall." OFF)
+option(LTO "Enable LTO." OFF)
+option(SSP "Enable Stack Smashing Protection (SSP)." OFF)
+option(SHADOW_CALL_STACK "Enable Shadow Call Stack." OFF)
+option(FULL_RELRO "Enable Full Relocation Read Only (RELRO)." OFF)
+option(NOEXECSTACK "Enable noexecstack." OFF)
 option(LIBCXX_ENABLE_ASSERTIONS "Enable assertions independent of build mode." OFF)
 option(LIBCXX_ENABLE_SHARED "Build libc++ as a shared library." ON)
 option(LIBCXX_ENABLE_STATIC "Build libc++ as a static library." ON)
@@ -485,6 +494,83 @@ elseif(CMAKE_CXX_COMPILER_EXTERNAL_TOOLC
   set(LIBCXX_GCC_TOOLCHAIN "${CMAKE_CXX_COMPILER_EXTERNAL_TOOLCHAIN}")
 endif()
 
+if(LTO)
+  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+    set(LIBCXX_COMPILE_FLAGS "${LIBCXX_COMPILE_FLAGS} -flto=thin")
+    set(LIBCXX_LINK_FLAGS "${LIBCXX_LINK_FLAGS} -fuse-ld=lld -flto=thin")
+  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
+    set(LIBCXX_COMPILE_FLAGS "${LIBCXX_COMPILE_FLAGS} -flto=auto")
+    set(LIBCXX_LINK_FLAGS "${LIBCXX_LINK_FLAGS} -fuse-ld=lld -flto=auto")
+  endif()
+endif()
+
+if(SSP)
+    set(LIBCXX_LINK_FLAGS "${LIBCXX_LINK_FLAGS} --param=ssp-buffer-size=4 -fstack-protector")
+endif()
+
+if(FULL_RELRO)
+    set(LIBCXX_LINK_FLAGS "${LIBCXX_LINK_FLAGS} -Wl,-z,relro -Wl,-z,now")
+endif()
+
+if(NOEXECSTACK)
+    set(LIBCXX_LINK_FLAGS "${LIBCXX_LINK_FLAGS} -Wl,-z,noexecstack")
+endif()
+
+if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+  if(CFI)
+    set(LIBCXX_COMPILE_FLAGS "${LIBCXX_COMPILE_FLAGS} -fvisibility=hidden -fsanitize=cfi")
+    if(NOT LTO)
+      message(FATAL_ERROR "Full CFI requires ThinLTO")
+    endif()
+    if(NOT LIBCXX_ENABLE_STATIC)
+      message(FATAL_ERROR "Full CFI requires -DLIBCXX_ENABLE_STATIC=ON")
+    endif()
+    if(LIBCXX_ENABLE_SHARED)
+      message(FATAL_ERROR "Full CFI requires -DLIBCXX_ENABLE_SHARED=OFF")
+    endif()
+  else()
+    if(CFI_CAST)
+      set(LIBCXX_COMPILE_FLAGS "${LIBCXX_COMPILE_FLAGS} -fvisibility=hidden -fsanitize=cfi-derived-cast -fsanitize=cfi-unrelated-cast")
+      if(NOT LTO)
+        message(FATAL_ERROR "cfi-derived-cast and cfi-unrelated-cast requires ThinLTO")
+      endif()
+      if(NOT LIBCXX_ENABLE_STATIC)
+        message(FATAL_ERROR "cfi-derived-cast and cfi-unrelated-cast requires -DLIBCXX_ENABLE_STATIC=ON")
+      endif()
+      if(LIBCXX_ENABLE_SHARED)
+        message(FATAL_ERROR "cfi-derived-cast and cfi-unrelated-cast requires -DLIBCXX_ENABLE_SHARED=OFF")
+      endif()
+    endif()
+    if(CFI_ICALL)
+      set(LIBCXX_COMPILE_FLAGS "${LIBCXX_COMPILE_FLAGS} -fvisibility=hidden -fsanitize=cfi-icall")
+      if(NOT LTO)
+        message(FATAL_ERROR "cfi-icall requires ThinLTO")
+      endif()
+      if(NOT LIBCXX_ENABLE_STATIC)
+        message(FATAL_ERROR "cfi-icall requires -DLIBCXX_ENABLE_STATIC=ON")
+      endif()
+      if(LIBCXX_ENABLE_SHARED)
+        message(FATAL_ERROR "cfi-icall requires -DLIBCXX_ENABLE_SHARED=OFF")
+      endif()
+    endif()
+    if(CFI_VCALL)
+      set(LIBCXX_COMPILE_FLAGS "${LIBCXX_COMPILE_FLAGS} -fvisibility=hidden -fsanitize=cfi-vcall")
+      if(NOT LTO)
+        message(FATAL_ERROR "cfi-vcall requires ThinLTO")
+      endif()
+      if(NOT LIBCXX_ENABLE_STATIC)
+        message(FATAL_ERROR "cfi-vcall requires -DLIBCXX_ENABLE_STATIC=ON")
+      endif()
+      if(LIBCXX_ENABLE_SHARED)
+        message(FATAL_ERROR "cfi-vcall requires -DLIBCXX_ENABLE_SHARED=OFF")
+      endif()
+    endif()
+  endif()
+  if(SHADOW_CALL_STACK)
+    set(LIBCXX_COMPILE_FLAGS "${LIBCXX_COMPILE_FLAGS} -fno-sanitize=safe-stack -fsanitize=shadow-call-stack")
+  endif()
+endif()
+
 # Configure compiler.
 include(config-ix)
 
