diff -urp a/libcxxabi/CMakeLists.txt b/libcxxabi/CMakeLists.txt
--- a/libcxxabi/CMakeLists.txt	2021-10-09 12:49:07.427877667 -0700
+++ b/libcxxabi/CMakeLists.txt	2021-10-09 12:51:51.674883079 -0700
@@ -77,6 +77,19 @@ include(CMakeDependentOption)
 include(HandleCompilerRT)
 
 # Define options.
+option(CFI "Enable full CFI." OFF)
+option(CFI_CAST "Enable cfi-derived-cast, cfi-unrelated-cast." OFF)
+option(CFI_ICALL "Enable cfi-icall." OFF)
+option(CFI_VCALL "Enable cfi-vcall." OFF)
+option(CROSS_DSO_CFI "Enable Cross-DSO CFI mode in shared libs" OFF)
+option(FORTIFY_SOURCE "Sets the _FORTIFY_SOURCE level.  Setting to -1 means do not emit." -1)
+option(FULL_RELRO "Enable Full Relocation Read Only (RELRO)." OFF)
+option(LTO "Enable LTO." OFF)
+option(NOEXECSTACK "Enable noexecstack." OFF)
+option(SHADOW_CALL_STACK "Enable Shadow Call Stack." OFF)
+option(SSP "Enable Stack Smashing Protection (SSP)." OFF)
+option(SSP_LEVEL "Stack Smashing Protection (SSP) level (weak/strong/all)." "weak")
+option(STACK_CLASH_PROTECTION "Enable Stack Clash Protection (SCP)." OFF)
 option(LIBCXXABI_ENABLE_EXCEPTIONS
   "Provide support for exceptions in the runtime.
   When disabled, libc++abi does not support stack unwinding and other exceptions-related features." ON)
@@ -267,6 +280,125 @@ include(HandleLibcxxabiFlags)
 # Configure target flags
 add_target_flags_if(LIBCXXABI_BUILD_32_BITS "-m32")
 
+if(FORTIFY_SOURCE GREATER_EQUAL 0)
+    add_definitions(-D_FORTIFY_SOURCE=${FORTIFY_SOURCE})
+endif()
+
+if(FULL_RELRO)
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -Wl,-z,relro -Wl,-z,now")
+endif()
+
+if(LTO)
+  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -flto=thin")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -flto=thin")
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fuse-ld=lld -flto=thin")
+  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -flto=auto")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -flto=auto")
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fuse-ld=lld -flto=auto")
+  else()
+    message(FATAL_ERROR "CFI requires Clang/ThinLTO")
+  endif()
+endif()
+
+if(NOEXECSTACK)
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -Wl,-z,noexecstack")
+endif()
+
+if(SSP)
+    if (SSP_LEVEL STREQUAL "weak")
+        set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} --param=ssp-buffer-size=4 -fstack-protector")
+        set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} --param=ssp-buffer-size=4 -fstack-protector")
+    elseif (SSP_LEVEL STREQUAL "strong")
+        set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} --param=ssp-buffer-size=4 -fstack-protector-strong")
+        set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} --param=ssp-buffer-size=4 -fstack-protector-strong")
+    elseif (SSP_LEVEL STREQUAL "all")
+        set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fstack-protector-all")
+        set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fstack-protector-all")
+    endif()
+endif()
+
+if(STACK_CLASH_PROTECTION)
+    check_cxx_compiler_flag(-fstack-clash-protection SUPPORTS_FSTACK_CLASH_PROTECTION)
+    if(SUPPORTS_FSTACK_CLASH_PROTECTION)
+        set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fstack-clash-protection")
+        set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fstack-clash-protection")
+    endif()
+endif()
+
+if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+  if(LIBCXXABI_ENABLE_STATIC AND (CFI OR CFI_CAST OR CFI_ICALL OR CFI_VCALL))
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fvisibility=hidden")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fvisibility=hidden")
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fvisibility=hidden")
+  elseif(CROSS_DSO_CFI AND LIBCXXABI_ENABLE_SHARED AND (CFI OR CFI_CAST OR CFI_ICALL OR CFI_VCALL))
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fvisibility=default")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fvisibility=default")
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fvisibility=default")
+  endif()
+  if(CFI)
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fsanitize=cfi")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fsanitize=cfi")
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fsanitize=cfi")
+    if(NOT LTO)
+      message(FATAL_ERROR "cfi requires ThinLTO")
+    endif()
+    if(LIBCXXABI_ENABLE_STATIC AND LIBCXXABI_ENABLE_SHARED)
+      message(FATAL_ERROR "LIBCXXABI_ENABLE_STATIC and LIBCXXABI_ENABLE_SHARED cannot be both ON for CFI")
+    endif()
+  else()
+    if(CFI_CAST)
+      set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fsanitize=cfi-derived-cast -fsanitize=cfi-unrelated-cast")
+      set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fsanitize=cfi-derived-cast -fsanitize=cfi-unrelated-cast")
+      set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fsanitize=cfi-derived-cast -fsanitize=cfi-unrelated-cast")
+      if(NOT LTO)
+        message(FATAL_ERROR "cfi-derived-cast and cfi-unrelated-cast requires ThinLTO")
+      endif()
+      if(LIBCXXABI_ENABLE_STATIC AND LIBCXXABI_ENABLE_SHARED)
+        message(FATAL_ERROR "LIBCXXABI_ENABLE_STATIC and LIBCXXABI_ENABLE_SHARED cannot be both ON for CFI_CAST")
+      endif()
+    endif()
+    if(CFI_ICALL)
+      set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fsanitize=cfi-icall")
+      set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fsanitize=cfi-icall")
+      set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fsanitize=cfi-icall")
+      if(NOT LTO)
+        message(FATAL_ERROR "cfi-icall requires ThinLTO")
+      endif()
+      if(LIBCXXABI_ENABLE_STATIC AND LIBCXXABI_ENABLE_SHARED)
+        message(FATAL_ERROR "LIBCXXABI_ENABLE_STATIC and LIBCXXABI_ENABLE_SHARED cannot be both ON for CFI_ICALL")
+      endif()
+    endif()
+    if(CFI_VCALL)
+      set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fsanitize=cfi-vcall")
+      set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fsanitize=cfi-vcall")
+      set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fsanitize=cfi-vcall")
+      if(NOT LTO)
+        message(FATAL_ERROR "cfi-vcall requires ThinLTO")
+      endif()
+      if(LIBCXXABI_ENABLE_STATIC AND LIBCXXABI_ENABLE_SHARED)
+        message(FATAL_ERROR "LIBCXXABI_ENABLE_STATIC and LIBCXXABI_ENABLE_SHARED cannot be both ON for CFI_VCALL")
+      endif()
+    endif()
+  endif()
+  if(SHADOW_CALL_STACK)
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fno-sanitize=safe-stack -fsanitize=shadow-call-stack")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fno-sanitize=safe-stack -fsanitize=shadow-call-stack")
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fno-sanitize=safe-stack -fsanitize=shadow-call-stack")
+  endif()
+endif()
+
+if(CROSS_DSO_CFI AND LIBCXXABI_ENABLE_SHARED AND (CFI OR CFI_CAST OR CFI_ICALL OR CFI_VCALL))
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fsanitize-cfi-cross-dso")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fsanitize-cfi-cross-dso")
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fsanitize-cfi-cross-dso")
+endif()
+
+set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} ${CFI_EXCEPTIONS}")
+set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} ${CFI_EXCEPTIONS}")
+set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} ${CFI_EXCEPTIONS}")
+
 if(LIBCXXABI_TARGET_TRIPLE)
   add_target_flags_if_supported("--target=${LIBCXXABI_TARGET_TRIPLE}")
 elseif(CMAKE_CXX_COMPILER_TARGET)
Only in libcxxabi: CMakeLists.txt.orig
