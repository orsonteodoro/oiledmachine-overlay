diff -urp work1/libcxxabi/CMakeLists.txt work/libcxxabi/CMakeLists.txt
--- work1/libcxxabi/CMakeLists.txt	2021-09-07 15:28:06.912650240 -0700
+++ work/libcxxabi/CMakeLists.txt	2021-09-07 15:31:03.323447100 -0700
@@ -77,6 +77,15 @@ include(CMakeDependentOption)
 include(HandleCompilerRT)
 
 # Define options.
+option(CFI "Enable full CFI." OFF)
+option(CFI_CAST "Enable cfi-derived-cast, cfi-unrelated-cast." OFF)
+option(CFI_ICALL "Enable cfi-icall." OFF)
+option(CFI_VCALL "Enable cfi-vcall." OFF)
+option(THINLTO "Enable ThinLTO." OFF)
+option(SSP "Enable Stack Smashing Protection (SSP)." OFF)
+option(SHADOW_CALL_STACK "Enable Shadow Call Stack." OFF)
+option(FULL_RELRO "Enable Full Relocation Read Only (RELRO)." OFF)
+option(NOEXECSTACK "Enable noexecstack." OFF)
 option(LIBCXXABI_ENABLE_EXCEPTIONS
   "Provide support for exceptions in the runtime.
   When disabled, libc++abi does not support stack unwinding and other exceptions-related features." ON)
@@ -257,6 +266,88 @@ include(HandleLibcxxabiFlags)
 # Configure target flags
 add_target_flags_if(LIBCXXABI_BUILD_32_BITS "-m32")
 
+if(THINLTO)
+  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -flto=thin")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -flto=thin")
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -fuse-ld=lld -flto=thin")
+  else()
+    message(FATAL_ERROR "CFI requires Clang/ThinLTO")
+  endif()
+endif()
+
+if(SSP)
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} --param=ssp-buffer-size=4 -fstack-protector")
+endif()
+
+if(FULL_RELRO)
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -Wl,-z,relro -Wl,-z,now")
+endif()
+
+if(NOEXECSTACK)
+    set(LIBCXXABI_LINK_FLAGS "${LIBCXXABI_LINK_FLAGS} -Wl,-z,noexecstack")
+endif()
+
+if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
+  if(CFI)
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fvisibility=hidden -fsanitize=cfi")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fvisibility=hidden -fsanitize=cfi")
+    if(NOT THINLTO)
+      message(FATAL_ERROR "cfi requires ThinLTO")
+    endif()
+    if(NOT LIBCXXABI_ENABLE_STATIC)
+      message(FATAL_ERROR "cfi requires -DLIBCXXABI_ENABLE_STATIC=ON")
+    endif()
+    if(LIBCXXABI_ENABLE_SHARED)
+      message(FATAL_ERROR "cfi requires -DLIBCXXABI_ENABLE_SHARED=OFF")
+    endif()
+  else()
+    if(CFI_CAST)
+      set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fvisibility=hidden -fsanitize=cfi-derived-cast -fsanitize=cfi-unrelated-cast")
+      set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fvisibility=hidden -fsanitize=cfi-derived-cast -fsanitize=cfi-unrelated-cast")
+      if(NOT THINLTO)
+        message(FATAL_ERROR "cfi-derived-cast and cfi-unrelated-cast requires ThinLTO")
+      endif()
+      if(NOT LIBCXXABI_ENABLE_STATIC)
+        message(FATAL_ERROR "cfi-derived-cast and cfi-unrelated-cast requires -DLIBCXXABI_ENABLE_STATIC=ON")
+      endif()
+      if(LIBCXXABI_ENABLE_SHARED)
+        message(FATAL_ERROR "cfi-derived-cast and cfi-unrelated-cast requires -DLIBCXXABI_ENABLE_SHARED=OFF")
+      endif()
+    endif()
+    if(CFI_ICALL)
+      set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fvisibility=hidden -fsanitize=cfi-icall")
+      set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fvisibility=hidden -fsanitize=cfi-icall")
+      if(NOT THINLTO)
+        message(FATAL_ERROR "cfi-icall requires ThinLTO")
+      endif()
+      if(NOT LIBCXXABI_ENABLE_STATIC)
+        message(FATAL_ERROR "cfi-icall requires -DLIBCXXABI_ENABLE_STATIC=ON")
+      endif()
+      if(LIBCXXABI_ENABLE_SHARED)
+        message(FATAL_ERROR "cfi-icall requires -DLIBCXXABI_ENABLE_SHARED=OFF")
+      endif()
+    endif()
+    if(CFI_VCALL)
+      set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fvisibility=hidden -fsanitize=cfi-vcall")
+      set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fvisibility=hidden -fsanitize=cfi-vcall")
+      if(NOT THINLTO)
+        message(FATAL_ERROR "cfi-vcall requires ThinLTO")
+      endif()
+      if(NOT LIBCXXABI_ENABLE_STATIC)
+        message(FATAL_ERROR "cfi-vcall requires -DLIBCXXABI_ENABLE_STATIC=ON")
+      endif()
+      if(LIBCXXABI_ENABLE_SHARED)
+        message(FATAL_ERROR "cfi-vcall requires -DLIBCXXABI_ENABLE_SHARED=OFF")
+      endif()
+    endif()
+  endif()
+  if(SHADOW_CALL_STACK)
+    set(LIBCXXABI_C_FLAGS "${LIBCXXABI_C_FLAGS} -fno-sanitize=safe-stack -fsanitize=shadow-call-stack")
+    set(LIBCXXABI_CXX_FLAGS "${LIBCXXABI_CXX_FLAGS} -fno-sanitize=safe-stack -fsanitize=shadow-call-stack")
+  endif()
+endif()
+
 if(LIBCXXABI_TARGET_TRIPLE)
   add_target_flags_if_supported("--target=${LIBCXXABI_TARGET_TRIPLE}")
 elseif(CMAKE_CXX_COMPILER_TARGET)
