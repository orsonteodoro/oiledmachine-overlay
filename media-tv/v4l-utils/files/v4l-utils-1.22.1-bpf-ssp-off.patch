Fixes:
error: A call to built-in function '__stack_chk_fail' is not supported.
int bpf_decoder(unsigned int *sample)

Causes:
SSP default ON with patched hardened clang.

note: expanded from macro 'BPF_PARAM'
#define BPF_PARAM(x) (int)(&(x))

diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/grundig.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/grundig.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/grundig.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/grundig.c	2021-11-27 15:53:20.244590372 -0800
@@ -46,6 +46,7 @@ int leader_pulse = 1300;
 
 #define BPF_PARAM(x) (int)(long)(&(x))
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/grundig")
 int bpf_decoder(unsigned int *sample)
 {
diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/imon_rsc.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/imon_rsc.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/imon_rsc.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/imon_rsc.c	2021-11-27 15:53:14.148590768 -0800
@@ -41,6 +41,7 @@ static inline int eq_margin(unsigned d1,
 	return ((d1 > (d2 - BPF_PARAM(margin))) && (d1 < (d2 + BPF_PARAM(margin))));
 }
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/imon_rsc")
 int bpf_decoder(unsigned int *sample)
 {
diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/manchester.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/manchester.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/manchester.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/manchester.c	2021-11-27 15:53:19.380590428 -0800
@@ -79,6 +79,7 @@ static int emitBit(unsigned int *sample,
 	return state;
 }
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/manchester")
 int bpf_decoder(unsigned int *sample)
 {
diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/pulse_distance.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/pulse_distance.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/pulse_distance.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/pulse_distance.c	2021-11-27 15:53:13.189590831 -0800
@@ -56,6 +56,7 @@ static inline int eq_margin(unsigned d1,
 	return ((d1 > (d2 - BPF_PARAM(margin))) && (d1 < (d2 + BPF_PARAM(margin))));
 }
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/pulse_distance")
 int bpf_decoder(unsigned int *sample)
 {
diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/pulse_length.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/pulse_length.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/pulse_length.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/pulse_length.c	2021-11-27 15:53:17.588590545 -0800
@@ -56,6 +56,7 @@ static inline int eq_margin(unsigned d1,
 	return ((d1 > (d2 - BPF_PARAM(margin))) && (d1 < (d2 + BPF_PARAM(margin))));
 }
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/pulse_length")
 int bpf_decoder(unsigned int *sample)
 {
diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/raw.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/raw.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/raw.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/raw.c	2021-11-27 15:53:18.548590482 -0800
@@ -67,6 +67,7 @@ static inline int eq_margin(unsigned d1,
 	return ((d1 > (d2 - BPF_PARAM(margin))) && (d1 < (d2 + BPF_PARAM(margin))));
 }
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/raw")
 int bpf_decoder(unsigned int *sample)
 {
diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/rc_mm.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/rc_mm.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/rc_mm.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/rc_mm.c	2021-11-27 15:53:16.708590602 -0800
@@ -56,6 +56,7 @@ static inline int eq_margin(unsigned d1,
 	return ((d1 > (d2 - BPF_PARAM(margin))) && (d1 < (d2 + BPF_PARAM(margin))));
 }
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/rc_mm")
 int bpf_decoder(unsigned int *sample)
 {
diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/samsung36.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/samsung36.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/samsung36.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/samsung36.c	2021-11-27 15:53:15.012590712 -0800
@@ -49,6 +49,7 @@ static inline int eq_margin(unsigned d1,
 	return ((d1 > (d2 - BPF_PARAM(margin))) && (d1 < (d2 + BPF_PARAM(margin))));
 }
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/samsung36")
 int bpf_decoder(unsigned int *sample)
 {
diff -urp v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/xbox-dvd.c v4l-utils-1.22.1/utils/keytable/bpf_protocols/xbox-dvd.c
--- v4l-utils-1.22.1.orig/utils/keytable/bpf_protocols/xbox-dvd.c	2021-10-16 02:28:31.000000000 -0700
+++ v4l-utils-1.22.1/utils/keytable/bpf_protocols/xbox-dvd.c	2021-11-27 15:53:15.876590656 -0800
@@ -51,6 +51,7 @@ static inline int eq_margin(unsigned d1,
 	return ((d1 > (d2 - BPF_PARAM(margin))) && (d1 < (d2 + BPF_PARAM(margin))));
 }
 
+__attribute__((no_stack_protector))
 SEC("lirc_mode2/xbox_dvd")
 int bpf_decoder(unsigned int *sample)
 {
