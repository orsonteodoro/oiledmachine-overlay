--- a/platform/linuxbsd/detect.py.orig	2025-09-14 18:30:02.000000000 -0700
+++ b/platform/linuxbsd/detect.py	2025-09-20 09:21:04.075386477 -0700
@@ -36,9 +36,11 @@ def get_opts():
         BoolVariable("use_coverage", "Test Godot coverage", False),
         BoolVariable("use_ubsan", "Use LLVM/GCC compiler undefined behavior sanitizer (UBSAN)", False),
         BoolVariable("use_asan", "Use LLVM/GCC compiler address sanitizer (ASAN)", False),
+        BoolVariable("use_hwasan", "Use LLVM/GCC compiler address sanitizer (HWASAN)", False),
         BoolVariable("use_lsan", "Use LLVM/GCC compiler leak sanitizer (LSAN)", False),
         BoolVariable("use_tsan", "Use LLVM/GCC compiler thread sanitizer (TSAN)", False),
         BoolVariable("use_msan", "Use LLVM compiler memory sanitizer (MSAN)", False),
+        BoolVariable("use_sanitize_in_production", "Use LLVM compiler sanitizers in production forcing violations as fatal", False),
         BoolVariable("use_sowrap", "Dynamically load system libraries", True),
         BoolVariable("alsa", "Use ALSA", True),
         BoolVariable("pulseaudio", "Use PulseAudio", True),
@@ -142,7 +144,7 @@ def configure(env: "SConsEnvironment"):
         env.Append(CCFLAGS=["-ftest-coverage", "-fprofile-arcs"])
         env.Append(LINKFLAGS=["-ftest-coverage", "-fprofile-arcs"])
 
-    if env["use_ubsan"] or env["use_asan"] or env["use_lsan"] or env["use_tsan"] or env["use_msan"]:
+    if env["use_ubsan"] or env["use_asan"] or env["use_hwsan"] or env["use_lsan"] or env["use_tsan"] or env["use_msan"]:
         env.extra_suffix += ".san"
         env.Append(CCFLAGS=["-DSANITIZERS_ENABLED"])
 
@@ -166,6 +168,10 @@ def configure(env: "SConsEnvironment"):
             env.Append(CCFLAGS=["-fsanitize=address,pointer-subtract,pointer-compare"])
             env.Append(LINKFLAGS=["-fsanitize=address"])
 
+        if env["use_hwasan"]:
+            env.Append(CCFLAGS=["-fsanitize=hwaddress"])
+            env.Append(LINKFLAGS=["-fsanitize=hwaddress"])
+
         if env["use_lsan"]:
             env.Append(CCFLAGS=["-fsanitize=leak"])
             env.Append(LINKFLAGS=["-fsanitize=leak"])
@@ -180,6 +186,9 @@ def configure(env: "SConsEnvironment"):
             env.Append(CCFLAGS=["-fsanitize-recover=memory"])
             env.Append(LINKFLAGS=["-fsanitize=memory"])
 
+        if env["use_sanitize_in_production"]:
+            env.Append(CCFLAGS=["-fno-sanitize-recover"])
+
     env.Append(CCFLAGS=["-ffp-contract=off"])
 
     # LTO
