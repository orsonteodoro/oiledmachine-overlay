# Copyright 1999-2022 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

EAPI=8

inherit cmake multilib-build

DESCRIPTION="Box2D is a 2D physics engine for games"
HOMEPAGE="http://box2d.org/"
LICENSE="MIT"
KEYWORDS="~amd64 ~x86"
SLOT_MAJ="$(ver_cut 1-2 ${PV})" # API change between 2.4.1 breaks 2.4.0
SLOT="${SLOT_MAJ}/${PV}"
IUSE+=" doc examples static-libs test"
# todo remove internal dependencies
DEPEND+="
	virtual/libc
	examples? (
		media-libs/glew[${MULTILIB_USEDEP}]
		media-libs/glfw[${MULTILIB_USEDEP}]
	)
"
RDEPEND+=" ${DEPEND}"
BDEPEND+="
	>=dev-util/cmake-3.8
	doc? ( app-doc/doxygen )
"
SRC_URI="
https://github.com/erincatto/Box2D/archive/v${PV}.tar.gz
	-> ${P}.tar.gz
https://github.com/erincatto/box2d/commit/e76cf2d82792fbf915e42ae253f8a2ae252adbdf.patch
	-> box2d-commit-e76cf2d.patch
https://github.com/erincatto/box2d/commit/cd2c28dba83e4f359d08aeb7b70afd9e35e39eda.patch
	-> box2d-commit-cd2c28d.patch
"
# e76cf2d - update doctest for #677
#   Fixes doctest.h:4021:47: error: size of array 'altStackMem' is not an integral constant-expression

# cd2c28d - Update doctest version (#682)
#   Dependency for e76cf2d

S="${WORKDIR}/${P}"
RESTRICT="mirror"
PATCHES=(
	"${FILESDIR}/${PN}-2.4.1-cmake-fixes.patch"
	"${DISTDIR}/${PN}-commit-cd2c28d.patch"
	"${DISTDIR}/${PN}-commit-e76cf2d.patch"
)
CMAKE_BUILD_TYPE="Release"
MY_PN="Box2D"

get_lib_types() {
	if use static-libs ; then
		echo "static"
	fi
	echo "shared"
}

src_prepare() {
	export CMAKE_USE_DIR="${S}"
	cd "${CMAKE_USE_DIR}" || die
	cmake_src_prepare
	prepare_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			cp -a "${S}" "${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}" || die
			export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
			cd "${CMAKE_USE_DIR}" || die
			if [[ "${lib_type}" == "static" ]] ; then
				sed -i -e "s|STATIC|SHARED|" src/CMakeLists.txt || die

				# Generated by https://glad.dav1d.de/ and
				# detailed in https://github.com/Dav1dde/glad
#				sed -i -e "s|STATIC|SHARED|" extern/glad/CMakeLists.txt || die

				sed -i -e "s|STATIC|SHARED|" extern/glfw/CMakeLists.txt || die

#				sed -i -e "s|STATIC|SHARED|" extern/imgui/CMakeLists.txt || die # packaged but no lib files

				# No package
#				sed -i -e "s|STATIC|SHARED|" extern/sajson/CMakeLists.txt || die
			fi
		done
	}
	multilib_foreach_abi prepare_abi
}

_configure() {
	local mycmakeargs=(
		-DBOX2D_BUILD_DOCS=$(usex doc)
		-DBOX2D_BUILD_TESTBED=$(usex examples)
		-DBOX2D_BUILD_UNIT_TESTS=$(usex test)
	)

#	if use examples ; then
#		mycmakeargs+=(
#	-DEXAMPLES_INSTALL_RPATH:PATH="/usr/share/${PN}-${PVR}/testbed"
#		)
#	fi
	if [[ "${lib_type}" == "shared" ]] ; then
		mycmakeargs+=( -DBUILD_SHARED_LIBS=ON )
	else
		mycmakeargs+=( -DBUILD_SHARED_LIBS=OFF )
	fi
	cmake_src_configure
}

src_configure() {
	configure_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
			export BUILD_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}_build"
			cd "${CMAKE_USE_DIR}" || die
			_configure
		done
	}
	multilib_foreach_abi configure_abi
}

src_compile() {
	compile_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
			export BUILD_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}_build"
			cd "${BUILD_DIR}" || die
			cmake_src_compile
		done
	}
	multilib_foreach_abi compile_abi
}

src_test() {
	test_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
			export BUILD_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}_build"
			cd "${BUILD_DIR}" || die
			if [[ -x bin/unit_test ]] ; then
				bin/unit_test || die
			else
				die "No unit test exist for ABI=${ABI} lib_type=${lib_type}"
			fi
		done
	}
	multilib_foreach_abi test_abi
}

src_install() {
	install_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
			export BUILD_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}_build"
			cd "${BUILD_DIR}" || die
			cmake_src_install
			insinto "/usr/share/${PN}-${PVR}/testbed"
			exeinto "/usr/share/${PN}-${PVR}/testbed"
			if use examples ; then
				doexe bin/testbed
			fi
		done
	}
	multilib_foreach_abi install_abi

	cd "${S}" || die
	cd docs || die
	if use doc; then
		doxygen Doxyfile
		dodoc -r API images manual.docx
	fi

	if use examples ; then
		cd "${S}"
		insinto /usr/share/${PN}/HelloWorld
		doins -r unit-test/hello_world.cpp
	fi
}

# OILEDMACHINE-OVERLAY-META-MOD-TYPE:  ebuild
# OILEDMACHINE-OVERLAY-META-EBUILD-CHANGES:  multilib-support, static-libs
