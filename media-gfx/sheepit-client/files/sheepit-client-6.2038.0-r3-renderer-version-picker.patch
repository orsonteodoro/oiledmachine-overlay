Summary: Patch changes automatic opt-in to automatic opt-out policy for downloading
renderers (e.g. Blender).

This allows users to pick the degree of security mitigation.  It's recommended
to only allow the latest stable.

Change HARDBLOCK_BLENDER_ constants in src/com/sheepit/client/Configuration.java
to false to enforce hardcoded block otherwise end-user decides.

Also, this makes it so that it doesn't download renderers but use the system
provided renderers instead via the USE_SYSTEM_RENDERERS constants in both
in Configuration.java and Linux.java only for Linux currently.  You need to
mod it for other distros or operating systems.

Patch Author: Orson Teodoro <orsonteodoro@hotmail.com>
----
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/Client.java sheepit-client-6.2038.0/src/com/sheepit/client/Client.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/Client.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/Client.java	2020-09-25 21:12:17.558478900 -0700
@@ -704,7 +704,8 @@ import lombok.Data;
 		}
 	}
 	
-	public Error.Type work(final Job ajob) {
+//	public Error.Type work(final Job ajob) {
+	public Error.Type work(Job ajob) {
 		Error.Type downloadRet;
 		
 		gui.setRenderingProjectName(ajob.getName());
@@ -786,8 +787,89 @@ import lombok.Data;
 		return this.downloadFile(ajob_, ajob_.getSceneArchivePath(), ajob_.getSceneMD5(),
 				String.format("%s?type=job&job=%s", this.server.getPage("download-archive"), ajob_.getId()), "project");
 	}
+
+	private boolean isUnknownRenderer(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_279B:
+			case Configuration.MD5_279B_FILMIC:
+			case Configuration.MD5_280:
+			case Configuration.MD5_281A:
+			case Configuration.MD5_282:
+			case Configuration.MD5_2831:
+			case Configuration.MD5_2832:
+			case Configuration.MD5_2836:
+			case Configuration.MD5_2900:
+				return false;
+			default:
+				break;
+		}
+		return true;
+	}
+
+	private boolean isRendererAllowed(String md5_renderer) {
+		if (md5_renderer.equals(Configuration.MD5_279B) && (!this.configuration.getAllowBlender279b() || Configuration.HARDBLOCK_BLENDER_279B)) {
+			return false;
+		} else if (md5_renderer.equals(Configuration.MD5_279B_FILMIC) && (!this.configuration.getAllowBlender279bFilmic() || Configuration.HARDBLOCK_BLENDER_279B_FILMIC)) {
+			return false;
+		} else if (md5_renderer.equals(Configuration.MD5_280) && (!this.configuration.getAllowBlender280() || Configuration.HARDBLOCK_BLENDER_280)) {
+			return false;
+		} else if (md5_renderer.equals(Configuration.MD5_281A) && (!this.configuration.getAllowBlender281a() || Configuration.HARDBLOCK_BLENDER_281A)) {
+			return false;
+		} else if (md5_renderer.equals(Configuration.MD5_282) && (!this.configuration.getAllowBlender282() || Configuration.HARDBLOCK_BLENDER_282)) {
+			return false;
+		} else if (md5_renderer.equals(Configuration.MD5_2831) && (!this.configuration.getAllowBlender2831() || Configuration.HARDBLOCK_BLENDER_2831)) {
+			return false;
+		} else if (md5_renderer.equals(Configuration.MD5_2832) && (!this.configuration.getAllowBlender2832() || Configuration.HARDBLOCK_BLENDER_2832)) {
+			return false;
+		} else if (md5_renderer.equals(Configuration.MD5_2836) && (!this.configuration.getAllowBlender2836() || Configuration.HARDBLOCK_BLENDER_2836)) {
+			return false;
+		} else if (md5_renderer.equals(Configuration.MD5_2900) && (!this.configuration.getAllowBlender2900() || Configuration.HARDBLOCK_BLENDER_2900)) {
+			return false;
+		} else {
+			if (!this.configuration.getAllowUnknownRenderers() || Configuration.HARDBLOCK_UNKNOWN_RENDERERS) {
+				return false;
+			}
+		}
+		return true;
+	}
+	
+	private String getRendererName(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_279B:
+				return "Blender 2.79b";
+			case Configuration.MD5_279B_FILMIC:
+				return "Blender 2.79b (Filmic)";
+			case Configuration.MD5_280:
+				return "Blender 2.80";
+			case Configuration.MD5_281A:
+				return "Blender 2.81a";
+			case Configuration.MD5_282:
+				return "Blender 2.82";
+			case Configuration.MD5_2831:
+				return "Blender 2.83.1";
+			case Configuration.MD5_2832:
+				return "Blender 2.83.2";
+			case Configuration.MD5_2836:
+				return "Blender 2.83.6";
+			case Configuration.MD5_2900:
+				return "Blender 2.90.0";
+			default:
+				break;
+		}
+		return "unknown renderer (md5: " + md5_renderer + ")";
+	}
 	
 	protected Error.Type downloadExecutable(Job ajob) throws FermeExceptionNoSpaceLeftOnDevice {
+		if (Configuration.MD5_SCENE.equals(ajob.getSceneMD5())) {
+			// uses 2.83.6
+			this.log.debug("Client::downloadExecutable allowing " + getRendererName(ajob.getRendererMD5()) + " temporarly for 'check computer strength' test");
+		} else if (isRendererAllowed(ajob.getRendererMD5())) {
+			this.log.debug("Client::downloadExecutable allowing " + getRendererName(ajob.getRendererMD5()));
+		} else {
+			this.log.debug("Client::downloadExecutable blocking " + getRendererName(ajob.getRendererMD5()));
+			return Type.RENDERER_KILLED_BY_USER;
+		}
+
 		return this.downloadFile(ajob, ajob.getRendererArchivePath(), ajob.getRendererMD5(),
 				String.format("%s?type=binary&job=%s", this.server.getPage("download-archive"), ajob.getId()), "renderer");
 	}
Only in sheepit-client-6.2038.0/src/com/sheepit/client: Client.java.orig
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/Configuration.java sheepit-client-6.2038.0/src/com/sheepit/client/Configuration.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/Configuration.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/Configuration.java	2020-09-25 21:12:18.578518575 -0700
@@ -68,6 +68,38 @@ import lombok.Data;
 	private String UIType;
 	private String hostname;
 	private String theme;
+	private boolean allowBlender279b;
+	private boolean allowBlender279bFilmic;
+	private boolean allowBlender280;
+	private boolean allowBlender281a;
+	private boolean allowBlender282;
+	private boolean allowBlender2831;
+	private boolean allowBlender2832;
+	private boolean allowBlender2836;
+	private boolean allowBlender2900;
+	private boolean allowUnknownRenderers;
+	public static final boolean HARDBLOCK_BLENDER_279B = false;
+	public static final boolean HARDBLOCK_BLENDER_279B_FILMIC = false;
+	public static final boolean HARDBLOCK_BLENDER_280 = false;
+	public static final boolean HARDBLOCK_BLENDER_281A = false;
+	public static final boolean HARDBLOCK_BLENDER_282 = false;
+	public static final boolean HARDBLOCK_BLENDER_2831 = false;
+	public static final boolean HARDBLOCK_BLENDER_2832 = false;
+	public static final boolean HARDBLOCK_BLENDER_2836 = false;
+	public static final boolean HARDBLOCK_BLENDER_2900 = false;
+	public static final boolean HARDBLOCK_UNKNOWN_RENDERERS = false;
+	public static final boolean USE_SYSTEM_RENDERERS = true;
+	public static final int SLOT_STYLE = 2; // -1 = gentoo single slot, 0 = latest stable, 1 = LTS style $(ver_cut 1-2 ${PV}), 2 = per version style ${PV}(_filmic)?
+	public static final String MD5_279B = "3d0e05e7a43ae213eccf33c47b5900c5";
+	public static final String MD5_279B_FILMIC = "a6e995c16e72b9b0e2b3857fcf45a1d0";
+	public static final String MD5_280 = "20eb01cbdc8d21c85ef744816caa83ea";
+	public static final String MD5_281A = "f6120a679aa7c5e79f39751171f63eba";
+	public static final String MD5_282 = "8d254810f35d31d9aa988fb703e639c0";
+	public static final String MD5_2831 = "d6fed9e424851f58d5d2f6d05ae9d776";
+	public static final String MD5_2832 = "9df02fcf02fa02988e670c4c9ce2285d";
+	public static final String MD5_2836 = "542ca8ea03215a6444adfb168a4fb1a9";
+	public static final String MD5_2900 = "736ae3c99bae3482cde45623535d7149";
+	public static final String MD5_SCENE = "db26b54689516484633b7d4855fb1567";
 	
 	public Configuration(File cache_dir_, String login_, String password_) {
 		this.configFilePath = null;
@@ -98,6 +130,16 @@ import lombok.Data;
 		this.useSysTray = true;
 		this.UIType = null;
 		this.theme = null;
+		this.allowBlender279b = false;
+		this.allowBlender279bFilmic = false;
+		this.allowBlender280 = false;
+		this.allowBlender281a = false;
+		this.allowBlender282 = false;
+		this.allowBlender2831 = false;
+		this.allowBlender2832 = false;
+		this.allowBlender2836 = false;
+		this.allowBlender2900 = false;
+		this.allowUnknownRenderers = false;
 	}
 	
 	public String toString() {
@@ -309,4 +351,84 @@ import lombok.Data;
 		}
 		return false;
 	}
+	
+	public void setAllowBlender279b(boolean v) {
+		allowBlender279b = v;
+	}
+	
+	public boolean getAllowBlender279b() {
+		return allowBlender279b;
+	}
+	
+	public void setAllowBlender279bFilmic(boolean v) {
+		allowBlender279bFilmic = v;
+	}
+	
+	public boolean getAllowBlender279bFilmic() {
+		return allowBlender279bFilmic;
+	}
+	
+	public void setAllowBlender280(boolean v) {
+		allowBlender280 = v;
+	}
+	
+	public boolean getAllowBlender280() {
+		return allowBlender280;
+	}
+	
+	public void setAllowBlender281a(boolean v) {
+		allowBlender281a = v;
+	}
+	
+	public boolean getAllowBlender281a() {
+		return allowBlender281a;
+	}
+	
+	public void setAllowBlender282(boolean v) {
+		allowBlender282 = v;
+	}
+	
+	public boolean getAllowBlender282() {
+		return allowBlender282;
+	}
+	
+	public void setAllowBlender2831(boolean v) {
+		allowBlender2831 = v;
+	}
+	
+	public boolean getAllowBlender2831() {
+		return allowBlender2831;
+	}
+	
+	public void setAllowBlender2832(boolean v) {
+		allowBlender2832 = v;
+	}
+	
+	public boolean getAllowBlender2832() {
+		return allowBlender2832;
+	}
+	
+	public void setAllowBlender2836(boolean v) {
+		allowBlender2836 = v;
+	}
+	
+	public boolean getAllowBlender2836() {
+		return allowBlender2836;
+	}
+	
+	public void setAllowBlender2900(boolean v) {
+		allowBlender2900 = v;
+	}
+	
+	public boolean getAllowBlender2900() {
+		return allowBlender2900;
+	}
+	
+	public void setAllowUnknownRenderers(boolean v) {
+		allowUnknownRenderers = v;
+	}
+	
+	public boolean getAllowUnknownRenderers() {
+		return allowUnknownRenderers;
+	}
 }
Only in sheepit-client-6.2038.0/src/com/sheepit/client: Configuration.java.orig
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/Job.java sheepit-client-6.2038.0/src/com/sheepit/client/Job.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/Job.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/Job.java	2020-09-25 21:12:19.438552026 -0700
@@ -138,11 +138,96 @@ import lombok.Getter;
 	}
 	
 	public String getRendererDirectory() {
-		return configuration.getWorkingDirectory().getAbsolutePath() + File.separator + rendererMD5;
+		String defaultPath = configuration.getWorkingDirectory().getAbsolutePath() + File.separator + rendererMD5 ;
+		if (configuration.USE_SYSTEM_RENDERERS && configuration.SLOT_STYLE == -1) {
+			/* For latest LTS slotting */
+			switch (rendererMD5) {
+				case Configuration.MD5_279B:
+				case Configuration.MD5_279B_FILMIC:
+				case Configuration.MD5_280:
+				case Configuration.MD5_281A:
+				case Configuration.MD5_282:
+				case Configuration.MD5_2831:
+				case Configuration.MD5_2832:
+				case Configuration.MD5_2836:
+				case Configuration.MD5_2900:
+					return "/usr/bin";
+				default:
+					return defaultPath;
+			}
+		} else if (configuration.USE_SYSTEM_RENDERERS && configuration.SLOT_STYLE == 0) {
+			/* For latest stable */
+			switch (rendererMD5) {
+				case Configuration.MD5_279B:
+				case Configuration.MD5_280:
+				case Configuration.MD5_281A:
+				case Configuration.MD5_282:
+				case Configuration.MD5_2831:
+				case Configuration.MD5_2832:
+				case Configuration.MD5_2836:
+				case Configuration.MD5_2900:
+					return "/usr/bin/.blender/0/creator";
+				case Configuration.MD5_279B_FILMIC:
+					return "/usr/bin";
+				default:
+					return defaultPath;
+			}
+		} else if (configuration.USE_SYSTEM_RENDERERS && configuration.SLOT_STYLE == 1) {
+			/* For latest LTS slotting */
+			switch (rendererMD5) {
+				case Configuration.MD5_279B:
+					return "/usr/bin/.blender/2.79/creator";
+				case Configuration.MD5_279B_FILMIC:
+					return "/usr/bin";
+				case Configuration.MD5_280:
+					return "/usr/bin/.blender/2.80/creator";
+				case Configuration.MD5_281A:
+					return "/usr/bin/.blender/2.80/creator";
+				case Configuration.MD5_282:
+					return "/usr/bin/.blender/2.82/creator";
+				case Configuration.MD5_2831:
+					return "/usr/bin/.blender/2.83/creator";
+				case Configuration.MD5_2832:
+					return "/usr/bin/.blender/2.83/creator";
+				case Configuration.MD5_2836:
+					return "/usr/bin/.blender/2.83/creator";
+				case Configuration.MD5_2900:
+					return "/usr/bin/.blender/2.90/creator";
+				default:
+					return defaultPath;
+			}
+		} else if (configuration.USE_SYSTEM_RENDERERS && configuration.SLOT_STYLE == 2) {
+			/* For per version slotting */
+			switch (rendererMD5) {
+				case Configuration.MD5_279B:
+					return "/usr/bin/.blender/2.79b/creator";
+				case Configuration.MD5_279B_FILMIC:
+					return "/usr/bin";
+				case Configuration.MD5_280:
+					return "/usr/bin/.blender/2.80/creator";
+				case Configuration.MD5_281A:
+					return "/usr/bin/.blender/2.80a/creator";
+				case Configuration.MD5_282:
+					return "/usr/bin/.blender/2.82/creator";
+				case Configuration.MD5_2831:
+					return "/usr/bin/.blender/2.83.1/creator";
+				case Configuration.MD5_2832:
+					return "/usr/bin/.blender/2.83.2/creator";
+				case Configuration.MD5_2836:
+					return "/usr/bin/.blender/2.83.6/creator";
+				case Configuration.MD5_2900:
+					return "/usr/bin/.blender/2.90.0/creator";
+				default:
+					return defaultPath;
+			}
+		} else {
+			/* Upstream default */
+			return defaultPath;
+		}
 	}
 	
 	public String getRendererPath() {
-		return getRendererDirectory() + File.separator + OS.getOS().getRenderBinaryPath();
+		return getRendererDirectory() + File.separator + OS.getOS().getRenderBinaryPath(rendererMD5);
 	}
 	
 	public String getRendererArchivePath() {
Only in sheepit-client-6.2038.0/src/com/sheepit/client: Job.java.orig
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/FreeBSD.java sheepit-client-6.2038.0/src/com/sheepit/client/os/FreeBSD.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/FreeBSD.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/FreeBSD.java	2020-09-25 20:59:16.848086796 -0700
@@ -42,7 +42,7 @@ public class FreeBSD extends OS {
 		return "freebsd";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "rend.exe";
 	}
 	
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Linux.java sheepit-client-6.2038.0/src/com/sheepit/client/os/Linux.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Linux.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/Linux.java	2020-09-25 21:12:22.048653549 -0700
@@ -28,6 +28,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Scanner;
 
+import com.sheepit.client.Configuration;
 import com.sheepit.client.Log;
 import com.sheepit.client.hardware.cpu.CPU;
 
@@ -43,8 +44,16 @@ public class Linux extends OS {
 		return "linux";
 	}
 	
-	@Override public String getRenderBinaryPath() {
-		return "rend.exe";
+	@Override public String getRenderBinaryPath(String rendererMD5) {
+		if (Configuration.USE_SYSTEM_RENDERERS) {
+			if (rendererMD5.equals(Configuration.MD5_279B_FILMIC)) {
+				return "blender-2.79b-filmic-sheepit";
+			} else {
+				return "blender";
+			}
+		} else {
+			return "rend.exe";
+		}
 	}
 	
 	@Override public CPU getCPU() {
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Mac.java sheepit-client-6.2038.0/src/com/sheepit/client/os/Mac.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Mac.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/Mac.java	2020-09-25 20:59:16.848086796 -0700
@@ -41,7 +41,7 @@ public class Mac extends OS {
 		return "mac";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "Blender" + File.separator + "blender.app" + File.separator + "Contents" + File.separator + "MacOS" + File.separator + "blender";
 	}
 	
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/OS.java sheepit-client-6.2038.0/src/com/sheepit/client/os/OS.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/OS.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/OS.java	2020-09-25 20:59:16.848086796 -0700
@@ -35,7 +35,7 @@ public abstract class OS {
 	
 	public abstract long getFreeMemory();
 	
-	public abstract String getRenderBinaryPath();
+	public abstract String getRenderBinaryPath(String rendererMD5);
 	
 	public String getCUDALib() {
 		return null;
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Windows.java sheepit-client-6.2038.0/src/com/sheepit/client/os/Windows.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Windows.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/Windows.java	2020-09-25 20:59:16.848086796 -0700
@@ -37,7 +37,7 @@ public class Windows extends OS {
 		return "windows";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "rend.exe";
 	}
 	
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/SettingsLoader.java sheepit-client-6.2038.0/src/com/sheepit/client/SettingsLoader.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/SettingsLoader.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/SettingsLoader.java	2020-09-25 21:33:17.818188870 -0700
@@ -58,6 +58,16 @@ public class SettingsLoader {
 	private String ui;
 	private String theme;
 	private int priority;
+	private String allowBlender279b;
+	private String allowBlender279bFilmic;
+	private String allowBlender280;
+	private String allowBlender281a;
+	private String allowBlender282;
+	private String allowBlender2831;
+	private String allowBlender2832;
+	private String allowBlender2836;
+	private String allowBlender2900;
+	private String allowUnknownRenderers;
 	
 	public SettingsLoader(String path_) {
 		if (path_ == null) {
@@ -70,7 +80,9 @@ public class SettingsLoader {
 	
 	public SettingsLoader(String path_, String login_, String password_, String proxy_, String hostname_, ComputeType computeMethod_, GPUDevice gpu_,
 		int renderbucketSize_, int cores_, long maxRam_, int maxRenderTime_, String cacheDir_, boolean autoSignIn_, boolean useSysTray_, String ui_,
-		String theme_, int priority_) {
+		String theme_, int priority_, boolean allowBlender279b_, boolean allowBlender279bFilmic_, boolean allowBlender280_,
+		boolean allowBlender281a_, boolean allowBlender282_, boolean allowBlender2831_, boolean allowBlender2832_, boolean allowBlender2836_, boolean allowBlender2900_,
+		boolean allowUnknownRenderers_) {
 		if (path_ == null) {
 			path = getDefaultFilePath();
 		}
@@ -87,6 +99,16 @@ public class SettingsLoader {
 		ui = ui_;
 		priority = priority_;
 		theme = theme_;
+		allowBlender279b = String.valueOf(allowBlender279b_);
+		allowBlender279bFilmic = String.valueOf(allowBlender279bFilmic_);
+		allowBlender280 = String.valueOf(allowBlender280_);
+		allowBlender281a = String.valueOf(allowBlender281a_);
+		allowBlender282 = String.valueOf(allowBlender282_);
+		allowBlender2831 = String.valueOf(allowBlender2831_);
+		allowBlender2832 = String.valueOf(allowBlender2832_);
+		allowBlender2836 = String.valueOf(allowBlender2836_);
+		allowBlender2900 = String.valueOf(allowBlender2900_);
+		allowUnknownRenderers = String.valueOf(allowUnknownRenderers_);
 		
 		if (cores_ > 0) {
 			cores = String.valueOf(cores_);
@@ -189,6 +211,46 @@ public class SettingsLoader {
 				prop.setProperty("theme", theme);
 			}
 			
+			if (allowBlender279b != null) {
+				prop.setProperty("use-blender279b", allowBlender279b);
+			}
+			
+			if (allowBlender279bFilmic != null) {
+				prop.setProperty("use-blender279b-filmic", allowBlender279bFilmic);
+			}
+			
+			if (allowBlender280 != null) {
+				prop.setProperty("use-blender280", allowBlender280);
+			}
+			
+			if (allowBlender281a != null) {
+				prop.setProperty("use-blender281a", allowBlender281a);
+			}
+			
+			if (allowBlender282 != null) {
+				prop.setProperty("use-blender282", allowBlender282);
+			}
+			
+			if (allowBlender2831 != null) {
+				prop.setProperty("use-blender2831", allowBlender2831);
+			}
+			
+			if (allowBlender2832 != null) {
+				prop.setProperty("use-blender2832", allowBlender2832);
+			}
+			
+			if (allowBlender2836 != null) {
+				prop.setProperty("use-blender2836", allowBlender2836);
+			}
+			
+			if (allowBlender2900 != null) {
+				prop.setProperty("use-blender2900", allowBlender2900);
+			}
+			
+			if (allowUnknownRenderers != null) {
+				prop.setProperty("use-unknown-renderers", allowUnknownRenderers);
+			}
+			
 			prop.store(output, null);
 		}
 		catch (IOException io) {
@@ -237,6 +299,16 @@ public class SettingsLoader {
 		this.ram = null;
 		this.renderTime = null;
 		this.theme = null;
+		this.allowBlender279b = null;
+		this.allowBlender279bFilmic = null;
+		this.allowBlender280 = null;
+		this.allowBlender281a = null;
+		this.allowBlender282 = null;
+		this.allowBlender2831 = null;
+		this.allowBlender2832 = null;
+		this.allowBlender2836 = null;
+		this.allowBlender2900 = null;
+		this.allowUnknownRenderers = null;
 		
 		if (new File(path).exists() == false) {
 			return;
@@ -315,6 +387,46 @@ public class SettingsLoader {
 			if (prop.containsKey("priority")) {
 				this.priority = Integer.parseInt(prop.getProperty("priority"));
 			}
+			
+			if (prop.containsKey("use-blender279b")) {
+				this.allowBlender279b = prop.getProperty("use-blender279b");
+			}
+			
+			if (prop.containsKey("use-blender279b-filmic")) {
+				this.allowBlender279bFilmic = prop.getProperty("use-blender279b-filmic");
+			}
+			
+			if (prop.containsKey("use-blender280")) {
+				this.allowBlender280 = prop.getProperty("use-blender280");
+			}
+			
+			if (prop.containsKey("use-blender281a")) {
+				this.allowBlender281a = prop.getProperty("use-blender281a");
+			}
+			
+			if (prop.containsKey("use-blender282")) {
+				this.allowBlender282 = prop.getProperty("use-blender282");
+			}
+			
+			if (prop.containsKey("use-blender2831")) {
+				this.allowBlender2831 = prop.getProperty("use-blender2831");
+			}
+			
+			if (prop.containsKey("use-blender2832")) {
+				this.allowBlender2832 = prop.getProperty("use-blender2832");
+			}
+			
+			if (prop.containsKey("use-blender2836")) {
+				this.allowBlender2836 = prop.getProperty("use-blender2836");
+			}
+			
+			if (prop.containsKey("use-blender2900")) {
+				this.allowBlender2900 = prop.getProperty("use-blender2900");
+			}
+			
+			if (prop.containsKey("use-unknown-renderers")) {
+				this.allowUnknownRenderers = prop.getProperty("use-unknown-renderers");
+			}
 		}
 		catch (IOException io) {
 			io.printStackTrace();
@@ -450,11 +562,26 @@ public class SettingsLoader {
 		}
 		
 		config.setAutoSignIn(Boolean.parseBoolean(autoSignIn));
+
+		config.setAllowBlender279b(Boolean.parseBoolean(allowBlender279b));
+		config.setAllowBlender279bFilmic(Boolean.parseBoolean(allowBlender279bFilmic));
+		config.setAllowBlender280(Boolean.parseBoolean(allowBlender280));
+		config.setAllowBlender281a(Boolean.parseBoolean(allowBlender281a));
+		config.setAllowBlender282(Boolean.parseBoolean(allowBlender282));
+		config.setAllowBlender2831(Boolean.parseBoolean(allowBlender2831));
+		config.setAllowBlender2832(Boolean.parseBoolean(allowBlender2832));
+		config.setAllowBlender2836(Boolean.parseBoolean(allowBlender2836));
+		config.setAllowBlender2900(Boolean.parseBoolean(allowBlender2900));
+		config.setAllowUnknownRenderers(Boolean.parseBoolean(allowUnknownRenderers));
 	}
 	
 	@Override public String toString() {
 		return String.format(
-			"SettingsLoader [path=%s, login=%s, password=%s, computeMethod=%s, gpu=%s, renderbucket-size=%s, cacheDir=%s, theme=%s, priority=%d, autosign=%s, usetray=%s]",
-			path, login, password, computeMethod, gpu, renderbucketSize, cacheDir, theme, priority, autoSignIn, useSysTray);
+			"SettingsLoader [path=%s, login=%s, password=%s, computeMethod=%s, gpu=%s, renderbucket-size=%s, cacheDir=%s, theme=%s, priority=%d, autosign=%s, usetray=%s,"
+			+ " allowBlender279b=%s, allowBlender279bFilmic=%s, allowBlender280=%s, allowBlender281a=%s, allowBlender282=%s, allowBlender2831=%s,"
+			+ " allowBlender2832=%s, allowBlender2836=%s, allowBlender2900=%s, allowUnknownRenderers=%s]",
+			path, login, password, computeMethod, gpu, renderbucketSize, cacheDir, theme, priority, autoSignIn, useSysTray,
+			allowBlender279b, allowBlender279bFilmic, allowBlender280, allowBlender281a, allowBlender282,
+			allowBlender2831, allowBlender2832, allowBlender2836, allowBlender2900, allowUnknownRenderers);
 	}
 }
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/standalone/swing/activity/Settings.java sheepit-client-6.2038.0/src/com/sheepit/client/standalone/swing/activity/Settings.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/standalone/swing/activity/Settings.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/standalone/swing/activity/Settings.java	2020-09-25 21:12:26.358821196 -0700
@@ -101,6 +101,16 @@ public class Settings implements Activit
 	
 	private JCheckBox saveFile;
 	private JCheckBox autoSignIn;
+	private JCheckBox allowBlender279b;
+	private JCheckBox allowBlender279bFilmic;
+	private JCheckBox allowBlender280;
+	private JCheckBox allowBlender281a;
+	private JCheckBox allowBlender282;
+	private JCheckBox allowBlender2831;
+	private JCheckBox allowBlender2832;
+	private JCheckBox allowBlender2836;
+	private JCheckBox allowBlender2900;
+	private JCheckBox allowUnknownRenderers;
 	JButton saveButton;
 	
 	private boolean haveAutoStarted;
@@ -481,15 +491,46 @@ public class Settings implements Activit
 		advanced_panel.add(hostname);
 		
 		JLabel renderTimeLabel = new JLabel("Max time per frame (in minute):");
+		allowBlender279b = new JCheckBox("Allow Blender 2.79b", parent.getConfiguration().getAllowBlender279b());
+		allowBlender279bFilmic = new JCheckBox("Allow Blender 2.79b (filmic)", parent.getConfiguration().getAllowBlender279bFilmic());
+		allowBlender280 = new JCheckBox("Allow Blender 2.80", parent.getConfiguration().getAllowBlender280());
+		allowBlender281a = new JCheckBox("Allow Blender 2.81a", parent.getConfiguration().getAllowBlender281a());
+		allowBlender282 = new JCheckBox("Allow Blender 2.82", parent.getConfiguration().getAllowBlender282());
+		allowBlender2831 = new JCheckBox("Allow Blender 2.83.1", parent.getConfiguration().getAllowBlender2831());
+		allowBlender2832 = new JCheckBox("Allow Blender 2.83.2", parent.getConfiguration().getAllowBlender2832());
+		allowBlender2836 = new JCheckBox("Allow Blender 2.83.6", parent.getConfiguration().getAllowBlender2836());
+		allowBlender2900 = new JCheckBox("Allow Blender 2.90.0", parent.getConfiguration().getAllowBlender2900());
+		allowUnknownRenderers = new JCheckBox("Allow unknown renderers", parent.getConfiguration().getAllowUnknownRenderers());
 		int val = 0;
 		if (parent.getConfiguration().getMaxRenderTime() > 0) {
 			val = parent.getConfiguration().getMaxRenderTime() / 60;
 		}
 		renderTime = new JSpinner(new SpinnerNumberModel(val, 0, 1000, 1));
 		
+		advanced_panel.add(allowBlender279b);
+		advanced_panel.add(allowBlender279bFilmic);
+		advanced_panel.add(allowBlender280);
+		advanced_panel.add(allowBlender281a);
+		advanced_panel.add(allowBlender282);
+		advanced_panel.add(allowBlender2831);
+		advanced_panel.add(allowBlender2832);
+		advanced_panel.add(allowBlender2836);
+		advanced_panel.add(allowBlender2900);
+		advanced_panel.add(allowUnknownRenderers);
 		advanced_panel.add(renderTimeLabel);
 		advanced_panel.add(renderTime);
 		
+		allowBlender279b.setVisible(!Configuration.HARDBLOCK_BLENDER_279B);
+		allowBlender279bFilmic.setVisible(!Configuration.HARDBLOCK_BLENDER_279B_FILMIC);
+		allowBlender280.setVisible(!Configuration.HARDBLOCK_BLENDER_280);
+		allowBlender281a.setVisible(!Configuration.HARDBLOCK_BLENDER_281A);
+		allowBlender282.setVisible(!Configuration.HARDBLOCK_BLENDER_282);
+		allowBlender2831.setVisible(!Configuration.HARDBLOCK_BLENDER_2831);
+		allowBlender2832.setVisible(!Configuration.HARDBLOCK_BLENDER_2832);
+		allowBlender2836.setVisible(!Configuration.HARDBLOCK_BLENDER_2836);
+		allowBlender2900.setVisible(!Configuration.HARDBLOCK_BLENDER_2900);
+		allowUnknownRenderers.setVisible(!Configuration.HARDBLOCK_UNKNOWN_RENDERERS);
+		
 		currentRow++;
 		constraints.gridx = 0;
 		constraints.gridy = currentRow;
@@ -787,7 +828,10 @@ public class Settings implements Activit
 				parent.setSettingsLoader(
 						new SettingsLoader(config.getConfigFilePath(), login.getText(), new String(password.getPassword()), proxyText, hostnameText, method,
 								selected_gpu, renderbucket_size, cpu_cores, max_ram, max_rendertime, cachePath, autoSignIn.isSelected(), useSysTray.isSelected(),
-								GuiSwing.type, themeOptionsGroup.getSelection().getActionCommand(), priority.getValue()));
+								GuiSwing.type, themeOptionsGroup.getSelection().getActionCommand(), priority.getValue(), allowBlender279b.isSelected(),
+								allowBlender279bFilmic.isSelected(), allowBlender280.isSelected(), allowBlender281a.isSelected(), allowBlender282.isSelected(),
+								allowBlender2831.isSelected(), allowBlender2832.isSelected(), allowBlender2836.isSelected(), allowBlender2900.isSelected(),
+								allowUnknownRenderers.isSelected()));
 				
 				// wait for successful authentication (to store the public key)
 				// or do we already have one?
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/standalone/Worker.java sheepit-client-6.2038.0/src/com/sheepit/client/standalone/Worker.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/standalone/Worker.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/standalone/Worker.java	2020-09-25 21:12:27.598869430 -0700
@@ -106,6 +106,26 @@ public class Worker {
 	
 	@Option(name = "-hostname", usage = "Set a custom hostname name (name change will be lost when client is closed)", required = false) private String hostname = null;
 	
+	@Option(name = "--allow-blender279b", usage = "Allow Blender 2.79b", required = false, hidden = Configuration.HARDBLOCK_BLENDER_279B) private boolean allowBlender279b = false;
+	
+	@Option(name = "--allow-blender279b-filmic", usage = "Allow Blender 2.79b (filmic)", required = false, hidden = Configuration.HARDBLOCK_BLENDER_279B_FILMIC) private boolean allowBlender279bFilmic = false;
+	
+	@Option(name = "--allow-blender280", usage = "Allow Blender 2.80", required = false, hidden = Configuration.HARDBLOCK_BLENDER_280) private boolean allowBlender280 = false;
+	
+	@Option(name = "--allow-blender281a", usage = "Allow Blender 2.81a", required = false, hidden = Configuration.HARDBLOCK_BLENDER_281A) private boolean allowBlender281a = false;
+	
+	@Option(name = "--allow-blender282", usage = "Allow Blender 2.82", required = false, hidden = Configuration.HARDBLOCK_BLENDER_282) private boolean allowBlender282 = false;
+	
+	@Option(name = "--allow-blender2831", usage = "Allow Blender 2.83.1", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2831) private boolean allowBlender2831 = false;
+	
+	@Option(name = "--allow-blender2832", usage = "Allow Blender 2.83.2", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2832) private boolean allowBlender2832 = false;
+	
+	@Option(name = "--allow-blender2836", usage = "Allow Blender 2.83.6", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2836) private boolean allowBlender2836 = false;
+	
+	@Option(name = "--allow-blender2900", usage = "Allow Blender 2.90.0", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2900) private boolean allowBlender2900 = false;
+	
+	@Option(name = "--allow-unknown-renderers", usage = "Allow unknown renderers", required = false, hidden = Configuration.HARDBLOCK_UNKNOWN_RENDERERS) private boolean allowUnknownRenderers = false;
+	
 	public static void main(String[] args) {
 		new Worker().doMain(args);
 	}
@@ -395,6 +415,17 @@ public class Worker {
 			config.setConfigFilePath(config_file);
 		}
 		
+		config.setAllowBlender279b(allowBlender279b);
+		config.setAllowBlender279bFilmic(allowBlender279bFilmic);
+		config.setAllowBlender280(allowBlender280);
+		config.setAllowBlender281a(allowBlender281a);
+		config.setAllowBlender282(allowBlender282);
+		config.setAllowBlender2831(allowBlender2831);
+		config.setAllowBlender2832(allowBlender2832);
+		config.setAllowBlender2836(allowBlender2836);
+		config.setAllowBlender2900(allowBlender2900);
+		config.setAllowUnknownRenderers(allowUnknownRenderers);
+		
 		new SettingsLoader(config_file).merge(config);
 		Log.getInstance(config).debug("client version " + config.getJarVersion());
 		
Only in sheepit-client-6.2038.0/src/com/sheepit/client/standalone: Worker.java.orig
