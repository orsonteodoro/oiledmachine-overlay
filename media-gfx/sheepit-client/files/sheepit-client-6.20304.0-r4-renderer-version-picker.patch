Original license headers

src/com/sheepit/client/Client.java:
src/com/sheepit/client/Configuration.java:
src/com/sheepit/client/Job.java:
src/com/sheepit/client/os/Linux.java:
src/com/sheepit/client/os/Mac.java:
src/com/sheepit/client/os/OS.java:
src/com/sheepit/client/os/Windows.java:
src/com/sheepit/client/standalone/Worker.java:
src/com/sheepit/client/Server.java:

/*
 * Copyright (C) 2010-2014 Laurent CLOUET
 * Author Laurent CLOUET <laurent.clouet@nopnop.net>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

src/com/sheepit/client/os/FreeBSD.java:
src/com/sheepit/client/SettingsLoader.java:

/*
 * Copyright (C) 2010-2015 Laurent CLOUET
 * Author Laurent CLOUET <laurent.clouet@nopnop.net>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; version 2
 * of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

----
Summary: Patch changes automatic opt-in to automatic opt-out policy for downloading
renderers (e.g. Blender).

This allows users to pick the degree of security mitigation.  It's recommended
to only allow the latest stable.

Change HARDBLOCK_BLENDER_ constants in src/com/sheepit/client/Configuration.java
to false to enforce hardcoded block otherwise end-user decides.

Also, this makes it so that it doesn't download renderers but use the system
provided renderers instead via the USE_SYSTEM_RENDERERS constants in both
in Configuration.java and Linux.java only for Linux currently.  You need to
mod it for other distros or operating systems.

Also, it changes the renderer sourcing.  This patch uses upstream sources, currently
Linux only supported.

Patch Author: Orson Teodoro <orsonteodoro@hotmail.com>
----
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/Client.java client-v6.20364.0/src/com/sheepit/client/Client.java
--- client-v6.20364.0.orig/src/com/sheepit/client/Client.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/Client.java	2021-04-30 21:14:26.462376767 -0700
@@ -19,9 +19,12 @@
 
 package com.sheepit.client;
 
+import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.nio.file.Files;
@@ -598,6 +601,7 @@ import lombok.Data;
 	}
 	
 	protected void sendError(int step_, Job job_to_reset_, Error.Type error) {
+		this.disableErrorSending = true;
 		if (this.disableErrorSending) {
 			this.log.debug("Error sending is disabled, do not send log");
 			return;
@@ -712,7 +716,8 @@ import lombok.Data;
 		}
 	}
 	
-	public Error.Type work(final Job ajob) {
+//	public Error.Type work(final Job ajob) {
+	public Error.Type work(Job ajob) {
 		Error.Type downloadRet;
 		
 		gui.setRenderingProjectName(ajob.getName());
@@ -747,6 +752,8 @@ import lombok.Data;
 		final File scene_file = new File(ajob.getScenePath());
 		File renderer_file = new File(ajob.getRendererPath());
 		
+		this.log.debug("Client::work renderer_path: " + ajob.getRendererPath());
+		
 		if (scene_file.exists() == false) {
 			gui.setRenderingProjectName("");
 			this.log.error("Client::work job preparation failed (scene file '" + scene_file.getAbsolutePath()
@@ -795,9 +802,286 @@ import lombok.Data;
 				String.format("%s?type=job&job=%s", this.server.getPage("download-archive"), ajob_.getId()), "project");
 	}
 	
+
+	private boolean isUnknownRenderer(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_2_79B:
+			case Configuration.MD5_LINUX_X86_64_2_79B_FILMIC:
+			case Configuration.MD5_LINUX_X86_64_2_80:
+			case Configuration.MD5_LINUX_X86_64_2_81A:
+			case Configuration.MD5_LINUX_X86_64_2_82:
+			case Configuration.MD5_LINUX_X86_64_2_83_9:
+			case Configuration.MD5_LINUX_X86_64_2_90_1:
+			case Configuration.MD5_LINUX_X86_64_2_91_0:
+			case Configuration.MD5_LINUX_X86_64_2_92_0:
+				return false;
+			default:
+				break;
+		}
+		return true;
+	}
+
+	private boolean isRendererAllowed(String md5_renderer) {
+		/* Comment off the conditional chain if it fails to download.  */
+		if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_79B)) {
+			if (!this.configuration.getAllowBlender2_79b()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_79b() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_79B) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_79B == false");
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_79B_FILMIC)) {
+			if (!this.configuration.getAllowBlender2_79b_filmic()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_79b_filmic() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_79B_FILMIC) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_79B_FILMIC == false");
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_80)) {
+			if (!this.configuration.getAllowBlender2_80()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_80() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_80) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_80 == false");
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_81A)) {
+			if (!this.configuration.getAllowBlender2_81a()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_81a() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_81A) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_81A == false");
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_82)) {
+			if (!this.configuration.getAllowBlender2_82()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_82() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_82) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_82 == false");
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_83_9)) {
+			if (!this.configuration.getAllowBlender2_83_9()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_83_9() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_83_9) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_83_9 == false");
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_90_1)) {
+			if (!this.configuration.getAllowBlender2_90_1()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_90_1() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_90_1) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_90_1 == false");
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_91_0)) {
+			if (!this.configuration.getAllowBlender2_91_0()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_91_0() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_91_0) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_91_0 == false");
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2_92_0)) {
+			if (!this.configuration.getAllowBlender2_92_0()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowBlender2_92_0() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_BLENDER_2_92_0) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_BLENDER_2_92_0 == false");
+				return false;
+			}
+		} else {
+			if (!this.configuration.getAllowUnknownRenderers()) {
+				log.debug("Client::isRendererAllowed !this.configuration.getAllowUnknownRenderers() == true");
+				return false;
+			}
+			if (Configuration.HARDBLOCK_UNKNOWN_RENDERERS) {
+				log.debug("Client::isRendererAllowed Configuration.HARDBLOCK_UNKNOWN_RENDERERS == true");
+				return false;
+			}
+			if (Configuration.USE_SYSTEM_RENDERERS) {
+				log.debug("Client::isRendererAllowed Configuration.USE_SYSTEM_RENDERERS == true");
+				return false;
+			}
+			if (!Configuration.USE_SYSTEM_RENDERERS && Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+				if (!Configuration.USE_SYSTEM_RENDERERS) {
+					log.debug("Client::isRendererAllowed !Configuration.USE_SYSTEM_RENDERERS == true");
+				}
+				if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+					log.debug("Client::isRendererAllowed Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG == true");
+				}
+				return false;
+			}
+		}
+		return true;
+	}
+	
+	private String getRendererName(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_2_79B:
+				return "Blender 2.79b";
+			case Configuration.MD5_LINUX_X86_64_2_79B_FILMIC:
+				return "Blender 2.79b (Filmic)";
+			case Configuration.MD5_LINUX_X86_64_2_80:
+				return "Blender 2.80";
+			case Configuration.MD5_LINUX_X86_64_2_81A:
+				return "Blender 2.81a";
+			case Configuration.MD5_LINUX_X86_64_2_82:
+				return "Blender 2.82";
+			case Configuration.MD5_LINUX_X86_64_2_83_9:
+				return "Blender 2.83.9";
+			case Configuration.MD5_LINUX_X86_64_2_90_1:
+				return "Blender 2.90.1";
+			case Configuration.MD5_LINUX_X86_64_2_91_0:
+				return "Blender 2.91.0";
+			case Configuration.MD5_LINUX_X86_64_2_92_0:
+				return "Blender 2.92.0";
+			default:
+				break;
+		}
+		return "unknown renderer (md5: " + md5_renderer + ")";
+	}
+	
+	public static String downloadDotBlenderDotOrgExt(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_2_79B:
+			case Configuration.MD5_LINUX_X86_64_2_79B_FILMIC:
+			case Configuration.MD5_LINUX_X86_64_2_80:
+			case Configuration.MD5_LINUX_X86_64_2_81A:
+				return ".tar.bz2";
+			case Configuration.MD5_LINUX_X86_64_2_82:
+			case Configuration.MD5_LINUX_X86_64_2_83_9:
+			case Configuration.MD5_LINUX_X86_64_2_90_1:
+			case Configuration.MD5_LINUX_X86_64_2_91_0:
+			case Configuration.MD5_LINUX_X86_64_2_92_0:
+				return ".tar.xz";
+		}
+		return "";
+	}
+	
+	private String downloadDotBlenderDotOrgUrl(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_2_79B:
+			case Configuration.MD5_LINUX_X86_64_2_79B_FILMIC:
+				return "https://download.blender.org/release/Blender2.79/blender-2.79b-linux-glibc219-x86_64.tar.bz2";
+			case Configuration.MD5_LINUX_X86_64_2_80:
+				return "https://download.blender.org/release/Blender2.80/blender-2.80-linux-glibc217-x86_64.tar.bz2";
+			case Configuration.MD5_LINUX_X86_64_2_81A:
+				return "https://download.blender.org/release/Blender2.81/blender-2.81a-linux-glibc217-x86_64.tar.bz2";
+			case Configuration.MD5_LINUX_X86_64_2_82:
+				return "https://download.blender.org/release/Blender2.82/blender-2.82-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2_83_9:
+				return "https://download.blender.org/release/Blender2.83/blender-2.83.9-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2_90_1:
+				return "https://download.blender.org/release/Blender2.90/blender-2.90.1-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2_91_0:
+				return "https://download.blender.org/release/Blender2.91/blender-2.91.0-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2_92_0:
+				return "https://download.blender.org/release/Blender2.91/blender-2.92.0-linux64.tar.xz";
+		}
+		return "";
+	}
+	
+	public static String downloadDotBlenderDotOrgHash(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_2_79B:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_79B;
+			case Configuration.MD5_LINUX_X86_64_2_79B_FILMIC:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_79B;
+			case Configuration.MD5_LINUX_X86_64_2_80:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_80;
+			case Configuration.MD5_LINUX_X86_64_2_81A:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_81A;
+			case Configuration.MD5_LINUX_X86_64_2_82:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_82;
+			case Configuration.MD5_LINUX_X86_64_2_83_9:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_83_9;
+			case Configuration.MD5_LINUX_X86_64_2_90_1:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_90_1;
+			case Configuration.MD5_LINUX_X86_64_2_91_0:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_91_0;
+			case Configuration.MD5_LINUX_X86_64_2_92_0:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2_92_0;
+		}
+		return "";
+	}
+	
 	protected Error.Type downloadExecutable(Job ajob) throws FermeExceptionNoSpaceLeftOnDevice {
-		return this.downloadFile(ajob, ajob.getRequiredRendererArchivePath(), ajob.getRendererMD5(),
-				String.format("%s?type=binary&job=%s", this.server.getPage("download-archive"), ajob.getId()), "renderer");
+		String renderer_md5 = ajob.getRendererMD5();
+		String renderer_archive_path = ajob.getRendererArchivePath();
+
+		if (Configuration.MD5_BENCHMARK_SCENE.equals(ajob.getSceneMD5())) {
+			// uses latest LTS or latest stable
+			this.log.debug("Client::downloadExecutable allowing " + getRendererName(renderer_md5) + " temporarly for 'check computer strength' test");
+		} else if (isRendererAllowed(ajob.getRendererMD5())) {
+			this.log.debug("Client::downloadExecutable allowing " + getRendererName(renderer_md5));
+		} else {
+			this.log.debug("Client::downloadExecutable blocking " + getRendererName(renderer_md5));
+			return Type.RENDERER_KILLED_BY_USER;
+		}
+
+		String md5 = "";
+		String url = "";
+
+		String md5_mod = "";
+		String url_mod = "";
+
+		if (Configuration.USE_SYSTEM_RENDERERS) {
+			String renderer_path = ajob.getRendererPath();
+			File renderer_path_file = new File(renderer_path);
+			if (renderer_path_file.exists()) {
+				return Type.OK;
+			} else {
+				return Type.RENDERER_KILLED_BY_USER;
+			}
+		} else if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+			md5 = downloadDotBlenderDotOrgHash(renderer_md5);
+			url = downloadDotBlenderDotOrgUrl(renderer_md5);
+			if (renderer_md5.equals(Configuration.MD5_LINUX_X86_64_2_79B_FILMIC)) {
+				md5_mod = Configuration.FILMIC_BLENDER_DL_F94EBAB_URL;
+				url_mod = Configuration.MD5_FILMIC_BLENDER_DL_F94EBAB;
+			}
+			if (url.equals("")) {
+				// Fallback or handled unknown renderer
+				md5 = renderer_md5;
+				url = renderer_archive_path;
+			}
+		} else {
+			md5 = renderer_md5;
+			url = renderer_archive_path;
+		}
+
+		if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS && renderer_md5.equals(Configuration.MD5_LINUX_X86_64_2_79B_FILMIC)) {
+			// Download the renderer
+			Error.Type ret1 = this.downloadFile(ajob, renderer_archive_path, md5, url, "renderer");
+			if (ret1 != Type.OK)
+				return ret1;
+			// Download the filmic mod
+			Error.Type ret2 = this.downloadFile(ajob, ajob.getCustomRendererArchivePath(md5, ".tar.gz"), md5_mod, url_mod, "renderer");
+			if (ret2 != Type.OK)
+				return ret2;
+		} else if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+			// Download the renderer
+			return this.downloadFile(ajob, renderer_archive_path, md5, url, "renderer");
+		} else {
+			return this.downloadFile(ajob, renderer_archive_path, renderer_md5,
+                                String.format("%s?type=binary&job=%s", this.server.getPage("download-archive"), ajob.getId()), "renderer");
+		}
+		return Type.OK;
 	}
 	
 	private Error.Type downloadFile(Job ajob, String local_path, String md5_server, String url, String download_type) throws FermeExceptionNoSpaceLeftOnDevice {
@@ -867,6 +1151,7 @@ import lombok.Data;
 		this.gui.status(String.format("Downloading %s", download_type), 0, 0);
 		
 		// must download the archive
+		this.log.debug("Client::downloadFile url: " + url + " local_path: " + local_path);
 		Error.Type ret = this.server.HTTPGetFile(url, local_path, this.gui, update_ui);
 		
 		if (ret == Type.RENDERER_KILLED_BY_SERVER || ret == Type.RENDERER_KILLED_BY_USER_OVER_TIME || ret == Type.RENDERER_KILLED_BY_USER) {
@@ -936,6 +1221,7 @@ import lombok.Data;
 		String renderer_archive = ajob.getRendererArchivePath();
 		String renderer_path = ajob.getRendererDirectory();
 		File renderer_path_file = new File(renderer_path);
+		File renderer_archive_file = new File(renderer_archive);
 		
 		if (!new File(renderer_archive).exists()) {
 			this.gui.status("Copying renderer from shared downloads directory");
@@ -954,14 +1240,69 @@ import lombok.Data;
 			
 			this.gui.status("Extracting renderer");
 			
-			// unzip the archive
-			ret = Utils.unzipFileIntoDirectory(renderer_archive, renderer_path, null, log);
-			if (ret != 0) {
-				this.log.error(
-						"Client::prepareWorkingDirectory, error(1) with Utils.unzipFileIntoDirectory(" + renderer_archive + ", " + renderer_path + ") returned "
-								+ ret);
-				this.gui.error(String.format("Unable to extract the renderer (error %d)", ret));
-				return -1;
+			if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+				Process p = null;
+				BufferedReader input = null;
+				String line;
+				try {
+					String [] cmd_unpack_renderer = {
+						"/bin/tar",
+						"--strip-components=1",
+						"-xvf",
+						renderer_archive,
+						"-C",
+						renderer_path
+					};
+					p = Runtime.getRuntime().exec(cmd_unpack_renderer);
+					input = new BufferedReader(new InputStreamReader(p.getInputStream()));
+					while ((line = input.readLine()) != null) {
+						System.out.println(line);
+					}
+					input.close();
+					input = null;
+					p.waitFor();
+					if (ajob.getRendererMD5().equals(Configuration.MD5_LINUX_X86_64_2_79B_FILMIC)) {
+						String filmic_archive = ajob.getCustomRendererArchivePath(Configuration.MD5_FILMIC_BLENDER_DL_F94EBAB, ".tar.gz");
+						String [] cmd_unpack_filmic = {
+							"/bin/tar",
+							"--strip-components=1",
+							"-xvf",
+							filmic_archive,
+							"-C",
+							renderer_path + File.separator + "2.79" + File.separator + "datafiles" + File.separator + "colormanagement"
+						};
+						p = Runtime.getRuntime().exec(cmd_unpack_filmic);
+						input = new BufferedReader(new InputStreamReader(p.getInputStream()));
+						while ((line = input.readLine()) != null) {
+							System.out.println(line);
+						}
+						input.close();
+						input = null;
+						p.waitFor();
+					}
+				}
+				catch (Exception err) {
+					System.out.println("exception " + err);
+					err.printStackTrace();
+				} finally {
+					if (input != null) {
+						try {
+							input.close();
+							input = null;
+						} catch (IOException e) {
+						}
+					}
+				}
+			} else {
+				// unzip the archive
+				ret = Utils.unzipFileIntoDirectory(renderer_archive, renderer_path, null, log);
+				if (ret != 0) {
+					this.log.error(
+							"Client::prepareWorkingDirectory, error(1) with Utils.unzipFileIntoDirectory(" + renderer_archive + ", " + renderer_path + ") returned "
+									+ ret);
+					this.gui.error(String.format("Unable to extract the renderer (error %d)", ret));
+					return -1;
+				}
 			}
 			
 			try {
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/Configuration.java client-v6.20364.0/src/com/sheepit/client/Configuration.java
--- client-v6.20364.0.orig/src/com/sheepit/client/Configuration.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/Configuration.java	2021-04-30 21:18:02.654860243 -0700
@@ -69,6 +69,57 @@ import lombok.Data;
 	private String UIType;
 	private String hostname;
 	private String theme;
+	private boolean allowBlender2_79b;
+	private boolean allowBlender2_79b_filmic;
+	private boolean allowBlender2_80;
+	private boolean allowBlender2_81a;
+	private boolean allowBlender2_82;
+	private boolean allowBlender2_83_9;
+	private boolean allowBlender2_90_1;
+	private boolean allowBlender2_91_0;
+	private boolean allowBlender2_92_0;
+	private boolean allowUnknownRenderers;
+	public static final boolean HARDBLOCK_BLENDER_2_79B = false;
+	public static final boolean HARDBLOCK_BLENDER_2_79B_FILMIC = false;
+	public static final boolean HARDBLOCK_BLENDER_2_80 = false;
+	public static final boolean HARDBLOCK_BLENDER_2_81A = false;
+	public static final boolean HARDBLOCK_BLENDER_2_82 = false;
+	public static final boolean HARDBLOCK_BLENDER_2_83_9 = false;
+	public static final boolean HARDBLOCK_BLENDER_2_90_1 = false;
+	public static final boolean HARDBLOCK_BLENDER_2_91_0 = false;
+	public static final boolean HARDBLOCK_BLENDER_2_92_0 = false;
+	public static final boolean HARDBLOCK_UNKNOWN_RENDERERS = false;
+	public static final boolean USE_SYSTEM_RENDERERS = true;
+	public static final boolean USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG = false;
+	public static final String SYSTEM_RENDERER_TYPE = "oiledmachine-overlay";
+
+	/* Hashes from modified tarballs from service */
+	public static final String MD5_LINUX_X86_64_2_79B = "3d0e05e7a43ae213eccf33c47b5900c5";
+	public static final String MD5_LINUX_X86_64_2_79B_FILMIC = "a6e995c16e72b9b0e2b3857fcf45a1d0";
+	public static final String MD5_LINUX_X86_64_2_80 = "20eb01cbdc8d21c85ef744816caa83ea";
+	public static final String MD5_LINUX_X86_64_2_81A = "f6120a679aa7c5e79f39751171f63eba";
+	public static final String MD5_LINUX_X86_64_2_82 = "8d254810f35d31d9aa988fb703e639c0";
+	public static final String MD5_LINUX_X86_64_2_83_9 = "47ba3a2e90e610aaced6e64562442b40";
+	public static final String MD5_LINUX_X86_64_2_90_1 = "05234503229a4660e428e8d227746d8d";
+	public static final String MD5_LINUX_X86_64_2_91_0 = "96a408177b324f9172d137b4db117924";
+	public static final String MD5_LINUX_X86_64_2_92_0 = "FIXME";
+
+	/* Hashes from downloads.blender.org tarballs */
+	public static final String MD5_LINUX_X86_VANILLA_2_79B = "7fafed4d8a22f1e8a60e3b3d10babb7d";
+	public static final String MD5_LINUX_X86_VANILLA_2_80 = "77c62e04a49e8284ef1474608d3a1b61";
+	public static final String MD5_LINUX_X86_64_VANILLA_2_79B = "099555c6c8cb16bfcc0745dd303d692c";
+	public static final String MD5_LINUX_X86_64_VANILLA_2_80 = "6f8afe0326093e479cb5505a8c783336";
+	public static final String MD5_LINUX_X86_64_VANILLA_2_81A = "bb6e03ef79d2d7273336f8cfcd5a3b3f";
+	public static final String MD5_LINUX_X86_64_VANILLA_2_82 = "a1ca369cab0ee19cc5eba1c06c5c40d5";
+	public static final String MD5_LINUX_X86_64_VANILLA_2_83_9 = "80f97072a55b53892f365147f3904bad";
+	public static final String MD5_LINUX_X86_64_VANILLA_2_90_1 = "38c75023edf4c11aff79459a82808a62";
+	public static final String MD5_LINUX_X86_64_VANILLA_2_91_0 = "c5d9b0e9e526fe611cfcdd225abc2b40";
+	public static final String MD5_LINUX_X86_64_VANILLA_2_92_0 = "43b909ee3e36d4ed3bb9d004b5fbc3e7";
+	public static final String MD5_BENCHMARK_SCENE = "db26b54689516484633b7d4855fb1567";
+
+	// Dated Jan 21, 2018
+	public static final String FILMIC_BLENDER_DL_F94EBAB_URL = "https://github.com/sobotka/filmic-blender/archive/f94ebab8ad3ad917d3201230ebca1bc3a93b7c86.tar.gz";
+	public static final String MD5_FILMIC_BLENDER_DL_F94EBAB = "5efedb0597fe15378808e847edaadab1";
 	
 	public Configuration(File cache_dir_, String login_, String password_) {
 		this.configFilePath = null;
@@ -100,6 +151,16 @@ import lombok.Data;
 		this.useSysTray = true;
 		this.UIType = null;
 		this.theme = null;
+		this.allowBlender2_79b = false;
+		this.allowBlender2_79b_filmic = false;
+		this.allowBlender2_80 = false;
+		this.allowBlender2_81a = false;
+		this.allowBlender2_82 = false;
+		this.allowBlender2_83_9 = false;
+		this.allowBlender2_90_1 = false;
+		this.allowBlender2_91_0 = false;
+		this.allowBlender2_92_0 = false;
+		this.allowUnknownRenderers = false;
 	}
 	
 	public String toString() {
@@ -324,4 +385,84 @@ import lombok.Data;
 		}
 		return false;
 	}
+	
+	public void setAllowBlender2_79b(boolean v) {
+		allowBlender2_79b = v;
+	}
+	
+	public boolean getAllowBlender2_79b() {
+		return allowBlender2_79b;
+	}
+	
+	public void setAllowBlender2_79b_filmic(boolean v) {
+		allowBlender2_79b_filmic = v;
+	}
+	
+	public boolean getAllowBlender2_79b_filmic() {
+		return allowBlender2_79b_filmic;
+	}
+	
+	public void setAllowBlender2_80(boolean v) {
+		allowBlender2_80 = v;
+	}
+	
+	public boolean getAllowBlender2_80() {
+		return allowBlender2_80;
+	}
+	
+	public void setAllowBlender2_81a(boolean v) {
+		allowBlender2_81a = v;
+	}
+	
+	public boolean getAllowBlender2_81a() {
+		return allowBlender2_81a;
+	}
+	
+	public void setAllowBlender2_82(boolean v) {
+		allowBlender2_82 = v;
+	}
+	
+	public boolean getAllowBlender2_82() {
+		return allowBlender2_82;
+	}
+	
+	public void setAllowBlender2_83_9(boolean v) {
+		allowBlender2_83_9 = v;
+	}
+	
+	public boolean getAllowBlender2_83_9() {
+		return allowBlender2_83_9;
+	}
+	
+	public void setAllowBlender2_90_1(boolean v) {
+		allowBlender2_90_1 = v;
+	}
+	
+	public boolean getAllowBlender2_90_1() {
+		return allowBlender2_90_1;
+	}
+	
+	public void setAllowBlender2_91_0(boolean v) {
+		allowBlender2_91_0 = v;
+	}
+	
+	public boolean getAllowBlender2_91_0() {
+		return allowBlender2_91_0;
+	}
+	
+	public void setAllowBlender2_92_0(boolean v) {
+		allowBlender2_92_0 = v;
+	}
+	
+	public boolean getAllowBlender2_92_0() {
+		return allowBlender2_92_0;
+	}
+	
+	public void setAllowUnknownRenderers(boolean v) {
+		allowUnknownRenderers = v;
+	}
+	
+	public boolean getAllowUnknownRenderers() {
+		return allowUnknownRenderers;
+	}
 }
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/Job.java client-v6.20364.0/src/com/sheepit/client/Job.java
--- client-v6.20364.0.orig/src/com/sheepit/client/Job.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/Job.java	2021-04-30 21:14:26.462376767 -0700
@@ -138,6 +138,23 @@ import lombok.Getter;
 	}
 	
 	public String getRendererDirectory() {
+		if (configuration.USE_SYSTEM_RENDERERS) {
+			switch (rendererMD5) {
+				case Configuration.MD5_LINUX_X86_64_2_79B:
+				case Configuration.MD5_LINUX_X86_64_2_79B_FILMIC:
+				case Configuration.MD5_LINUX_X86_64_2_80:
+				case Configuration.MD5_LINUX_X86_64_2_81A:
+				case Configuration.MD5_LINUX_X86_64_2_82:
+				case Configuration.MD5_LINUX_X86_64_2_83_9:
+				case Configuration.MD5_LINUX_X86_64_2_90_1:
+				case Configuration.MD5_LINUX_X86_64_2_91_0:
+				case Configuration.MD5_LINUX_X86_64_2_92_0:
+					return "/usr/bin";
+			}
+		} else if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+			return configuration.getWorkingDirectory().getAbsolutePath() + File.separator + Client.downloadDotBlenderDotOrgHash(rendererMD5);
+		}
+		/* Upstream default */
 		return configuration.getWorkingDirectory().getAbsolutePath() + File.separator + rendererMD5;
 	}
 	
@@ -151,11 +168,19 @@ import lombok.Getter;
 	}
 	
 	public String getRendererPath() {
-		return getRendererDirectory() + File.separator + OS.getOS().getRenderBinaryPath();
+		return getRendererDirectory() + File.separator + OS.getOS().getRenderBinaryPath(rendererMD5);
 	}
 	
 	public String getRendererArchivePath() {
-		return configuration.getStorageDir().getAbsolutePath() + File.separator + rendererMD5 + ".zip";
+		if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+			return configuration.getStorageDir().getAbsolutePath() + File.separator + Client.downloadDotBlenderDotOrgHash(rendererMD5) + Client.downloadDotBlenderDotOrgExt(rendererMD5);
+		} else {
+			return configuration.getStorageDir().getAbsolutePath() + File.separator + rendererMD5 + ".zip";
+		}
+	}
+	
+	public String getCustomRendererArchivePath(String customMD5, String ext) {
+		return configuration.getStorageDir().getAbsolutePath() + File.separator + customMD5 + ext;
 	}
 	
 	public String getRequiredSceneArchivePath() {
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/os/FreeBSD.java client-v6.20364.0/src/com/sheepit/client/os/FreeBSD.java
--- client-v6.20364.0.orig/src/com/sheepit/client/os/FreeBSD.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/os/FreeBSD.java	2021-04-30 21:14:26.466376923 -0700
@@ -42,7 +42,7 @@ public class FreeBSD extends OS {
 		return "freebsd";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "rend.exe";
 	}
 	
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/os/Linux.java client-v6.20364.0/src/com/sheepit/client/os/Linux.java
--- client-v6.20364.0.orig/src/com/sheepit/client/os/Linux.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/os/Linux.java	2021-04-30 21:14:26.466376923 -0700
@@ -28,6 +28,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Scanner;
 
+import com.sheepit.client.Configuration;
 import com.sheepit.client.Log;
 import com.sheepit.client.hardware.cpu.CPU;
 
@@ -43,8 +44,47 @@ public class Linux extends OS {
 		return "linux";
 	}
 	
-	@Override public String getRenderBinaryPath() {
-		return "rend.exe";
+	@Override public String getRenderBinaryPath(String rendererMD5) {
+		if (Configuration.USE_SYSTEM_RENDERERS) {
+			if (Configuration.SYSTEM_RENDERER_TYPE.equals("oiledmachine-overlay")) {
+				switch (rendererMD5) {
+					case Configuration.MD5_LINUX_X86_64_2_79B:
+						return "blender-2.79b";
+					case Configuration.MD5_LINUX_X86_64_2_79B_FILMIC:
+						return "blender-2.79b-filmic-sheepit";
+					case Configuration.MD5_LINUX_X86_64_2_80:
+						return "blender-2.80";
+					case Configuration.MD5_LINUX_X86_64_2_81A:
+						return "blender-2.81a";
+					case Configuration.MD5_LINUX_X86_64_2_82:
+						return "blender-2.82";
+					case Configuration.MD5_LINUX_X86_64_2_83_9:
+						return "blender-2.83.9";
+					case Configuration.MD5_LINUX_X86_64_2_90_1:
+						return "blender-2.90.1";
+					case Configuration.MD5_LINUX_X86_64_2_91_0:
+						return "blender-2.91.0";
+					case Configuration.MD5_LINUX_X86_64_2_92_0:
+						return "blender-2.92.0";
+					default:
+						return "rend.exe";
+				}
+			} else if (Configuration.SYSTEM_RENDERER_TYPE.equals("gentoo-overlay")) {
+				return "blender";
+			} else {
+				if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+					return "blender";
+				} else {
+					return "rend.exe";
+				}
+			}
+		} else {
+			if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+				return "blender";
+			} else {
+				return "rend.exe";
+			}
+		}
 	}
 	
 	@Override public CPU getCPU() {
@@ -152,18 +192,21 @@ public class Linux extends OS {
 		Map<String, String> new_env = new HashMap<String, String>();
 		new_env.putAll(java.lang.System.getenv()); // clone the env
 		
-		// if Blender is already loading an OpenGL library, don't need to load Blender's default one (it will
-		// create system incompatibilities). If no OpenGL library is found, then load the one included in the binary
-		// zip file
-		if (isOpenGLAlreadyInstalled(command.get(0)) == false) {
-			Boolean has_ld_library_path = new_env.containsKey("LD_LIBRARY_PATH");
-			
-			String lib_dir = (new File(command.get(0))).getParent() + File.separator + "lib";
-			if (has_ld_library_path == false) {
-				new_env.put("LD_LIBRARY_PATH", lib_dir);
-			}
-			else {
-				new_env.put("LD_LIBRARY_PATH", new_env.get("LD_LIBRARY_PATH") + ":" + lib_dir);
+		if (Configuration.USE_SYSTEM_RENDERERS == false) {
+			// if Blender is already loading an OpenGL library, don't need to load Blender's default one (it will
+			// create system incompatibilities). If no OpenGL library is found, then load the one included in the binary
+			// zip file
+			if (isOpenGLAlreadyInstalled(command.get(0)) == false) {
+				Boolean has_ld_library_path = new_env.containsKey("LD_LIBRARY_PATH");
+				
+				String lib_dir = (new File(command.get(0))).getParent() + File.separator + "lib";
+				System.err.println("Linux::exec lib_dir: " + lib_dir);
+				if (has_ld_library_path == false) {
+					new_env.put("LD_LIBRARY_PATH", lib_dir);
+				}
+				else {
+					new_env.put("LD_LIBRARY_PATH", new_env.get("LD_LIBRARY_PATH") + ":" + lib_dir);
+				}
 			}
 		}
 		
@@ -240,6 +283,7 @@ public class Linux extends OS {
 	}
 	
 	protected boolean isOpenGLAlreadyInstalled(String pathToRendEXE) {
+		System.err.println("Linux::isOpenGLAlreadyInstalled pathToRendEXE" + pathToRendEXE);
 		ProcessBuilder processBuilder = new ProcessBuilder();
 		processBuilder.command("bash", "-c", "ldd '" + pathToRendEXE + "'");    // support for paths with an space
 		processBuilder.redirectErrorStream(true);
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/os/Mac.java client-v6.20364.0/src/com/sheepit/client/os/Mac.java
--- client-v6.20364.0.orig/src/com/sheepit/client/os/Mac.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/os/Mac.java	2021-04-30 21:14:26.466376923 -0700
@@ -41,7 +41,7 @@ public class Mac extends OS {
 		return "mac";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "Blender" + File.separator + "blender.app" + File.separator + "Contents" + File.separator + "MacOS" + File.separator + "blender";
 	}
 	
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/os/OS.java client-v6.20364.0/src/com/sheepit/client/os/OS.java
--- client-v6.20364.0.orig/src/com/sheepit/client/os/OS.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/os/OS.java	2021-04-30 21:14:26.466376923 -0700
@@ -35,7 +35,7 @@ public abstract class OS {
 	
 	public abstract long getFreeMemory();
 	
-	public abstract String getRenderBinaryPath();
+	public abstract String getRenderBinaryPath(String rendererMD5);
 	
 	public String getCUDALib() {
 		return null;
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/os/Windows.java client-v6.20364.0/src/com/sheepit/client/os/Windows.java
--- client-v6.20364.0.orig/src/com/sheepit/client/os/Windows.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/os/Windows.java	2021-04-30 21:14:26.466376923 -0700
@@ -37,7 +37,7 @@ public class Windows extends OS {
 		return "windows";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "rend.exe";
 	}
 	
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/SettingsLoader.java client-v6.20364.0/src/com/sheepit/client/SettingsLoader.java
--- client-v6.20364.0.orig/src/com/sheepit/client/SettingsLoader.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/SettingsLoader.java	2021-04-30 21:14:26.466376923 -0700
@@ -58,6 +58,16 @@ public class SettingsLoader {
 	private String ui;
 	private String theme;
 	private int priority;
+	private String allowBlender2_79b;
+	private String allowBlender2_79b_filmic;
+	private String allowBlender2_80;
+	private String allowBlender2_81a;
+	private String allowBlender2_82;
+	private String allowBlender2_83_9;
+	private String allowBlender2_90_1;
+	private String allowBlender2_91_0;
+	private String allowBlender2_92_0;
+	private String allowUnknownRenderers;
 	
 	public SettingsLoader(String path_) {
 		if (path_ == null) {
@@ -70,7 +80,9 @@ public class SettingsLoader {
 	
 	public SettingsLoader(String path_, String login_, String password_, String proxy_, String hostname_, ComputeType computeMethod_, GPUDevice gpu_,
 		int renderbucketSize_, int cores_, long maxRam_, int maxRenderTime_, String cacheDir_, boolean autoSignIn_, boolean useSysTray_, String ui_,
-		String theme_, int priority_) {
+		String theme_, int priority_, boolean allowBlender2_79b_, boolean allowBlender2_79b_filmic_, boolean allowBlender2_80_,
+		boolean allowBlender2_81a_, boolean allowBlender2_82_, boolean allowBlender2_83_9_, boolean allowBlender2_90_1_,
+		boolean allowBlender2_91_0_, boolean allowBlender2_92_0_, boolean allowUnknownRenderers_) {
 		if (path_ == null) {
 			path = getDefaultFilePath();
 		}
@@ -87,6 +99,16 @@ public class SettingsLoader {
 		ui = ui_;
 		priority = priority_;
 		theme = theme_;
+		allowBlender2_79b = String.valueOf(allowBlender2_79b_);
+		allowBlender2_79b_filmic = String.valueOf(allowBlender2_79b_filmic_);
+		allowBlender2_80 = String.valueOf(allowBlender2_80_);
+		allowBlender2_81a = String.valueOf(allowBlender2_81a_);
+		allowBlender2_82 = String.valueOf(allowBlender2_82_);
+		allowBlender2_83_9 = String.valueOf(allowBlender2_83_9_);
+		allowBlender2_90_1 = String.valueOf(allowBlender2_90_1_);
+		allowBlender2_91_0 = String.valueOf(allowBlender2_91_0_);
+		allowBlender2_92_0 = String.valueOf(allowBlender2_92_0_);
+		allowUnknownRenderers = String.valueOf(allowUnknownRenderers_);
 		
 		if (cores_ > 0) {
 			cores = String.valueOf(cores_);
@@ -189,6 +211,90 @@ public class SettingsLoader {
 				prop.setProperty("theme", theme);
 			}
 			
+			if (allowBlender2_79b != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_79b", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_79B));
+				} else {
+					prop.setProperty("use-blender-2_79b", allowBlender2_79b);
+				}
+			}
+			
+			if (allowBlender2_79b_filmic != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_79b_filmic", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_79B_FILMIC));
+				} else {
+					prop.setProperty("use-blender-2_79b_filmic", allowBlender2_79b_filmic);
+				}
+			}
+			
+			if (allowBlender2_80 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_80", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_80));
+				} else {
+					prop.setProperty("use-blender-2_80", allowBlender2_80);
+				}
+			}
+			
+			if (allowBlender2_81a != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_81a", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_81A));
+				} else {
+					prop.setProperty("use-blender-2_81a", allowBlender2_81a);
+				}
+			}
+			
+			if (allowBlender2_82 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_82", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_82));
+				} else {
+					prop.setProperty("use-blender-2_82", allowBlender2_82);
+				}
+			}
+			
+			if (allowBlender2_83_9 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_83_9", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_83_9));
+				} else {
+					prop.setProperty("use-blender-2_83_9", allowBlender2_83_9);
+				}
+			}
+			
+			if (allowBlender2_90_1 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_90_1", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_90_1));
+				} else {
+					prop.setProperty("use-blender-2_90_1", allowBlender2_90_1);
+				}
+			}
+			
+			if (allowBlender2_91_0 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_91_0", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_91_0));
+				} else {
+					prop.setProperty("use-blender-2_91_0", allowBlender2_91_0);
+				}
+			}
+			
+			if (allowBlender2_92_0 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender-2_92_0", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_92_0));
+				} else {
+					prop.setProperty("use-blender-2_92_0", allowBlender2_92_0);
+				}
+			}
+			
+			if (allowUnknownRenderers != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-unknown-renderers", String.valueOf(false));
+				} else {
+					if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+						prop.setProperty("use-unknown-renderers", String.valueOf(false));
+					} else {
+						prop.setProperty("use-unknown-renderers", allowUnknownRenderers);
+					}
+				}
+			}
+			
 			prop.store(output, null);
 		}
 		catch (IOException io) {
@@ -237,6 +343,16 @@ public class SettingsLoader {
 		this.ram = null;
 		this.renderTime = null;
 		this.theme = null;
+		this.allowBlender2_79b = null;
+		this.allowBlender2_79b_filmic = null;
+		this.allowBlender2_80 = null;
+		this.allowBlender2_81a = null;
+		this.allowBlender2_82 = null;
+		this.allowBlender2_83_9 = null;
+		this.allowBlender2_90_1 = null;
+		this.allowBlender2_91_0 = null;
+		this.allowBlender2_92_0 = null;
+		this.allowUnknownRenderers = null;
 		
 		if (new File(path).exists() == false) {
 			return;
@@ -315,6 +431,90 @@ public class SettingsLoader {
 			if (prop.containsKey("priority")) {
 				this.priority = Integer.parseInt(prop.getProperty("priority"));
 			}
+			
+			if (prop.containsKey("use-blender-2_79b")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_79b = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_79B);
+				} else {
+					this.allowBlender2_79b = prop.getProperty("use-blender-2_79b");
+				}
+			}
+			
+			if (prop.containsKey("use-blender-2_79b_filmic")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_79b_filmic = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_79B_FILMIC);
+				} else {
+					this.allowBlender2_79b_filmic = prop.getProperty("use-blender-2_79b_filmic");
+				}
+			}
+			
+			if (prop.containsKey("use-blender-2_80")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_80 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_80);
+				} else {
+					this.allowBlender2_80 = prop.getProperty("use-blender-2_80");
+				}
+			}
+			
+			if (prop.containsKey("use-blender-2_81a")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_81a = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_81A);
+				} else {
+					this.allowBlender2_81a = prop.getProperty("use-blender-2_81a");
+				}
+			}
+			
+			if (prop.containsKey("use-blender-2_82")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_82 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_82);
+				} else {
+					this.allowBlender2_82 = prop.getProperty("use-blender-2_82");
+				}
+			}
+			
+			if (prop.containsKey("use-blender-2_83_9")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_83_9 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_83_9);
+				} else {
+					this.allowBlender2_83_9 = prop.getProperty("use-blender-2_83_9");
+				}
+			}
+			
+			if (prop.containsKey("use-blender-2_90_1")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_90_1 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_90_1);
+				} else {
+					this.allowBlender2_90_1 = prop.getProperty("use-blender-2_90_1");
+				}
+			}
+			
+			if (prop.containsKey("use-blender-2_91_0")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_91_0 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_91_0);
+				} else {
+					this.allowBlender2_91_0 = prop.getProperty("use-blender-2_91_0");
+				}
+			}
+			
+			if (prop.containsKey("use-blender-2_92_0")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2_92_0 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2_92_0);
+				} else {
+					this.allowBlender2_92_0 = prop.getProperty("use-blender-2_92_0");
+				}
+			}
+			
+			if (prop.containsKey("use-unknown-renderers")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowUnknownRenderers = String.valueOf(false);
+				} else {
+					if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+						this.allowUnknownRenderers = String.valueOf(false);
+					} else {
+						this.allowUnknownRenderers = prop.getProperty("use-unknown-renderers");
+					}
+				}
+			}
 		}
 		catch (IOException io) {
 			io.printStackTrace();
@@ -450,11 +650,26 @@ public class SettingsLoader {
 		}
 		
 		config.setAutoSignIn(Boolean.parseBoolean(autoSignIn));
+
+		config.setAllowBlender2_79b(Boolean.parseBoolean(allowBlender2_79b));
+		config.setAllowBlender2_79b_filmic(Boolean.parseBoolean(allowBlender2_79b_filmic));
+		config.setAllowBlender2_80(Boolean.parseBoolean(allowBlender2_80));
+		config.setAllowBlender2_81a(Boolean.parseBoolean(allowBlender2_81a));
+		config.setAllowBlender2_82(Boolean.parseBoolean(allowBlender2_82));
+		config.setAllowBlender2_83_9(Boolean.parseBoolean(allowBlender2_83_9));
+		config.setAllowBlender2_90_1(Boolean.parseBoolean(allowBlender2_90_1));
+		config.setAllowBlender2_91_0(Boolean.parseBoolean(allowBlender2_91_0));
+		config.setAllowBlender2_92_0(Boolean.parseBoolean(allowBlender2_92_0));
+		config.setAllowUnknownRenderers(Boolean.parseBoolean(allowUnknownRenderers));
 	}
 	
 	@Override public String toString() {
 		return String.format(
-			"SettingsLoader [path=%s, login=%s, password=%s, computeMethod=%s, gpu=%s, renderbucket-size=%s, cacheDir=%s, theme=%s, priority=%d, autosign=%s, usetray=%s]",
-			path, login, password, computeMethod, gpu, renderbucketSize, cacheDir, theme, priority, autoSignIn, useSysTray);
+			"SettingsLoader [path=%s, login=%s, password=%s, computeMethod=%s, gpu=%s, renderbucket-size=%s, cacheDir=%s, theme=%s, priority=%d, autosign=%s, usetray=%s,"
+			+ " allowBlender2_79b=%s, allowBlender2_79b_filmic=%s, allowBlender2_80=%s, allowBlender2_81a=%s, allowBlender2_82=%s, "
+			+ " allowBlender2_83_9=%s, allowBlender2_90_1=%s, allowBlender2_91_0=%s, allowBlender2_92_0=%s, allowUnknownRenderers=%s]",
+			path, login, password, computeMethod, gpu, renderbucketSize, cacheDir, theme, priority, autoSignIn, useSysTray,
+			allowBlender2_79b, allowBlender2_79b_filmic, allowBlender2_80, allowBlender2_81a, allowBlender2_82,
+			allowBlender2_83_9, allowBlender2_90_1, allowBlender2_91_0, allowBlender2_92_0, allowUnknownRenderers);
 	}
 }
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/standalone/swing/activity/Settings.java client-v6.20364.0/src/com/sheepit/client/standalone/swing/activity/Settings.java
--- client-v6.20364.0.orig/src/com/sheepit/client/standalone/swing/activity/Settings.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/standalone/swing/activity/Settings.java	2021-04-30 21:14:26.466376923 -0700
@@ -101,6 +101,16 @@ public class Settings implements Activit
 	
 	private JCheckBox saveFile;
 	private JCheckBox autoSignIn;
+	private JCheckBox allowBlender2_79b;
+	private JCheckBox allowBlender2_79b_filmic;
+	private JCheckBox allowBlender2_80;
+	private JCheckBox allowBlender2_81a;
+	private JCheckBox allowBlender2_82;
+	private JCheckBox allowBlender2_83_9;
+	private JCheckBox allowBlender2_90_1;
+	private JCheckBox allowBlender2_91_0;
+	private JCheckBox allowBlender2_92_0;
+	private JCheckBox allowUnknownRenderers;
 	JButton saveButton;
 	
 	private boolean haveAutoStarted;
@@ -481,15 +491,63 @@ public class Settings implements Activit
 		advanced_panel.add(hostname);
 		
 		JLabel renderTimeLabel = new JLabel("Max time per frame (in minute):");
+		allowBlender2_79b = new JCheckBox("Allow Blender 2.79b", parent.getConfiguration().getAllowBlender2_79b());
+		allowBlender2_79b_filmic = new JCheckBox("Allow Blender 2.79b (filmic)", parent.getConfiguration().getAllowBlender2_79b_filmic());
+		allowBlender2_80 = new JCheckBox("Allow Blender 2.80", parent.getConfiguration().getAllowBlender2_80());
+		allowBlender2_81a = new JCheckBox("Allow Blender 2.81a", parent.getConfiguration().getAllowBlender2_81a());
+		allowBlender2_82 = new JCheckBox("Allow Blender 2.82", parent.getConfiguration().getAllowBlender2_82());
+		allowBlender2_83_9 = new JCheckBox("Allow Blender 2.83.9", parent.getConfiguration().getAllowBlender2_83_9());
+		allowBlender2_90_1 = new JCheckBox("Allow Blender 2.90.1", parent.getConfiguration().getAllowBlender2_90_1());
+		allowBlender2_91_0 = new JCheckBox("Allow Blender 2.91.0", parent.getConfiguration().getAllowBlender2_91_0());
+		allowBlender2_92_0 = new JCheckBox("Allow Blender 2.92.0", parent.getConfiguration().getAllowBlender2_92_0());
+		allowUnknownRenderers = new JCheckBox("Allow unknown renderers", parent.getConfiguration().getAllowUnknownRenderers());
 		int val = 0;
 		if (parent.getConfiguration().getMaxRenderTime() > 0) {
 			val = parent.getConfiguration().getMaxRenderTime() / 60;
 		}
 		renderTime = new JSpinner(new SpinnerNumberModel(val, 0, 1000, 1));
 		
+		advanced_panel.add(allowBlender2_79b);
+		advanced_panel.add(allowBlender2_79b_filmic);
+		advanced_panel.add(allowBlender2_80);
+		advanced_panel.add(allowBlender2_81a);
+		advanced_panel.add(allowBlender2_82);
+		advanced_panel.add(allowBlender2_83_9);
+		advanced_panel.add(allowBlender2_90_1);
+		advanced_panel.add(allowBlender2_91_0);
+		advanced_panel.add(allowBlender2_92_0);
+		advanced_panel.add(allowUnknownRenderers);
 		advanced_panel.add(renderTimeLabel);
 		advanced_panel.add(renderTime);
 		
+		if (!Configuration.USE_SYSTEM_RENDERERS) {
+			allowBlender2_79b.setVisible(!Configuration.HARDBLOCK_BLENDER_2_79B);
+			allowBlender2_79b_filmic.setVisible(!Configuration.HARDBLOCK_BLENDER_2_79B_FILMIC);
+			allowBlender2_80.setVisible(!Configuration.HARDBLOCK_BLENDER_2_80);
+			allowBlender2_81a.setVisible(!Configuration.HARDBLOCK_BLENDER_2_81A);
+			allowBlender2_82.setVisible(!Configuration.HARDBLOCK_BLENDER_2_82);
+			allowBlender2_83_9.setVisible(!Configuration.HARDBLOCK_BLENDER_2_83_9);
+			allowBlender2_90_1.setVisible(!Configuration.HARDBLOCK_BLENDER_2_90_1);
+			allowBlender2_91_0.setVisible(!Configuration.HARDBLOCK_BLENDER_2_91_0);
+			allowBlender2_92_0.setVisible(!Configuration.HARDBLOCK_BLENDER_2_92_0);
+			if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+				allowUnknownRenderers.setVisible(false);
+			} else {
+				allowUnknownRenderers.setVisible(!Configuration.HARDBLOCK_UNKNOWN_RENDERERS);
+			}
+		} else {
+			allowBlender2_79b.setVisible(false);
+			allowBlender2_79b_filmic.setVisible(false);
+			allowBlender2_80.setVisible(false);
+			allowBlender2_81a.setVisible(false);
+			allowBlender2_82.setVisible(false);
+			allowBlender2_83_9.setVisible(false);
+			allowBlender2_90_1.setVisible(false);
+			allowBlender2_91_0.setVisible(false);
+			allowBlender2_92_0.setVisible(false);
+			allowUnknownRenderers.setVisible(false);
+		}
+		
 		currentRow++;
 		constraints.gridx = 0;
 		constraints.gridy = currentRow;
@@ -789,7 +847,10 @@ public class Settings implements Activit
 				parent.setSettingsLoader(
 						new SettingsLoader(config.getConfigFilePath(), login.getText(), new String(password.getPassword()), proxyText, hostnameText, method,
 								selected_gpu, renderbucket_size, cpu_cores, max_ram, max_rendertime, cachePath, autoSignIn.isSelected(), useSysTray.isSelected(),
-								GuiSwing.type, themeOptionsGroup.getSelection().getActionCommand(), priority.getValue()));
+								GuiSwing.type, themeOptionsGroup.getSelection().getActionCommand(), priority.getValue(), allowBlender2_79b.isSelected(),
+								allowBlender2_79b_filmic.isSelected(), allowBlender2_80.isSelected(), allowBlender2_81a.isSelected(), allowBlender2_82.isSelected(),
+								allowBlender2_83_9.isSelected(), allowBlender2_90_1.isSelected(), allowBlender2_91_0.isSelected(), allowBlender2_92_0.isSelected(),
+								allowUnknownRenderers.isSelected()));
 				
 				// wait for successful authentication (to store the public key)
 				// or do we already have one?
diff -urp client-v6.20364.0.orig/src/com/sheepit/client/standalone/Worker.java client-v6.20364.0/src/com/sheepit/client/standalone/Worker.java
--- client-v6.20364.0.orig/src/com/sheepit/client/standalone/Worker.java	2020-12-29 09:59:25.000000000 -0800
+++ client-v6.20364.0/src/com/sheepit/client/standalone/Worker.java	2021-04-30 21:14:26.466376923 -0700
@@ -110,6 +110,26 @@ public class Worker {
 	
 	@Option(name = "-hostname", usage = "Set a custom hostname name (name change will be lost when client is closed)", required = false) private String hostname = null;
 	
+	@Option(name = "--allow-blender-2_79b", usage = "Allow Blender 2.79b", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_79B || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_79b = false;
+	
+	@Option(name = "--allow-blender-2_79b_filmic", usage = "Allow Blender 2.79b (filmic)", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_79B_FILMIC || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_79b_filmic = false;
+	
+	@Option(name = "--allow-blender-2_80", usage = "Allow Blender 2.80", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_80 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_80 = false;
+	
+	@Option(name = "--allow-blender-2_81a", usage = "Allow Blender 2.81a", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_81A || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_81a = false;
+	
+	@Option(name = "--allow-blender-2_82", usage = "Allow Blender 2.82", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_82 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_82 = false;
+	
+	@Option(name = "--allow-blender-2_83_9", usage = "Allow Blender 2.83.9", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_83_9 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_83_9 = false;
+	
+	@Option(name = "--allow-blender-2_90_1", usage = "Allow Blender 2.90.1", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_90_1 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_90_1 = false;
+	
+	@Option(name = "--allow-blender-2_91_0", usage = "Allow Blender 2.91.0", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_91_0 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_91_0 = false;
+	
+	@Option(name = "--allow-blender-2_92_0", usage = "Allow Blender 2.92.0", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2_92_0 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2_92_0 = false;
+	
+	@Option(name = "--allow-unknown-renderers", usage = "Allow unknown renderers", required = false, hidden = Configuration.HARDBLOCK_UNKNOWN_RENDERERS || Configuration.USE_SYSTEM_RENDERERS || Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) private boolean allowUnknownRenderers = false;
+	
 	public static void main(String[] args) {
 		if (OS.getOS() == null) {
 			System.err.println(Error.humanString(Error.Type.OS_NOT_SUPPORTED));
@@ -427,6 +447,34 @@ public class Worker {
 			config.setConfigFilePath(config_file);
 		}
 		
+		if (!Configuration.USE_SYSTEM_RENDERERS) {
+			config.setAllowBlender2_79b(allowBlender2_79b);
+			config.setAllowBlender2_79b_filmic(allowBlender2_79b_filmic);
+			config.setAllowBlender2_80(allowBlender2_80);
+			config.setAllowBlender2_81a(allowBlender2_81a);
+			config.setAllowBlender2_82(allowBlender2_82);
+			config.setAllowBlender2_83_9(allowBlender2_83_9);
+			config.setAllowBlender2_90_1(allowBlender2_90_1);
+			config.setAllowBlender2_91_0(allowBlender2_91_0);
+			config.setAllowBlender2_92_0(allowBlender2_92_0);
+			if (!Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+				config.setAllowUnknownRenderers(allowUnknownRenderers);
+			} else {
+				config.setAllowUnknownRenderers(false);
+			}
+		} else {
+			config.setAllowBlender2_79b(!Configuration.HARDBLOCK_BLENDER_2_79B);
+			config.setAllowBlender2_79b_filmic(!Configuration.HARDBLOCK_BLENDER_2_79B_FILMIC);
+			config.setAllowBlender2_80(!Configuration.HARDBLOCK_BLENDER_2_80);
+			config.setAllowBlender2_81a(!Configuration.HARDBLOCK_BLENDER_2_81A);
+			config.setAllowBlender2_82(!Configuration.HARDBLOCK_BLENDER_2_82);
+			config.setAllowBlender2_83_9(!Configuration.HARDBLOCK_BLENDER_2_83_9);
+			config.setAllowBlender2_90_1(!Configuration.HARDBLOCK_BLENDER_2_90_1);
+			config.setAllowBlender2_91_0(!Configuration.HARDBLOCK_BLENDER_2_91_0);
+			config.setAllowBlender2_92_0(!Configuration.HARDBLOCK_BLENDER_2_92_0);
+			config.setAllowUnknownRenderers(false);
+		}
+		
 		new SettingsLoader(config_file).merge(config);
 		Log.getInstance(config).debug("client version " + config.getJarVersion());
 		
