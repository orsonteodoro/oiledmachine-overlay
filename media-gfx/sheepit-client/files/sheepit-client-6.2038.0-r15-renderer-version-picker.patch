Summary: Patch changes automatic opt-in to automatic opt-out policy for downloading
renderers (e.g. Blender).

This allows users to pick the degree of security mitigation.  It's recommended
to only allow the latest stable.

Change HARDBLOCK_BLENDER_ constants in src/com/sheepit/client/Configuration.java
to false to enforce hardcoded block otherwise end-user decides.

Also, this makes it so that it doesn't download renderers but use the system
provided renderers instead via the USE_SYSTEM_RENDERERS constants in both
in Configuration.java and Linux.java only for Linux currently.  You need to
mod it for other distros or operating systems.

Also, it changes the renderer sourcing.  This patch uses upstream sources, currently
Linux only supported.

Patch Author: Orson Teodoro <orsonteodoro@hotmail.com>
----
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/Client.java sheepit-client-6.2038.0/src/com/sheepit/client/Client.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/Client.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/Client.java	2020-09-30 04:09:39.874927539 -0700
@@ -19,9 +19,12 @@
 
 package com.sheepit.client;
 
+import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.util.ArrayList;
@@ -592,6 +595,7 @@ import lombok.Data;
 	}
 	
 	protected void sendError(int step_, Job job_to_reset_, Error.Type error) {
+		//this.disableErrorSending = true;
 		if (this.disableErrorSending) {
 			this.log.debug("Error sending is disabled, do not send log");
 			return;
@@ -704,7 +708,8 @@ import lombok.Data;
 		}
 	}
 	
-	public Error.Type work(final Job ajob) {
+//	public Error.Type work(final Job ajob) {
+	public Error.Type work(Job ajob) {
 		Error.Type downloadRet;
 		
 		gui.setRenderingProjectName(ajob.getName());
@@ -739,6 +744,8 @@ import lombok.Data;
 		final File scene_file = new File(ajob.getScenePath());
 		File renderer_file = new File(ajob.getRendererPath());
 		
+		this.log.debug("Client::work renderer_path: " + ajob.getRendererPath());
+		
 		if (scene_file.exists() == false) {
 			gui.setRenderingProjectName("");
 			this.log.error("Client::work job preparation failed (scene file '" + scene_file.getAbsolutePath()
@@ -786,10 +793,234 @@ import lombok.Data;
 		return this.downloadFile(ajob_, ajob_.getSceneArchivePath(), ajob_.getSceneMD5(),
 				String.format("%s?type=job&job=%s", this.server.getPage("download-archive"), ajob_.getId()), "project");
 	}
+
+	private boolean isUnknownRenderer(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_279B:
+			case Configuration.MD5_LINUX_X86_64_279B_FILMIC:
+			case Configuration.MD5_LINUX_X86_64_280:
+			case Configuration.MD5_LINUX_X86_64_281A:
+			case Configuration.MD5_LINUX_X86_64_282:
+			case Configuration.MD5_LINUX_X86_64_2831:
+			case Configuration.MD5_LINUX_X86_64_2832:
+			case Configuration.MD5_LINUX_X86_64_2836:
+			case Configuration.MD5_LINUX_X86_64_2900:
+			case Configuration.MD5_LINUX_X86_64_2901:
+				return false;
+			default:
+				break;
+		}
+		return true;
+	}
+
+	private boolean isRendererAllowed(String md5_renderer) {
+		if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_279B)) {
+			if (!this.configuration.getAllowBlender279b() || Configuration.HARDBLOCK_BLENDER_279B) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_279B_FILMIC)) {
+			if (!this.configuration.getAllowBlender279bFilmic() || Configuration.HARDBLOCK_BLENDER_279B_FILMIC) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_280)) {
+			if (!this.configuration.getAllowBlender280() || Configuration.HARDBLOCK_BLENDER_280) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_281A)) {
+			if (!this.configuration.getAllowBlender281a() || Configuration.HARDBLOCK_BLENDER_281A) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_282)) {
+			if (!this.configuration.getAllowBlender282() || Configuration.HARDBLOCK_BLENDER_282) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2831)) {
+			if (!this.configuration.getAllowBlender2831() || Configuration.HARDBLOCK_BLENDER_2831) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2832)) {
+			if (!this.configuration.getAllowBlender2832() || Configuration.HARDBLOCK_BLENDER_2832) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2836)) {
+			if (!this.configuration.getAllowBlender2836() || Configuration.HARDBLOCK_BLENDER_2836) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2900)) {
+			if (!this.configuration.getAllowBlender2900() || Configuration.HARDBLOCK_BLENDER_2900) {
+				return false;
+			}
+		} else if (md5_renderer.equals(Configuration.MD5_LINUX_X86_64_2901)) {
+			if (!this.configuration.getAllowBlender2901() || Configuration.HARDBLOCK_BLENDER_2901) {
+				return false;
+			}
+		} else {
+			if (!this.configuration.getAllowUnknownRenderers() || Configuration.HARDBLOCK_UNKNOWN_RENDERERS || Configuration.USE_SYSTEM_RENDERERS || (!Configuration.USE_SYSTEM_RENDERERS && Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG)) {
+				return false;
+			}
+		}
+		return true;
+	}
+	
+	private String getRendererName(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_279B:
+				return "Blender 2.79b";
+			case Configuration.MD5_LINUX_X86_64_279B_FILMIC:
+				return "Blender 2.79b (Filmic)";
+			case Configuration.MD5_LINUX_X86_64_280:
+				return "Blender 2.80";
+			case Configuration.MD5_LINUX_X86_64_281A:
+				return "Blender 2.81a";
+			case Configuration.MD5_LINUX_X86_64_282:
+				return "Blender 2.82";
+			case Configuration.MD5_LINUX_X86_64_2831:
+				return "Blender 2.83.1";
+			case Configuration.MD5_LINUX_X86_64_2832:
+				return "Blender 2.83.2";
+			case Configuration.MD5_LINUX_X86_64_2836:
+				return "Blender 2.83.6";
+			case Configuration.MD5_LINUX_X86_64_2900:
+				return "Blender 2.90.0";
+			case Configuration.MD5_LINUX_X86_64_2901:
+				return "Blender 2.90.1";
+			default:
+				break;
+		}
+		return "unknown renderer (md5: " + md5_renderer + ")";
+	}
+	
+	public static String downloadDotBlenderDotOrgExt(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_279B:
+			case Configuration.MD5_LINUX_X86_64_279B_FILMIC:
+			case Configuration.MD5_LINUX_X86_64_280:
+			case Configuration.MD5_LINUX_X86_64_281A:
+				return ".tar.bz2";
+			case Configuration.MD5_LINUX_X86_64_282:
+			case Configuration.MD5_LINUX_X86_64_2831:
+			case Configuration.MD5_LINUX_X86_64_2832:
+			case Configuration.MD5_LINUX_X86_64_2836:
+			case Configuration.MD5_LINUX_X86_64_2900:
+			case Configuration.MD5_LINUX_X86_64_2901:
+				return ".tar.xz";
+		}
+		return "";
+	}
+	
+	private String downloadDotBlenderDotOrgUrl(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_279B:
+			case Configuration.MD5_LINUX_X86_64_279B_FILMIC:
+				return "https://download.blender.org/release/Blender2.79/blender-2.79b-linux-glibc219-x86_64.tar.bz2";
+			case Configuration.MD5_LINUX_X86_64_280:
+				return "https://download.blender.org/release/Blender2.80/blender-2.80-linux-glibc217-x86_64.tar.bz2";
+			case Configuration.MD5_LINUX_X86_64_281A:
+				return "https://download.blender.org/release/Blender2.81/blender-2.81a-linux-glibc217-x86_64.tar.bz2";
+			case Configuration.MD5_LINUX_X86_64_282:
+				return "https://download.blender.org/release/Blender2.82/blender-2.82-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2831:
+				return "https://download.blender.org/release/Blender2.83/blender-2.83.1-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2832:
+				return "https://download.blender.org/release/Blender2.83/blender-2.83.2-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2836:
+				return "https://download.blender.org/release/Blender2.83/blender-2.83.6-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2900:
+				return "https://download.blender.org/release/Blender2.90/blender-2.90.0-linux64.tar.xz";
+			case Configuration.MD5_LINUX_X86_64_2901:
+				return "https://download.blender.org/release/Blender2.90/blender-2.90.1-linux64.tar.xz";
+		}
+		return "";
+	}
+	
+	public static String downloadDotBlenderDotOrgHash(String md5_renderer) {
+		switch (md5_renderer) {
+			case Configuration.MD5_LINUX_X86_64_279B:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_279B;
+			case Configuration.MD5_LINUX_X86_64_279B_FILMIC:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_279B;
+			case Configuration.MD5_LINUX_X86_64_280:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_280;
+			case Configuration.MD5_LINUX_X86_64_281A:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_281A;
+			case Configuration.MD5_LINUX_X86_64_282:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_282;
+			case Configuration.MD5_LINUX_X86_64_2831:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2831;
+			case Configuration.MD5_LINUX_X86_64_2832:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2832;
+			case Configuration.MD5_LINUX_X86_64_2836:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2836;
+			case Configuration.MD5_LINUX_X86_64_2900:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2900;
+			case Configuration.MD5_LINUX_X86_64_2901:
+				return Configuration.MD5_LINUX_X86_64_VANILLA_2901;
+		}
+		return "";
+	}
 	
 	protected Error.Type downloadExecutable(Job ajob) throws FermeExceptionNoSpaceLeftOnDevice {
-		return this.downloadFile(ajob, ajob.getRendererArchivePath(), ajob.getRendererMD5(),
-				String.format("%s?type=binary&job=%s", this.server.getPage("download-archive"), ajob.getId()), "renderer");
+		String renderer_md5 = ajob.getRendererMD5();
+		String renderer_archive_path = ajob.getRendererArchivePath();
+
+		if (Configuration.MD5_BENCHMARK_SCENE.equals(ajob.getSceneMD5())) {
+			// uses 2.83.6
+			this.log.debug("Client::downloadExecutable allowing " + getRendererName(renderer_md5) + " temporarly for 'check computer strength' test");
+		} else if (isRendererAllowed(ajob.getRendererMD5())) {
+			this.log.debug("Client::downloadExecutable allowing " + getRendererName(renderer_md5));
+		} else {
+			this.log.debug("Client::downloadExecutable blocking " + getRendererName(renderer_md5));
+			return Type.RENDERER_KILLED_BY_USER;
+		}
+
+		String md5 = "";
+		String url = "";
+
+		String md5_mod = "";
+		String url_mod = "";
+
+		if (Configuration.USE_SYSTEM_RENDERERS) {
+			String renderer_path = ajob.getRendererPath();
+			File renderer_path_file = new File(renderer_path);
+			if (renderer_path_file.exists()) {
+				return Type.OK;
+			} else {
+				return Type.RENDERER_KILLED_BY_USER;
+			}
+		} else if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+			md5 = downloadDotBlenderDotOrgHash(renderer_md5);
+			url = downloadDotBlenderDotOrgUrl(renderer_md5);
+			if (renderer_md5.equals(Configuration.MD5_LINUX_X86_64_279B_FILMIC)) {
+				md5_mod = Configuration.FILMIC_BLENDER_DL_f94ebab_URL;
+				url_mod = Configuration.MD5_FILMIC_BLENDER_DL_f94ebab;
+			}
+			if (url.equals("")) {
+				// Fallback or handled unknown renderer
+				md5 = renderer_md5;
+				url = renderer_archive_path;
+			}
+		} else {
+			md5 = renderer_md5;
+			url = renderer_archive_path;
+		}
+
+		if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS && renderer_md5.equals(Configuration.MD5_LINUX_X86_64_279B_FILMIC)) {
+			// Download the renderer
+			Error.Type ret1 = this.downloadFile(ajob, renderer_archive_path, md5, url, "renderer");
+			if (ret1 != Type.OK)
+				return ret1;
+			// Download the filmic mod
+			Error.Type ret2 = this.downloadFile(ajob, ajob.getCustomRendererArchivePath(md5, ".tar.gz"), md5_mod, url_mod, "renderer");
+			if (ret2 != Type.OK)
+				return ret2;
+		} else if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+			// Download the renderer
+			return this.downloadFile(ajob, renderer_archive_path, md5, url, "renderer");
+		} else {
+			return this.downloadFile(ajob, renderer_archive_path, renderer_md5,
+                                String.format("%s?type=binary&job=%s", this.server.getPage("download-archive"), ajob.getId()), "renderer");
+		}
+		return Type.OK;
 	}
 	
 	private Error.Type downloadFile(Job ajob, String local_path, String md5_server, String url, String download_type) throws FermeExceptionNoSpaceLeftOnDevice {
@@ -804,6 +1035,7 @@ import lombok.Data;
 		this.gui.status(String.format("Downloading %s", download_type), 0, 0);
 		
 		// must download the archive
+		this.log.debug("Client::downloadFile url: " + url + " local_path: " + local_path);
 		Error.Type ret = this.server.HTTPGetFile(url, local_path, this.gui, update_ui);
 		
 		if (ret == Type.RENDERER_KILLED_BY_SERVER || ret == Type.RENDERER_KILLED_BY_USER_OVER_TIME || ret == Type.RENDERER_KILLED_BY_USER) {
@@ -872,6 +1104,7 @@ import lombok.Data;
 		String renderer_archive = ajob.getRendererArchivePath();
 		String renderer_path = ajob.getRendererDirectory();
 		File renderer_path_file = new File(renderer_path);
+		File renderer_archive_file = new File(renderer_archive);
 		
 		if (renderer_path_file.exists()) {
 			// Directory already exists -> do nothing
@@ -881,14 +1114,69 @@ import lombok.Data;
 			// we create the directory
 			renderer_path_file.mkdir();
 			
-			// unzip the archive
-			ret = Utils.unzipFileIntoDirectory(renderer_archive, renderer_path, null, log);
-			if (ret != 0) {
-				this.log.error(
-						"Client::prepareWorkingDirectory, error(1) with Utils.unzipFileIntoDirectory(" + renderer_archive + ", " + renderer_path + ") returned "
-								+ ret);
-				this.gui.error(String.format("Unable to extract the renderer (error %d)", ret));
-				return -1;
+			if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+				Process p = null;
+				BufferedReader input = null;
+				String line;
+				try {
+					String [] cmd_unpack_renderer = {
+						"/bin/tar",
+						"--strip-components=1",
+						"-xvf",
+						renderer_archive,
+						"-C",
+						renderer_path
+					};
+					p = Runtime.getRuntime().exec(cmd_unpack_renderer);
+					input = new BufferedReader(new InputStreamReader(p.getInputStream()));
+					while ((line = input.readLine()) != null) {
+						System.out.println(line);
+					}
+					input.close();
+					input = null;
+					p.waitFor();
+					if (ajob.getRendererMD5().equals(Configuration.MD5_LINUX_X86_64_279B_FILMIC)) {
+						String filmic_archive = ajob.getCustomRendererArchivePath(Configuration.MD5_FILMIC_BLENDER_DL_f94ebab, ".tar.gz");
+						String [] cmd_unpack_filmic = {
+							"/bin/tar",
+							"--strip-components=1",
+							"-xvf",
+							filmic_archive,
+							"-C",
+							renderer_path + File.separator + "2.79" + File.separator + "datafiles" + File.separator + "colormanagement"
+						};
+						p = Runtime.getRuntime().exec(cmd_unpack_filmic);
+						input = new BufferedReader(new InputStreamReader(p.getInputStream()));
+						while ((line = input.readLine()) != null) {
+							System.out.println(line);
+						}
+						input.close();
+						input = null;
+						p.waitFor();
+					}
+				}
+				catch (Exception err) {
+					System.out.println("exception " + err);
+					err.printStackTrace();
+				} finally {
+					if (input != null) {
+						try {
+							input.close();
+							input = null;
+						} catch (IOException e) {
+						}
+					}
+				}
+			} else {
+				// unzip the archive
+				ret = Utils.unzipFileIntoDirectory(renderer_archive, renderer_path, null, log);
+				if (ret != 0) {
+					this.log.error(
+							"Client::prepareWorkingDirectory, error(1) with Utils.unzipFileIntoDirectory(" + renderer_archive + ", " + renderer_path + ") returned "
+									+ ret);
+					this.gui.error(String.format("Unable to extract the renderer (error %d)", ret));
+					return -1;
+				}
 			}
 			
 			try {
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/Configuration.java sheepit-client-6.2038.0/src/com/sheepit/client/Configuration.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/Configuration.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/Configuration.java	2020-09-30 04:07:29.189810861 -0700
@@ -68,6 +68,61 @@ import lombok.Data;
 	private String UIType;
 	private String hostname;
 	private String theme;
+	private boolean allowBlender279b;
+	private boolean allowBlender279bFilmic;
+	private boolean allowBlender280;
+	private boolean allowBlender281a;
+	private boolean allowBlender282;
+	private boolean allowBlender2831;
+	private boolean allowBlender2832;
+	private boolean allowBlender2836;
+	private boolean allowBlender2900;
+	private boolean allowBlender2901;
+	private boolean allowUnknownRenderers;
+	public static final boolean HARDBLOCK_BLENDER_279B = false;
+	public static final boolean HARDBLOCK_BLENDER_279B_FILMIC = false;
+	public static final boolean HARDBLOCK_BLENDER_280 = false;
+	public static final boolean HARDBLOCK_BLENDER_281A = false;
+	public static final boolean HARDBLOCK_BLENDER_282 = false;
+	public static final boolean HARDBLOCK_BLENDER_2831 = false;
+	public static final boolean HARDBLOCK_BLENDER_2832 = false;
+	public static final boolean HARDBLOCK_BLENDER_2836 = false;
+	public static final boolean HARDBLOCK_BLENDER_2900 = false;
+	public static final boolean HARDBLOCK_BLENDER_2901 = false;
+	public static final boolean HARDBLOCK_UNKNOWN_RENDERERS = false;
+	public static final boolean USE_SYSTEM_RENDERERS = true;
+	public static final boolean USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG = false;
+	public static final String SYSTEM_RENDERER_TYPE = "oiledmachine-overlay";
+
+	/* Hashes from modified tarballs from service */
+	public static final String MD5_LINUX_X86_64_279B = "3d0e05e7a43ae213eccf33c47b5900c5";
+	public static final String MD5_LINUX_X86_64_279B_FILMIC = "a6e995c16e72b9b0e2b3857fcf45a1d0";
+	public static final String MD5_LINUX_X86_64_280 = "20eb01cbdc8d21c85ef744816caa83ea";
+	public static final String MD5_LINUX_X86_64_281A = "f6120a679aa7c5e79f39751171f63eba";
+	public static final String MD5_LINUX_X86_64_282 = "8d254810f35d31d9aa988fb703e639c0";
+	public static final String MD5_LINUX_X86_64_2831 = "d6fed9e424851f58d5d2f6d05ae9d776";
+	public static final String MD5_LINUX_X86_64_2832 = "9df02fcf02fa02988e670c4c9ce2285d";
+	public static final String MD5_LINUX_X86_64_2836 = "542ca8ea03215a6444adfb168a4fb1a9";
+	public static final String MD5_LINUX_X86_64_2900 = "736ae3c99bae3482cde45623535d7149";
+	public static final String MD5_LINUX_X86_64_2901 = "05234503229a4660e428e8d227746d8d";
+
+	/* Hashes from downloads.blender.org tarballs */
+	public static final String MD5_LINUX_X86_64_VANILLA_279B = "099555c6c8cb16bfcc0745dd303d692c";
+	public static final String MD5_LINUX_X86_VANILLA_279B = "7fafed4d8a22f1e8a60e3b3d10babb7d";
+	public static final String MD5_LINUX_X86_64_VANILLA_280 = "6f8afe0326093e479cb5505a8c783336";
+	public static final String MD5_LINUX_X86_VANILLA_280 = "77c62e04a49e8284ef1474608d3a1b61";
+	public static final String MD5_LINUX_X86_64_VANILLA_281A = "bb6e03ef79d2d7273336f8cfcd5a3b3f";
+	public static final String MD5_LINUX_X86_64_VANILLA_282 = "a1ca369cab0ee19cc5eba1c06c5c40d5";
+	public static final String MD5_LINUX_X86_64_VANILLA_2831 = "3c8ada31170fe0b551ad39db746dfb70";
+	public static final String MD5_LINUX_X86_64_VANILLA_2832 = "96194bd9d0630686765d7c12d92fcaeb";
+	public static final String MD5_LINUX_X86_64_VANILLA_2836 = "3e18bcf8a63479d64b7d955aee907d93";
+	public static final String MD5_LINUX_X86_64_VANILLA_2900 = "0933e02bf26b56675e9b88ee4e8df956";
+	public static final String MD5_LINUX_X86_64_VANILLA_2901 = "38c75023edf4c11aff79459a82808a62";
+	public static final String MD5_BENCHMARK_SCENE = "db26b54689516484633b7d4855fb1567";
+
+	// Dated Jan 21, 2018
+	public static final String FILMIC_BLENDER_DL_f94ebab_URL = "https://github.com/sobotka/filmic-blender/archive/f94ebab8ad3ad917d3201230ebca1bc3a93b7c86.tar.gz";
+	public static final String MD5_FILMIC_BLENDER_DL_f94ebab = "5efedb0597fe15378808e847edaadab1";
 	
 	public Configuration(File cache_dir_, String login_, String password_) {
 		this.configFilePath = null;
@@ -98,6 +153,17 @@ import lombok.Data;
 		this.useSysTray = true;
 		this.UIType = null;
 		this.theme = null;
+		this.allowBlender279b = false;
+		this.allowBlender279bFilmic = false;
+		this.allowBlender280 = false;
+		this.allowBlender281a = false;
+		this.allowBlender282 = false;
+		this.allowBlender2831 = false;
+		this.allowBlender2832 = false;
+		this.allowBlender2836 = false;
+		this.allowBlender2900 = false;
+		this.allowBlender2901 = false;
+		this.allowUnknownRenderers = false;
 	}
 	
 	public String toString() {
@@ -309,4 +375,92 @@ import lombok.Data;
 		}
 		return false;
 	}
+	
+	public void setAllowBlender279b(boolean v) {
+		allowBlender279b = v;
+	}
+	
+	public boolean getAllowBlender279b() {
+		return allowBlender279b;
+	}
+	
+	public void setAllowBlender279bFilmic(boolean v) {
+		allowBlender279bFilmic = v;
+	}
+	
+	public boolean getAllowBlender279bFilmic() {
+		return allowBlender279bFilmic;
+	}
+	
+	public void setAllowBlender280(boolean v) {
+		allowBlender280 = v;
+	}
+	
+	public boolean getAllowBlender280() {
+		return allowBlender280;
+	}
+	
+	public void setAllowBlender281a(boolean v) {
+		allowBlender281a = v;
+	}
+	
+	public boolean getAllowBlender281a() {
+		return allowBlender281a;
+	}
+	
+	public void setAllowBlender282(boolean v) {
+		allowBlender282 = v;
+	}
+	
+	public boolean getAllowBlender282() {
+		return allowBlender282;
+	}
+	
+	public void setAllowBlender2831(boolean v) {
+		allowBlender2831 = v;
+	}
+	
+	public boolean getAllowBlender2831() {
+		return allowBlender2831;
+	}
+	
+	public void setAllowBlender2832(boolean v) {
+		allowBlender2832 = v;
+	}
+	
+	public boolean getAllowBlender2832() {
+		return allowBlender2832;
+	}
+	
+	public void setAllowBlender2836(boolean v) {
+		allowBlender2836 = v;
+	}
+	
+	public boolean getAllowBlender2836() {
+		return allowBlender2836;
+	}
+	
+	public void setAllowBlender2900(boolean v) {
+		allowBlender2900 = v;
+	}
+	
+	public boolean getAllowBlender2900() {
+		return allowBlender2900;
+	}
+	
+	public void setAllowBlender2901(boolean v) {
+		allowBlender2901 = v;
+	}
+	
+	public boolean getAllowBlender2901() {
+		return allowBlender2901;
+	}
+	
+	public void setAllowUnknownRenderers(boolean v) {
+		allowUnknownRenderers = v;
+	}
+	
+	public boolean getAllowUnknownRenderers() {
+		return allowUnknownRenderers;
+	}
 }
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/Job.java sheepit-client-6.2038.0/src/com/sheepit/client/Job.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/Job.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/Job.java	2020-09-30 04:07:29.189810861 -0700
@@ -138,15 +138,41 @@ import lombok.Getter;
 	}
 	
 	public String getRendererDirectory() {
-		return configuration.getWorkingDirectory().getAbsolutePath() + File.separator + rendererMD5;
+		if (configuration.USE_SYSTEM_RENDERERS) {
+			switch (rendererMD5) {
+				case Configuration.MD5_LINUX_X86_64_279B:
+				case Configuration.MD5_LINUX_X86_64_279B_FILMIC:
+				case Configuration.MD5_LINUX_X86_64_280:
+				case Configuration.MD5_LINUX_X86_64_281A:
+				case Configuration.MD5_LINUX_X86_64_282:
+				case Configuration.MD5_LINUX_X86_64_2831:
+				case Configuration.MD5_LINUX_X86_64_2832:
+				case Configuration.MD5_LINUX_X86_64_2836:
+				case Configuration.MD5_LINUX_X86_64_2900:
+				case Configuration.MD5_LINUX_X86_64_2901:
+					return "/usr/bin";
+			}
+		} else if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+			return configuration.getWorkingDirectory().getAbsolutePath() + File.separator + Client.downloadDotBlenderDotOrgHash(rendererMD5) ;
+		}
+		/* Upstream default */
+		return configuration.getWorkingDirectory().getAbsolutePath() + File.separator + rendererMD5 ;
 	}
 	
 	public String getRendererPath() {
-		return getRendererDirectory() + File.separator + OS.getOS().getRenderBinaryPath();
+		return getRendererDirectory() + File.separator + OS.getOS().getRenderBinaryPath(rendererMD5);
 	}
 	
 	public String getRendererArchivePath() {
-		return configuration.getStorageDir().getAbsolutePath() + File.separator + rendererMD5 + ".zip";
+		if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG && !Configuration.USE_SYSTEM_RENDERERS) {
+			return configuration.getStorageDir().getAbsolutePath() + File.separator + Client.downloadDotBlenderDotOrgHash(rendererMD5) + Client.downloadDotBlenderDotOrgExt(rendererMD5);
+		} else {
+			return configuration.getStorageDir().getAbsolutePath() + File.separator + rendererMD5 + ".zip";
+		}
+	}
+	
+	public String getCustomRendererArchivePath(String customMD5, String ext) {
+		return configuration.getStorageDir().getAbsolutePath() + File.separator + customMD5 + ext;
 	}
 	
 	public String getSceneDirectory() {
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/FreeBSD.java sheepit-client-6.2038.0/src/com/sheepit/client/os/FreeBSD.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/FreeBSD.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/FreeBSD.java	2020-09-30 04:07:29.189810861 -0700
@@ -42,7 +42,7 @@ public class FreeBSD extends OS {
 		return "freebsd";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "rend.exe";
 	}
 	
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Linux.java sheepit-client-6.2038.0/src/com/sheepit/client/os/Linux.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Linux.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/Linux.java	2020-09-30 04:07:29.189810861 -0700
@@ -28,6 +28,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Scanner;
 
+import com.sheepit.client.Configuration;
 import com.sheepit.client.Log;
 import com.sheepit.client.hardware.cpu.CPU;
 
@@ -43,8 +44,49 @@ public class Linux extends OS {
 		return "linux";
 	}
 	
-	@Override public String getRenderBinaryPath() {
-		return "rend.exe";
+	@Override public String getRenderBinaryPath(String rendererMD5) {
+		if (Configuration.USE_SYSTEM_RENDERERS) {
+			if (Configuration.SYSTEM_RENDERER_TYPE.equals("oiledmachine-overlay")) {
+				switch (rendererMD5) {
+					case Configuration.MD5_LINUX_X86_64_279B:
+						return "blender-2.79b";
+					case Configuration.MD5_LINUX_X86_64_279B_FILMIC:
+						return "blender-2.79b-filmic-sheepit";
+					case Configuration.MD5_LINUX_X86_64_280:
+						return "blender-2.80";
+					case Configuration.MD5_LINUX_X86_64_281A:
+						return "blender-2.81a";
+					case Configuration.MD5_LINUX_X86_64_282:
+						return "blender-2.82";
+					case Configuration.MD5_LINUX_X86_64_2831:
+						return "blender-2.83.1";
+					case Configuration.MD5_LINUX_X86_64_2832:
+						return "blender-2.83.2";
+					case Configuration.MD5_LINUX_X86_64_2836:
+						return "blender-2.83.6";
+					case Configuration.MD5_LINUX_X86_64_2900:
+						return "blender-2.90.0";
+					case Configuration.MD5_LINUX_X86_64_2901:
+						return "blender-2.90.1";
+					default:
+						return "rend.exe";
+				}
+			} else if (Configuration.SYSTEM_RENDERER_TYPE.equals("gentoo-overlay")) {
+				return "blender";
+			} else {
+				if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+					return "blender";
+				} else {
+					return "rend.exe";
+				}
+			}
+		} else {
+			if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+				return "blender";
+			} else {
+				return "rend.exe";
+			}
+		}
 	}
 	
 	@Override public CPU getCPU() {
@@ -152,18 +194,21 @@ public class Linux extends OS {
 		Map<String, String> new_env = new HashMap<String, String>();
 		new_env.putAll(java.lang.System.getenv()); // clone the env
 		
-		// if Blender is already loading an OpenGL library, don't need to load Blender's default one (it will
-		// create system incompatibilities). If no OpenGL library is found, then load the one included in the binary
-		// zip file
-		if (isOpenGLAlreadyInstalled(command.get(0)) == false) {
-			Boolean has_ld_library_path = new_env.containsKey("LD_LIBRARY_PATH");
-			
-			String lib_dir = (new File(command.get(0))).getParent() + File.separator + "lib";
-			if (has_ld_library_path == false) {
-				new_env.put("LD_LIBRARY_PATH", lib_dir);
-			}
-			else {
-				new_env.put("LD_LIBRARY_PATH", new_env.get("LD_LIBRARY_PATH") + ":" + lib_dir);
+		if (Configuration.USE_SYSTEM_RENDERERS == false) {
+			// if Blender is already loading an OpenGL library, don't need to load Blender's default one (it will
+			// create system incompatibilities). If no OpenGL library is found, then load the one included in the binary
+			// zip file
+			if (isOpenGLAlreadyInstalled(command.get(0)) == false) {
+				Boolean has_ld_library_path = new_env.containsKey("LD_LIBRARY_PATH");
+			
+				String lib_dir = (new File(command.get(0))).getParent() + File.separator + "lib";
+				System.err.println("Linux::exec lib_dir: " + lib_dir);
+				if (has_ld_library_path == false) {
+					new_env.put("LD_LIBRARY_PATH", lib_dir);
+				}
+				else {
+					new_env.put("LD_LIBRARY_PATH", new_env.get("LD_LIBRARY_PATH") + ":" + lib_dir);
+				}
 			}
 		}
 		
@@ -240,6 +285,7 @@ public class Linux extends OS {
 	}
 	
 	protected boolean isOpenGLAlreadyInstalled(String pathToRendEXE) {
+		System.err.println("Linux::isOpenGLAlreadyInstalled pathToRendEXE" + pathToRendEXE);
 		ProcessBuilder processBuilder = new ProcessBuilder();
 		processBuilder.command("bash", "-c", "ldd '" + pathToRendEXE + "'");    // support for paths with an space
 		processBuilder.redirectErrorStream(true);
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Mac.java sheepit-client-6.2038.0/src/com/sheepit/client/os/Mac.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Mac.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/Mac.java	2020-09-30 04:07:29.189810861 -0700
@@ -41,7 +41,7 @@ public class Mac extends OS {
 		return "mac";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "Blender" + File.separator + "blender.app" + File.separator + "Contents" + File.separator + "MacOS" + File.separator + "blender";
 	}
 	
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/OS.java sheepit-client-6.2038.0/src/com/sheepit/client/os/OS.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/OS.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/OS.java	2020-09-30 04:07:29.199811252 -0700
@@ -35,7 +35,7 @@ public abstract class OS {
 	
 	public abstract long getFreeMemory();
 	
-	public abstract String getRenderBinaryPath();
+	public abstract String getRenderBinaryPath(String rendererMD5);
 	
 	public String getCUDALib() {
 		return null;
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Windows.java sheepit-client-6.2038.0/src/com/sheepit/client/os/Windows.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/os/Windows.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/os/Windows.java	2020-09-30 04:07:29.199811252 -0700
@@ -37,7 +37,7 @@ public class Windows extends OS {
 		return "windows";
 	}
 	
-	@Override public String getRenderBinaryPath() {
+	@Override public String getRenderBinaryPath(String rendererMD5) {
 		return "rend.exe";
 	}
 	
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/SettingsLoader.java sheepit-client-6.2038.0/src/com/sheepit/client/SettingsLoader.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/SettingsLoader.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/SettingsLoader.java	2020-09-30 04:07:29.199811252 -0700
@@ -58,6 +58,17 @@ public class SettingsLoader {
 	private String ui;
 	private String theme;
 	private int priority;
+	private String allowBlender279b;
+	private String allowBlender279bFilmic;
+	private String allowBlender280;
+	private String allowBlender281a;
+	private String allowBlender282;
+	private String allowBlender2831;
+	private String allowBlender2832;
+	private String allowBlender2836;
+	private String allowBlender2900;
+	private String allowBlender2901;
+	private String allowUnknownRenderers;
 	
 	public SettingsLoader(String path_) {
 		if (path_ == null) {
@@ -70,7 +81,9 @@ public class SettingsLoader {
 	
 	public SettingsLoader(String path_, String login_, String password_, String proxy_, String hostname_, ComputeType computeMethod_, GPUDevice gpu_,
 		int renderbucketSize_, int cores_, long maxRam_, int maxRenderTime_, String cacheDir_, boolean autoSignIn_, boolean useSysTray_, String ui_,
-		String theme_, int priority_) {
+		String theme_, int priority_, boolean allowBlender279b_, boolean allowBlender279bFilmic_, boolean allowBlender280_,
+		boolean allowBlender281a_, boolean allowBlender282_, boolean allowBlender2831_, boolean allowBlender2832_, boolean allowBlender2836_, boolean allowBlender2900_,
+		boolean allowBlender2901_, boolean allowUnknownRenderers_) {
 		if (path_ == null) {
 			path = getDefaultFilePath();
 		}
@@ -87,6 +100,17 @@ public class SettingsLoader {
 		ui = ui_;
 		priority = priority_;
 		theme = theme_;
+		allowBlender279b = String.valueOf(allowBlender279b_);
+		allowBlender279bFilmic = String.valueOf(allowBlender279bFilmic_);
+		allowBlender280 = String.valueOf(allowBlender280_);
+		allowBlender281a = String.valueOf(allowBlender281a_);
+		allowBlender282 = String.valueOf(allowBlender282_);
+		allowBlender2831 = String.valueOf(allowBlender2831_);
+		allowBlender2832 = String.valueOf(allowBlender2832_);
+		allowBlender2836 = String.valueOf(allowBlender2836_);
+		allowBlender2900 = String.valueOf(allowBlender2900_);
+		allowBlender2901 = String.valueOf(allowBlender2901_);
+		allowUnknownRenderers = String.valueOf(allowUnknownRenderers_);
 		
 		if (cores_ > 0) {
 			cores = String.valueOf(cores_);
@@ -189,6 +213,98 @@ public class SettingsLoader {
 				prop.setProperty("theme", theme);
 			}
 			
+			if (allowBlender279b != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender279b", String.valueOf(!Configuration.HARDBLOCK_BLENDER_279B));
+				} else {
+					prop.setProperty("use-blender279b", allowBlender279b);
+				}
+			}
+			
+			if (allowBlender279bFilmic != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender279b-filmic", String.valueOf(!Configuration.HARDBLOCK_BLENDER_279B_FILMIC));
+				} else {
+					prop.setProperty("use-blender279b-filmic", allowBlender279bFilmic);
+				}
+			}
+			
+			if (allowBlender280 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender280", String.valueOf(!Configuration.HARDBLOCK_BLENDER_280));
+				} else {
+					prop.setProperty("use-blender280", allowBlender280);
+				}
+			}
+			
+			if (allowBlender281a != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender281a", String.valueOf(!Configuration.HARDBLOCK_BLENDER_281A));
+				} else {
+					prop.setProperty("use-blender281a", allowBlender281a);
+				}
+			}
+			
+			if (allowBlender282 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender282", String.valueOf(!Configuration.HARDBLOCK_BLENDER_282));
+				} else {
+					prop.setProperty("use-blender282", allowBlender282);
+				}
+			}
+			
+			if (allowBlender2831 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender2831", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2831));
+				} else {
+					prop.setProperty("use-blender2831", allowBlender2831);
+				}
+			}
+			
+			if (allowBlender2832 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender2832", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2832));
+				} else {
+					prop.setProperty("use-blender2832", allowBlender2832);
+				}
+			}
+			
+			if (allowBlender2836 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender2836", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2836));
+				} else {
+					prop.setProperty("use-blender2836", allowBlender2836);
+				}
+			}
+			
+			if (allowBlender2900 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender2900", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2900));
+				} else {
+					prop.setProperty("use-blender2900", allowBlender2900);
+				}
+			}
+			
+			if (allowBlender2901 != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-blender2901", String.valueOf(!Configuration.HARDBLOCK_BLENDER_2901));
+				} else {
+					prop.setProperty("use-blender2901", allowBlender2901);
+				}
+			}
+			
+			if (allowUnknownRenderers != null) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					prop.setProperty("use-unknown-renderers", String.valueOf(false));
+				} else {
+					if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+						prop.setProperty("use-unknown-renderers", String.valueOf(false));
+					} else {
+						prop.setProperty("use-unknown-renderers", allowUnknownRenderers);
+					}
+				}
+			}
+			
 			prop.store(output, null);
 		}
 		catch (IOException io) {
@@ -237,6 +353,17 @@ public class SettingsLoader {
 		this.ram = null;
 		this.renderTime = null;
 		this.theme = null;
+		this.allowBlender279b = null;
+		this.allowBlender279bFilmic = null;
+		this.allowBlender280 = null;
+		this.allowBlender281a = null;
+		this.allowBlender282 = null;
+		this.allowBlender2831 = null;
+		this.allowBlender2832 = null;
+		this.allowBlender2836 = null;
+		this.allowBlender2900 = null;
+		this.allowBlender2901 = null;
+		this.allowUnknownRenderers = null;
 		
 		if (new File(path).exists() == false) {
 			return;
@@ -315,6 +442,98 @@ public class SettingsLoader {
 			if (prop.containsKey("priority")) {
 				this.priority = Integer.parseInt(prop.getProperty("priority"));
 			}
+			
+			if (prop.containsKey("use-blender279b")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender279b = String.valueOf(!Configuration.HARDBLOCK_BLENDER_279B);
+				} else {
+					this.allowBlender279b = prop.getProperty("use-blender279b");
+				}
+			}
+			
+			if (prop.containsKey("use-blender279b-filmic")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender279bFilmic = String.valueOf(!Configuration.HARDBLOCK_BLENDER_279B_FILMIC);
+				} else {
+					this.allowBlender279bFilmic = prop.getProperty("use-blender279b-filmic");
+				}
+			}
+			
+			if (prop.containsKey("use-blender280")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender280 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_280);
+				} else {
+					this.allowBlender280 = prop.getProperty("use-blender280");
+				}
+			}
+			
+			if (prop.containsKey("use-blender281a")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender281a = String.valueOf(!Configuration.HARDBLOCK_BLENDER_281A);
+				} else {
+					this.allowBlender281a = prop.getProperty("use-blender281a");
+				}
+			}
+			
+			if (prop.containsKey("use-blender282")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender282 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_282);
+				} else {
+					this.allowBlender282 = prop.getProperty("use-blender282");
+				}
+			}
+			
+			if (prop.containsKey("use-blender2831")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2831 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2831);
+				} else {
+					this.allowBlender2831 = prop.getProperty("use-blender2831");
+				}
+			}
+			
+			if (prop.containsKey("use-blender2832")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2832 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2832);
+				} else {
+					this.allowBlender2832 = prop.getProperty("use-blender2832");
+				}
+			}
+			
+			if (prop.containsKey("use-blender2836")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2836 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2836);
+				} else {
+					this.allowBlender2836 = prop.getProperty("use-blender2836");
+				}
+			}
+			
+			if (prop.containsKey("use-blender2900")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2900 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2900);
+				} else {
+					this.allowBlender2900 = prop.getProperty("use-blender2900");
+				}
+			}
+			
+			if (prop.containsKey("use-blender2901")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowBlender2901 = String.valueOf(!Configuration.HARDBLOCK_BLENDER_2901);
+				} else {
+					this.allowBlender2901 = prop.getProperty("use-blender2901");
+				}
+			}
+			
+			if (prop.containsKey("use-unknown-renderers")) {
+				if (Configuration.USE_SYSTEM_RENDERERS) {
+					this.allowUnknownRenderers = String.valueOf(false);
+				} else {
+					if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+						this.allowUnknownRenderers = String.valueOf(false);
+					} else {
+						this.allowUnknownRenderers = prop.getProperty("use-unknown-renderers");
+					}
+				}
+			}
 		}
 		catch (IOException io) {
 			io.printStackTrace();
@@ -450,11 +669,27 @@ public class SettingsLoader {
 		}
 		
 		config.setAutoSignIn(Boolean.parseBoolean(autoSignIn));
+
+		config.setAllowBlender279b(Boolean.parseBoolean(allowBlender279b));
+		config.setAllowBlender279bFilmic(Boolean.parseBoolean(allowBlender279bFilmic));
+		config.setAllowBlender280(Boolean.parseBoolean(allowBlender280));
+		config.setAllowBlender281a(Boolean.parseBoolean(allowBlender281a));
+		config.setAllowBlender282(Boolean.parseBoolean(allowBlender282));
+		config.setAllowBlender2831(Boolean.parseBoolean(allowBlender2831));
+		config.setAllowBlender2832(Boolean.parseBoolean(allowBlender2832));
+		config.setAllowBlender2836(Boolean.parseBoolean(allowBlender2836));
+		config.setAllowBlender2900(Boolean.parseBoolean(allowBlender2900));
+		config.setAllowBlender2901(Boolean.parseBoolean(allowBlender2901));
+		config.setAllowUnknownRenderers(Boolean.parseBoolean(allowUnknownRenderers));
 	}
 	
 	@Override public String toString() {
 		return String.format(
-			"SettingsLoader [path=%s, login=%s, password=%s, computeMethod=%s, gpu=%s, renderbucket-size=%s, cacheDir=%s, theme=%s, priority=%d, autosign=%s, usetray=%s]",
-			path, login, password, computeMethod, gpu, renderbucketSize, cacheDir, theme, priority, autoSignIn, useSysTray);
+			"SettingsLoader [path=%s, login=%s, password=%s, computeMethod=%s, gpu=%s, renderbucket-size=%s, cacheDir=%s, theme=%s, priority=%d, autosign=%s, usetray=%s,"
+			+ " allowBlender279b=%s, allowBlender279bFilmic=%s, allowBlender280=%s, allowBlender281a=%s, allowBlender282=%s, allowBlender2831=%s,"
+			+ " allowBlender2832=%s, allowBlender2836=%s, allowBlender2900=%s, allowBlender2901=%s, allowUnknownRenderers=%s]",
+			path, login, password, computeMethod, gpu, renderbucketSize, cacheDir, theme, priority, autoSignIn, useSysTray,
+			allowBlender279b, allowBlender279bFilmic, allowBlender280, allowBlender281a, allowBlender282,
+			allowBlender2831, allowBlender2832, allowBlender2836, allowBlender2900, allowBlender2901, allowUnknownRenderers);
 	}
 }
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/standalone/swing/activity/Settings.java sheepit-client-6.2038.0/src/com/sheepit/client/standalone/swing/activity/Settings.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/standalone/swing/activity/Settings.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/standalone/swing/activity/Settings.java	2020-09-30 04:07:29.199811252 -0700
@@ -101,6 +101,17 @@ public class Settings implements Activit
 	
 	private JCheckBox saveFile;
 	private JCheckBox autoSignIn;
+	private JCheckBox allowBlender279b;
+	private JCheckBox allowBlender279bFilmic;
+	private JCheckBox allowBlender280;
+	private JCheckBox allowBlender281a;
+	private JCheckBox allowBlender282;
+	private JCheckBox allowBlender2831;
+	private JCheckBox allowBlender2832;
+	private JCheckBox allowBlender2836;
+	private JCheckBox allowBlender2900;
+	private JCheckBox allowBlender2901;
+	private JCheckBox allowUnknownRenderers;
 	JButton saveButton;
 	
 	private boolean haveAutoStarted;
@@ -481,15 +492,67 @@ public class Settings implements Activit
 		advanced_panel.add(hostname);
 		
 		JLabel renderTimeLabel = new JLabel("Max time per frame (in minute):");
+		allowBlender279b = new JCheckBox("Allow Blender 2.79b", parent.getConfiguration().getAllowBlender279b());
+		allowBlender279bFilmic = new JCheckBox("Allow Blender 2.79b (filmic)", parent.getConfiguration().getAllowBlender279bFilmic());
+		allowBlender280 = new JCheckBox("Allow Blender 2.80", parent.getConfiguration().getAllowBlender280());
+		allowBlender281a = new JCheckBox("Allow Blender 2.81a", parent.getConfiguration().getAllowBlender281a());
+		allowBlender282 = new JCheckBox("Allow Blender 2.82", parent.getConfiguration().getAllowBlender282());
+		allowBlender2831 = new JCheckBox("Allow Blender 2.83.1", parent.getConfiguration().getAllowBlender2831());
+		allowBlender2832 = new JCheckBox("Allow Blender 2.83.2", parent.getConfiguration().getAllowBlender2832());
+		allowBlender2836 = new JCheckBox("Allow Blender 2.83.6", parent.getConfiguration().getAllowBlender2836());
+		allowBlender2900 = new JCheckBox("Allow Blender 2.90.0", parent.getConfiguration().getAllowBlender2900());
+		allowBlender2901 = new JCheckBox("Allow Blender 2.90.1", parent.getConfiguration().getAllowBlender2901());
+		allowUnknownRenderers = new JCheckBox("Allow unknown renderers", parent.getConfiguration().getAllowUnknownRenderers());
 		int val = 0;
 		if (parent.getConfiguration().getMaxRenderTime() > 0) {
 			val = parent.getConfiguration().getMaxRenderTime() / 60;
 		}
 		renderTime = new JSpinner(new SpinnerNumberModel(val, 0, 1000, 1));
 		
+		advanced_panel.add(allowBlender279b);
+		advanced_panel.add(allowBlender279bFilmic);
+		advanced_panel.add(allowBlender280);
+		advanced_panel.add(allowBlender281a);
+		advanced_panel.add(allowBlender282);
+		advanced_panel.add(allowBlender2831);
+		advanced_panel.add(allowBlender2832);
+		advanced_panel.add(allowBlender2836);
+		advanced_panel.add(allowBlender2900);
+		advanced_panel.add(allowBlender2901);
+		advanced_panel.add(allowUnknownRenderers);
 		advanced_panel.add(renderTimeLabel);
 		advanced_panel.add(renderTime);
 		
+		if (!Configuration.USE_SYSTEM_RENDERERS) {
+			allowBlender279b.setVisible(!Configuration.HARDBLOCK_BLENDER_279B);
+			allowBlender279bFilmic.setVisible(!Configuration.HARDBLOCK_BLENDER_279B_FILMIC);
+			allowBlender280.setVisible(!Configuration.HARDBLOCK_BLENDER_280);
+			allowBlender281a.setVisible(!Configuration.HARDBLOCK_BLENDER_281A);
+			allowBlender282.setVisible(!Configuration.HARDBLOCK_BLENDER_282);
+			allowBlender2831.setVisible(!Configuration.HARDBLOCK_BLENDER_2831);
+			allowBlender2832.setVisible(!Configuration.HARDBLOCK_BLENDER_2832);
+			allowBlender2836.setVisible(!Configuration.HARDBLOCK_BLENDER_2836);
+			allowBlender2900.setVisible(!Configuration.HARDBLOCK_BLENDER_2900);
+			allowBlender2901.setVisible(!Configuration.HARDBLOCK_BLENDER_2901);
+			if (Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+				allowUnknownRenderers.setVisible(false);
+			} else {
+				allowUnknownRenderers.setVisible(!Configuration.HARDBLOCK_UNKNOWN_RENDERERS);
+			}
+		} else {
+			allowBlender279b.setVisible(false);
+			allowBlender279bFilmic.setVisible(false);
+			allowBlender280.setVisible(false);
+			allowBlender281a.setVisible(false);
+			allowBlender282.setVisible(false);
+			allowBlender2831.setVisible(false);
+			allowBlender2832.setVisible(false);
+			allowBlender2836.setVisible(false);
+			allowBlender2900.setVisible(false);
+			allowBlender2901.setVisible(false);
+			allowUnknownRenderers.setVisible(false);
+		}
+		
 		currentRow++;
 		constraints.gridx = 0;
 		constraints.gridy = currentRow;
@@ -787,7 +850,10 @@ public class Settings implements Activit
 				parent.setSettingsLoader(
 						new SettingsLoader(config.getConfigFilePath(), login.getText(), new String(password.getPassword()), proxyText, hostnameText, method,
 								selected_gpu, renderbucket_size, cpu_cores, max_ram, max_rendertime, cachePath, autoSignIn.isSelected(), useSysTray.isSelected(),
-								GuiSwing.type, themeOptionsGroup.getSelection().getActionCommand(), priority.getValue()));
+								GuiSwing.type, themeOptionsGroup.getSelection().getActionCommand(), priority.getValue(), allowBlender279b.isSelected(),
+								allowBlender279bFilmic.isSelected(), allowBlender280.isSelected(), allowBlender281a.isSelected(), allowBlender282.isSelected(),
+								allowBlender2831.isSelected(), allowBlender2832.isSelected(), allowBlender2836.isSelected(), allowBlender2900.isSelected(),
+								allowBlender2901.isSelected(), allowUnknownRenderers.isSelected()));
 				
 				// wait for successful authentication (to store the public key)
 				// or do we already have one?
diff -urp sheepit-client-6.2038.0.orig/src/com/sheepit/client/standalone/Worker.java sheepit-client-6.2038.0/src/com/sheepit/client/standalone/Worker.java
--- sheepit-client-6.2038.0.orig/src/com/sheepit/client/standalone/Worker.java	2020-09-12 02:12:54.000000000 -0700
+++ sheepit-client-6.2038.0/src/com/sheepit/client/standalone/Worker.java	2020-09-30 04:07:29.199811252 -0700
@@ -106,6 +106,28 @@ public class Worker {
 	
 	@Option(name = "-hostname", usage = "Set a custom hostname name (name change will be lost when client is closed)", required = false) private String hostname = null;
 	
+	@Option(name = "--allow-blender279b", usage = "Allow Blender 2.79b", required = false, hidden = Configuration.HARDBLOCK_BLENDER_279B || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender279b = false;
+	
+	@Option(name = "--allow-blender279b-filmic", usage = "Allow Blender 2.79b (filmic)", required = false, hidden = Configuration.HARDBLOCK_BLENDER_279B_FILMIC || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender279bFilmic = false;
+	
+	@Option(name = "--allow-blender280", usage = "Allow Blender 2.80", required = false, hidden = Configuration.HARDBLOCK_BLENDER_280 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender280 = false;
+	
+	@Option(name = "--allow-blender281a", usage = "Allow Blender 2.81a", required = false, hidden = Configuration.HARDBLOCK_BLENDER_281A || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender281a = false;
+	
+	@Option(name = "--allow-blender282", usage = "Allow Blender 2.82", required = false, hidden = Configuration.HARDBLOCK_BLENDER_282 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender282 = false;
+	
+	@Option(name = "--allow-blender2831", usage = "Allow Blender 2.83.1", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2831 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2831 = false;
+	
+	@Option(name = "--allow-blender2832", usage = "Allow Blender 2.83.2", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2832 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2832 = false;
+	
+	@Option(name = "--allow-blender2836", usage = "Allow Blender 2.83.6", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2836 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2836 = false;
+	
+	@Option(name = "--allow-blender2900", usage = "Allow Blender 2.90.0", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2900 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2900 = false;
+	
+	@Option(name = "--allow-blender2901", usage = "Allow Blender 2.90.1", required = false, hidden = Configuration.HARDBLOCK_BLENDER_2901 || Configuration.USE_SYSTEM_RENDERERS) private boolean allowBlender2901 = false;
+	
+	@Option(name = "--allow-unknown-renderers", usage = "Allow unknown renderers", required = false, hidden = Configuration.HARDBLOCK_UNKNOWN_RENDERERS || Configuration.USE_SYSTEM_RENDERERS || Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) private boolean allowUnknownRenderers = false;
+	
 	public static void main(String[] args) {
 		new Worker().doMain(args);
 	}
@@ -395,6 +417,36 @@ public class Worker {
 			config.setConfigFilePath(config_file);
 		}
 		
+		if (!Configuration.USE_SYSTEM_RENDERERS) {
+			config.setAllowBlender279b(allowBlender279b);
+			config.setAllowBlender279bFilmic(allowBlender279bFilmic);
+			config.setAllowBlender280(allowBlender280);
+			config.setAllowBlender281a(allowBlender281a);
+			config.setAllowBlender282(allowBlender282);
+			config.setAllowBlender2831(allowBlender2831);
+			config.setAllowBlender2832(allowBlender2832);
+			config.setAllowBlender2836(allowBlender2836);
+			config.setAllowBlender2900(allowBlender2900);
+			config.setAllowBlender2901(allowBlender2901);
+			if (!Configuration.USE_ONLY_DOWNLOAD_DOT_BLENDER_DOT_ORG) {
+				config.setAllowUnknownRenderers(allowUnknownRenderers);
+			} else {
+				config.setAllowUnknownRenderers(false);
+			}
+		} else {
+			config.setAllowBlender279b(!Configuration.HARDBLOCK_BLENDER_279B);
+			config.setAllowBlender279bFilmic(!Configuration.HARDBLOCK_BLENDER_279B_FILMIC);
+			config.setAllowBlender280(!Configuration.HARDBLOCK_BLENDER_280);
+			config.setAllowBlender281a(!Configuration.HARDBLOCK_BLENDER_281A);
+			config.setAllowBlender282(!Configuration.HARDBLOCK_BLENDER_282);
+			config.setAllowBlender2831(!Configuration.HARDBLOCK_BLENDER_2831);
+			config.setAllowBlender2832(!Configuration.HARDBLOCK_BLENDER_2832);
+			config.setAllowBlender2836(!Configuration.HARDBLOCK_BLENDER_2836);
+			config.setAllowBlender2900(!Configuration.HARDBLOCK_BLENDER_2900);
+			config.setAllowBlender2901(!Configuration.HARDBLOCK_BLENDER_2901);
+			config.setAllowUnknownRenderers(false);
+		}
+		
 		new SettingsLoader(config_file).merge(config);
 		Log.getInstance(config).debug("client version " + config.getJarVersion());
 		
