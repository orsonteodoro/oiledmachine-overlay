Subject:  Multiple updates to Cycles Network support.

Updates to Cycles Network support for GCC 9.3.0.

Fixes to build time failures introduced by "Code refactor: device memory
cleanups, preparing for mapped host memory"
(5801ef71e40bc932c69e67f06076cd8b41132e52).

Extended removal of max_closure to Cycles Network support based on "Cycles:
Replace __MAX_CLOSURE__ build option with runtime integrator variable"
(087331c495b04ebd37903c0dc0e46262354cf026).

Patch Author:  Orson Teodoro <orsonteodoro@hotmail.com>
diff -urp blender-2.82a.orig/intern/cycles/app/cycles_server.cpp blender-2.82a/intern/cycles/app/cycles_server.cpp
--- blender-2.82a.orig/intern/cycles/app/cycles_server.cpp	2020-03-09 08:53:47.000000000 -0700
+++ blender-2.82a/intern/cycles/app/cycles_server.cpp	2020-07-07 16:50:23.282966473 -0700
@@ -21,6 +21,7 @@
 #include "util/util_args.h"
 #include "util/util_foreach.h"
 #include "util/util_path.h"
+#include "util/util_profiling.h"
 #include "util/util_stats.h"
 #include "util/util_string.h"
 #include "util/util_task.h"
@@ -39,7 +40,7 @@ int main(int argc, const char **argv)
   bool list = false, debug = false;
   int threads = 0, verbosity = 1;
 
-  vector<DeviceType> &types = Device::available_types();
+  const vector<DeviceType> &types = Device::available_types();
 
   foreach (DeviceType type, types) {
     if (devicelist != "")
@@ -83,11 +84,11 @@ int main(int argc, const char **argv)
   }
 
   if (list) {
-    vector<DeviceInfo> &devices = Device::available_devices();
+    const vector<DeviceInfo> &devices = Device::available_devices();
 
     printf("Devices:\n");
 
-    foreach (DeviceInfo &info, devices) {
+    foreach (const DeviceInfo &info, devices) {
       printf("    %s%s\n", info.description.c_str(), (info.display_device) ? " (display)" : "");
     }
 
@@ -96,10 +97,10 @@ int main(int argc, const char **argv)
 
   /* find matching device */
   DeviceType device_type = Device::type_from_string(devicename.c_str());
-  vector<DeviceInfo> &devices = Device::available_devices();
+  const vector<DeviceInfo> &devices = Device::available_devices();
   DeviceInfo device_info;
 
-  foreach (DeviceInfo &device, devices) {
+  foreach (const DeviceInfo &device, devices) {
     if (device_type == device.type) {
       device_info = device;
       break;
@@ -110,7 +111,8 @@ int main(int argc, const char **argv)
 
   while (1) {
     Stats stats;
-    Device *device = Device::create(device_info, stats, true);
+    Profiler profiler;
+    Device *device = Device::create(device_info, stats, profiler, true);
     printf("Cycles Server with device: %s\n", device->info.description.c_str());
     device->server_run();
     delete device;
diff -urp blender-2.82a.orig/intern/cycles/device/device_network.cpp blender-2.82a/intern/cycles/device/device_network.cpp
--- blender-2.82a.orig/intern/cycles/device/device_network.cpp	2020-03-09 08:53:47.000000000 -0700
+++ blender-2.82a/intern/cycles/device/device_network.cpp	2020-07-07 16:49:50.599678642 -0700
@@ -184,7 +184,6 @@ class NetworkDevice : public Device {
 
     RPCSend snd(socket, &error_func, "load_kernels");
     snd.add(requested_features.experimental);
-    snd.add(requested_features.max_closure);
     snd.add(requested_features.max_nodes_group);
     snd.add(requested_features.nodes_features);
     snd.write();
@@ -505,7 +504,7 @@ class DeviceServer {
 
       DataVector &data_v = data_vector_find(client_pointer);
 
-      mem.host_pointer = (device_ptr) & (data_v[0]);
+      mem.host_pointer = (void *)&(data_v[0]);
 
       device->mem_copy_from(mem, y, w, h, elem);
 
@@ -536,7 +535,7 @@ class DeviceServer {
       else {
         /* Allocate host side data buffer. */
         DataVector &data_v = data_vector_insert(client_pointer, data_size);
-        mem.host_pointer = (void *) ? (device_ptr) & (data_v[0]) : 0;
+        mem.host_pointer = (data_size) ? (void *)&(data_v[0]) : 0;
       }
 
       /* Zero memory. */
@@ -576,7 +575,6 @@ class DeviceServer {
     else if (rcv.name == "load_kernels") {
       DeviceRequestedFeatures requested_features;
       rcv.read(requested_features.experimental);
-      rcv.read(requested_features.max_closure);
       rcv.read(requested_features.max_nodes_group);
       rcv.read(requested_features.nodes_features);
 
