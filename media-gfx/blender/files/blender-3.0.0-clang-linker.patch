--- a/build_files/cmake/platform/platform_unix.cmake.orig	2021-10-27 11:46:25.000000000 -0700
+++ b/build_files/cmake/platform/platform_unix.cmake	2022-01-26 16:45:52.285027962 -0800
@@ -647,24 +647,7 @@ endif()
 # ----------------------------------------------------------------------------
 # Compilers
 
-# GNU Compiler
-if(CMAKE_COMPILER_IS_GNUCC)
-  # ffp-contract=off:
-  # Automatically turned on when building with "-march=native". This is
-  # explicitly turned off here as it will make floating point math give a bit
-  # different results. This will lead to automated test failures. So disable
-  # this until we support it. Seems to default to off in clang and the intel
-  # compiler.
-  set(PLATFORM_CFLAGS "-pipe -fPIC -funsigned-char -fno-strict-aliasing -ffp-contract=off")
-
-  # `maybe-uninitialized` is unreliable in release builds, but fine in debug builds.
-  set(GCC_EXTRA_FLAGS_RELEASE "-Wno-maybe-uninitialized")
-  set(CMAKE_C_FLAGS_RELEASE          "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}")
-  set(CMAKE_C_FLAGS_RELWITHDEBINFO   "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
-  set(CMAKE_CXX_FLAGS_RELEASE        "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS_RELEASE}")
-  string(PREPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO "${GCC_EXTRA_FLAGS_RELEASE} ")
-  unset(GCC_EXTRA_FLAGS_RELEASE)
-
+if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES "Clang")
   if(WITH_LINKER_GOLD)
     execute_process(
       COMMAND ${CMAKE_C_COMPILER} -fuse-ld=gold -Wl,--version
@@ -690,7 +673,25 @@ if(CMAKE_COMPILER_IS_GNUCC)
     endif()
     unset(LD_VERSION)
   endif()
+endif()
 
+# GNU Compiler
+if(CMAKE_COMPILER_IS_GNUCC)
+  # ffp-contract=off:
+  # Automatically turned on when building with "-march=native". This is
+  # explicitly turned off here as it will make floating point math give a bit
+  # different results. This will lead to automated test failures. So disable
+  # this until we support it. Seems to default to off in clang and the intel
+  # compiler.
+  set(PLATFORM_CFLAGS "-pipe -fPIC -funsigned-char -fno-strict-aliasing -ffp-contract=off")
+
+  # `maybe-uninitialized` is unreliable in release builds, but fine in debug builds.
+  set(GCC_EXTRA_FLAGS_RELEASE "-Wno-maybe-uninitialized")
+  set(CMAKE_C_FLAGS_RELEASE          "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELEASE}")
+  set(CMAKE_C_FLAGS_RELWITHDEBINFO   "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_C_FLAGS_RELWITHDEBINFO}")
+  set(CMAKE_CXX_FLAGS_RELEASE        "${GCC_EXTRA_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS_RELEASE}")
+  string(PREPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO "${GCC_EXTRA_FLAGS_RELEASE} ")
+  unset(GCC_EXTRA_FLAGS_RELEASE)
 # CLang is the same as GCC for now.
 elseif(CMAKE_C_COMPILER_ID MATCHES "Clang")
   set(PLATFORM_CFLAGS "-pipe -fPIC -funsigned-char -fno-strict-aliasing")
--- a/CMakeLists.txt.orig	2022-01-26 16:43:46.401053993 -0800
+++ b/CMakeLists.txt	2022-01-26 16:47:13.518238676 -0800
@@ -549,6 +549,11 @@ if(CMAKE_COMPILER_IS_GNUCC)
   mark_as_advanced(WITH_LINKER_GOLD)
   option(WITH_LINKER_LLD "Use ld.lld linker which is usually faster than ld.gold" OFF)
   mark_as_advanced(WITH_LINKER_LLD)
+elseif(CMAKE_C_COMPILER_ID MATCHES "Clang")
+  option(WITH_LINKER_GOLD "Use ld.gold linker which is usually faster than ld.bfd" OFF)
+  mark_as_advanced(WITH_LINKER_GOLD)
+  option(WITH_LINKER_LLD "Use ld.lld linker which is usually faster than ld.gold" ON)
+  mark_as_advanced(WITH_LINKER_LLD)
 endif()
 
 option(WITH_COMPILER_ASAN "Build and link against address sanitizer (only for Debug & RelWithDebInfo targets)." OFF)
