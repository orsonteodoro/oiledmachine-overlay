# Backport to 1.40.1

# Commit from
# https://github.com/emscripten-core/emscripten/commit/78a56183e22b08b789f76c1f3143dc28b367f09c

# Fixes:
CMake Error at /usr/share/emscripten-1.39.20/cmake/Modules/Platform/Emscripten.cmake:131 (message):
  Failed to fetch compiler version information with command
  "'/usr/share/emscripten-1.39.20/emcc' -v"! Process returned with error code
  1.
Call Stack (most recent call first):
  /usr/share/cmake/Modules/CMakeDetermineSystem.cmake:124 (include)
  CMakeLists.txt:37 (project)

It happens with EMCC_CFLAGS="-stdlib=libc++".

diff -urp emscripten-1.40.1.orig/emcc.py emscripten-1.40.1/emcc.py
--- emscripten-1.40.1.orig/emcc.py	2020-08-01 07:45:03.000000000 -0700
+++ emscripten-1.40.1/emcc.py	2023-01-02 19:01:31.201994416 -0800
@@ -747,6 +747,21 @@ run_via_emxx = False
 # Main run() function
 #
 def run(args):
+  if run_via_emxx:
+    clang = shared.CLANG_CXX
+  else:
+    clang = shared.CLANG_CC
+
+  # Special case the handling of `-v` because it has a special/different meaning
+  # when used with no other arguments.  In particular, we must handle this early
+  # on, before we inject EMCC_CFLAGS.  This is because tools like cmake and
+  # autoconf will run `emcc -v` to determine the compiler version and we don't
+  # want that to break for users of EMCC_CFLAGS.
+  if len(args) == 2 and args[1] == '-v':
+    # autoconf likes to see 'GNU' in the output to enable shared object support
+    print(version_string(), file=sys.stderr)
+    return shared.check_call([clang, '-v'] + get_clang_flags(), check=False).returncode
+
   global final
   target = None
 
@@ -760,6 +775,7 @@ def run(args):
     logger.warning('invocation: ' + cmd + '  (in ' + os.getcwd() + ')')
   if EMCC_CFLAGS:
     args.extend(shlex.split(EMCC_CFLAGS))
+    args += shlex.split(EMCC_CFLAGS)
 
   # Strip args[0] (program name)
   args = args[1:]
@@ -809,18 +825,6 @@ There is NO warranty; not even for MERCH
   ''' % (shared.EMSCRIPTEN_VERSION, revision))
     return 0
 
-  if run_via_emxx:
-    clang = shared.CLANG_CXX
-  else:
-    clang = shared.CLANG_CC
-
-  if len(args) == 1 and args[0] == '-v': # -v with no inputs
-    # autoconf likes to see 'GNU' in the output to enable shared object support
-    print('emcc (Emscripten gcc/clang-like replacement + linker emulating GNU ld) %s' % shared.EMSCRIPTEN_VERSION, file=sys.stderr)
-    code = run_process([clang, '-v'], check=False).returncode
-    shared.check_sanity(force=True)
-    return code
-
   shared.check_sanity(force=DEBUG)
 
   if '-dumpmachine' in args:
Only in emscripten-1.40.1: emcc.py.orig
Only in emscripten-1.40.1: emcc.py.rej
diff -urp emscripten-1.40.1.orig/tests/test_other.py emscripten-1.40.1/tests/test_other.py
--- emscripten-1.40.1.orig/tests/test_other.py	2020-08-01 07:45:03.000000000 -0700
+++ emscripten-1.40.1/tests/test_other.py	2023-01-02 18:59:49.765979289 -0800
@@ -204,6 +204,10 @@ class other(RunnerCore):
       os.close(master)
       os.close(slave)
 
+  # Test that running `emcc -v` always works even in the presence of `EMCC_CFLAGS`.
+  # This needs to work because many tools run `emcc -v` internally and it should
+  # always work even if the user has `EMCC_CFLAGS` set.
+  @with_env_modify({'EMCC_CFLAGS': '-should -be -ignored'})
   def test_emcc_v(self):
     for compiler in [EMCC, EMXX]:
       # -v, without input files
Only in emscripten-1.40.1/tests: test_other.py.orig
