diff -urp rocprofiler-rocm-5.5.1.orig/bin/build_kernel.sh rocprofiler-rocm-5.5.1/bin/build_kernel.sh
--- rocprofiler-rocm-5.5.1.orig/bin/build_kernel.sh	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/bin/build_kernel.sh	2023-09-28 21:50:35.799768126 -0700
@@ -18,7 +18,7 @@ if [ -z "$DST_DIR" ] ; then
 fi
 
 if [ -z "$ROCM_DIR" ] ; then
-  ROCM_DIR=/opt/rocm
+  ROCM_DIR="@EPREFIX_ROCM_PATH@"
 fi
 
 if [ -z "$TGT_LIST" ] ; then
@@ -32,12 +32,12 @@ fi
 
 OCL_VER="2.0"
 
-if [ -e $ROCM_DIR/llvm ] ; then
-  LLVM_DIR=$ROCM_DIR/llvm
-  LIB_DIR=$ROCM_DIR/lib
+if [ -e @EPREFIX_LLVM_PATH@ ] ; then
+  LLVM_DIR=@EPREFIX_LLVM_PATH@
+  LIB_DIR=$ROCM_DIR/@LIBDIR@
 else
   LLVM_DIR=$ROCM_DIR/hcc
-  LIB_DIR=$LLVM_DIR/lib
+  LIB_DIR=$LLVM_DIR/@LIBDIR@
 fi
 
 # Determine whether using new or old device-libs layout
@@ -45,6 +45,8 @@ if [ -e $LIB_DIR/bitcode/opencl.amdgcn.b
   BC_DIR=$LIB_DIR/bitcode
 elif [ -e $LIB_DIR/opencl.amdgcn.bc ]; then
   BC_DIR=$LIB_DIR
+elif [ -e $ROCM_DIR/@LIBDIR@/amdgcn/bitcode/opencl.bc ]; then
+  BC_DIR=$ROCM_DIR/@LIBDIR@/amdgcn/bitcode
 elif [ -e $ROCM_DIR/amdgcn/bitcode/opencl.bc ]; then
   BC_DIR=$ROCM_DIR/amdgcn/bitcode
 else
@@ -52,7 +54,7 @@ else
   exit 1
 fi
 
-CLANG_ROOT=$LLVM_DIR/lib/clang
+CLANG_ROOT=@EPREFIX_CLANG_PATH@
 CLANG_DIR=`ls -d $CLANG_ROOT/* | head -n 1`
 if [ "$CLANG_DIR" = "" ] ; then
   echo "Error: LLVM clang library was not found"
diff -urp rocprofiler-rocm-5.5.1.orig/bin/rocprofv2 rocprofiler-rocm-5.5.1/bin/rocprofv2
--- rocprofiler-rocm-5.5.1.orig/bin/rocprofv2	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/bin/rocprofv2	2023-09-28 21:50:35.799768126 -0700
@@ -111,8 +111,8 @@ while [ 1 ] ; do
       eval $ROCM_DIR/build/src/tools/ctrl
     else
       export ROCPROFILER_METRICS_PATH=$ROCPROFV2_DIR/../libexec/rocprofiler/counters/derived_counters.xml
-      export LD_LIBRARY_PATH=$ROCPROFV2_DIR/../lib:$LD_LIBRARY_PATH
-      export LD_PRELOAD=$ROCPROFV2_DIR/../lib/librocprofiler_tool.so
+      export LD_LIBRARY_PATH=$ROCPROFV2_DIR/../@LIBDIR@:$LD_LIBRARY_PATH
+      export LD_PRELOAD=$ROCPROFV2_DIR/../@LIBDIR@/librocprofiler_tool.so
       eval $ROCPROFV2_DIR/../libexec/rocprofiler/ctrl
     fi
     exit 1
@@ -271,14 +271,14 @@ if [ -n "$PMC_LINES" ]; then
     if [ $RUN_FROM_BUILD == 1 ]; then
       LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/build/librocprofiler_tool.so $*
     else
-      LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/lib/librocprofiler_tool.so $*
+      LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/@LIBDIR@/librocprofiler_tool.so $*
     fi
   done
 elif [ ! -n "$ATT_ARGV" ]; then
   if [ $RUN_FROM_BUILD == 1 ]; then
     LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/build/librocprofiler_tool.so $*
   else
-    LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/lib/librocprofiler_tool.so $*
+    LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/@LIBDIR@/librocprofiler_tool.so $*
   fi
 fi
 
diff -urp rocprofiler-rocm-5.5.1.orig/bin/rpl_run.sh rocprofiler-rocm-5.5.1/bin/rpl_run.sh
--- rocprofiler-rocm-5.5.1.orig/bin/rpl_run.sh	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/bin/rpl_run.sh	2023-09-28 21:50:35.799768126 -0700
@@ -29,11 +29,12 @@ RUN_DIR=`pwd`
 TMP_DIR="/tmp"
 DATA_DIR="rpl_data_${time_stamp}_$$"
 
-RPL_PATH=$ROOT_DIR/lib
+RPL_PATH=$ROOT_DIR/@LIBDIR@
 TLIB_PATH=$RPL_PATH/rocprofiler
-TTLIB_PATH=$ROOT_DIR/lib/roctracer
-ROCM_LIB_PATH=$ROOT_DIR/lib
-PROF_BIN_DIR=$ROOT_DIR/libexec/rocprofiler
+TTLIB_PATH=$ROOT_DIR/@LIBDIR@
+ROCM_LIB_PATH=$ROOT_DIR/@LIBDIR@
+PROF_BIN_DIR=$ROOT_DIR/bin
+PROF_LIBEXEC_DIR=$ROOT_DIR/libexec/rocprofiler
 
 if [ -z "$ROCP_PYTHON_VERSION" ] ; then
   ROCP_PYTHON_VERSION=python3
@@ -211,7 +212,7 @@ fi
 # setting ROCM_LIB_PATH
 set_rocm_lib_path() {
 
-  for ROCM_LIB_PATH in "$ROOT_DIR/lib" "$ROOT_DIR/lib64" ; do
+  for ROCM_LIB_PATH in $TLIB_PATH ; do
      if [ -d "$ROCM_LIB_PATH" ]; then
         return 0
      fi
@@ -225,7 +226,7 @@ set_rocm_lib_path() {
 OUTPUT_LIST=""
 run() {
   if ! set_rocm_lib_path ; then
-     echo " Fatal could not find ROCm lib directory "
+     echo " Fatal could not find ROCm @LIBDIR@ directory "
      fatal
   fi
   export ROCP_INPUT="$1"
@@ -550,7 +551,7 @@ elif [ "$input_type" = "txt" -o "$input_
   mkdir -p $RES_DIR
   echo "RPL: output dir '$RES_DIR'"
   if [ "$input_type" = "txt" ] ; then
-    $PROF_BIN_DIR/txt2xml.sh $INPUT_FILE $RES_DIR
+    $PROF_LIBEXEC_DIR/txt2xml.sh $INPUT_FILE $RES_DIR
   else
     echo "<metric></metric>" > $RES_DIR/input.xml
   fi
@@ -582,9 +583,9 @@ if [ -n "$csv_output" ] ; then
   merge_output $OUTPUT_LIST
   if [ "$GEN_STATS" = "1" ] ; then
     db_output=$(echo $csv_output | sed "s/\.csv/.db/")
-    $ROCP_PYTHON_VERSION $PROF_BIN_DIR/tblextr.py $db_output $OUTPUT_LIST
+    $ROCP_PYTHON_VERSION $PROF_LIBEXEC_DIR/tblextr.py $db_output $OUTPUT_LIST
   else
-    $ROCP_PYTHON_VERSION $PROF_BIN_DIR/tblextr.py $csv_output $OUTPUT_LIST
+    $ROCP_PYTHON_VERSION $PROF_LIBEXEC_DIR/tblextr.py $csv_output $OUTPUT_LIST
   fi
   if [ "$?" -ne 0 ] ; then
     echo "Profiling data corrupted: '$OUTPUT_LIST'" | tee "$ROCPROFILER_SESS/error"
diff -urp rocprofiler-rocm-5.5.1.orig/build.sh rocprofiler-rocm-5.5.1/build.sh
--- rocprofiler-rocm-5.5.1.orig/build.sh	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/build.sh	2023-09-28 21:50:35.799768126 -0700
@@ -24,8 +24,8 @@
 
 SRC_DIR=$(dirname "$0")
 COMPONENT="rocprofiler"
-ROCM_PATH="${ROCM_PATH:=/opt/rocm}"
-LD_RUNPATH_FLAG=" -Wl,--enable-new-dtags -Wl,--rpath,$ROCM_PATH/lib:$ROCM_PATH/lib64"
+ROCM_PATH="${ROCM_PATH:=@EPREFIX_ROCM_PATH@}"
+LD_RUNPATH_FLAG=" -Wl,--enable-new-dtags -Wl,--rpath,@EPREFIX_ROCM_PATH@/@LIBDIR@"
 
 usage() {
   echo -e "ROCProfiler Build Script Usage:"
diff -urp rocprofiler-rocm-5.5.1.orig/CMakeLists.txt rocprofiler-rocm-5.5.1/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/CMakeLists.txt	2023-09-28 21:50:16.991768342 -0700
+++ rocprofiler-rocm-5.5.1/CMakeLists.txt	2023-09-28 21:50:35.799768126 -0700
@@ -38,7 +38,7 @@ include(GNUInstallDirs)
 # set default ROCM_PATH
 if(NOT DEFINED ROCM_PATH)
   set(ROCM_PATH
-      "/opt/rocm"
+      "@ESYSROOT_ROCM_PATH@"
       CACHE STRING "Default ROCM installation directory")
 endif()
 
@@ -96,7 +96,7 @@ find_package(
   PATHS
   ${ROCM_PATH}
   PATH_SUFFIXES
-  lib/cmake/amd_comgr)
+  @LIBDIR@/cmake/amd_comgr)
 message(STATUS "Code Object Manager found at ${amd_comgr_DIR}.")
 link_libraries(amd_comgr)
 
@@ -145,7 +145,7 @@ if(USE_PROF_API EQUAL 1)
   find_path(
     PROF_API_HEADER_DIR ${PROF_API_HEADER_NAME}
     HINTS ${PROF_API_HEADER_PATH}
-    PATHS /opt/rocm/include
+    PATHS @ESYSROOT_ROCM_PATH@/include
     PATH_SUFFIXES roctracer/ext)
   if(NOT PROF_API_HEADER_DIR)
     message(
diff -urp rocprofiler-rocm-5.5.1.orig/cmake_modules/env.cmake rocprofiler-rocm-5.5.1/cmake_modules/env.cmake
--- rocprofiler-rocm-5.5.1.orig/cmake_modules/env.cmake	2023-09-28 21:50:16.991768342 -0700
+++ rocprofiler-rocm-5.5.1/cmake_modules/env.cmake	2023-09-28 21:50:35.803768126 -0700
@@ -46,10 +46,10 @@ if ( DEFINED ENV{CMAKE_LD_AQLPROFILE} )
 endif()
 
 ## Find hsa-runtime
-find_package(hsa-runtime64 CONFIG REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm PATH_SUFFIXES lib/cmake/hsa-runtime64 )
+find_package(hsa-runtime64 CONFIG REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@ PATH_SUFFIXES @LIBDIR@/cmake/hsa-runtime64 )
 
 # find KFD thunk
-find_package(hsakmt CONFIG REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm PATH_SUFFIXES lib/cmake/hsakmt )
+find_package(hsakmt CONFIG REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT_ROCM_PATH@ PATH_SUFFIXES @LIBDIR@/cmake/hsakmt )
 
 ## Find ROCm
 ## TODO: Need a better method to find the ROCm path
@@ -57,7 +57,7 @@ find_path ( HSA_KMT_INC_PATH "hsakmt/hsa
 if ( "${HSA_KMT_INC_PATH}" STREQUAL "" )
   get_target_property(HSA_KMT_INC_PATH hsakmt::hsakmt INTERFACE_INCLUDE_DIRECTORIES)
 endif()
-## Include path: /opt/rocm-ver/include. Go up one level to get ROCm  path
+## Include path: @ESYSROOT_ROCM_PATH@/include. Go up one level to get ROCm  path
 get_filename_component ( ROCM_ROOT_DIR "${HSA_KMT_INC_PATH}" DIRECTORY )
 
 ## Basic Tool Chain Information
diff -urp rocprofiler-rocm-5.5.1.orig/cmake_modules/FindLibDw.cmake rocprofiler-rocm-5.5.1/cmake_modules/FindLibDw.cmake
--- rocprofiler-rocm-5.5.1.orig/cmake_modules/FindLibDw.cmake	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/cmake_modules/FindLibDw.cmake	2023-09-28 21:50:35.803768126 -0700
@@ -16,8 +16,8 @@ find_library(FIND_LIBDW_LIBRARIES
   NAMES
     dw
   PATH
-    /usr/lib
-    /usr/local/lib)
+    @ESYSROOT@/usr/@LIBDIR@
+    @ESYSROOT@/usr/local/@LIBDIR@)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(LibDw DEFAULT_MSG
diff -urp rocprofiler-rocm-5.5.1.orig/cmake_modules/FindLibElf.cmake rocprofiler-rocm-5.5.1/cmake_modules/FindLibElf.cmake
--- rocprofiler-rocm-5.5.1.orig/cmake_modules/FindLibElf.cmake	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/cmake_modules/FindLibElf.cmake	2023-09-28 21:50:35.803768126 -0700
@@ -18,8 +18,8 @@ find_library(FIND_LIBELF_LIBRARIES
   NAMES
     elf
   PATH
-    /usr/lib
-    /usr/local/lib)
+    @ESYSROOT@/usr/@LIBDIR@
+    @ESYSROOT@/usr/local/@LIBDIR@)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(LibElf DEFAULT_MSG
diff -urp rocprofiler-rocm-5.5.1.orig/plugin/att/att.py rocprofiler-rocm-5.5.1/plugin/att/att.py
--- rocprofiler-rocm-5.5.1.orig/plugin/att/att.py	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/plugin/att/att.py	2023-09-28 21:50:35.803768126 -0700
@@ -107,7 +107,7 @@ try: # For build dir
     path_to_parser = os.path.abspath(rocprofv2_att_lib)
     SO = CDLL(path_to_parser)
 except: # For installed dir
-    path_to_parser = os.path.abspath('/opt/rocm/lib/hsa-amd-aqlprofile/librocprofv2_att.so')
+    path_to_parser = os.path.abspath('@ESYSROOT@/opt/rocm-@ROCM_VERSION@/@LIBDIR@/hsa-amd-aqlprofile/librocprofv2_att.so')
     SO = CDLL(path_to_parser)
 
 SO.AnalyseBinary.restype = ReturnInfo
diff -urp rocprofiler-rocm-5.5.1.orig/plugin/att/CMakeLists.txt rocprofiler-rocm-5.5.1/plugin/att/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/plugin/att/CMakeLists.txt	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/plugin/att/CMakeLists.txt	2023-09-28 21:52:42.631766667 -0700
@@ -45,6 +45,7 @@ target_link_options(
   att_plugin PRIVATE
   -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../exportmap
   -Wl,--no-undefined)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(att_plugin PRIVATE ${ROCPROFILER_TARGET}
                                          hsa-runtime64::hsa-runtime64 stdc++fs)
 
diff -urp rocprofiler-rocm-5.5.1.orig/plugin/ctf/CMakeLists.txt rocprofiler-rocm-5.5.1/plugin/ctf/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/plugin/ctf/CMakeLists.txt	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/plugin/ctf/CMakeLists.txt	2023-09-28 21:52:41.687766678 -0700
@@ -45,6 +45,7 @@ target_include_directories(ctf_plugin PR
 target_link_options(ctf_plugin PRIVATE
                     "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../exportmap"
                     -Wl,--no-undefined)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(ctf_plugin PRIVATE
                       ${ROCPROFILER_TARGET}
                       hsa-runtime64::hsa-runtime64
diff -urp rocprofiler-rocm-5.5.1.orig/plugin/file/CMakeLists.txt rocprofiler-rocm-5.5.1/plugin/file/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/plugin/file/CMakeLists.txt	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/plugin/file/CMakeLists.txt	2023-09-28 21:52:30.391766808 -0700
@@ -37,8 +37,9 @@ target_include_directories(file_plugin P
 
 target_link_options(file_plugin PRIVATE -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../exportmap -Wl,--no-undefined)
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(file_plugin PRIVATE ${ROCPROFILER_TARGET} hsa-runtime64::hsa-runtime64 stdc++fs amd_comgr dl)
 
 install(TARGETS file_plugin LIBRARY
   DESTINATION ${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}
-  COMPONENT runtime)
\ No newline at end of file
+  COMPONENT runtime)
diff -urp rocprofiler-rocm-5.5.1.orig/README.md rocprofiler-rocm-5.5.1/README.md
--- rocprofiler-rocm-5.5.1.orig/README.md	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/README.md	2023-09-28 21:50:35.803768126 -0700
@@ -34,7 +34,7 @@ $ export CMAKE_DEBUG_TRACE=1 # 1 to enab
 To build with the current installed ROCM:
  ```bash
 $ cd .../rocprofiler
-$ export CMAKE_PREFIX_PATH=/opt/rocm/include/hsa:/opt/rocm
+$ export CMAKE_PREFIX_PATH=@EPREFIX_ROCM_PATH@/include/hsa:@EPREFIX_ROCM_PATH@
 $ mkdir build
 $ cd build
 $ cmake ..
@@ -96,7 +96,7 @@ ROCProfilerV2 is a newly developed desig
 
 The user has two options for building:
 
-- Option 1 (It will install in the path saved in ROCM_PATH environment variable or /opt/rocm if ROCM_PATH is empty):
+- Option 1 (It will install in the path saved in ROCM_PATH environment variable or @EPREFIX_ROCM_PATH@ if ROCM_PATH is empty):
 
   - Run
 
@@ -310,7 +310,7 @@ The user has two options for building:
 We make use of doxygen to autmatically generate API documentation. Generated document can be found in the following path:
 
    ```bash
-   # ROCM_PATH by default is /opt/rocm
+   # ROCM_PATH by default is @EPREFIX_ROCM_PATH@
    # It can be set by the user in different location if needed.
    <ROCM_PATH>/share/doc/rocprofv2
    ```
diff -urp rocprofiler-rocm-5.5.1.orig/rocprofiler-backward-compat.cmake rocprofiler-rocm-5.5.1/rocprofiler-backward-compat.cmake
--- rocprofiler-rocm-5.5.1.orig/rocprofiler-backward-compat.cmake	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/rocprofiler-backward-compat.cmake	2023-09-28 21:50:35.803768126 -0700
@@ -23,7 +23,7 @@ set(ROCPROF_BUILD_DIR ${CMAKE_CURRENT_BI
 set(ROCPROF_WRAPPER_DIR ${ROCPROF_BUILD_DIR}/wrapper_dir)
 set(ROCPROF_WRAPPER_INC_DIR ${ROCPROF_WRAPPER_DIR}/include)
 set(ROCPROF_WRAPPER_BIN_DIR ${ROCPROF_WRAPPER_DIR}/bin)
-set(ROCPROF_WRAPPER_LIB_DIR ${ROCPROF_WRAPPER_DIR}/lib)
+set(ROCPROF_WRAPPER_LIB_DIR ${ROCPROF_WRAPPER_DIR}/@LIBDIR@)
 set(ROCPROF_WRAPPER_TOOL_DIR ${ROCPROF_WRAPPER_DIR}/tool)
 
 #Function to generate header template file
@@ -53,9 +53,9 @@ function(create_header_template)
 #define @include_guard@
 
 #if defined(__GNUC__)
-#warning \"This file is deprecated. Use file from include path /opt/rocm-ver/include/ and prefix with rocprofiler\"
+#warning \"This file is deprecated. Use file from include path @EPREFIX_ROCM_PATH@/include/ and prefix with rocprofiler\"
 #else
-#pragma message(\"This file is deprecated. Use file from include path /opt/rocm-ver/include/ and prefix with rocprofiler\")
+#pragma message(\"This file is deprecated. Use file from include path @EPREFIX_ROCM_PATH@/include/ and prefix with rocprofiler\")
 #endif
 
 @include_statements@
@@ -125,7 +125,7 @@ function(create_library_symlink)
   add_custom_target(link_${LIB_TOOL} ALL
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMAND ${CMAKE_COMMAND} -E create_symlink
-                   ../../${CMAKE_INSTALL_LIBDIR}/${ROCPROFILER_NAME}/${LIB_ROCPROFTOOL} ${ROCPROF_WRAPPER_TOOL_DIR}/${LIB_TOOL})
+                   ../../${CMAKE_INSTALL_LIBDIR}/${LIB_ROCPROFTOOL} ${ROCPROF_WRAPPER_TOOL_DIR}/${LIB_TOOL})
   #create symlink to test binary
   #since its saved in lib folder , the code for the same is added here
   # With File reorg ,binary name changed from ctrl to rocprof-ctrl
@@ -160,7 +160,7 @@ create_library_symlink()
 install(DIRECTORY ${ROCPROF_WRAPPER_LIB_DIR} DESTINATION ${ROCPROFILER_NAME}
         COMPONENT runtime
         PATTERN ${ROCPROFILER_LIBRARY}.so EXCLUDE)
-install(FILES ${ROCPROF_WRAPPER_LIB_DIR}/${ROCPROFILER_LIBRARY}.so DESTINATION ${ROCPROFILER_NAME}/lib
+install(FILES ${ROCPROF_WRAPPER_LIB_DIR}/${ROCPROFILER_LIBRARY}.so DESTINATION ${ROCPROFILER_NAME}/@LIBDIR@
         COMPONENT dev)
 #install tools directory
 install(DIRECTORY ${ROCPROF_WRAPPER_TOOL_DIR} DESTINATION ${ROCPROFILER_NAME} COMPONENT runtime)
diff -urp rocprofiler-rocm-5.5.1.orig/samples/CMakeLists.txt rocprofiler-rocm-5.5.1/samples/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/samples/CMakeLists.txt	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/samples/CMakeLists.txt	2023-09-28 21:52:37.991766720 -0700
@@ -12,21 +12,21 @@ find_file(HSA_H hsa.h
   REQUIRED)
 get_filename_component(HSA_RUNTIME_INC_PATH ${HSA_H} DIRECTORY)
 include_directories(${HSA_RUNTIME_INC_PATH})
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 
 # Set the HIP language runtime link flags as FindHIP does not set them.
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG})
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP})
 set(CMAKE_EXECUTABLE_RPATH_LINK_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG})
 
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/lib/cmake/hip")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 set(CMAKE_HIP_ARCHITECTURES OFF)
 find_package(HIP REQUIRED MODULE)
 
 find_package(Clang REQUIRED CONFIG
-             PATHS "${ROCM_PATH}"
-             PATH_SUFFIXES "llvm/lib/cmake/clang")
+             PATHS "@ESYSROOT_LLVM_PATH@/@LIBDIR@/cmake/clang")
 
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules" "${ROCM_PATH}/lib/cmake/hip")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules" "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 find_package(LibElf REQUIRED)
 find_package(LibDw REQUIRED)
 
@@ -119,6 +119,8 @@ check_c_source_compiles("
   target_compile_definitions(pc_sampling_code_printing PRIVATE HAVE_MEMFD_CREATE)
   endif()
 
+  link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
+
   target_link_libraries(pc_sampling_code_printing
   PRIVATE
   ${ROCPROFILER_TARGET}
diff -urp rocprofiler-rocm-5.5.1.orig/samples/Makefile rocprofiler-rocm-5.5.1/samples/Makefile
--- rocprofiler-rocm-5.5.1.orig/samples/Makefile	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/samples/Makefile	2023-09-28 21:50:35.803768126 -0700
@@ -1,5 +1,5 @@
-ROCM_PATH ?=/opt/rocm
-ROCPROFILER_LIBS_PATH ?=$(ROCM_PATH)/lib
+ROCM_PATH ?=@ESYSROOT_ROCM_PATH@
+ROCPROFILER_LIBS_PATH ?=$(ROCM_PATH)/@LIBDIR@
 ROCM_INCLUDES=-I$(ROCM_PATH)/include
 ROCPROFILER_INCLUDES=-I$(ROCM_PATH)/include/rocprofiler/
 
diff -urp rocprofiler-rocm-5.5.1.orig/samples/pcsampler/code_printing_sample/Makefile rocprofiler-rocm-5.5.1/samples/pcsampler/code_printing_sample/Makefile
--- rocprofiler-rocm-5.5.1.orig/samples/pcsampler/code_printing_sample/Makefile	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/samples/pcsampler/code_printing_sample/Makefile	2023-09-28 21:50:35.803768126 -0700
@@ -1,6 +1,6 @@
 # -*- makefile-gmake -*-
 
-ROCM_PATH ?= /opt/rocm
+ROCM_PATH ?= @ESYSROOT_ROCM_PATH@
 HIP_PATH ?= $(ROCM_PATH)/hip
 HIPCC := $(HIP_PATH)/bin/hipcc
 
@@ -36,7 +36,7 @@ CPPFLAGS += -DHAVE_MEMFD_CREATE
 
 $(prog): CC = $(HIPCC)
 $(prog): CPPFLAGS += -I$(ROCM_PATH)/include -I$(ROCPROFILER_PATH)
-$(prog): LDFLAGS := -L$(ROCM_PATH)/lib -L$(ROCPROFILER_PATH)/build
+$(prog): LDFLAGS := -L$(ROCM_PATH)/@LIBDIR@ -L$(ROCPROFILER_PATH)/build
 $(prog): LDLIBS += -ldl -lpthread -lhsa-runtime64 -lrocprofiler64 -lrocm-dbgapi -ldw -lelf
 $(objs): CXX = $(HIPCC)
 
diff -urp rocprofiler-rocm-5.5.1.orig/samples/pcsampler/code_printing_sample/README.md rocprofiler-rocm-5.5.1/samples/pcsampler/code_printing_sample/README.md
--- rocprofiler-rocm-5.5.1.orig/samples/pcsampler/code_printing_sample/README.md	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/samples/pcsampler/code_printing_sample/README.md	2023-09-28 21:50:35.803768126 -0700
@@ -15,7 +15,7 @@ build the demo program are:
 * libdw (**not** libdwarf)
 * libelf
 
-If ROCm is installed in the standard location (`/opt/rocm`), running `make` in
+If ROCm is installed in the standard location (`@EPREFIX_ROCM_PATH@`), running `make` in
 the same directory as this README should work; otherwise, set `ROCM_PATH` to the
 location of the ROCm installation in your environment and `ROCPROFILER_PATH` to
 the location of the ROCProfiler source repo before running `make`.
diff -urp rocprofiler-rocm-5.5.1.orig/samples/README.md rocprofiler-rocm-5.5.1/samples/README.md
--- rocprofiler-rocm-5.5.1.orig/samples/README.md	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/samples/README.md	2023-09-28 21:50:35.803768126 -0700
@@ -48,8 +48,8 @@ This code sample demonstrates how to use
 
 
 ## How to compile
-In order to get the samples to compile, make sure to copy rocprofiler binaries into /opt/rocm/lib
-Running 'make install' inside the rocprofiler/build folder will copy the binaries to /opt/rocm/lib
+In order to get the samples to compile, make sure to copy rocprofiler binaries into @EPREFIX_ROCM_PATH@/@LIBIDR@
+Running 'make install' inside the rocprofiler/build folder will copy the binaries to @EPREFIX_ROCM_PATH@/@LIBDIR@
 
 Alternately, change the 'ROCPROFILER_LIBS_PATH' variable in the Makefile to point to the rocprofiler/build folder. 
 After modifications to Makefile are done, run:
@@ -66,10 +66,10 @@ After modifications to Makefile are done
 
 ### How to run
 Before running, ROCPROFILER_METRICS_PATH needs to be set to point to 'derived_counters.xml'
-If the rocprofiler binaries are present in the rocm installation path /opt/rocm
+If the rocprofiler binaries are present in the rocm installation path @EPREFIX_ROCM_PATH@
 then below command will work:
 ```bash
-export ROCPROFILER_METRICS_PATH=/opt/rocm/libexec/rocprofiler/counters/derived_counters.xml
+export ROCPROFILER_METRICS_PATH=@EPREFIX_ROCM_PATH@/libexec/rocprofiler/counters/derived_counters.xml
 ```
 
 Otherwise, make it point to rocprofiler/build/counters/derived_counters.xml like below:
@@ -89,4 +89,4 @@ sampling API, with additional code to il
 correlation of sampled PC addresses with their disassembled machine code, as
 well as source code and symbolic debugging information if available.
 
-See [PC-Sampler README](pcsampler/code_printing_sample/README.md)
\ No newline at end of file
+See [PC-Sampler README](pcsampler/code_printing_sample/README.md)
diff -urp rocprofiler-rocm-5.5.1.orig/src/api/CMakeLists.txt rocprofiler-rocm-5.5.1/src/api/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/src/api/CMakeLists.txt	2023-09-28 21:50:16.991768342 -0700
+++ rocprofiler-rocm-5.5.1/src/api/CMakeLists.txt	2023-09-28 21:52:40.775766688 -0700
@@ -240,6 +240,8 @@ target_include_directories(${ROCPROFILER
   ${PROJECT_SOURCE_DIR}/tools
   ${PROJECT_SOURCE_DIR}/inc)
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
+
 if(ASAN)
   target_compile_options(${ROCPROFILER_TARGET} PRIVATE -fsanitize=address)
   target_link_options(${ROCPROFILER_TARGET} PRIVATE -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/exportmap -Wl,--no-undefined,-fsanitize=address)
diff -urp rocprofiler-rocm-5.5.1.orig/src/tools/amdsys/amdsys.cpp rocprofiler-rocm-5.5.1/src/tools/amdsys/amdsys.cpp
--- rocprofiler-rocm-5.5.1.orig/src/tools/amdsys/amdsys.cpp	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/src/tools/amdsys/amdsys.cpp	2023-09-28 21:50:35.803768126 -0700
@@ -97,7 +97,7 @@ int main(int argc, char* argv[]) {
   if (Dl_info dl_info; dladdr(reinterpret_cast<void*>(main), &dl_info) != 0) {
     bin_path = fs::path(dl_info.dli_fname).remove_filename();
   } else {
-    bin_path = "/opt/rocm";
+    bin_path = "@EPREFIX_ROCM_PATH@";
   }
 
   std::string session_name = "default_session_roctracer";
diff -urp rocprofiler-rocm-5.5.1.orig/src/tools/CMakeLists.txt rocprofiler-rocm-5.5.1/src/tools/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/src/tools/CMakeLists.txt	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/src/tools/CMakeLists.txt	2023-09-28 21:52:38.951766709 -0700
@@ -24,6 +24,8 @@ target_include_directories(rocprofiler_t
 target_compile_definitions(rocprofiler_tool
   PRIVATE HIP_PROF_HIP_API_STRING=1 __HIP_PLATFORM_HCC__=1)
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
+
 if(ASAN)
   target_compile_options(rocprofiler_tool PRIVATE -fsanitize=address)
   target_link_libraries(rocprofiler_tool ${ROCPROFILER_TARGET} hsa-runtime64::hsa-runtime64 Threads::Threads atomic asan dl rt stdc++fs amd_comgr)
@@ -49,4 +51,4 @@ install(TARGETS ctrl RUNTIME
   COMPONENT runtime)
 
 
-# ############################################################################################################################################
\ No newline at end of file
+# ############################################################################################################################################
diff -urp rocprofiler-rocm-5.5.1.orig/src/tools/rocprofv2/CMakeLists.txt rocprofiler-rocm-5.5.1/src/tools/rocprofv2/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/src/tools/rocprofv2/CMakeLists.txt	2023-09-28 21:50:16.999768342 -0700
+++ rocprofiler-rocm-5.5.1/src/tools/rocprofv2/CMakeLists.txt	2023-09-28 21:52:39.895766698 -0700
@@ -28,6 +28,7 @@ target_include_directories(rocprofv2
   PRIVATE
     ${PROJECT_SOURCE_DIR}
     ${PROJECT_SOURCE_DIR}/inc)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(rocprofv2 PRIVATE ${AQLPROFILE_LIB} hsa-runtime64::hsa-runtime64 stdc++fs Threads::Threads atomic -ldl)
 # install(TARGETS rocprofv2 RUNTIME
 #   DESTINATION ${CMAKE_INSTALL_BINDIR}
diff -urp rocprofiler-rocm-5.5.1.orig/src/tools/rocprofv2/rocprofv2.cpp rocprofiler-rocm-5.5.1/src/tools/rocprofv2/rocprofv2.cpp
--- rocprofiler-rocm-5.5.1.orig/src/tools/rocprofv2/rocprofv2.cpp	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/src/tools/rocprofv2/rocprofv2.cpp	2023-09-28 21:50:35.803768126 -0700
@@ -71,7 +71,7 @@ void runMemCheck(fs::path bin_path) {
   log_path = log_path.replace_filename("memleaks.log");
 
   std::cout << "Running Memory Leaks Check...." << std::endl;
-  std::string run_command = "LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.6:" + pathenv +
+  std::string run_command = "LD_PRELOAD=@EPREFIX@/usr/lib/gcc/@CHOST@/@GCC_SLOT@/libasan.so:" + pathenv +
       " ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=suppressions=" + suppr_path.string() +
       " COUNTERS_PATH=" + counter_path.string() + " " + app_path.string() +
       " > /tmp/rocprofv2-temp 2> " + log_path.string();
@@ -180,7 +180,7 @@ int main(int argc, char** argv) {
       // ASAN run
     } else if (strcmp(argv[i], "-a") == 0 || strcmp(argv[i], "--asan") == 0) {
       std::string current_ld_preload{getenv("LD_PRELOAD")};
-      std::string ld_preload = "/usr/lib/x86_64-linux-gnu/libasan.so.6";
+      std::string ld_preload = "@EPREFIX@/usr/lib/gcc/@CHOST@/@GCC_SLOT@/libasan.so";
       if (!current_ld_preload.empty()) ld_preload = current_ld_preload + ":" + ld_preload;
 
       std::cout << ld_preload << std::endl;
@@ -232,7 +232,7 @@ int main(int argc, char** argv) {
   if (strstr(bin_path.c_str(), "build") != nullptr)
     pathenv_str = bin_path.replace_filename("librocprofiler_tool.so");
   else
-    pathenv_str = bin_path.remove_filename().replace_filename("lib/librocprofiler_tool.so");
+    pathenv_str = bin_path.remove_filename().replace_filename("@LIBDIR@/librocprofiler_tool.so");
   if (!current_ld_preload.empty())
     pathenv_str = "LD_PRELOAD=" + current_ld_preload + ":" + pathenv_str;
   else
@@ -253,4 +253,4 @@ int main(int argc, char** argv) {
   // variables and original arguments
   runApp(app_path_str.c_str(), envp_run, app_args, number_of_passes);
   return 1;
-}
\ No newline at end of file
+}
diff -urp rocprofiler-rocm-5.5.1.orig/test/CMakeLists.txt rocprofiler-rocm-5.5.1/test/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/test/CMakeLists.txt	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/test/CMakeLists.txt	2023-09-28 21:52:32.327766785 -0700
@@ -47,6 +47,7 @@ include_directories(${HSA_RUNTIME_INC_PA
 
 ## C test
 add_executable ( "c_test" ${TEST_DIR}/app/c_test.c )
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_include_directories ( "c_test" PRIVATE ${ROOT_DIR} $<TARGET_PROPERTY:hsa-runtime64::hsa-runtime64,INTERFACE_INCLUDE_DIRECTORIES> )
 
 ## Util sources
diff -urp rocprofiler-rocm-5.5.1.orig/test/run.sh rocprofiler-rocm-5.5.1/test/run.sh
--- rocprofiler-rocm-5.5.1.orig/test/run.sh	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/test/run.sh	2023-09-28 21:50:35.803768126 -0700
@@ -57,7 +57,7 @@ eval_test() {
 }
 
 # paths to ROC profiler and oher libraries
-export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD:$PWD/../../lib:/opt/rocm/lib:/opt/rocm/lib/rocprofiler
+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD:$PWD/../../@LIBDIR@:@EPREFIX_ROCM_PATH@/@LIBDIR@:@EPREFIX_ROCM_PATH@/@LIBDIR@/rocprofiler:/opt/rocm-${ROCM_VERSION}/lib
 
 # enable tools load failure reporting
 export HSA_TOOLS_REPORT_LOAD_FAILURE=1
diff -urp rocprofiler-rocm-5.5.1.orig/tests/featuretests/profiler/CMakeLists.txt rocprofiler-rocm-5.5.1/tests/featuretests/profiler/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/tests/featuretests/profiler/CMakeLists.txt	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/tests/featuretests/profiler/CMakeLists.txt	2023-09-28 21:52:34.983766755 -0700
@@ -10,10 +10,10 @@ find_file(HSA_H hsa.h
 get_filename_component(HSA_RUNTIME_INC_PATH ${HSA_H} DIRECTORY)
 
 include_directories(${PROJECT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR} ${HSA_RUNTIME_INC_PATH})
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 
 find_package(Clang REQUIRED CONFIG
-             PATHS "${ROCM_PATH}"
-             PATH_SUFFIXES "llvm/lib/cmake/clang")
+             PATHS "@EPREFIX_LLVM_PATH@/@LIBDIR@/cmake/clang")
 
 # Set the HIP language runtime link flags as FindHIP does not set them.
 set(CMAKE_INSTALL_TESTDIR test/${PROJECT_NAME})
@@ -21,7 +21,7 @@ set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG ${
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP})
 set(CMAKE_EXECUTABLE_RPATH_LINK_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG})
 
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/lib/cmake/hip")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 set(CMAKE_HIP_ARCHITECTURES OFF)
 find_package(HIP REQUIRED MODULE)
 
@@ -82,6 +82,8 @@ set_target_properties(mpi_vectoradd PROP
 target_link_libraries(mpi_vectoradd ${MPI_C_LIBRARIES} stdc++fs)
 endif()
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
+
 #hsa-mem_async_copy -- Not Enabled for Now
 # set_source_files_properties(gtests/apps/hsa/async_mem_copy.cpp PROPERTIES HIP_SOURCE_PROPERTY_FORMAT 1)
 # hip_add_executable(hsa_async_mem_copy gtests/apps/hsa/async_mem_copy.cpp)
@@ -142,6 +144,7 @@ file(GLOB ROCPROFILER_UTIL_SRC_FILES ${P
 function(generate_hsaco TARGET_ID INPUT_FILE OUTPUT_FILE)
   separate_arguments(CLANG_ARG_LIST UNIX_COMMAND
     "-O2 -x cl -Xclang -finclude-default-header -cl-denorms-are-zero -cl-std=CL2.0 -Wl,--build-id=sha1
+    --rocm-device-lib-path=@EPREFIX_ROCM_PATH@/@LIBDIR@/amdgcn/bitcode
     -target amdgcn-amd-amdhsa -mcpu=${TARGET_ID} -o ${OUTPUT_FILE} ${INPUT_FILE}")
   add_custom_command(OUTPUT ${PROJECT_BINARY_DIR}/tests/featuretests/profiler/${OUTPUT_FILE}
     COMMAND clang ${CLANG_ARG_LIST}
diff -urp rocprofiler-rocm-5.5.1.orig/tests/featuretests/profiler/gtests/apps/mpi/mpi_run.sh rocprofiler-rocm-5.5.1/tests/featuretests/profiler/gtests/apps/mpi/mpi_run.sh
--- rocprofiler-rocm-5.5.1.orig/tests/featuretests/profiler/gtests/apps/mpi/mpi_run.sh	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/tests/featuretests/profiler/gtests/apps/mpi/mpi_run.sh	2023-09-28 21:50:35.803768126 -0700
@@ -19,13 +19,13 @@ MPIRUN=mpirun
 if ! command -v $MPIRUN &> /dev/null
 then
     echo "$MPIRUN could not be found. checking libs"
-    if [ -f "/usr/lib64/openmpi/bin/mpirun" ]
+    if [ -f "@EPREFIX@/usr/@LIBDIR@/openmpi/bin/mpirun" ]
     then
-        MPIRUN=/usr/lib64/openmpi/bin/mpirun
+        MPIRUN=@EPREFIX@/usr/@LIBDIR@/openmpi/bin/mpirun
     else
-        if [ -f "/usr/lib64/mpi/gcc/openmpi2/bin/mpirun" ]
+        if [ -f "@EPREFIX@/usr/@LIBDIR@/mpi/gcc/openmpi2/bin/mpirun" ]
         then
-            MPIRUN=/usr/lib64/mpi/gcc/openmpi2/bin/mpirun
+            MPIRUN=@EPREFIX@/usr/@LIBDIR@/mpi/gcc/openmpi2/bin/mpirun
         else
             echo "$MPIRUN could not be found. exiting"
             exit
diff -urp rocprofiler-rocm-5.5.1.orig/tests/featuretests/tracer/CMakeLists.txt rocprofiler-rocm-5.5.1/tests/featuretests/tracer/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/tests/featuretests/tracer/CMakeLists.txt	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/tests/featuretests/tracer/CMakeLists.txt	2023-09-28 21:52:33.927766767 -0700
@@ -4,7 +4,7 @@ set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG ${
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP})
 set(CMAKE_EXECUTABLE_RPATH_LINK_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG})
 
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/lib/cmake/hip")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 set(CMAKE_HIP_ARCHITECTURES OFF)
 find_package(HIP REQUIRED MODULE)
 
@@ -17,6 +17,7 @@ file(GLOB files RELATIVE ${CMAKE_CURRENT
 foreach(file ${files})
     configure_file(${file} ${PROJECT_BINARY_DIR}/tests/featuretests/tracer/${file} COPYONLY)
 endforeach()
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 
 # Compile Applications
 # hip_helloworld
@@ -34,6 +35,7 @@ add_executable(runTracerFeatureTests
 
 # Link test executable against gtest & gtest_main
 target_include_directories(runTracerFeatureTests PRIVATE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/tests/featuretests/tracer)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(runTracerFeatureTests PRIVATE hsa-runtime64::hsa-runtime64
                                               GTest::gtest GTest::gtest_main 
                                               Threads::Threads dl stdc++fs)
diff -urp rocprofiler-rocm-5.5.1.orig/tests/memorytests/run_asan_tests.sh rocprofiler-rocm-5.5.1/tests/memorytests/run_asan_tests.sh
--- rocprofiler-rocm-5.5.1.orig/tests/memorytests/run_asan_tests.sh	2023-04-14 10:32:14.000000000 -0700
+++ rocprofiler-rocm-5.5.1/tests/memorytests/run_asan_tests.sh	2023-09-28 21:50:35.803768126 -0700
@@ -4,6 +4,6 @@ CURRENT_DIR="$( dirname -- "$0"; )";
 export PATH=$rocmtoolsdir:$PATH
 
 echo -e "Running Memory Leaks Check From ${CURRENT_DIR}"
-LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.6 ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=suppressions=$CURRENT_DIR/suppr.txt ${CURRENT_DIR}/../../rocprofv2 -i $CURRENT_DIR/input.txt $1 > /tmp/rocprofv2-temp 2> $2
+LD_PRELOAD=@EPREFIX@/usr/lib/gcc/@CHOST@/@GCC_SLOT@/libasan.so ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=suppressions=$CURRENT_DIR/suppr.txt ${CURRENT_DIR}/../../rocprofv2 -i $CURRENT_DIR/input.txt $1 > /tmp/rocprofv2-temp 2> $2
 echo -e "Log with all detected leaks is available at build/memleaks.log"
 eval python3 $CURRENT_DIR/test_mem.py $2
diff -urp rocprofiler-rocm-5.5.1.orig/tests/unittests/core/CMakeLists.txt rocprofiler-rocm-5.5.1/tests/unittests/core/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/tests/unittests/core/CMakeLists.txt	2023-09-28 21:50:17.003768342 -0700
+++ rocprofiler-rocm-5.5.1/tests/unittests/core/CMakeLists.txt	2023-09-28 21:52:35.959766744 -0700
@@ -101,6 +101,8 @@ if(NOT AQLPROFILE)
   set(AQLPROFILE_LIB "")
 endif()
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
+
 # Link test executable against gtest & gtest_main
 target_link_libraries(runCoreUnitTests PRIVATE ${ROCPROFILER_TARGET} ${AQLPROFILE_LIB}
   hsa-runtime64::hsa-runtime64 c stdc++
diff -urp rocprofiler-rocm-5.5.1.orig/tests/unittests/profiler/CMakeLists.txt rocprofiler-rocm-5.5.1/tests/unittests/profiler/CMakeLists.txt
--- rocprofiler-rocm-5.5.1.orig/tests/unittests/profiler/CMakeLists.txt	2023-09-28 21:50:17.003768342 -0700
+++ rocprofiler-rocm-5.5.1/tests/unittests/profiler/CMakeLists.txt	2023-09-28 21:52:36.855766733 -0700
@@ -88,6 +88,8 @@ if(NOT AQLPROFILE)
   set(AQLPROFILE_LIB "")
 endif()
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
+
 target_link_libraries(runProfilerUnitTests PRIVATE rocprofiler_tool ${AQLPROFILE_LIB}
   hsa-runtime64::hsa-runtime64
   GTest::gtest GTest::gtest_main stdc++fs
