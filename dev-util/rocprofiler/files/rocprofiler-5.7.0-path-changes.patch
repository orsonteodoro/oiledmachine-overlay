diff -urp rocprofiler-rocm-5.7.0.orig/bin/build_kernel.sh rocprofiler-rocm-5.7.0/bin/build_kernel.sh
--- rocprofiler-rocm-5.7.0.orig/bin/build_kernel.sh	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/bin/build_kernel.sh	2023-09-29 05:48:24.955438349 -0700
@@ -18,7 +18,7 @@ if [ -z "$DST_DIR" ] ; then
 fi
 
 if [ -z "$ROCM_DIR" ] ; then
-  ROCM_DIR=/opt/rocm
+  ROCM_DIR="@EPREFIX_ROCM_PATH@"
 fi
 
 if [ -z "$TGT_LIST" ] ; then
@@ -32,12 +32,12 @@ fi
 
 OCL_VER="2.0"
 
-if [ -e $ROCM_DIR/llvm ] ; then
-  LLVM_DIR=$ROCM_DIR/llvm
-  LIB_DIR=$ROCM_DIR/lib
+if [ -e @EPREFIX_LLVM_PATH@ ] ; then
+  LLVM_DIR=@EPREFIX_LLVM_PATH@
+  LIB_DIR=$ROCM_DIR/@LIBDIR@
 else
   LLVM_DIR=$ROCM_DIR/hcc
-  LIB_DIR=$LLVM_DIR/lib
+  LIB_DIR=$LLVM_DIR/@LIBDIR@
 fi
 
 # Determine whether using new or old device-libs layout
@@ -45,6 +45,8 @@ if [ -e $LIB_DIR/bitcode/opencl.amdgcn.b
   BC_DIR=$LIB_DIR/bitcode
 elif [ -e $LIB_DIR/opencl.amdgcn.bc ]; then
   BC_DIR=$LIB_DIR
+elif [ -e $ROCM_DIR/@LIBDIR@/amdgcn/bitcode/opencl.bc ]; then
+  BC_DIR=$ROCM_DIR/@LIBDIR@/amdgcn/bitcode
 elif [ -e $ROCM_DIR/amdgcn/bitcode/opencl.bc ]; then
   BC_DIR=$ROCM_DIR/amdgcn/bitcode
 else
@@ -52,7 +54,7 @@ else
   exit 1
 fi
 
-CLANG_ROOT=$LLVM_DIR/lib/clang
+CLANG_ROOT=@EPREFIX_CLANG_PATH@
 CLANG_DIR=`ls -d $CLANG_ROOT/* | head -n 1`
 if [ "$CLANG_DIR" = "" ] ; then
   echo "Error: LLVM clang library was not found"
diff -urp rocprofiler-rocm-5.7.0.orig/bin/rocprofv2 rocprofiler-rocm-5.7.0/bin/rocprofv2
--- rocprofiler-rocm-5.7.0.orig/bin/rocprofv2	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/bin/rocprofv2	2023-09-29 05:48:24.955438349 -0700
@@ -11,7 +11,7 @@ if [[ $ROCPROFV2_DIR == *"/build"* ]]; t
 fi
 
 export ROCPROFILER_METRICS_PATH=$ROCM_DIR/libexec/rocprofiler/counters/derived_counters.xml
-export LD_LIBRARY_PATH=$ROCM_DIR/lib:$LD_LIBRARY_PATH
+export LD_LIBRARY_PATH=$ROCM_DIR/@LIBDIR@:$LD_LIBRARY_PATH
 
 usage() {
   echo -e "ROCProfilerV2 Run Script Usage:"
@@ -68,7 +68,7 @@ while [ 1 ]; do
       exit 1
     fi
   elif [[ "$1" = "--list-counters" ]]; then
-    export LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/lib/rocprofiler/librocprofiler_tool.so
+    export LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/@LIBDIR@/librocprofiler_tool.so
     eval $ROCM_DIR/libexec/rocprofiler/ctrl
     exit 1
   elif [[ "$1" = "-i" || "$1" = "--input" ]]; then
@@ -183,7 +183,7 @@ while [ 1 ]; do
         ATT_PATH=$ROCM_DIR/plugin/att/att/att.py
       else
         ATT_PATH=$ROCM_DIR/libexec/rocprofiler/att/att.py
-        export ROCPROFV2_ATT_LIB_PATH=$ROCM_DIR/lib/hsa-amd-aqlprofile/librocprofv2_att.so
+        export ROCPROFV2_ATT_LIB_PATH=@EPREFIX@/opt/rocm-${ROCM_VERSION}/lib/hsa-amd-aqlprofile/librocprofv2_att.so
       fi
       ATT_ARGV=$3
       shift
@@ -257,10 +257,10 @@ if [ -n "$PMC_LINES" ]; then
       export OUTPUT_PATH=$FINAL_PATH
       let COUNTER=COUNTER+1
     fi
-    LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/lib/rocprofiler/librocprofiler_tool.so $*
+    LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/@LIBDIR@/librocprofiler_tool.so $*
   done
 elif [ ! -n "$ATT_ARGV" ]; then
-  LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/lib/rocprofiler/librocprofiler_tool.so $*
+  LD_PRELOAD=$LD_PRELOAD:$ROCM_DIR/@LIBDIR@/librocprofiler_tool.so $*
 fi
 
 get_pmc_results_txt_path() {
diff -urp rocprofiler-rocm-5.7.0.orig/bin/rpl_run.sh rocprofiler-rocm-5.7.0/bin/rpl_run.sh
--- rocprofiler-rocm-5.7.0.orig/bin/rpl_run.sh	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/bin/rpl_run.sh	2023-09-29 05:48:24.955438349 -0700
@@ -29,11 +29,12 @@ RUN_DIR=`pwd`
 TMP_DIR="/tmp"
 DATA_DIR="rpl_data_${time_stamp}_$$"
 
-RPL_PATH=$ROOT_DIR/lib
+RPL_PATH=$ROOT_DIR/@LIBDIR@
 TLIB_PATH=$RPL_PATH/rocprofiler
-TTLIB_PATH=$ROOT_DIR/lib/roctracer
-ROCM_LIB_PATH=$ROOT_DIR/lib
-PROF_BIN_DIR=$ROOT_DIR/libexec/rocprofiler
+TTLIB_PATH=$ROOT_DIR/@LIBDIR@
+ROCM_LIB_PATH=$ROOT_DIR/@LIBDIR@
+PROF_BIN_DIR=$ROOT_DIR/bin
+PROF_LIBEXEC_DIR=$ROOT_DIR/libexec/rocprofiler
 
 if [ -z "$ROCP_PYTHON_VERSION" ] ; then
   ROCP_PYTHON_VERSION=python3
@@ -211,7 +212,7 @@ fi
 # setting ROCM_LIB_PATH
 set_rocm_lib_path() {
 
-  for ROCM_LIB_PATH in "$ROOT_DIR/lib" "$ROOT_DIR/lib64" ; do
+  for ROCM_LIB_PATH in $TLIB_PATH ; do
      if [ -d "$ROCM_LIB_PATH" ]; then
         return 0
      fi
@@ -225,7 +226,7 @@ set_rocm_lib_path() {
 OUTPUT_LIST=""
 run() {
   if ! set_rocm_lib_path ; then
-     echo " Fatal could not find ROCm lib directory "
+     echo " Fatal could not find ROCm @LIBDIR@ directory "
      fatal
   fi
   export ROCP_INPUT="$1"
@@ -553,7 +554,7 @@ elif [ "$input_type" = "txt" -o "$input_
   mkdir -p $RES_DIR
   echo "RPL: output dir '$RES_DIR'"
   if [ "$input_type" = "txt" ] ; then
-    $PROF_BIN_DIR/txt2xml.sh $INPUT_FILE $RES_DIR
+    $PROF_LIBEXEC_DIR/txt2xml.sh $INPUT_FILE $RES_DIR
   else
     echo "<metric></metric>" > $RES_DIR/input.xml
   fi
@@ -585,9 +586,9 @@ if [ -n "$csv_output" ] ; then
   merge_output $OUTPUT_LIST
   if [ "$GEN_STATS" = "1" ] ; then
     db_output=$(echo $csv_output | sed "s/\.csv/.db/")
-    $ROCP_PYTHON_VERSION $PROF_BIN_DIR/tblextr.py $db_output $OUTPUT_LIST
+    $ROCP_PYTHON_VERSION $PROF_LIBEXEC_DIR/tblextr.py $db_output $OUTPUT_LIST
   else
-    $ROCP_PYTHON_VERSION $PROF_BIN_DIR/tblextr.py $csv_output $OUTPUT_LIST
+    $ROCP_PYTHON_VERSION $PROF_LIBEXEC_DIR/tblextr.py $csv_output $OUTPUT_LIST
   fi
   if [ "$?" -ne 0 ] ; then
     echo "Profiling data corrupted: '$OUTPUT_LIST'" | tee "$ROCPROFILER_SESS/error"
diff -urp rocprofiler-rocm-5.7.0.orig/build.sh rocprofiler-rocm-5.7.0/build.sh
--- rocprofiler-rocm-5.7.0.orig/build.sh	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/build.sh	2023-09-29 05:48:24.955438349 -0700
@@ -24,8 +24,8 @@
 
 SRC_DIR=$(dirname "$0")
 COMPONENT="rocprofiler"
-ROCM_PATH="${ROCM_PATH:=/opt/rocm}"
-LD_RUNPATH_FLAG=" -Wl,--enable-new-dtags -Wl,--rpath,$ROCM_PATH/lib"
+ROCM_PATH="${ROCM_PATH:=@EPREFIX_ROCM_PATH@}"
+LD_RUNPATH_FLAG=" -Wl,--enable-new-dtags -Wl,--rpath,@EPREFIX_ROCM_PATH@/@LIBDIR@"
 
 usage() {
   echo -e "ROCProfiler Build Script Usage:"
@@ -83,7 +83,7 @@ pushd $BUILD_DIR
 cmake  \
     -DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE \
     -DCMAKE_BUILD_TYPE=${BUILD_TYPE:-'RelWithDebInfo'} \
-    -DCMAKE_MODULE_PATH="${ROCM_PATH}/hip/cmake;${ROCM_PATH}/lib/cmake" \
+    -DCMAKE_MODULE_PATH="${ROCM_PATH}/cmake/hip;${ROCM_PATH}/@LIBDIR@/cmake" \
     -DCMAKE_PREFIX_PATH="${ROCM_INSTALL_PATH}/llvm;$PREFIX_PATH" \
     -DCMAKE_INSTALL_PREFIX="$PACKAGE_ROOT" \
     -DCMAKE_SHARED_LINKER_FLAGS="$LD_RUNPATH_FLAG" \
diff -urp rocprofiler-rocm-5.7.0.orig/CHANGELOG.md rocprofiler-rocm-5.7.0/CHANGELOG.md
--- rocprofiler-rocm-5.7.0.orig/CHANGELOG.md	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/CHANGELOG.md	2023-09-29 05:48:24.955438349 -0700
@@ -17,7 +17,7 @@ In ROCm 5.4 the naming of the ROCm Profi
   |-----------------|-------------------------------------|---------------------------------|
   | **Tool script** | `bin/rocprof`                       | `bin/rocsight`                  |
   | **API include** | `include/rocprofiler/rocprofiler.h` | `include/rocmtools/rocmtools.h` |
-  | **API library** | `lib/librocprofiler64.so.1`         | `lib/librocmtools.so.1`         |
+  | **API library** | `@LIBDIR@/librocprofiler64.so.1`    | `@LIBDIR@/librocmtools.so.1`    |
 
 The ROCm Profiler Tool that uses `rocprofilerV1` can be invoked using the
 following command:
@@ -40,11 +40,11 @@ int main() {
 This can be built in the following manner:
 
 ```sh
-$ gcc main.c -I/opt/rocm-5.4.4/include -L/opt/rocm-5.4.4/lib -lrocprofiler64
+$ gcc main.c -I@EPREFIX_ROCM_PATH@/include -L@EPREFIX_ROCM_PATH@/@LIBDIR@ -lrocprofiler64
 ```
 
 The resulting `a.out` will depend on
-`/opt/rocm-5.4.4/lib/librocprofiler64.so.1`.
+`@EPREFIX_ROCM_PATH@/@LIBDIR@/librocprofiler64.so.1`.
 
 The ROCm Profiler that uses `rocprofilerV2` API can be invoked using the
 following command:
@@ -67,10 +67,10 @@ int main() {
 This can be built in the following manner:
 
 ```sh
-$ gcc main.c -I/opt/rocm-5.4.4/include -L/opt/rocm-5.4.4/lib -lrocmtools
+$ gcc main.c -I@EPREFIX_ROCM_PATH@/include -L@EPREFIX_ROCM_PATH@/@LIBDIR@ -lrocmtools
 ```
 
-The resulting `a.out` will depend on `/opt/rocm-5.4.4/lib/librocmtools.so.1`.
+The resulting `a.out` will depend on `@EPREFIX_ROCM_PATH@/@LIBDIR@/librocmtools.so.1`.
 
 ## ROCprofiler for rocm 5.5.0
 
@@ -82,7 +82,7 @@ available in ROCm 5.5 but is deprecated
   |-----------------|-------------------------------------|-------------------------------------|---------------------------------|
   | **Tool script** | `bin/rocprof`                       | `bin/rocprofv2`                     | `bin/rocsight`                  |
   | **API include** | `include/rocprofiler/rocprofiler.h` | `include/rocprofiler/rocprofiler.h` | `include/rocmtools/rocmtools.h` |
-  | **API library** | `lib/librocprofiler64.so.1`         | `lib/librocprofiler64.so.1`         | `lib/librocmtools.so.1`         |
+  | **API library** | `@LIBDIR@/librocprofiler64.so.1`    | `@LIBDIR@/librocprofiler64.so.1`    | `@LIBDIR@/librocmtools.so.1`    |
 
 
 The ROCm Profiler Tool that uses `rocprofilerV1` can be invoked using the
@@ -108,11 +108,11 @@ int main() {
 This can be built in the following manner:
 
 ```sh
-$ gcc main.c -I/opt/rocm-5.5.0/include -L/opt/rocm-5.5.0/lib -lrocprofiler64
+$ gcc main.c -I@EPREFIX_ROCM_PATH@/include -L@EPREFIX_ROCM_PATH@/@LIBDIR@ -lrocprofiler64
 ```
 
 The resulting `a.out` will depend on
-`/opt/rocm-5.5.0/lib/librocprofiler64.so.1`.
+`@EPREFIX_ROCM_PATH@/@LIBDIR@/librocprofiler64.so.1`.
 
 The ROCm Profiler that uses `rocprofilerV2` API can be invoked using the
 following command:
@@ -135,11 +135,11 @@ int main() {
 This can be built in the following manner:
 
 ```sh
-$ gcc main.c -I/opt/rocm-5.5.0/include -L/opt/rocm-5.5.0/lib -lrocprofiler64
+$ gcc main.c -I@EPREFIX_ROCM_PATH@/include -L@EPREFIX_ROCM_PATH@/@LIBDIR@ -lrocprofiler64
 ```
 
 The resulting `a.out` will depend on
-`/opt/rocm-5.5.0/lib/librocprofiler64.so.1`.
+`@EPREFIX_ROCM_PATH@/@LIBDIR@/librocprofiler64.so.1`.
 
 ## ROCprofiler for rocm 5.6.0
 
@@ -151,7 +151,7 @@ deprecated in ROCm 5.5 have been removed
   |-----------------|-------------------------------------|----------------------------------------|
   | **Tool script** | `bin/rocprof`                       | `bin/rocprofv2`                        |
   | **API include** | `include/rocprofiler/rocprofiler.h` | `include/rocprofiler/v2/rocprofiler.h` |
-  | **API library** | `lib/librocprofiler.so.1`           | `lib/librocprofiler.so.2`              |
+  | **API library** | `@LIBDIR@/librocprofiler.so.1`      | `@LIBDIR@/librocprofiler.so.2`         |
 
 The ROCm Profiler Tool that uses `rocprofilerV1` can be invoked using the
 following command:
@@ -174,11 +174,11 @@ int main() {
 This can be built in the following manner:
 
 ```sh
-$ gcc main.c -I/opt/rocm-5.6.0/include -L/opt/rocm-5.6.0/lib -lrocprofiler64
+$ gcc main.c -I@EPREFIX_ROCM_PATH@/include -L@EPREFIX_ROCM_PATH@/@LIBDIR@ -lrocprofiler64
 ```
 
 The resulting `a.out` will depend on
-`/opt/rocm-5.6.0/lib/librocprofiler64.so.1`.
+`@EPREFIX_ROCM_PATH@/@LIBDIR@/librocprofiler64.so.1`.
 
 The ROCm Profiler that uses `rocprofilerV2` API can be invoked using the
 following command:
@@ -201,11 +201,11 @@ int main() {
 This can be built in the following manner:
 
 ```sh
-$ gcc main.c -I/opt/rocm-5.6.0/include -L/opt/rocm-5.6.0/lib -lrocprofiler64v2
+$ gcc main.c -I@EPREFIX_ROCM_PATH@/include -L@EPREFIX_ROCM_PATH@/lib -lrocprofiler64v2
 ```
 
 The resulting `a.out` will depend on
-`/opt/rocm-5.6.0/lib/librocprofiler64.so.2`.
+`@EPREFIX_ROCM_PATH@/@LIBDIR@/librocprofiler64.so.2`.
 
 ### Optimized
 - Improved Test Suite
diff -urp rocprofiler-rocm-5.7.0.orig/CMakeLists.txt rocprofiler-rocm-5.7.0/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/CMakeLists.txt	2023-09-29 05:48:00.871438626 -0700
+++ rocprofiler-rocm-5.7.0/CMakeLists.txt	2023-09-29 05:48:24.955438349 -0700
@@ -38,7 +38,7 @@ include(GNUInstallDirs)
 # set default ROCM_PATH
 if(NOT DEFINED ROCM_PATH)
     set(ROCM_PATH
-        "/opt/rocm"
+        "@ESYSROOT_ROCM_PATH@"
         CACHE STRING "Default ROCM installation directory")
 endif()
 
@@ -84,7 +84,7 @@ set(ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR
 set(LIB_DIR "${ROOT_DIR}/src")
 set(TEST_DIR "${ROOT_DIR}/test")
 
-# To set additional RUNPATH in libraries installed in /opt/rocm-ver/lib/roctracer
+# To set additional RUNPATH in libraries installed in @ESYSROOT_ROCM_PATH@/@LIBDIR@/roctracer
 set(ROCM_APPEND_PRIVLIB_RPATH "\$ORIGIN/..")
 
 option(AQLPROFILE "Add support for performance counters and metrics" ON)
@@ -93,7 +93,7 @@ find_package(
     amd_comgr REQUIRED CONFIG
     HINTS ${CMAKE_INSTALL_PREFIX}
     PATHS ${ROCM_PATH}
-    PATH_SUFFIXES lib/cmake/amd_comgr)
+    PATH_SUFFIXES @LIBDIR@/cmake/amd_comgr)
 message(STATUS "Code Object Manager found at ${amd_comgr_DIR}.")
 link_libraries(amd_comgr)
 
@@ -146,7 +146,7 @@ if(USE_PROF_API EQUAL 1)
     find_path(
         PROF_API_HEADER_DIR ${PROF_API_HEADER_NAME}
         HINTS ${PROF_API_HEADER_PATH}
-        PATHS /opt/rocm/include
+        PATHS @ESYSROOT_ROCM_PATH@/include
         PATH_SUFFIXES roctracer/ext)
     if(NOT PROF_API_HEADER_DIR)
         message(
diff -urp rocprofiler-rocm-5.7.0.orig/cmake_modules/env.cmake rocprofiler-rocm-5.7.0/cmake_modules/env.cmake
--- rocprofiler-rocm-5.7.0.orig/cmake_modules/env.cmake	2023-09-29 05:48:00.871438626 -0700
+++ rocprofiler-rocm-5.7.0/cmake_modules/env.cmake	2023-09-29 05:48:24.955438349 -0700
@@ -26,7 +26,7 @@ set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}
 add_definitions(-DNEW_TRACE_API=1)
 
 # CLANG options
-if("$ENV{CXX}" STREQUAL "/usr/bin/clang++")
+if("$ENV{CXX}" MATCHES "clang[+][+]$")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ferror-limit=1000000")
 endif()
 
@@ -49,26 +49,26 @@ endif()
 find_package(
     hsa-runtime64 CONFIG REQUIRED
     HINTS ${CMAKE_PREFIX_PATH}
-    PATHS /opt/rocm
-    PATH_SUFFIXES lib/cmake/hsa-runtime64)
+    PATHS @ESYSROOT_ROCM_PATH@
+    PATH_SUFFIXES @LIBDIR@/cmake/hsa-runtime64)
 
 # find KFD thunk
 find_package(
     hsakmt CONFIG REQUIRED
     HINTS ${CMAKE_PREFIX_PATH}
-    PATHS /opt/rocm
-    PATH_SUFFIXES lib/cmake/hsakmt)
+    PATHS @ESYSROOT_ROCM_PATH@
+    PATH_SUFFIXES @LIBDIR@/cmake/hsakmt)
 
 # Find ROCm TODO: Need a better method to find the ROCm path
 find_path(
     HSA_KMT_INC_PATH "hsakmt/hsakmt.h"
     HINTS ${CMAKE_PREFIX_PATH}
-    PATHS /opt/rocm
+    PATHS @ESYSROOT_ROCM_PATH@
     PATH_SUFFIXES include)
 if("${HSA_KMT_INC_PATH}" STREQUAL "")
     get_target_property(HSA_KMT_INC_PATH hsakmt::hsakmt INTERFACE_INCLUDE_DIRECTORIES)
 endif()
-# Include path: /opt/rocm-ver/include. Go up one level to get ROCm  path
+# Include path: @ESYSROOT_ROCM_PATH@/include. Go up one level to get ROCm  path
 get_filename_component(ROCM_ROOT_DIR "${HSA_KMT_INC_PATH}" DIRECTORY)
 
 # Basic Tool Chain Information
diff -urp rocprofiler-rocm-5.7.0.orig/cmake_modules/FindLibDw.cmake rocprofiler-rocm-5.7.0/cmake_modules/FindLibDw.cmake
--- rocprofiler-rocm-5.7.0.orig/cmake_modules/FindLibDw.cmake	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/cmake_modules/FindLibDw.cmake	2023-09-29 05:48:24.955438349 -0700
@@ -8,9 +8,9 @@
 find_path(
     FIND_LIBDW_INCLUDES
     NAMES elfutils/libdw.h
-    PATHS /usr/include /usr/local/include)
+    PATHS @ESYSROOT@/usr/include @ESYSROOT@/usr/local/include)
 
-find_library(FIND_LIBDW_LIBRARIES NAMES dw PATH /usr/lib /usr/local/lib)
+find_library(FIND_LIBDW_LIBRARIES NAMES dw PATH @ESYSROOT@/usr/@LIBDIR@ @ESYSROOT@/usr/local/@LIBDIR@)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(LibDw DEFAULT_MSG FIND_LIBDW_INCLUDES
diff -urp rocprofiler-rocm-5.7.0.orig/cmake_modules/FindLibElf.cmake rocprofiler-rocm-5.7.0/cmake_modules/FindLibElf.cmake
--- rocprofiler-rocm-5.7.0.orig/cmake_modules/FindLibElf.cmake	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/cmake_modules/FindLibElf.cmake	2023-09-29 05:48:24.955438349 -0700
@@ -8,9 +8,9 @@
 find_path(
     FIND_LIBELF_INCLUDES
     NAMES libelf.h
-    PATHS /usr/include /usr/include/libelf /usr/local/include /usr/local/include/libelf)
+    PATHS @ESYSROOT@/usr/include @ESYSROOT@/usr/include/libelf @ESYSROOT@/usr/local/include @ESYSROOT@/usr/local/include/libelf)
 
-find_library(FIND_LIBELF_LIBRARIES NAMES elf PATH /usr/lib /usr/local/lib)
+find_library(FIND_LIBELF_LIBRARIES NAMES elf PATH @ESYSROOT@/usr/@LIBDIR@ @ESYSROOT@/usr/local/@LIBDIR@)
 
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(LibElf DEFAULT_MSG FIND_LIBELF_INCLUDES
diff -urp rocprofiler-rocm-5.7.0.orig/doc/rocprof_tool.md rocprofiler-rocm-5.7.0/doc/rocprof_tool.md
--- rocprofiler-rocm-5.7.0.orig/doc/rocprof_tool.md	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/doc/rocprof_tool.md	2023-09-29 05:48:24.955438349 -0700
@@ -72,7 +72,7 @@ Available counters and metrics can be qu
 Examples:
 ```
 $ rocprof --list-basic
-RPL: on '191018_014450' from '/opt/rocm/rocprofiler' in '/…./MatrixTranspose'
+RPL: on '191018_014450' from '@ESYSROOT_ROCM_PATH@/rocprofiler' in '/…./MatrixTranspose'
 ROCProfiler: rc-file '/…./rpl_rc.xml'
 Basic HW counters:
   gpu-agent0 : GRBM_COUNT : Tie High - Count Number of Clocks
@@ -87,7 +87,7 @@ Basic HW counters:
 	  . . .
 
 $ rocprof --list-derived
-RPL: on '191018_015911' from '/opt/rocm/rocprofiler' in '/home/evgeny/work/BUILD/0_MatrixTranspose'
+RPL: on '191018_015911' from '@ESYSROOT_ROCM_PATH@/rocprofiler' in '/home/evgeny/work/BUILD/0_MatrixTranspose'
 ROCProfiler: rc-file '/home/evgeny/rpl_rc.xml'
 Derived metrics:
   gpu-agent0 : TCC_HIT_sum : Number of cache hits. Sum over TCC instances.
@@ -113,7 +113,7 @@ To dump a list of metrics exceeding HW l
 The tool supports automatic splitting on optimal metric groups:
 ```
 $ rocprof -i input.txt ./MatrixTranspose
-RPL: on '191018_032645' from '/opt/rocm/rocprofiler' in '/…./MatrixTranspose'
+RPL: on '191018_032645' from '@ESYSROOT_ROCM_PATH@/rocprofiler' in '/…./MatrixTranspose'
 RPL: profiling './MatrixTranspose'
 RPL: input file 'input.txt'
 RPL: output dir '/tmp/rpl_data_191018_032645_12106'
@@ -220,10 +220,10 @@ Good review can be found by the link: ht
 The command line options can be printed with option ‘-h’:
 ```
 $ rocprof -h
-RPL: on '191018_023018' from '/opt/rocm/rocprofiler' in '/…./MatrixTranspose'
+RPL: on '191018_023018' from '@ESYSROOT_ROCM_PATH@/rocprofiler' in '/…./MatrixTranspose'
 ROCm Profiling Library (RPL) run script, a part of ROCprofiler library package.
-Full path: /opt/rocm/rocprofiler/bin/rocprof
-Metrics definition: /opt/rocm/rocprofiler/lib/metrics.xml
+Full path: @ESYSROOT_ROCM_PATH@/bin/rocprof
+Metrics definition: @ESYSROOT_ROCM_PATH@/rocprofiler/@LIBDIR@/metrics.xml
 
 Usage:
   rocprof [-h] [--list-basic] [--list-derived] [-i <input .txt/.xml file>] [-o <output CSV file>] <app command line>
diff -urp rocprofiler-rocm-5.7.0.orig/doc/rocprofv2_tool.md rocprofiler-rocm-5.7.0/doc/rocprofv2_tool.md
--- rocprofiler-rocm-5.7.0.orig/doc/rocprofv2_tool.md	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/doc/rocprofv2_tool.md	2023-09-29 05:48:24.955438349 -0700
@@ -39,7 +39,7 @@ The first API library version for ROCPro
 
 The user has two options for building:
 
-- Option 1 (It will install in the path saved in ROCM_PATH environment variable or /opt/rocm if ROCM_PATH is empty):
+- Option 1 (It will install in the path saved in ROCM_PATH environment variable or @ESYSROOT_ROCM_PATH@ if ROCM_PATH is empty):
 
   - Run
   ```bash
@@ -229,7 +229,7 @@ The user has two options for building:
 We make use of doxygen to automatically generate API documentation. Generated document can be found in the following path:
 
   ```bash
-      # ROCM_PATH by default is /opt/rocm
+      # ROCM_PATH by default is @ESYSROOT_ROCM_PATH@
       # It can be set by the user in different location if needed.
       <ROCM_PATH>/share/doc/rocprofv2
   ```
diff -urp rocprofiler-rocm-5.7.0.orig/plugin/att/CMakeLists.txt rocprofiler-rocm-5.7.0/plugin/att/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/plugin/att/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/plugin/att/CMakeLists.txt	2023-09-29 05:48:24.955438349 -0700
@@ -33,7 +33,7 @@ set_target_properties(
     att_plugin
     PROPERTIES CXX_VISIBILITY_PRESET hidden
                LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../exportmap
-               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib/rocprofiler
+               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/@LIBDIR@/rocprofiler
                INSTALL_RPATH "${ROCM_APPEND_PRIVLIB_RPATH}")
 
 target_compile_definitions(att_plugin PRIVATE HIP_PROF_HIP_API_STRING=1
@@ -44,6 +44,7 @@ target_include_directories(att_plugin PR
 target_link_options(
     att_plugin PRIVATE -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../exportmap
     -Wl,--no-undefined)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(att_plugin PRIVATE rocprofiler-v2 hsa-runtime64::hsa-runtime64
                                          stdc++fs)
 
diff -urp rocprofiler-rocm-5.7.0.orig/plugin/cli/CMakeLists.txt rocprofiler-rocm-5.7.0/plugin/cli/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/plugin/cli/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/plugin/cli/CMakeLists.txt	2023-09-29 05:48:24.955438349 -0700
@@ -29,7 +29,7 @@ set_target_properties(
     cli_plugin
     PROPERTIES CXX_VISIBILITY_PRESET hidden
                LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../exportmap
-               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib/rocprofiler
+               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/@LIBDIR@/rocprofiler
                INSTALL_RPATH "${ROCM_APPEND_PRIVLIB_RPATH}")
 
 target_compile_definitions(cli_plugin PRIVATE HIP_PROF_HIP_API_STRING=1
@@ -41,6 +41,7 @@ target_link_options(
     cli_plugin PRIVATE -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../exportmap
     -Wl,--no-undefined)
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(cli_plugin PRIVATE rocprofiler-v2 hsa-runtime64::hsa-runtime64
                                          stdc++fs atomic amd_comgr dl)
 
diff -urp rocprofiler-rocm-5.7.0.orig/plugin/ctf/CMakeLists.txt rocprofiler-rocm-5.7.0/plugin/ctf/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/plugin/ctf/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/plugin/ctf/CMakeLists.txt	2023-09-29 05:48:24.955438349 -0700
@@ -36,7 +36,7 @@ set_target_properties(
     ctf_plugin
     PROPERTIES CXX_VISIBILITY_PRESET hidden
                LINK_DEPENDS "${CMAKE_CURRENT_SOURCE_DIR}/../exportmap"
-               LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib/rocprofiler"
+               LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/@LIBDIR@/rocprofiler"
                INSTALL_RPATH "${ROCM_APPEND_PRIVLIB_RPATH}")
 set(METADATA_STREAM_FILE_DIR "${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}/plugin/ctf")
 target_compile_definitions(
@@ -53,6 +53,7 @@ target_include_directories(
 target_link_options(
     ctf_plugin PRIVATE "-Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../exportmap"
     -Wl,--no-undefined)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(ctf_plugin PRIVATE rocprofiler-v2 hsa-runtime64::hsa-runtime64
                                          stdc++fs dl)
 install(TARGETS ctf_plugin LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}"
diff -urp rocprofiler-rocm-5.7.0.orig/plugin/file/CMakeLists.txt rocprofiler-rocm-5.7.0/plugin/file/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/plugin/file/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/plugin/file/CMakeLists.txt	2023-09-29 05:48:24.955438349 -0700
@@ -29,7 +29,7 @@ set_target_properties(
     file_plugin
     PROPERTIES CXX_VISIBILITY_PRESET hidden
                LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../exportmap
-               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib/rocprofiler
+               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/@LIBDIR@/rocprofiler
                INSTALL_RPATH "${ROCM_APPEND_PRIVLIB_RPATH}")
 
 target_compile_definitions(file_plugin PRIVATE HIP_PROF_HIP_API_STRING=1
@@ -41,6 +41,7 @@ target_link_options(
     file_plugin PRIVATE -Wl,--version-script=${CMAKE_CURRENT_SOURCE_DIR}/../exportmap
     -Wl,--no-undefined)
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(file_plugin PRIVATE rocprofiler-v2 hsa-runtime64::hsa-runtime64
                                           stdc++fs amd_comgr dl)
 
diff -urp rocprofiler-rocm-5.7.0.orig/plugin/perfetto/CMakeLists.txt rocprofiler-rocm-5.7.0/plugin/perfetto/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/plugin/perfetto/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/plugin/perfetto/CMakeLists.txt	2023-09-29 05:48:24.955438349 -0700
@@ -7,7 +7,7 @@ set_target_properties(
     perfetto_plugin
     PROPERTIES CXX_VISIBILITY_PRESET hidden
                LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../exportmap
-               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib/rocprofiler
+               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/@LIBDIR@/rocprofiler
                INSTALL_RPATH "${ROCM_APPEND_PRIVLIB_RPATH}")
 
 target_compile_definitions(perfetto_plugin PRIVATE HIP_PROF_HIP_API_STRING=1
diff -urp rocprofiler-rocm-5.7.0.orig/README.md rocprofiler-rocm-5.7.0/README.md
--- rocprofiler-rocm-5.7.0.orig/README.md	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/README.md	2023-09-29 05:48:24.955438349 -0700
@@ -108,7 +108,7 @@ The first API library version for ROCPro
 
 The user has two options for building:
 
-- Option 1 (It will install in the path saved in ROCM_PATH environment variable or /opt/rocm if ROCM_PATH is empty):
+- Option 1 (It will install in the path saved in ROCM_PATH environment variable or @EPREFIX_ROCM_PATH@ if ROCM_PATH is empty):
 
   - Run
 
@@ -381,7 +381,7 @@ To enable error messages logging to '/tm
 We make use of doxygen to automatically generate API documentation. Generated document can be found in the following path:
 
    ```bash
-   # ROCM_PATH by default is /opt/rocm
+   # ROCM_PATH by default is @EPREFIX_ROCM_PATH@
    # It can be set by the user in different location if needed.
    <ROCM_PATH>/share/doc/rocprofv2
    ```
diff -urp rocprofiler-rocm-5.7.0.orig/rocprofiler-backward-compat.cmake rocprofiler-rocm-5.7.0/rocprofiler-backward-compat.cmake
--- rocprofiler-rocm-5.7.0.orig/rocprofiler-backward-compat.cmake	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/rocprofiler-backward-compat.cmake	2023-09-29 05:48:24.955438349 -0700
@@ -23,7 +23,7 @@ set(ROCPROF_BUILD_DIR ${CMAKE_CURRENT_BI
 set(ROCPROF_WRAPPER_DIR ${ROCPROF_BUILD_DIR}/wrapper_dir)
 set(ROCPROF_WRAPPER_INC_DIR ${ROCPROF_WRAPPER_DIR}/include)
 set(ROCPROF_WRAPPER_BIN_DIR ${ROCPROF_WRAPPER_DIR}/bin)
-set(ROCPROF_WRAPPER_LIB_DIR ${ROCPROF_WRAPPER_DIR}/lib)
+set(ROCPROF_WRAPPER_LIB_DIR ${ROCPROF_WRAPPER_DIR}/@LIBDIR@)
 set(ROCPROF_WRAPPER_TOOL_DIR ${ROCPROF_WRAPPER_DIR}/tool)
 
 # Function to generate header template file
@@ -58,12 +58,12 @@ function(create_header_template)
 #define ROCM_HEADER_WRAPPER_WERROR @deprecated_error@
 #endif
 #if ROCM_HEADER_WRAPPER_WERROR  /* ROCM_HEADER_WRAPPER_WERROR 1 */
-#error \"This file is deprecated. Use file from include path /opt/rocm-ver/include/ and prefix with rocprofiler\"
+#error \"This file is deprecated. Use file from include path @EPREFIX_ROCM_PATH@/include/ and prefix with rocprofiler\"
 #else      /* ROCM_HEADER_WRAPPER_WERROR 0 */
 #if defined(__GNUC__)
-#error \"This file is deprecated. Use file from include path /opt/rocm-ver/include/ and prefix with rocprofiler\"
+#error \"This file is deprecated. Use file from include path @EPREFIX_ROCM_PATH@/include/ and prefix with rocprofiler\"
 #else
-#pragma message(\"This file is deprecated. Use file from include path /opt/rocm-ver/include/ and prefix with rocprofiler\")
+#pragma message(\"This file is deprecated. Use file from include path @EPREFIX_ROCM_PATH@/include/ and prefix with rocprofiler\")
 #endif
 #endif /* ROCM_HEADER_WRAPPER_WERROR */
 
@@ -149,9 +149,9 @@ function(create_library_symlink)
         WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
         COMMAND
             ${CMAKE_COMMAND} -E create_symlink
-            ../../${CMAKE_INSTALL_LIBDIR}/${ROCPROFILER_NAME}/${LIB_ROCPROFTOOL}
+            ../../${CMAKE_INSTALL_LIBDIR}/${LIB_ROCPROFTOOL}
             ${ROCPROF_WRAPPER_TOOL_DIR}/${LIB_TOOL})
-    # create symlink to test binary since its saved in lib folder , the code for the same
+    # create symlink to test binary since its saved in @LIBDIR@ folder , the code for the same
     # is added here With File reorg ,binary name changed from ctrl to rocprof-ctrl
     set(TEST_CTRL "ctrl")
     set(TEST_ROCPROFCTRL "rocprof-ctrl")
@@ -203,7 +203,7 @@ install(
     PATTERN ${ROCPROFILER_LIBRARY}.so EXCLUDE)
 install(
     FILES ${ROCPROF_WRAPPER_LIB_DIR}/${ROCPROFILER_LIBRARY}.so
-    DESTINATION ${ROCPROFILER_NAME}/lib
+    DESTINATION ${ROCPROFILER_NAME}/@LIBDIR@
     COMPONENT dev)
 # install tools directory
 install(
diff -urp rocprofiler-rocm-5.7.0.orig/samples/CMakeLists.txt rocprofiler-rocm-5.7.0/samples/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/samples/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/samples/CMakeLists.txt	2023-09-29 05:48:24.955438349 -0700
@@ -15,23 +15,23 @@ find_file(
     NO_DEFAULT_PATH REQUIRED)
 get_filename_component(HSA_RUNTIME_INC_PATH ${HSA_H} DIRECTORY)
 include_directories(${HSA_RUNTIME_INC_PATH})
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 
 # Set the HIP language runtime link flags as FindHIP does not set them.
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG})
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP})
 set(CMAKE_EXECUTABLE_RPATH_LINK_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG})
 
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/lib/cmake/hip")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 set(CMAKE_HIP_ARCHITECTURES OFF)
 find_package(HIP REQUIRED MODULE)
 
 find_package(
     Clang REQUIRED CONFIG
-    PATHS "${ROCM_PATH}"
-    PATH_SUFFIXES "llvm/lib/cmake/clang")
+    PATHS "@ESYSROOT_LLVM_PATH@/@LIBDIR@/cmake/clang")
 
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules"
-                      "${ROCM_PATH}/lib/cmake/hip")
+                      "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 find_package(LibElf REQUIRED)
 find_package(LibDw REQUIRED)
 
@@ -174,6 +174,7 @@ if(HAVE_MEMFD_CREATE)
     target_compile_definitions(pc_sampling_code_printing PRIVATE HAVE_MEMFD_CREATE)
 endif()
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(
     pc_sampling_code_printing
     PRIVATE rocprofiler-v2 rocm-dbgapi ${LIBELF_LIBRARIES} ${LIBDW_LIBRARIES}
diff -urp rocprofiler-rocm-5.7.0.orig/samples/Makefile rocprofiler-rocm-5.7.0/samples/Makefile
--- rocprofiler-rocm-5.7.0.orig/samples/Makefile	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/samples/Makefile	2023-09-29 05:48:24.955438349 -0700
@@ -1,5 +1,5 @@
-ROCM_PATH ?=/opt/rocm
-ROCPROFILER_LIBS_PATH ?=$(ROCM_PATH)/lib
+ROCM_PATH ?=@ESYSROOT_ROCM_PATH@
+ROCPROFILER_LIBS_PATH ?=$(ROCM_PATH)/@LIBDIR@
 ROCM_INCLUDES=-I$(ROCM_PATH)/include
 ROCPROFILER_INCLUDES=-I$(ROCPROFILER_LIBS_PATH)/../include/rocprofiler/
 
diff -urp rocprofiler-rocm-5.7.0.orig/samples/pcsampler/code_printing_sample/Makefile rocprofiler-rocm-5.7.0/samples/pcsampler/code_printing_sample/Makefile
--- rocprofiler-rocm-5.7.0.orig/samples/pcsampler/code_printing_sample/Makefile	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/samples/pcsampler/code_printing_sample/Makefile	2023-09-29 05:48:24.955438349 -0700
@@ -1,11 +1,11 @@
 # -*- makefile-gmake -*-
 
-ROCM_PATH ?= /opt/rocm
+ROCM_PATH ?= @ESYSROOT_ROCM_PATH@
 HIP_PATH ?= $(ROCM_PATH)/hip
 HIPCC := $(HIP_PATH)/bin/hipcc
 
-ROCM_PATH ?=/opt/rocm
-ROCPROFILER_LIBS_PATH ?=$(ROCM_PATH)/lib
+ROCM_PATH ?=@ESYSROOT_ROCM_PATH@
+ROCPROFILER_LIBS_PATH ?=$(ROCM_PATH)/@LIBDIR@
 ROCPROFILER_INCLUDES=$(ROCPROFILER_LIBS_PATH)/../include/rocprofiler/
 
 ifndef ROCPROFILER_PATH
@@ -38,7 +38,7 @@ CPPFLAGS += -DHAVE_MEMFD_CREATE
 
 $(prog): CC = $(HIPCC)
 $(prog): CPPFLAGS += -I$(ROCPROFILER_INCLUDES) -I$(ROCM_PATH)/include
-$(prog): LDFLAGS := -L$(ROCPROFILER_LIBS_PATH) -L$(ROCM_PATH)/lib
+$(prog): LDFLAGS := -L$(ROCPROFILER_LIBS_PATH) -L$(ROCM_PATH)/@LIBDIR@
 $(prog): LDLIBS += -ldl -lpthread -lhsa-runtime64 -lrocprofiler64v2 -lrocm-dbgapi -ldw -lelf
 $(objs): CXX = $(HIPCC)
 
diff -urp rocprofiler-rocm-5.7.0.orig/samples/pcsampler/code_printing_sample/README.md rocprofiler-rocm-5.7.0/samples/pcsampler/code_printing_sample/README.md
--- rocprofiler-rocm-5.7.0.orig/samples/pcsampler/code_printing_sample/README.md	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/samples/pcsampler/code_printing_sample/README.md	2023-09-29 05:48:24.959438349 -0700
@@ -15,7 +15,7 @@ build the demo program are:
 * libdw (**not** libdwarf)
 * libelf
 
-If ROCm is installed in the standard location (`/opt/rocm`), running `make` in
+If ROCm is installed in the standard location (`@EPREFIX_ROCM_PATH@`), running `make` in
 the same directory as this README should work; otherwise, set `ROCM_PATH` to the
 location of the ROCm installation in your environment and `ROCPROFILER_PATH` to
 the location of the ROCProfiler source repo before running `make`.
diff -urp rocprofiler-rocm-5.7.0.orig/samples/README.md rocprofiler-rocm-5.7.0/samples/README.md
--- rocprofiler-rocm-5.7.0.orig/samples/README.md	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/samples/README.md	2023-09-29 05:48:24.959438349 -0700
@@ -48,8 +48,8 @@ This code sample demonstrates how to use
 
 
 ## How to compile
-In order to get the samples to compile, make sure to copy rocprofiler binaries into /opt/rocm/lib
-Running 'make install' inside the rocprofiler/build folder will copy the binaries to /opt/rocm/lib
+In order to get the samples to compile, make sure to copy rocprofiler binaries into @EPREFIX_ROCM_PATH@/@LIBIDR@
+Running 'make install' inside the rocprofiler/build folder will copy the binaries to @EPREFIX_ROCM_PATH@/@LIBDIR@
 
 Alternately, change the 'ROCPROFILER_LIBS_PATH' variable in the Makefile to point to the rocprofiler/build folder.
 After modifications to Makefile are done, run:
@@ -66,10 +66,10 @@ After modifications to Makefile are done
 
 ### How to run
 Before running, ROCPROFILER_METRICS_PATH needs to be set to point to 'derived_counters.xml'
-If the rocprofiler binaries are present in the rocm installation path /opt/rocm
+If the rocprofiler binaries are present in the rocm installation path @EPREFIX_ROCM_PATH@
 then below command will work:
 ```bash
-export ROCPROFILER_METRICS_PATH=/opt/rocm/libexec/rocprofiler/counters/derived_counters.xml
+export ROCPROFILER_METRICS_PATH=@EPREFIX_ROCM_PATH@/libexec/rocprofiler/counters/derived_counters.xml
 ```
 
 Otherwise, make it point to rocprofiler/build/libexec/rocprofiler/counters/derived_counters.xml like below:
@@ -89,4 +89,4 @@ sampling API, with additional code to il
 correlation of sampled PC addresses with their disassembled machine code, as
 well as source code and symbolic debugging information if available.
 
-See [PC-Sampler README](pcsampler/code_printing_sample/README.md)
\ No newline at end of file
+See [PC-Sampler README](pcsampler/code_printing_sample/README.md)
diff -urp rocprofiler-rocm-5.7.0.orig/samples/run_samples.sh rocprofiler-rocm-5.7.0/samples/run_samples.sh
--- rocprofiler-rocm-5.7.0.orig/samples/run_samples.sh	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/samples/run_samples.sh	2023-09-29 05:48:24.959438349 -0700
@@ -1,6 +1,6 @@
 #!/bin/bash
 CURRENT_DIR=$(dirname -- $(realpath ${BASH_SOURCE[0]}));
-ROCM_PATH="${ROCM_PATH:=/opt/rocm}"
+ROCM_PATH="${ROCM_PATH:=@ESYSROOT_ROCM_PATH@}"
 
 
 echo -e "Running Samples"
@@ -23,4 +23,4 @@ echo -e "\t\tHIP/HSA Trace Synchronous S
 eval ${CURRENT_DIR}/tracer_hip_hsa
 
 echo -e "\t\tHIP/HSA Trace ASynchronous Sample:"
-eval ${CURRENT_DIR}/tracer_hip_hsa_async
\ No newline at end of file
+eval ${CURRENT_DIR}/tracer_hip_hsa_async
diff -urp rocprofiler-rocm-5.7.0.orig/src/api/CMakeLists.txt rocprofiler-rocm-5.7.0/src/api/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/src/api/CMakeLists.txt	2023-09-29 05:48:00.871438626 -0700
+++ rocprofiler-rocm-5.7.0/src/api/CMakeLists.txt	2023-09-29 05:48:24.959438349 -0700
@@ -243,6 +243,7 @@ target_include_directories(
     ${ROCPROFILER_TARGET}
     PUBLIC $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include/rocprofiler>
     PRIVATE ${LIB_DIR} ${ROOT_DIR} ${PROJECT_SOURCE_DIR}/include/rocprofiler)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(${ROCPROFILER_TARGET} PRIVATE ${AQLPROFILE_LIB}
                                                     hsa-runtime64::hsa-runtime64 c stdc++)
 
@@ -360,15 +361,15 @@ add_custom_command(
     TARGET rocprofiler-v2
     POST_BUILD
     COMMAND ${CMAKE_COMMAND} -E rm -f
-            ${CMAKE_BINARY_DIR}/lib/lib${ROCPROFILER_LIBRARY_V1_NAME}.so
+            ${CMAKE_BINARY_DIR}/@LIBDIR@/lib${ROCPROFILER_LIBRARY_V1_NAME}.so
     COMMAND
         ${CMAKE_COMMAND} -E create_symlink
         lib${ROCPROFILER_LIBRARY_V1_NAME}.so.${ROCPROFILER_LIBRARY_V1_SOVERSION}
-        ${CMAKE_BINARY_DIR}/lib/lib${ROCPROFILER_LIBRARY_V1_NAME}.so
+        ${CMAKE_BINARY_DIR}/@LIBDIR@/lib${ROCPROFILER_LIBRARY_V1_NAME}.so
     COMMAND
         ${CMAKE_COMMAND} -E create_symlink
         lib${ROCPROFILER_LIBRARY_V2_NAME}.so.${ROCPROFILER_LIBRARY_V2_SOVERSION}
-        ${CMAKE_BINARY_DIR}/lib/lib${ROCPROFILER_LIBRARY_V2_NAME}v2.so)
+        ${CMAKE_BINARY_DIR}/@LIBDIR@/lib${ROCPROFILER_LIBRARY_V2_NAME}v2.so)
 # Add custom target to trigger the create_symlink command
 add_custom_target(create_rocprofiler_lib DEPENDS rocprofiler-v2 ${ROCPROFILER_TARGET})
 
@@ -391,14 +392,14 @@ install(
     CODE "execute_process( \
     COMMAND ${CMAKE_COMMAND} -E create_symlink \
     lib${ROCPROFILER_LIBRARY_V1_NAME}.so.${ROCPROFILER_LIBRARY_V1_SOVERSION} \
-    ${CMAKE_INSTALL_PREFIX}/lib/lib${ROCPROFILER_LIBRARY_V1_NAME}.so \
+    ${CMAKE_INSTALL_PREFIX}/@LIBDIR@/lib${ROCPROFILER_LIBRARY_V1_NAME}.so \
     )"
     COMPONENT dev)
 install(
     CODE "execute_process( \
     COMMAND ${CMAKE_COMMAND} -E create_symlink \
     lib${ROCPROFILER_LIBRARY_V2_NAME}.so.${ROCPROFILER_LIBRARY_V2_SOVERSION} \
-    ${CMAKE_INSTALL_PREFIX}/lib/lib${ROCPROFILER_LIBRARY_V2_NAME}v2.so \
+    ${CMAKE_INSTALL_PREFIX}/@LIBDIR@/lib${ROCPROFILER_LIBRARY_V2_NAME}v2.so \
     )"
     COMPONENT dev)
 
diff -urp rocprofiler-rocm-5.7.0.orig/src/tools/CMakeLists.txt rocprofiler-rocm-5.7.0/src/tools/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/src/tools/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/src/tools/CMakeLists.txt	2023-09-29 05:48:24.959438349 -0700
@@ -15,7 +15,7 @@ add_library(rocprofiler_tool SHARED ${RO
 set_target_properties(
     rocprofiler_tool
     PROPERTIES CXX_VISIBILITY_PRESET hidden
-               LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/rocprofiler
+               LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/@LIBDIR@/rocprofiler 
                LINK_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/exportmap
                INSTALL_RPATH "${ROCM_APPEND_PRIVLIB_RPATH}")
 
@@ -28,6 +28,8 @@ target_compile_definitions(
     PUBLIC AMD_INTERNAL_BUILD
     PRIVATE HIP_PROF_HIP_API_STRING=1 __HIP_PLATFORM_HCC__=1)
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
+
 if(ASAN)
     target_compile_options(rocprofiler_tool PRIVATE -fsanitize=address)
     target_link_libraries(
diff -urp rocprofiler-rocm-5.7.0.orig/src/tools/rocprofv2/CMakeLists.txt rocprofiler-rocm-5.7.0/src/tools/rocprofv2/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/src/tools/rocprofv2/CMakeLists.txt	2023-09-29 05:48:00.879438626 -0700
+++ rocprofiler-rocm-5.7.0/src/tools/rocprofv2/CMakeLists.txt	2023-09-29 05:48:24.959438349 -0700
@@ -34,6 +34,7 @@ target_include_directories(
            $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
            $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/inc>
     PRIVATE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/inc)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(rocprofv2 PRIVATE ${AQLPROFILE_LIB} hsa-runtime64::hsa-runtime64
                                         stdc++fs Threads::Threads atomic -ldl)
 # install(TARGETS rocprofv2 RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT runtime)
diff -urp rocprofiler-rocm-5.7.0.orig/src/tools/rocprofv2/rocprofv2.cpp rocprofiler-rocm-5.7.0/src/tools/rocprofv2/rocprofv2.cpp
--- rocprofiler-rocm-5.7.0.orig/src/tools/rocprofv2/rocprofv2.cpp	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/src/tools/rocprofv2/rocprofv2.cpp	2023-09-29 05:48:24.959438349 -0700
@@ -71,7 +71,7 @@ void runMemCheck(fs::path bin_path) {
   log_path = log_path.replace_filename("memleaks.log");
 
   std::cout << "Running Memory Leaks Check...." << std::endl;
-  std::string run_command = "LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.6:" + pathenv +
+  std::string run_command = "LD_PRELOAD=@EPREFIX@/usr/lib/gcc/@CHOST@/@GCC_SLOT@/libasan.so:" + pathenv +
       " ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=suppressions=" + suppr_path.string() +
       " COUNTERS_PATH=" + counter_path.string() + " " + app_path.string() +
       " > /tmp/rocprofv2-temp 2> " + log_path.string();
@@ -180,7 +180,7 @@ int main(int argc, char** argv) {
       // ASAN run
     } else if (strcmp(argv[i], "-a") == 0 || strcmp(argv[i], "--asan") == 0) {
       std::string current_ld_preload{getenv("LD_PRELOAD")};
-      std::string ld_preload = "/usr/lib/x86_64-linux-gnu/libasan.so.6";
+      std::string ld_preload = "@EPREFIX@/usr/lib/gcc/@CHOST@/@GCC_SLOT@/libasan.so";
       if (!current_ld_preload.empty()) ld_preload = current_ld_preload + ":" + ld_preload;
 
       std::cout << ld_preload << std::endl;
@@ -232,7 +232,7 @@ int main(int argc, char** argv) {
   if (strstr(bin_path.c_str(), "build") != nullptr)
     pathenv_str = bin_path.replace_filename("librocprofiler_tool.so");
   else
-    pathenv_str = bin_path.remove_filename().replace_filename("lib/librocprofiler_tool.so");
+    pathenv_str = bin_path.remove_filename().replace_filename("@LIBDIR@/librocprofiler_tool.so");
   if (!current_ld_preload.empty())
     pathenv_str = "LD_PRELOAD=" + current_ld_preload + ":" + pathenv_str;
   else
@@ -253,4 +253,4 @@ int main(int argc, char** argv) {
   // variables and original arguments
   runApp(app_path_str.c_str(), envp_run, app_args, number_of_passes);
   return 1;
-}
\ No newline at end of file
+}
diff -urp rocprofiler-rocm-5.7.0.orig/src/tools/rocsys/rocsys.cpp rocprofiler-rocm-5.7.0/src/tools/rocsys/rocsys.cpp
--- rocprofiler-rocm-5.7.0.orig/src/tools/rocsys/rocsys.cpp	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/src/tools/rocsys/rocsys.cpp	2023-09-29 05:48:24.959438349 -0700
@@ -97,7 +97,7 @@ int main(int argc, char* argv[]) {
   if (Dl_info dl_info; dladdr(reinterpret_cast<void*>(main), &dl_info) != 0) {
     bin_path = fs::path(dl_info.dli_fname).remove_filename();
   } else {
-    bin_path = "/opt/rocm";
+    bin_path = "@EPREFIX_ROCM_PATH@";
   }
 
   std::string session_name = "default_session_roctracer";
diff -urp rocprofiler-rocm-5.7.0.orig/test/CMakeLists.txt rocprofiler-rocm-5.7.0/test/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/test/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/test/CMakeLists.txt	2023-09-29 05:48:24.959438349 -0700
@@ -50,6 +50,7 @@ find_file(
     NO_DEFAULT_PATH REQUIRED)
 get_filename_component(HSA_RUNTIME_INC_PATH ${HSA_H} DIRECTORY)
 include_directories(${HSA_RUNTIME_INC_PATH})
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 
 # C test
 add_executable("c_test" ${TEST_DIR}/app/c_test.c)
@@ -94,8 +95,7 @@ set(KERN_SRC ${TEST_DIR}/${TEST_NAME}/${
 
 find_package(
     Clang REQUIRED CONFIG
-    PATHS ${ROCM_ROOT_DIR}
-    PATH_SUFFIXES "llvm/lib/cmake/clang")
+    PATHS "@EPREFIX_LLVM_PATH@/@LIBDIR@/cmake/clang")
 
 # Build the hsa (standalone) simple_convolution test
 function(generate_hsaco TARGET_ID INPUT_FILE OUTPUT_FILE)
diff -urp rocprofiler-rocm-5.7.0.orig/test/run.sh rocprofiler-rocm-5.7.0/test/run.sh
--- rocprofiler-rocm-5.7.0.orig/test/run.sh	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/test/run.sh	2023-09-29 05:48:24.959438349 -0700
@@ -63,7 +63,7 @@ eval_test() {
 }
 
 # paths to ROC profiler and oher libraries
-export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD:$PWD/../../lib:$BIN_DIR/../../../lib:$BIN_DIR/../../../lib/rocprofiler:/opt/rocm/lib:/opt/rocm/lib/rocprofiler
+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD:$PWD/../../@LIBDIR@:$BIN_DIR/../../../@LIBDIR@:$BIN_DIR/../../../@LIBDIR@/rocprofiler:/opt/rocm-${ROCM_VERSION}/lib:/opt/rocm-${ROCM_VERSION}/lib/rocprofiler
 
 # enable tools load failure reporting
 export HSA_TOOLS_REPORT_LOAD_FAILURE=1
@@ -90,8 +90,8 @@ unset ROCP_TOOL_LIB
 eval_test "Standalone sampling usage model test" $BIN_DIR/test/standalone_test
 # Standalone intercepting test
 # ROC profiler library loaded by HSA runtime
-if test -f "$BIN_DIR/../../../lib/librocprofiler64.so.1" ; then
-  export HSA_TOOLS_LIB="$BIN_DIR/../../../lib/librocprofiler64.so.1"
+if test -f "$BIN_DIR/../../../@LIBDIR@/librocprofiler64.so.1" ; then
+  export HSA_TOOLS_LIB="$BIN_DIR/../../../@LIBDIR@/librocprofiler64.so.1"
 else
   export HSA_TOOLS_LIB=librocprofiler64.so.1
 fi
diff -urp rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/profiler/CMakeLists.txt rocprofiler-rocm-5.7.0/tests-v2/featuretests/profiler/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/profiler/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/tests-v2/featuretests/profiler/CMakeLists.txt	2023-09-29 05:48:24.959438349 -0700
@@ -17,8 +17,7 @@ include_directories(${PROJECT_SOURCE_DIR
 
 find_package(
     Clang REQUIRED CONFIG
-    PATHS "${ROCM_PATH}"
-    PATH_SUFFIXES "llvm/lib/cmake/clang")
+    PATHS "@EPREFIX_LLVM_PATH@/@LIBDIR@/cmake/clang")
 
 # Set the HIP language runtime link flags as FindHIP does not set them.
 set(CMAKE_INSTALL_TESTDIR test/${PROJECT_NAME})
@@ -26,7 +25,7 @@ set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG ${
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP})
 set(CMAKE_EXECUTABLE_RPATH_LINK_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG})
 
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/lib/cmake/hip")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 set(CMAKE_HIP_ARCHITECTURES OFF)
 find_package(HIP REQUIRED MODULE)
 
@@ -127,6 +126,7 @@ install(
         DESTINATION
             ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/tests/featuretests/profiler/apps
         COMPONENT tests)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(hsa_async_mem_copy hsa-runtime64::hsa-runtime64 Threads::Threads dl
                       stdc++fs)
 
diff -urp rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/profiler/profiler_gtest.cpp rocprofiler-rocm-5.7.0/tests-v2/featuretests/profiler/profiler_gtest.cpp
--- rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/profiler/profiler_gtest.cpp	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/tests-v2/featuretests/profiler/profiler_gtest.cpp	2023-09-29 05:48:24.959438349 -0700
@@ -47,11 +47,11 @@ std::string binary_path;
 std::string profiler_api_lib_path = "";
 
 static void init_test_path() {
-  lib_path = "lib/rocprofiler/librocprofiler_tool.so";
+  lib_path = "@LIBDIR@/librocprofiler_tool.so";
   metrics_path = "libexec/rocprofiler/counters/derived_counters.xml";
   profiler_api_lib_path = "/lib";
   if (is_installed_path()) {
-    INFO_LOGGING("operating from /opt/rocm");
+    INFO_LOGGING("operating from @EPREFIX_ROCM_PATH@");
     running_path = "share/rocprofiler/tests/runFeatureTests";
     golden_trace_path = "share/rocprofiler/tests/featuretests/profiler/apps/goldentraces/";
     test_app_path = "share/rocprofiler/tests/featuretests/profiler/apps/";
diff -urp rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/tracer/CMakeLists.txt rocprofiler-rocm-5.7.0/tests-v2/featuretests/tracer/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/tracer/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/tests-v2/featuretests/tracer/CMakeLists.txt	2023-09-29 05:48:24.959438349 -0700
@@ -4,7 +4,7 @@ set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG ${
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP})
 set(CMAKE_EXECUTABLE_RPATH_LINK_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG})
 
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/lib/cmake/hip")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 set(CMAKE_HIP_ARCHITECTURES OFF)
 find_package(HIP REQUIRED MODULE)
 
@@ -56,6 +56,7 @@ install(
         DESTINATION
             ${CMAKE_INSTALL_DATAROOTDIR}/${PROJECT_NAME}/tests/featuretests/tracer/apps
         COMPONENT tests)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(copy_on_engine hsa-runtime64::hsa-runtime64 Threads::Threads dl
                       stdc++fs)
 
diff -urp rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/tracer/tracer_gtest.cpp rocprofiler-rocm-5.7.0/tests-v2/featuretests/tracer/tracer_gtest.cpp
--- rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/tracer/tracer_gtest.cpp	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/tests-v2/featuretests/tracer/tracer_gtest.cpp	2023-09-29 05:48:24.959438349 -0700
@@ -34,11 +34,11 @@ std::string binary_path;
 std::string profiler_api_lib_path = "";
 
 static void init_test_path() {
-  lib_path = "lib/rocprofiler/librocprofiler_tool.so";
+  lib_path = "@LIBDIR@/librocprofiler_tool.so";
   metrics_path = "libexec/rocprofiler/counters/derived_counters.xml";
   profiler_api_lib_path = "/lib";
   if (is_installed_path()) {
-    INFO_LOGGING("operating from /opt/rocm");
+    INFO_LOGGING("operating from @EPREFIX_ROCM_PATH@");
     running_path = "share/rocprofiler/tests/runTracerFeatureTests";
     golden_trace_path = "share/rocprofiler/tests/featuretests/tracer/apps/goldentraces/";
     test_app_path = "share/rocprofiler/tests/featuretests/tracer/apps/";
@@ -315,4 +315,4 @@ TEST_F(AsyncCopyTest, DISABLED_WhenRunni
   corelation_count--;
 
   EXPECT_EQ(corelation_count, corelation_pair.size());
-}
\ No newline at end of file
+}
diff -urp rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/utils/test_utils.h rocprofiler-rocm-5.7.0/tests-v2/featuretests/utils/test_utils.h
--- rocprofiler-rocm-5.7.0.orig/tests-v2/featuretests/utils/test_utils.h	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/tests-v2/featuretests/utils/test_utils.h	2023-09-29 05:48:24.959438349 -0700
@@ -78,7 +78,7 @@ std::string GetRunningPath(std::string s
 // Get Number of cores in the system
 int GetNumberOfCores();
 
-// Check if running path is /opt/rocm or not
+// Check if running path is @EPREFIX_ROCM_PATH@ or not
 bool is_installed_path();
 
 // tokenize profiler output
diff -urp rocprofiler-rocm-5.7.0.orig/tests-v2/memorytests/run_asan_tests.sh rocprofiler-rocm-5.7.0/tests-v2/memorytests/run_asan_tests.sh
--- rocprofiler-rocm-5.7.0.orig/tests-v2/memorytests/run_asan_tests.sh	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/tests-v2/memorytests/run_asan_tests.sh	2023-09-29 05:48:24.959438349 -0700
@@ -4,4 +4,4 @@ CURRENT_DIR="$( dirname -- "$0"; )";
 export PATH=$rocprofilerdir:$PATH
 
 echo -e "Running Memory Leaks Check From ${CURRENT_DIR}"
-LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.6 ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=suppressions=$CURRENT_DIR/suppr.txt ${CURRENT_DIR}/../../rocprofv2 -i $CURRENT_DIR/input.txt --sys-trace $*
\ No newline at end of file
+LD_PRELOAD=@EPREFIX@/usr/lib/gcc/@CHOST@/@GCC_SLOT@/libasan.so ASAN_OPTIONS=detect_leaks=1 LSAN_OPTIONS=suppressions=$CURRENT_DIR/suppr.txt ${CURRENT_DIR}/../../rocprofv2 -i $CURRENT_DIR/input.txt --sys-trace $*
diff -urp rocprofiler-rocm-5.7.0.orig/tests-v2/microbenchmarks/CMakeLists.txt rocprofiler-rocm-5.7.0/tests-v2/microbenchmarks/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/tests-v2/microbenchmarks/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/tests-v2/microbenchmarks/CMakeLists.txt	2023-09-29 05:50:01.691437236 -0700
@@ -4,12 +4,13 @@ set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG ${
 set(CMAKE_EXECUTABLE_RUNTIME_HIP_FLAG_SEP ${CMAKE_SHARED_LIBRARY_RUNTIME_CXX_FLAG_SEP})
 set(CMAKE_EXECUTABLE_RPATH_LINK_HIP_FLAG ${CMAKE_SHARED_LIBRARY_RPATH_LINK_CXX_FLAG})
 
-set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/lib/cmake/hip")
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${ROCM_PATH}/@LIBDIR@/cmake/hip")
 set(CMAKE_HIP_ARCHITECTURES OFF)
 find_package(HIP REQUIRED MODULE)
 
 set(TEST_DIR ${PROJECT_SOURCE_DIR}/tests-v2/microbenchmarks)
 file(GLOB TEST_SRC_FILE ${TEST_DIR}/*.cpp)
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 
 set_source_files_properties(${TEST_SRC_FILE} PROPERTIES HIP_SOURCE_PROPERTY_FORMAT 1)
 hip_add_executable(pcie_bw_test ${TEST_SRC_FILE})
diff -urp rocprofiler-rocm-5.7.0.orig/tests-v2/unittests/CMakeLists.txt rocprofiler-rocm-5.7.0/tests-v2/unittests/CMakeLists.txt
--- rocprofiler-rocm-5.7.0.orig/tests-v2/unittests/CMakeLists.txt	2023-09-07 04:11:36.000000000 -0700
+++ rocprofiler-rocm-5.7.0/tests-v2/unittests/CMakeLists.txt	2023-09-29 05:48:24.959438349 -0700
@@ -96,6 +96,7 @@ target_compile_definitions(
     PUBLIC AMD_INTERNAL_BUILD
     PRIVATE PROF_API_IMPL HIP_PROF_HIP_API_STRING=1 __HIP_PLATFORM_AMD__=1)
 
+link_directories(@ESYSROOT_ROCM_PATH@/@LIBDIR@)
 target_link_libraries(
     runUnitTests PRIVATE rocprofiler_tool ${AQLPROFILE_LIB} hsa-runtime64::hsa-runtime64
                          GTest::gtest GTest::gtest_main stdc++fs ${PCIACCESS_LIBRARIES})
