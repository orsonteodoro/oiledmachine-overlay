Subject:  Disable aqlprofile for 5.6.0.
Patch status:  Needs testing / in development

The patch will disable performance counters, metrics, ATT trace, error details,
etc in rocprofiler when AQLPROFILE is off.

The patch may need to be reworked because part of the SPM trace section should
not be disabled.

Initially the patch was supposed to disable only performance counters and keep
tracers untouched but the patch in it's current form cannot do it yet.

Dependencies on this package may need to be modified if they use headers, or
any public classes/interfaces relating to metrics or profiles.

From packager perpective, it is better to delete the aqlprofile disable
patches but modify the parent packages to disable rocprofiler use.

The patch is provided for tradeoff choice between avoiding the negativity of
the license restrictions and legal implications by aqlprofile (>= 5.3.3) and
build systems that make it difficult to patch without rocprofiler.

It may be good enough link against but BUG OUT if aqlprofile is disabled and the
app that depends on rocprofiler uses again metrics, performance counters
directly/indirectly/tracing.

Disabling aqlprofile will also severely degrade rocprofiler features/utility
which is why it is not recommended to disable use of it.

diff -urp rocprofiler-rocm-5.6.0.orig/CMakeLists.txt rocprofiler-rocm-5.6.0/CMakeLists.txt
--- rocprofiler-rocm-5.6.0.orig/CMakeLists.txt	2023-08-04 15:49:04.576811974 -0700
+++ rocprofiler-rocm-5.6.0/CMakeLists.txt	2023-08-04 15:49:19.824812371 -0700
@@ -85,6 +85,8 @@ set(ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR
 set(LIB_DIR "${ROOT_DIR}/src")
 set(TEST_DIR "${ROOT_DIR}/test")
 
+option(AQLPROFILE "Add support for performance counters and metrics" ON)
+
 find_package(
   amd_comgr
   REQUIRED
diff -urp rocprofiler-rocm-5.6.0.orig/cmake_modules/env.cmake rocprofiler-rocm-5.6.0/cmake_modules/env.cmake
--- rocprofiler-rocm-5.6.0.orig/cmake_modules/env.cmake	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/cmake_modules/env.cmake	2023-08-04 15:49:19.824812371 -0700
@@ -73,7 +73,10 @@ if ( "${ROCM_ROOT_DIR}" STREQUAL "" )
   message ( FATAL_ERROR "ROCM_ROOT_DIR is not found." )
 endif ()
 
-find_library ( FIND_AQL_PROFILE_LIB "libhsa-amd-aqlprofile64.so" HINTS ${CMAKE_INSTALL_PREFIX} PATHS ${ROCM_ROOT_DIR})
-if (  NOT FIND_AQL_PROFILE_LIB )
-  message ( FATAL_ERROR "AQL_PROFILE not installed. Please install AQL_PROFILE" )
+if(AQLPROFILE)
+  add_definitions(-DUSE_AQLPROFILE)
+  find_library ( FIND_AQL_PROFILE_LIB "libhsa-amd-aqlprofile64.so" PATH_SUFFIXES lib HINTS ${CMAKE_INSTALL_PREFIX} PATHS @ESYSROOT@/opt/rocm-@ROCM_VERSION@)
+  if (  NOT FIND_AQL_PROFILE_LIB )
+    message ( FATAL_ERROR "AQL_PROFILE not installed. Please install AQL_PROFILE" )
+  endif()
 endif()
diff -urp rocprofiler-rocm-5.6.0.orig/src/api/CMakeLists.txt rocprofiler-rocm-5.6.0/src/api/CMakeLists.txt
--- rocprofiler-rocm-5.6.0.orig/src/api/CMakeLists.txt	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/api/CMakeLists.txt	2023-08-04 15:49:19.824812371 -0700
@@ -37,10 +37,15 @@ find_file(HSA_H hsa.h
   REQUIRED)
 get_filename_component(HSA_RUNTIME_INC_PATH ${HSA_H} DIRECTORY)
 
-find_library(AQLPROFILE_LIB "libhsa-amd-aqlprofile64.so" HINTS ${CMAKE_PREFIX_PATH} PATHS ${ROCM_PATH} PATH_SUFFIXES lib)
+if(AQLPROFILE)
+  add_definitions(-DUSE_AQLPROFILE)
+  find_library(AQLPROFILE_LIB "libhsa-amd-aqlprofile64.so" PATH_SUFFIXES lib HINTS ${CMAKE_PREFIX_PATH} PATHS @ESYSROOT@/opt/rocm-@ROCM_VERSION@)
 
-if(NOT AQLPROFILE_LIB)
-  message(FATAL_ERROR "AQL_PROFILE not installed. Please install hsa-amd-aqlprofile!")
+  if(NOT AQLPROFILE_LIB)
+    message(FATAL_ERROR "AQL_PROFILE not installed. Please install hsa-amd-aqlprofile!")
+  endif()
+else()
+  set(AQLPROFILE_LIB "")
 endif()
 
 # ############################################################################################################################################
diff -urp rocprofiler-rocm-5.6.0.orig/src/api/rocmtool.cpp rocprofiler-rocm-5.6.0/src/api/rocmtool.cpp
--- rocprofiler-rocm-5.6.0.orig/src/api/rocmtool.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/api/rocmtool.cpp	2023-08-04 15:49:19.824812371 -0700
@@ -234,9 +234,11 @@ void ResetROCMToolObj() {
 
 rocprofiler_timestamp_t GetCurrentTimestamp() { return hsa_support::GetCurrentTimestampNS(); }
 
+#ifdef USE_AQLPROFILE
 rocprofiler_status_t IterateCounters(rocprofiler_counters_info_callback_t counters_info_callback) {
   if (hsa_support::IterateCounters(counters_info_callback)) return ROCPROFILER_STATUS_SUCCESS;
   return ROCPROFILER_STATUS_ERROR;
 }
+#endif
 
 }  // namespace rocmtools
diff -urp rocprofiler-rocm-5.6.0.orig/src/api/rocmtool.h rocprofiler-rocm-5.6.0/src/api/rocmtool.h
--- rocprofiler-rocm-5.6.0.orig/src/api/rocmtool.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/api/rocmtool.h	2023-08-04 15:49:19.824812371 -0700
@@ -115,7 +115,9 @@ rocmtool* GetROCMToolObj();
 
 rocprofiler_timestamp_t GetCurrentTimestamp();
 
+#ifdef USE_AQLPROFILE
 rocprofiler_status_t IterateCounters(rocprofiler_counters_info_callback_t counters_info_callback);
+#endif
 
 }  // namespace rocmtools
 
diff -urp rocprofiler-rocm-5.6.0.orig/src/api/rocmtools.cpp rocprofiler-rocm-5.6.0/src/api/rocmtools.cpp
--- rocprofiler-rocm-5.6.0.orig/src/api/rocmtools.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/api/rocmtools.cpp	2023-08-04 15:51:43.728816119 -0700
@@ -135,9 +135,11 @@ ROCPROFILER_API rocprofiler_status_t roc
 
 ROCPROFILER_API rocprofiler_status_t
 rocprofiler_iterate_counters(rocprofiler_counters_info_callback_t counters_info_callback) {
+#ifdef USE_AQLPROFILE
   API_INIT_CHECKER
   return rocmtools::IterateCounters(counters_info_callback);
   API_METHOD_SUFFIX
+#endif
 }
 
 ROCPROFILER_API rocprofiler_status_t rocprofiler_query_agent_info_size(rocprofiler_agent_info_kind_t kind,
@@ -698,9 +700,11 @@ rocprofiler_device_profiling_session_sta
 // API to poll a device profiling session
 ROCPROFILER_API rocprofiler_status_t rocprofiler_device_profiling_session_poll(
     rocprofiler_session_id_t session_id, rocprofiler_device_profile_metric_t* data) {
+#ifdef USE_AQLPROFILE
   API_METHOD_PREFIX
   rocmtools::GetROCMToolObj()->GetDeviceProfilingSession(session_id)->PollMetrics(data);
   API_METHOD_SUFFIX
+#endif
 }
 
 // API to stop a device profiling session
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/context.h rocprofiler-rocm-5.6.0/src/core/context.h
--- rocprofiler-rocm-5.6.0.orig/src/core/context.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/context.h	2023-08-04 15:49:19.828812371 -0700
@@ -285,6 +285,7 @@ class Context {
     }
   }
 
+#ifdef USE_AQLPROFILE
   void GetData(const uint32_t& group_index) {
     const profile_vector_t profile_vector = GetProfiles(group_index);
     for (auto& tuple : profile_vector) {
@@ -327,6 +328,7 @@ class Context {
       if (status != HSA_STATUS_SUCCESS) AQL_EXC_RAISING(status, "context iterate data failed");
     }
   }
+#endif
 
   static bool Handler(hsa_signal_value_t value, void* arg) {
     Group* group = reinterpret_cast<Group*>(arg);
@@ -354,7 +356,9 @@ class Context {
         queue_(queue),
         hsa_rsrc_(&util::HsaRsrcFactory::Instance()),
         api_(hsa_rsrc_->AqlProfileApi()),
+#ifdef USE_AQLPROFILE
         metrics_(NULL),
+#endif
         handler_(handler),
         handler_arg_(handler_arg),
         pcsmp_mode_(false)
@@ -366,10 +370,12 @@ class Context {
     for (const auto& v : info_map_) {
       const std::string& name = v.first;
       const rocprofiler_feature_t* info = v.second;
+#ifdef USE_AQLPROFILE
       if ((info->kind == ROCPROFILER_FEATURE_KIND_METRIC) &&
           (metrics_map_.find(name) == metrics_map_.end())) {
         delete info;
       }
+#endif
     }
   }
 
@@ -381,12 +387,16 @@ class Context {
       return;
     }
 
+#ifdef USE_AQLPROFILE
     metrics_ = MetricsDict::Create(agent_info);
     if (metrics_ == NULL) EXC_RAISING(HSA_STATUS_ERROR, "MetricsDict create failed");
+#endif
 
     if (Initialize(info, info_count) == false) {
       fprintf(stdout, "\nInput metrics out of HW limit. Proposed metrics group set:\n"); fflush(stdout);
+#ifdef USE_AQLPROFILE
       MetricsGroupSet(agent_info, info, info_count).Print(stdout);
+#endif
       fprintf(stdout, "\n"); fflush(stdout);
       EXC_RAISING(HSA_STATUS_ERROR, "Metrics list exceeds HW limits");
     }
@@ -417,10 +427,12 @@ class Context {
       if (kind == ROCPROFILER_FEATURE_KIND_METRIC) {
         if (name == NULL) EXC_RAISING(HSA_STATUS_ERROR, "metric name is NULL");
         info_map_[name] = info;
+#ifdef USE_AQLPROFILE
         auto ret = metrics_map_.insert({name, NULL});
         if (!ret.second)
           EXC_RAISING(HSA_STATUS_ERROR, "input metric '" << name
                                                          << "' is registered more then once");
+#endif
       }
     }
 
@@ -433,6 +445,7 @@ class Context {
       const rocprofiler_feature_kind_t kind = info->kind;
       const char* name = info->name;
 
+#ifdef USE_AQLPROFILE
       if (kind == ROCPROFILER_FEATURE_KIND_METRIC) {  // Processing metrics features
         const Metric* metric = metrics_->Get(name);
         if (metric == NULL)
@@ -488,13 +501,17 @@ class Context {
           const uint32_t group_index = block_status.group_index;
           set_[group_index].Insert(profile_info_t{event, NULL, 0, info});
         }
-      } else if (kind & ROCPROFILER_FEATURE_KIND_TRACE) {  // Processing traces features
+      } else
+#endif
+      if (kind & ROCPROFILER_FEATURE_KIND_TRACE) {  // Processing traces features
         info->kind = ROCPROFILER_FEATURE_KIND_TRACE;
 
         const event_t* event = NULL;
         if (kind & ROCPROFILER_FEATURE_KIND_PCSMP_MOD) { // PC sampling
           pcsmp_mode_ = true;
-        } else if (kind & ROCPROFILER_FEATURE_KIND_SPM_MOD) { // SPM trace
+        }
+#ifdef USE_AQLPROFILE
+        else if (kind & ROCPROFILER_FEATURE_KIND_SPM_MOD) { // SPM trace
           const Metric* metric = metrics_->Get(name);
           if (metric == NULL)
             EXC_RAISING(HSA_STATUS_ERROR, "input metric '" << name << "' is not found");
@@ -504,6 +521,7 @@ class Context {
           const counter_t* counter = counters_vec[0];
           event = &(counter->event);
         }
+#endif
         set_[0].Insert(profile_info_t{event, info->parameters, info->parameter_count, info});
       } else {
         EXC_RAISING(HSA_STATUS_ERROR, "bad rocprofiler feature kind (" << kind << ")");
@@ -612,12 +630,14 @@ class Context {
     return status;
   }
 
+#ifdef USE_AQLPROFILE
   rocprofiler_feature_t* NewCounterInfo(const counter_t* counter) {
     rocprofiler_feature_t* info = new rocprofiler_feature_t{};
     info->kind = ROCPROFILER_FEATURE_KIND_METRIC;
     info->name = counter->name.c_str();
     return info;
   }
+#endif
 
   // GPU handel
   const hsa_agent_t agent_;
@@ -630,14 +650,18 @@ class Context {
   const pfn_t* api_;
   // Profile group set
   std::vector<Group> set_;
+#ifdef USE_AQLPROFILE
   // Metrics dictionary
   const MetricsDict* metrics_;
+#endif
   // Groups map
   std::map<block_des_t, block_status_t, lt_block_des> groups_map_;
   // Info map
   info_map_t info_map_;
+#ifdef USE_AQLPROFILE
   // Metrics map
   std::map<std::string, const Metric*> metrics_map_;
+#endif
   // Context completion handler
   rocprofiler_handler_t handler_;
   void* handler_arg_;
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/eval_metrics.cpp rocprofiler-rocm-5.6.0/src/core/counters/metrics/eval_metrics.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/eval_metrics.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/counters/metrics/eval_metrics.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -73,6 +73,7 @@ template <class Map> class MetricArgs :
 
 static std::mutex extract_metric_events_lock;
 
+#ifdef USE_AQLPROFILE
 bool metrics::ExtractMetricEvents(
     std::vector<std::string>& metric_names, hsa_agent_t gpu_agent, MetricsDict* metrics_dict,
     std::map<std::string, results_t*>& results_map, std::vector<event_t>& events_list,
@@ -202,3 +203,4 @@ bool metrics::GetMetricsData(std::map<st
 
   return true;
 }
+#endif
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/eval_metrics.h rocprofiler-rocm-5.6.0/src/core/counters/metrics/eval_metrics.h
--- rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/eval_metrics.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/counters/metrics/eval_metrics.h	2023-08-04 15:49:19.828812371 -0700
@@ -43,8 +43,10 @@ typedef struct {
   packet_t* start_packet;
   packet_t* stop_packet;
   packet_t* read_packet;
+#ifdef USE_AQLPROFILE
   rocmtools::MetricsDict* metrics_dict;
   std::vector<const rocmtools::Metric*> metrics_list;
+#endif
   std::map<std::string, rocmtools::results_t*> results_map;
   std::vector<rocmtools::results_t*> results_list;
   std::vector<event_t> events_list;
@@ -53,6 +55,7 @@ typedef struct {
   std::atomic<bool> begin_completed{false};
 } profiling_context_t;
 
+#ifdef USE_AQLPROFILE
 namespace metrics {
 bool ExtractMetricEvents(
     std::vector<std::string>& metric_names, hsa_agent_t gpu_agent, MetricsDict* metrics_dict,
@@ -69,6 +72,7 @@ bool GetMetricsData(std::map<std::string
                     std::vector<const Metric*>& metrics_list);
 
 }  // namespace metrics
+#endif
 }  // namespace rocmtools
 
-#endif  // SRC_CORE_METRICS_EVALMETRICS_H_
\ No newline at end of file
+#endif  // SRC_CORE_METRICS_EVALMETRICS_H_
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/exception.h rocprofiler-rocm-5.6.0/src/core/counters/metrics/exception.h
--- rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/exception.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/counters/metrics/exception.h	2023-08-04 15:49:19.828812371 -0700
@@ -48,12 +48,20 @@ THE SOFTWARE.
     throw rocmtools::util::exception(error, oss.str());                                            \
   } while (0)
 
+#ifdef USE_AQLPROFILE
 #define AQL_EXC_RAISING(error, stream)                                                             \
   do {                                                                                             \
     const char* error_string = NULL;                                                               \
     hsa_ven_amd_aqlprofile_error_string(&error_string);                                            \
     EXC_RAISING(error, stream << ", " << error_string);                                            \
   } while (0)
+#else
+#define AQL_EXC_RAISING(error, stream)                                                             \
+  do {                                                                                             \
+    const char* error_string = NULL;                                                               \
+    EXC_RAISING(error, stream);                                                                    \
+  } while (0)
+#endif
 
 namespace rocmtools {
 namespace util {
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/metrics.cpp rocprofiler-rocm-5.6.0/src/core/counters/metrics/metrics.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/metrics.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/counters/metrics/metrics.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -23,6 +23,8 @@ THE SOFTWARE.
 #include "metrics.h"
 
 namespace rocmtools {
+#ifdef USE_AQLPROFILE
 MetricsDict::map_t* MetricsDict::map_ = NULL;
 MetricsDict::mutex_t MetricsDict::mutex_;
+#endif
 }  // namespace rocmtools
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/metrics.h rocprofiler-rocm-5.6.0/src/core/counters/metrics/metrics.h
--- rocprofiler-rocm-5.6.0.orig/src/core/counters/metrics/metrics.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/counters/metrics/metrics.h	2023-08-04 15:49:19.828812371 -0700
@@ -42,6 +42,7 @@ THE SOFTWARE.
 #include "src/core/hardware/hsa_info.h"
 
 namespace rocmtools {
+#ifdef USE_AQLPROFILE
 struct counter_t {
   std::string name;
   event_t event;
@@ -361,6 +362,7 @@ class MetricsDict {
   static map_t* map_;
   static mutex_t mutex_;
 };
+#endif
 
 }  // namespace rocmtools
 
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/gpu_command.cpp rocprofiler-rocm-5.6.0/src/core/gpu_command.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/gpu_command.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/gpu_command.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -44,6 +44,7 @@ size_t CreateGpuCommand(gpu_cmd_op_t op,
 
   if (packet_count > slot_count) EXC_RAISING(HSA_STATUS_ERROR, "packet_count > slot_count");
 
+#ifdef USE_AQLPROFILE
   // AQLprofile object
   hsa_ven_amd_aqlprofile_profile_t profile{};
   profile.agent = agent_info->dev_id;
@@ -77,6 +78,7 @@ size_t CreateGpuCommand(gpu_cmd_op_t op,
     status = hsa_rsrc->AqlProfileApi()->hsa_ven_amd_aqlprofile_get_info(&profile, info_type, command);
     if (status != HSA_STATUS_SUCCESS) EXC_RAISING(status, "get_info(ENABLE_CMD).data exc");
   }
+#endif
 
   // Return cmd packet data size
   return (packet_count * sizeof(packet_t));
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/group_set.h rocprofiler-rocm-5.6.0/src/core/group_set.h
--- rocprofiler-rocm-5.6.0.orig/src/core/group_set.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/group_set.h	2023-08-04 15:49:19.828812371 -0700
@@ -53,6 +53,7 @@ struct block_status_t {
   uint32_t group_index;
 };
 
+#ifdef USE_AQLPROFILE
 // Metrics set class
 class MetricsGroup {
   public:
@@ -236,6 +237,7 @@ class MetricsGroupSet {
   // Metrics group vector
   std::vector<MetricsGroup*> groups_;
 };
+#endif
 
 }  // namespace rocprofiler
 
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/hsa/hsa_support.cpp rocprofiler-rocm-5.6.0/src/core/hsa/hsa_support.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/hsa/hsa_support.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/hsa/hsa_support.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -814,6 +814,7 @@ void Finalize() {
   ResetMaps();
 }
 
+#ifdef USE_AQLPROFILE
 static std::map<uint64_t, rocmtools::MetricsDict*> metricsDicts;
 
 bool IterateCounters(rocprofiler_counters_info_callback_t counters_info_callback) {
@@ -898,6 +899,7 @@ bool IterateCounters(rocprofiler_counter
 
   return true;
 }
+#endif
 
 }  // namespace hsa_support
 }  // namespace rocmtools
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/hsa/hsa_support.h rocprofiler-rocm-5.6.0/src/core/hsa/hsa_support.h
--- rocprofiler-rocm-5.6.0.orig/src/core/hsa/hsa_support.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/hsa/hsa_support.h	2023-08-04 15:49:19.828812371 -0700
@@ -98,7 +98,9 @@ void Initialize(HsaApiTable* Table);
 hsa_status_t hsa_iterate_agents_cb(hsa_agent_t agent, void *data);
 void Finalize();
 
+#ifdef USE_AQLPROFILE
 bool IterateCounters(rocprofiler_counters_info_callback_t counters_info_callback);
+#endif
 
 }  // namespace hsa_support
 }  // namespace rocmtools
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/hsa/packets/packets_generator.cpp rocprofiler-rocm-5.6.0/src/core/hsa/packets/packets_generator.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/hsa/packets/packets_generator.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/hsa/packets/packets_generator.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -130,6 +130,7 @@ struct block_des_t {
 // Initialize the PM4 commands with having the CPU&GPU agents, the counters,
 // counters count to output three packets which are start, stop and read
 // packets
+#ifdef USE_AQLPROFILE
 std::vector<std::pair<rocmtools::profiling_context_t*, hsa_ven_amd_aqlprofile_profile_t*>>*
 InitializeAqlPackets(hsa_agent_t cpu_agent, hsa_agent_t gpu_agent,
                      std::vector<std::string>& counter_names, bool is_spm) {
@@ -403,10 +404,12 @@ InitializeAqlPackets(hsa_agent_t cpu_age
   } while (events_list.size() > 0);
   return profiles;
 }
+#endif
 
 // Initialize the PM4 commands with having the CPU&GPU agents, the counters,
 // counters count to output three packets which are start, stop and read
 // packets
+#ifdef USE_AQLPROFILE
 hsa_ven_amd_aqlprofile_profile_t* InitializeDeviceProfilingAqlPackets(
     hsa_agent_t cpu_agent, hsa_agent_t gpu_agent, hsa_ven_amd_aqlprofile_event_t* events,
     uint32_t event_count, packet_t* start_packet, packet_t* stop_packet, packet_t* read_packet) {
@@ -485,6 +488,7 @@ hsa_ven_amd_aqlprofile_profile_t* Initia
   if (status == HSA_STATUS_ERROR) return nullptr;
   return profile;
 }
+#endif
 
 // ATT
 uint32_t g_output_buffer_size = 0x8000000;  // 128M x 16 = 2GB
@@ -570,6 +574,7 @@ att_memory_pools_t* GetAttMemPools(hsa_a
 // Generate start and stop packets for collecting ATT traces
 // Also generate and return the profile object which has the PM4
 // command buffer and the output buffer for retrieving the traces
+#ifdef USE_AQLPROFILE
 hsa_ven_amd_aqlprofile_profile_t* GenerateATTPackets(
     hsa_agent_t cpu_agent, hsa_agent_t gpu_agent,
     std::vector<hsa_ven_amd_aqlprofile_parameter_t>& att_params, packet_t* start_packet,
@@ -627,5 +632,6 @@ hsa_ven_amd_aqlprofile_profile_t* Genera
   if (status == HSA_STATUS_ERROR) return nullptr;
   return profile;
 }
+#endif
 
 }  // namespace Packet
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/hsa/packets/packets_generator.h rocprofiler-rocm-5.6.0/src/core/hsa/packets/packets_generator.h
--- rocprofiler-rocm-5.6.0.orig/src/core/hsa/packets/packets_generator.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/hsa/packets/packets_generator.h	2023-08-04 15:49:19.828812371 -0700
@@ -41,16 +41,20 @@ static std::mutex pool_lock;
 
 typedef hsa_ext_amd_aql_pm4_packet_t packet_t;
 
+#ifdef USE_AQLPROFILE
 std::vector<std::pair<rocmtools::profiling_context_t*, hsa_ven_amd_aqlprofile_profile_t*>>*
 InitializeAqlPackets(hsa_agent_t cpu_agent, hsa_agent_t gpu_agent,
                      std::vector<std::string>& counter_names, bool is_spm = false);
+#endif
 uint8_t* AllocateSysMemory(hsa_agent_t gpu_agent, size_t size, hsa_amd_memory_pool_t* cpu_pool);
 void GetCommandBufferMap(std::map<size_t, uint8_t*>);
 void GetOutputBufferMap(std::map<size_t, uint8_t*>);
 void InitializePools(hsa_agent_t cpu_agent);
+#ifdef USE_AQLPROFILE
 hsa_ven_amd_aqlprofile_profile_t* InitializeDeviceProfilingAqlPackets(
     hsa_agent_t cpu_agent, hsa_agent_t gpu_agent, hsa_ven_amd_aqlprofile_event_t* events,
     uint32_t event_count, packet_t* start_packet, packet_t* stop_packet, packet_t* read_packet);
+#endif
 hsa_amd_memory_pool_t& GetCommandPool();
 hsa_amd_memory_pool_t& GetOutputPool();
 
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/hsa/queues/queue.cpp rocprofiler-rocm-5.6.0/src/core/hsa/queues/queue.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/hsa/queues/queue.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/hsa/queues/queue.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -288,6 +288,7 @@ hsa_status_t attTraceDataCallback(hsa_ve
   return status;
 }
 
+#ifdef USE_AQLPROFILE
 void AddRecordCounters(rocprofiler_record_profiler_t* record, const pending_signal_t& pending) {
   rocmtools::metrics::GetCounterData(pending.profile, pending.context->results_list);
   rocmtools::metrics::GetMetricsData(pending.context->results_map, pending.context->metrics_list);
@@ -313,7 +314,9 @@ void AddRecordCounters(rocprofiler_recor
            counters_vec.size() * sizeof(rocprofiler_record_counter_instance_t));
   record->counters_count = rocprofiler_record_counters_instances_count_t{counters_vec.size()};
 }
+#endif
 
+#ifdef USE_AQLPROFILE
 void AddAttRecord(rocprofiler_record_att_tracer_t* record, hsa_agent_t gpu_agent,                  
                    att_pending_signal_t& pending) {
   att_trace_callback_data_t data;
@@ -354,6 +357,7 @@ void AddAttRecord(rocprofiler_record_att
   }
   record->shader_engine_data_count = data.size();
 }
+#endif
 
 // static const size_t MEM_PAGE_BYTES = 0x1000;
 // static const size_t MEM_PAGE_MASK = MEM_PAGE_BYTES - 1;
@@ -459,10 +463,12 @@ bool AsyncSignalHandler(hsa_signal_value
       record.queue_idx = rocprofiler_queue_index_t{pending.queue_index};
       record.timestamps = rocprofiler_record_header_timestamp_t{time.start, time.end};
       record.queue_id = rocprofiler_queue_id_t{queue_info_session->queue_id};
+#ifdef USE_AQLPROFILE
       if (pending.counters_count > 0 && pending.context->metrics_list.size() > 0 &&
           pending.profile) {
         AddRecordCounters(&record, pending);
       }
+#endif
       record.header = {ROCPROFILER_PROFILER_RECORD,
                        rocprofiler_record_id_t{pending.kernel_descriptor}};
       record.kernel_id = rocprofiler_kernel_id_t{pending.kernel_descriptor};
@@ -512,6 +518,7 @@ bool AsyncSignalHandler(hsa_signal_value
   return false;
 }
 
+#ifdef USE_AQLPROFILE
 bool AsyncSignalHandlerATT(hsa_signal_value_t /* signal */, void* data) {
   // TODO: finish implementation to iterate trace data and add it to rocmtools record
   // and generic buffer
@@ -571,6 +578,7 @@ bool AsyncSignalHandlerATT(hsa_signal_va
 
   return false;
 }
+#endif
 
 void CreateBarrierPacket(const hsa_signal_t& packet_completion_signal,
                          std::vector<Packet::packet_t>* transformed_packets) {
@@ -594,9 +602,11 @@ void SignalAsyncHandler(const hsa_signal
 }
 
 void signalAsyncHandlerATT(const hsa_signal_t& signal, void* data) {
+#ifdef USE_AQLPROFILE
   hsa_status_t status = hsa_support::GetAmdExtTable().hsa_amd_signal_async_handler_fn(
       signal, HSA_SIGNAL_CONDITION_EQ, 0, AsyncSignalHandlerATT, data);
   if (status != HSA_STATUS_SUCCESS) fatal("hsa_amd_signal_async_handler failed");
+#endif
 }
 
 void CreateSignal(uint32_t attribute, hsa_signal_t* signal) {
@@ -717,12 +727,14 @@ void WriteInterceptor(const void* packet
       }
 
       // If counters found in the session
+#ifdef USE_AQLPROFILE
       if (session_data_count > 0 && is_counter_collection_mode) {
         // Get the PM4 Packets using packets_generator
         profiles = Packet::InitializeAqlPackets(queue_info.GetCPUAgent(), queue_info.GetGPUAgent(),
                                                 session_data);
         replay_mode_count = profiles->size();
       }
+#endif
 
       uint32_t profile_id = 0;
       hsa_signal_t interrupt_signal;
@@ -778,12 +790,16 @@ void WriteInterceptor(const void* packet
         if (session) {
           uint64_t record_id = GetROCMToolObj()->GetUniqueRecordId();
           AddKernelNameWithDispatchID(GetKernelNameFromKsymbols(dispatch_packet.kernel_object), record_id);
+#ifdef USE_AQLPROFILE
           if (profiles && replay_mode_count > 0) {
             session->GetProfiler()->AddPendingSignals(
                 writer_id, record_id, dispatch_packet.completion_signal,
                 session_id, buffer_id, profile.first, profile.first->metrics_list.size(),
                 profile.second, kernel_properties, (uint32_t)syscall(__NR_gettid), user_pkt_index);
-          } else {
+          }
+          else
+#endif
+          {
             session->GetProfiler()->AddPendingSignals(
                 writer_id, record_id, dispatch_packet.completion_signal,
                 session_id, buffer_id, nullptr, 0, nullptr, kernel_properties,
@@ -855,6 +871,7 @@ void WriteInterceptor(const void* packet
     Packet::packet_t stop_packet{};
     hsa_ven_amd_aqlprofile_profile_t* profile = nullptr;
 
+#ifdef USE_AQLPROFILE
     if (att_parameters_data.size() > 0 && is_att_collection_mode) {
       // TODO sauverma: convert att_parameters_data to pass to generateattPackets
       std::vector<hsa_ven_amd_aqlprofile_parameter_t> att_params;
@@ -903,6 +920,7 @@ void WriteInterceptor(const void* packet
       profile = Packet::GenerateATTPackets(queue_info.GetCPUAgent(), queue_info.GetGPUAgent(),
                                             att_params, &start_packet, &stop_packet);
     }
+#endif
 
 
     // Searching across all the packets given during this write
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/hsa/queues/queue.h rocprofiler-rocm-5.6.0/src/core/hsa/queues/queue.h
--- rocprofiler-rocm-5.6.0.orig/src/core/hsa/queues/queue.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/hsa/queues/queue.h	2023-08-04 15:49:19.828812371 -0700
@@ -84,7 +84,9 @@ struct queue_info_session_t {
   hsa_signal_t interrupt_signal;
 };
 
+#ifdef USE_AQLPROFILE
 void AddRecordCounters(rocprofiler_record_profiler_t* record, const pending_signal_t& pending);
+#endif
 
 void InitializePools(hsa_agent_t cpu_agent);
 
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/metrics.cpp rocprofiler-rocm-5.6.0/src/core/metrics.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/metrics.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/metrics.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -23,6 +23,8 @@ THE SOFTWARE.
 #include "core/metrics.h"
 
 namespace rocprofiler {
+#ifdef USE_AQLPROFILE
 MetricsDict::map_t* MetricsDict::map_ = NULL;
 MetricsDict::mutex_t MetricsDict::mutex_;
+#endif
 }
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/metrics.h rocprofiler-rocm-5.6.0/src/core/metrics.h
--- rocprofiler-rocm-5.6.0.orig/src/core/metrics.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/metrics.h	2023-08-04 15:49:19.828812371 -0700
@@ -42,6 +42,7 @@ THE SOFTWARE.
 #include "xml/xml.h"
 
 namespace rocprofiler {
+#ifdef USE_AQLPROFILE
 struct counter_t {
   std::string name;
   event_t event;
@@ -347,6 +348,7 @@ class MetricsDict {
   static map_t* map_;
   static mutex_t mutex_;
 };
+#endif
 
 }  // namespace rocprofiler
 
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/profile.h rocprofiler-rocm-5.6.0/src/core/profile.h
--- rocprofiler-rocm-5.6.0.orig/src/core/profile.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/profile.h	2023-08-04 15:49:19.828812371 -0700
@@ -183,6 +183,8 @@ class Profile {
       packet_t read{};      // read at kernel start
       packet_t read2{};     // read at kernel end
 
+      hsa_status_t rd_status = HSA_STATUS_ERROR;
+#ifdef USE_AQLPROFILE
       // Check the profile buffer sizes
       status = api->hsa_ven_amd_aqlprofile_start(&profile_, NULL);
       if (status != HSA_STATUS_SUCCESS) AQL_EXC_RAISING(status, "aqlprofile_start(NULL)");
@@ -196,7 +198,6 @@ class Profile {
       if (status != HSA_STATUS_SUCCESS) AQL_EXC_RAISING(status, "aqlprofile_start");
       status = api->hsa_ven_amd_aqlprofile_stop(&profile_, &stop);
       if (status != HSA_STATUS_SUCCESS) AQL_EXC_RAISING(status, "aqlprofile_stop");
-      hsa_status_t rd_status = HSA_STATUS_ERROR;
 #ifdef AQLPROF_NEW_API
       if (profile_.type == HSA_VEN_AMD_AQLPROFILE_EVENT_TYPE_PMC) {
         rd_status = api->hsa_ven_amd_aqlprofile_read(&profile_, &read);
@@ -209,6 +210,7 @@ class Profile {
       if (rd_status != HSA_STATUS_SUCCESS) AQL_EXC_RAISING(status, "aqlprofile_read");
 #endif
 #endif
+#endif
 
       // Set completion signal of start
       hsa_signal_t dummy_signal{};
@@ -245,6 +247,7 @@ class Profile {
 
       // Fill packet vectors
       if (is_legacy_) {
+#ifdef USE_AQLPROFILE
         const uint32_t start_index = start_vector.size();
         const uint32_t stop_index = stop_vector.size();
 
@@ -277,6 +280,7 @@ class Profile {
               AQL_EXC_RAISING(status, "hsa_ven_amd_aqlprofile_legacy_get_pm4");
           }
         }
+#endif
       } else {
         start_vector.push_back(start);
         if (is_concurrent) start_vector.push_back(barrier_st);
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/rocprofiler.cpp rocprofiler-rocm-5.6.0/src/core/rocprofiler.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/rocprofiler.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/rocprofiler.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -287,12 +287,15 @@ CONSTRUCTOR_API void constructor() {
 
 DESTRUCTOR_API void destructor() {
   ONLOAD_TRACE_BEG();
+#ifdef USE_AQLPROFILE
   rocprofiler::MetricsDict::Destroy();
+#endif
   util::HsaRsrcFactory::Destroy();
   util::Logger::Destroy();
   ONLOAD_TRACE_END();
 }
 
+#ifdef USE_AQLPROFILE
 const MetricsDict* GetMetrics(const hsa_agent_t& agent) {
   rocprofiler::util::HsaRsrcFactory* hsa_rsrc = &rocprofiler::util::HsaRsrcFactory::Instance();
   const rocprofiler::util::AgentInfo* agent_info = hsa_rsrc->GetAgentInfo(agent);
@@ -301,6 +304,7 @@ const MetricsDict* GetMetrics(const hsa_
   if (metrics == NULL) EXC_RAISING(HSA_STATUS_ERROR, "MetricsDict create failed");
   return metrics;
 }
+#endif
 
 hsa_status_t GetExcStatus(const std::exception& e) {
   const util::exception* rocprofiler_exc_ptr = dynamic_cast<const util::exception*>(&e);
@@ -577,10 +581,12 @@ PUBLIC_API hsa_status_t rocprofiler_read
 
 // Get profiling data
 PUBLIC_API hsa_status_t rocprofiler_get_data(rocprofiler_t* handle, uint32_t group_index) {
+#ifdef USE_AQLPROFILE
   API_METHOD_PREFIX
   rocprofiler::Context* context = reinterpret_cast<rocprofiler::Context*>(handle);
   context->GetData(group_index);
   API_METHOD_SUFFIX
+#endif
 }
 
 // Start profiling
@@ -606,18 +612,22 @@ PUBLIC_API hsa_status_t rocprofiler_grou
 
 // Get profiling data
 PUBLIC_API hsa_status_t rocprofiler_group_get_data(rocprofiler_group_t* group) {
+#ifdef USE_AQLPROFILE
   API_METHOD_PREFIX
   rocprofiler::Context* context = reinterpret_cast<rocprofiler::Context*>(group->context);
   context->GetData(group->index);
   API_METHOD_SUFFIX
+#endif
 }
 
 // Get metrics data
 PUBLIC_API hsa_status_t rocprofiler_get_metrics(const rocprofiler_t* handle) {
+#ifdef USE_AQLPROFILE
   API_METHOD_PREFIX
   const rocprofiler::Context* context = reinterpret_cast<const rocprofiler::Context*>(handle);
   context->GetMetricsData();
   API_METHOD_SUFFIX
+#endif
 }
 
 // Set/remove queue callbacks
@@ -650,10 +660,12 @@ PUBLIC_API hsa_status_t rocprofiler_stop
 // Method for iterating the events output data
 PUBLIC_API hsa_status_t rocprofiler_iterate_trace_data(
     rocprofiler_t* handle, hsa_ven_amd_aqlprofile_data_callback_t callback, void* data) {
+#ifdef USE_AQLPROFILE
   API_METHOD_PREFIX
   rocprofiler::Context* context = reinterpret_cast<rocprofiler::Context*>(handle);
   context->IterateTraceData(callback, data);
   API_METHOD_SUFFIX
+#endif
 }
 
 ////////////////////////////////////////////////////////////////////////////////
@@ -718,9 +730,11 @@ PUBLIC_API hsa_status_t rocprofiler_get_
   uint32_t* result_32bit_ptr = reinterpret_cast<uint32_t*>(data);
 
   switch (kind) {
+#ifdef USE_AQLPROFILE
     case ROCPROFILER_INFO_KIND_METRIC_COUNT:
       *result_32bit_ptr = rocprofiler::GetMetrics(*agent)->Size();
       break;
+#endif
     case ROCPROFILER_INFO_KIND_TRACE_COUNT:
       *result_32bit_ptr = 1;
       break;
@@ -753,6 +767,7 @@ PUBLIC_API hsa_status_t rocprofiler_iter
     info.agent_index = agent_idx;
 
     switch (kind) {
+#ifdef USE_AQLPROFILE
       case ROCPROFILER_INFO_KIND_METRIC: {
         const rocprofiler::MetricsDict* dict = rocprofiler::GetMetrics(agent_info->dev_id);
         auto nodes_vec = dict->GetNodes();
@@ -814,6 +829,7 @@ PUBLIC_API hsa_status_t rocprofiler_iter
         }
         break;
       }
+#endif
       case ROCPROFILER_INFO_KIND_TRACE: {
         info.trace.name = strdup("TT");
         info.trace.description = strdup("Thread Trace");
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/session/device_profiling.cpp rocprofiler-rocm-5.6.0/src/core/session/device_profiling.cpp
--- rocprofiler-rocm-5.6.0.orig/src/core/session/device_profiling.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/session/device_profiling.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -122,6 +122,7 @@ bool DeviceProfileSession::generatePacke
   std::map<std::string, std::set<std::string>> metrics_counters;
 
 
+#ifdef USE_AQLPROFILE
   metrics::ExtractMetricEvents(profiling_data_, gpu_agent_, metrics_dict_, results_map_,
                                events_list_, results_list_, events_max_block_counters,
                                metrics_counters);
@@ -129,6 +130,7 @@ bool DeviceProfileSession::generatePacke
   profile_ = Packet::InitializeDeviceProfilingAqlPackets(cpu_agent_, gpu_agent_, &events_list_[0],
                                                          events_list_.size(), &start_packet_,
                                                          &stop_packet_, &read_packet_);
+#endif
 
   start_packet_.header = HSA_PACKET_TYPE_VENDOR_SPECIFIC << HSA_PACKET_HEADER_TYPE;
 
@@ -181,6 +183,7 @@ DeviceProfileSession::DeviceProfileSessi
   if (hsa_agent_get_info(gpu_agent_, HSA_AGENT_INFO_NAME, gpu_name) != HSA_STATUS_SUCCESS)
     fatal("Agent name query failed");
 
+#ifdef USE_AQLPROFILE
   Agent::AgentInfo* agentInfo = &(hsa_support::GetAgentInfo(gpu_agent_.handle));
   metrics_dict_ = MetricsDict::Create(agentInfo);
 
@@ -189,6 +192,7 @@ DeviceProfileSession::DeviceProfileSessi
     if (metric == NULL) std::cout << d << " not found in metrics_dict\n";
     metrics_list_.push_back(metric);
   }
+#endif
 
   createQueue();
   generatePackets();
@@ -229,6 +233,7 @@ void DeviceProfileSession::StartSession(
   // set a variable that this session has started
 }
 
+#ifdef USE_AQLPROFILE
 void DeviceProfileSession::PollMetrics(rocprofiler_device_profile_metric_t* data) {
   // TODO: check if session was already started
   // TODO: can't poll if stopped
@@ -261,6 +266,7 @@ void DeviceProfileSession::PollMetrics(r
   // restore signal to a value of 1
   hsa_signal_store_screlease(completion_signal_, 1);
 }
+#endif
 
 void DeviceProfileSession::StopSession() {
   // TODO: check if session was already started
@@ -326,4 +332,4 @@ bool rocmtools::find_hsa_agent_gpu(uint6
 }
 
 std::map<uint64_t, hsa_queue_t*> DeviceProfileSession::agent_queue_map_;
-std::mutex DeviceProfileSession::agent_queue_map_mutex_;
\ No newline at end of file
+std::mutex DeviceProfileSession::agent_queue_map_mutex_;
diff -urp rocprofiler-rocm-5.6.0.orig/src/core/session/device_profiling.h rocprofiler-rocm-5.6.0/src/core/session/device_profiling.h
--- rocprofiler-rocm-5.6.0.orig/src/core/session/device_profiling.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/core/session/device_profiling.h	2023-08-04 15:49:19.828812371 -0700
@@ -34,7 +34,9 @@ namespace rocmtools {
 class DeviceProfileSession {
  public:
   void StartSession();
+#ifdef USE_AQLPROFILE
   void PollMetrics(rocprofiler_device_profile_metric_t* data);
+#endif
   void StopSession();
 
   DeviceProfileSession(std::vector<std::string> counters, hsa_agent_t cpu_agent,
@@ -63,8 +65,10 @@ class DeviceProfileSession {
   Packet::packet_t stop_packet_;
   Packet::packet_t read_packet_;
 
+#ifdef USE_AQLPROFILE
   MetricsDict* metrics_dict_;
   std::vector<const Metric*> metrics_list_;
+#endif
   std::map<std::string, results_t*> results_map_;
   std::vector<event_t> events_list_;
   std::vector<results_t*> results_list_;
diff -urp rocprofiler-rocm-5.6.0.orig/src/tools/rocprofv2/CMakeLists.txt rocprofiler-rocm-5.6.0/src/tools/rocprofv2/CMakeLists.txt
--- rocprofiler-rocm-5.6.0.orig/src/tools/rocprofv2/CMakeLists.txt	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/tools/rocprofv2/CMakeLists.txt	2023-08-04 15:49:19.828812371 -0700
@@ -4,9 +4,14 @@
 # Getting HSA Include Directory
 get_property(HSA_RUNTIME_INCLUDE_DIRECTORIES TARGET hsa-runtime64::hsa-runtime64 PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
 
-find_library(AQLPROFILE_LIB "libhsa-amd-aqlprofile64.so" HINTS ${CMAKE_PREFIX_PATH} PATHS ${ROCM_PATH} PATH_SUFFIXES lib)
-if(NOT AQLPROFILE_LIB)
-  message(FATAL_ERROR "AQL_PROFILE not installed. Please install hsa-amd-aqlprofile!")
+if(AQLPROFILE)
+  add_definitions(-DUSE_AQLPROFILE)
+  find_library(AQLPROFILE_LIB "libhsa-amd-aqlprofile64.so" PATH_SUFFIXES lib HINTS ${CMAKE_PREFIX_PATH} PATHS @ESYSROOT@/opt/rocm-@ROCM_VERSION@)
+  if(NOT AQLPROFILE_LIB)
+    message(FATAL_ERROR "AQL_PROFILE not installed. Please install hsa-amd-aqlprofile!")
+  endif()
+else()
+  set(AQLPROFILE_LIB "")
 endif()
 
 file(GLOB ROCPROFV2_SRC_FILES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
@@ -26,4 +31,4 @@ target_include_directories(rocprofv2
 target_link_libraries(rocprofv2 PRIVATE ${AQLPROFILE_LIB} hsa-runtime64::hsa-runtime64 stdc++fs Threads::Threads atomic -ldl)
 # install(TARGETS rocprofv2 RUNTIME
 #   DESTINATION ${CMAKE_INSTALL_BINDIR}
-#   COMPONENT runtime)
\ No newline at end of file
+#   COMPONENT runtime)
diff -urp rocprofiler-rocm-5.6.0.orig/src/tools/tool.cpp rocprofiler-rocm-5.6.0/src/tools/tool.cpp
--- rocprofiler-rocm-5.6.0.orig/src/tools/tool.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/tools/tool.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -145,6 +145,7 @@ uint64_t getFlushIntervalFromEnv() {
 
 std::vector<std::string> GetCounterNames() {
   std::vector<std::string> counters;
+#ifdef USE_AQLPROFILE
   const char* line_c_str = getenv("ROCPROFILER_COUNTERS");
   if (line_c_str) {
     std::string line = line_c_str;
@@ -165,6 +166,7 @@ std::vector<std::string> GetCounterNames
       }
     }
   }
+#endif
   return counters;
 }
 
@@ -197,6 +199,7 @@ att_parsed_input_t GetATTParams() {
     {"TOKEN_MASK2", 0x3FFFF}
   };
 
+#ifdef USE_AQLPROFILE
   bool started_att_counters = false;
 
   if (!path) return {parameters, kernel_names, counters_names};
@@ -284,6 +287,7 @@ att_parsed_input_t GetATTParams() {
   // If no kernel names were provided, collect them all.
   // Empty string always returns true for "str.find()".
   if (kernel_names.size() == 0) kernel_names.push_back("");
+#endif
 
   return {parameters, kernel_names, counters_names};
 }
diff -urp rocprofiler-rocm-5.6.0.orig/src/util/exception.h rocprofiler-rocm-5.6.0/src/util/exception.h
--- rocprofiler-rocm-5.6.0.orig/src/util/exception.h	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/util/exception.h	2023-08-04 15:49:19.828812371 -0700
@@ -48,6 +48,7 @@ THE SOFTWARE.
     throw rocprofiler::util::exception(error, oss.str());                                          \
   } while (0)
 
+#ifdef USE_AQLPROFILE
 #define AQL_EXC_RAISING(error, stream)                                                             \
   do {                                                                                             \
     const char* error_string = NULL;                                                               \
@@ -55,6 +56,13 @@ THE SOFTWARE.
     api->hsa_ven_amd_aqlprofile_error_string(&error_string);                                       \
     EXC_RAISING(error, stream << ", " << error_string);                                            \
   } while (0)
+#else
+#define AQL_EXC_RAISING(error, stream)                                                             \
+  do {                                                                                             \
+    const char* error_string = NULL;                                                               \
+    EXC_RAISING(error, stream);                                                                    \
+  } while (0)
+#endif
 
 namespace rocprofiler {
 namespace util {
diff -urp rocprofiler-rocm-5.6.0.orig/src/util/hsa_rsrc_factory.cpp rocprofiler-rocm-5.6.0/src/util/hsa_rsrc_factory.cpp
--- rocprofiler-rocm-5.6.0.orig/src/util/hsa_rsrc_factory.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/src/util/hsa_rsrc_factory.cpp	2023-08-04 15:49:19.828812371 -0700
@@ -271,6 +271,7 @@ void HsaRsrcFactory::InitHsaApiTable(Hsa
   }
 }
 
+#ifdef USE_AQLPROFILE
 hsa_status_t HsaRsrcFactory::LoadAqlProfileLib(aqlprofile_pfn_t* api) {
   void* handle = dlopen(kAqlProfileLib, RTLD_NOW);
   if (handle == NULL) {
@@ -304,6 +305,7 @@ hsa_status_t HsaRsrcFactory::LoadAqlProf
 
   return HSA_STATUS_SUCCESS;
 }
+#endif
 
 // Add system agent info
 const AgentInfo* HsaRsrcFactory::AddAgentInfo(const hsa_agent_t agent) {
diff -urp rocprofiler-rocm-5.6.0.orig/test/util/hsa_rsrc_factory.cpp rocprofiler-rocm-5.6.0/test/util/hsa_rsrc_factory.cpp
--- rocprofiler-rocm-5.6.0.orig/test/util/hsa_rsrc_factory.cpp	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/test/util/hsa_rsrc_factory.cpp	2023-08-04 15:49:19.832812371 -0700
@@ -265,6 +265,7 @@ void HsaRsrcFactory::InitHsaApiTable(Hsa
   }
 }
 
+#ifdef USE_AQLPROFILE
 hsa_status_t HsaRsrcFactory::LoadAqlProfileLib(aqlprofile_pfn_t* api) {
   void* handle = dlopen(kAqlProfileLib, RTLD_NOW);
   if (handle == NULL) {
@@ -298,6 +299,7 @@ hsa_status_t HsaRsrcFactory::LoadAqlProf
 
   return HSA_STATUS_SUCCESS;
 }
+#endif
 
 // Add system agent info
 const AgentInfo* HsaRsrcFactory::AddAgentInfo(const hsa_agent_t agent) {
diff -urp rocprofiler-rocm-5.6.0.orig/tests/unittests/CMakeLists.txt rocprofiler-rocm-5.6.0/tests/unittests/CMakeLists.txt
--- rocprofiler-rocm-5.6.0.orig/tests/unittests/CMakeLists.txt	2023-06-20 08:14:39.000000000 -0700
+++ rocprofiler-rocm-5.6.0/tests/unittests/CMakeLists.txt	2023-08-04 15:49:19.832812371 -0700
@@ -87,6 +87,10 @@ target_compile_definitions(runUnitTests
   PUBLIC AMD_INTERNAL_BUILD
   PRIVATE PROF_API_IMPL HIP_PROF_HIP_API_STRING=1 __HIP_PLATFORM_AMD__=1)
 
+if(NOT AQLPROFILE)
+  set(AQLPROFILE_LIB "")
+endif()
+
 target_link_libraries(runUnitTests PRIVATE rocprofiler_tool ${AQLPROFILE_LIB}
   hsa-runtime64::hsa-runtime64
   GTest::gtest GTest::gtest_main stdc++fs
