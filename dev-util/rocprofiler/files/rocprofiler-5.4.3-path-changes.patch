unchanged:
--- rocprofiler-rocm-5.4.3.orig/bin/build_kernel.sh	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/bin/build_kernel.sh	2023-08-26 14:14:48.096108891 -0700
@@ -18,7 +18,7 @@ if [ -z "$DST_DIR" ] ; then
 fi
 
 if [ -z "$ROCM_DIR" ] ; then
-  ROCM_DIR=/opt/rocm
+  ROCM_DIR=/usr
 fi
 
 if [ -z "$TGT_LIST" ] ; then
@@ -32,12 +32,12 @@ fi
 
 OCL_VER="2.0"
 
-if [ -e $ROCM_DIR/llvm ] ; then
-  LLVM_DIR=$ROCM_DIR/llvm
-  LIB_DIR=$ROCM_DIR/lib
+if [ -e $ROCM_DIR/lib/llvm/@LLVM_SLOT@ ] ; then
+  LLVM_DIR=$ROCM_DIR/lib/llvm/@LLVM_SLOT@
+  LIB_DIR=$ROCM_DIR/@LIBDIR@
 else
   LLVM_DIR=$ROCM_DIR/hcc
-  LIB_DIR=$LLVM_DIR/lib
+  LIB_DIR=$LLVM_DIR/@LIBDIR@
 fi
 
 # Determine whether using new or old device-libs layout
@@ -45,8 +45,8 @@ if [ -e $LIB_DIR/bitcode/opencl.amdgcn.b
   BC_DIR=$LIB_DIR/bitcode
 elif [ -e $LIB_DIR/opencl.amdgcn.bc ]; then
   BC_DIR=$LIB_DIR
-elif [ -e $ROCM_DIR/amdgcn/bitcode/opencl.bc ]; then
-  BC_DIR=$ROCM_DIR/amdgcn/bitcode
+elif [ -e $ROCM_DIR/@LIBDIR@/amdgcn/bitcode/opencl.bc ]; then
+  BC_DIR=$ROCM_DIR/@LIBDIR@/amdgcn/bitcode
 else
   echo "Error: Cannot find amdgcn bitcode directory"
   exit 1
unchanged:
--- rocprofiler-rocm-5.4.3.orig/bin/merge_traces.sh	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/bin/merge_traces.sh	2023-08-26 14:14:48.096108891 -0700
@@ -25,7 +25,7 @@
 #A script to merge rocprof traces and then provide a results.json for the aggregate numbers.
 
 ROCPROF=`which rocprof`
-BIN_DIR=$(dirname $(realpath ${ROCPROF:-/opt/rocm/bin/rocprof}))
+BIN_DIR=$(dirname $(realpath ${ROCPROF:-/usr/bin/rocprof}))
 
 bin_name=`basename $0`
 
unchanged:
--- rocprofiler-rocm-5.4.3.orig/bin/rpl_run.sh	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/bin/rpl_run.sh	2023-08-26 14:14:48.096108891 -0700
@@ -29,11 +29,12 @@ RUN_DIR=`pwd`
 TMP_DIR="/tmp"
 DATA_DIR="rpl_data_${time_stamp}_$$"
 
-RPL_PATH=$ROOT_DIR/lib
-TLIB_PATH=$RPL_PATH/rocprofiler
-TTLIB_PATH=$ROOT_DIR/lib/roctracer
-ROCM_LIB_PATH=$ROOT_DIR/lib
-PROF_BIN_DIR=$ROOT_DIR/libexec/rocprofiler
+RPL_PATH=$ROOT_DIR/@LIBDIR@
+TLIB_PATH=$RPL_PATH
+TTLIB_PATH=$ROOT_DIR/@LIBDIR@
+ROCM_LIB_PATH=$ROOT_DIR/@LIBDIR@
+PROF_BIN_DIR=$ROOT_DIR/bin
+PROF_LIBEXEC_DIR=$ROOT_DIR/libexec/rocprofiler
 
 if [ -z "$ROCP_PYTHON_VERSION" ] ; then
   ROCP_PYTHON_VERSION=python3
@@ -69,7 +70,7 @@ export ROCP_HSA_INTERCEPT=1
 # Disabling internal ROC Profiler proxy queue (simple version supported for testing purposes)
 unset ROCP_PROXY_QUEUE
 # ROC Profiler metrics definition
-export ROCP_METRICS=$TLIB_PATH/metrics.xml
+export ROCP_METRICS=$ROOT_DIR/share/rocprofiler/metrics.xml
 # Disable AQL-profile read API
 export AQLPROFILE_READ_API=0
 # ROC Profiler package path
@@ -103,7 +104,7 @@ usage() {
   bin_name=`basename $0`
   echo "ROCm Profiling Library (RPL) run script, a part of ROCprofiler library package."
   echo "Full path: $BIN_DIR/$bin_name"
-  echo "Metrics definition: $TLIB_PATH/metrics.xml"
+  echo "Metrics definition: $ROOT_DIR/share/rocprofiler/metrics.xml"
   echo ""
   echo "Usage:"
   echo "  $bin_name [-h] [--list-basic] [--list-derived] [-i <input .txt/.xml file>] [-o <output CSV file>] <app command line>"
@@ -211,7 +212,7 @@ fi
 # setting ROCM_LIB_PATH
 set_rocm_lib_path() {
 
-  for ROCM_LIB_PATH in "$ROOT_DIR/lib" "$ROOT_DIR/lib64" ; do
+  for ROCM_LIB_PATH in $TLIB_PATH ; do
      if [ -d "$ROCM_LIB_PATH" ]; then
         return 0
      fi
@@ -225,7 +226,7 @@ set_rocm_lib_path() {
 OUTPUT_LIST=""
 run() {
   if ! set_rocm_lib_path ; then
-     echo " Fatal could not find ROCm lib directory "
+     echo " Fatal could not find ROCm @LIBDIR@ directory "
      fatal
   fi
   export ROCP_INPUT="$1"
@@ -385,11 +386,11 @@ while [ 1 ] ; do
     export ROCP_METRICS="$2"
   elif [ "$1" = "--list-basic" ] ; then
     export ROCP_INFO=b
-    HSA_TOOLS_LIB="$MY_HSA_TOOLS_LIB" eval "$TLIB_PATH/rocprof-ctrl"
+    HSA_TOOLS_LIB="$MY_HSA_TOOLS_LIB" eval "$PROF_BIN_DIR/rocprof-ctrl"
     exit 1
   elif [ "$1" = "--list-derived" ] ; then
     export ROCP_INFO=d
-    HSA_TOOLS_LIB="$MY_HSA_TOOLS_LIB" eval "$TLIB_PATH/rocprof-ctrl"
+    HSA_TOOLS_LIB="$MY_HSA_TOOLS_LIB" eval "$PROF_BIN_DIR/rocprof-ctrl"
     exit 1
   elif [ "$1" = "--basenames" ] ; then
     if [ "$2" = "on" ] ; then
@@ -550,7 +551,7 @@ elif [ "$input_type" = "txt" -o "$input_
   mkdir -p $RES_DIR
   echo "RPL: output dir '$RES_DIR'"
   if [ "$input_type" = "txt" ] ; then
-    $PROF_BIN_DIR/txt2xml.sh $INPUT_FILE $RES_DIR
+    $PROF_LIBEXEC_DIR/txt2xml.sh $INPUT_FILE $RES_DIR
   else
     echo "<metric></metric>" > $RES_DIR/input.xml
   fi
@@ -582,9 +583,9 @@ if [ -n "$csv_output" ] ; then
   merge_output $OUTPUT_LIST
   if [ "$GEN_STATS" = "1" ] ; then
     db_output=$(echo $csv_output | sed "s/\.csv/.db/")
-    $ROCP_PYTHON_VERSION $PROF_BIN_DIR/tblextr.py $db_output $OUTPUT_LIST
+    $ROCP_PYTHON_VERSION $PROF_LIBEXEC_DIR/tblextr.py $db_output $OUTPUT_LIST
   else
-    $ROCP_PYTHON_VERSION $PROF_BIN_DIR/tblextr.py $csv_output $OUTPUT_LIST
+    $ROCP_PYTHON_VERSION $PROF_LIBEXEC_DIR/tblextr.py $csv_output $OUTPUT_LIST
   fi
   if [ "$?" -ne 0 ] ; then
     echo "Profiling data corrupted: '$OUTPUT_LIST'" | tee "$ROCPROFILER_SESS/error"
unchanged:
--- rocprofiler-rocm-5.4.3.orig/build.sh	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/build.sh	2023-08-26 14:14:48.096108891 -0700
@@ -25,8 +25,8 @@
 SRC_DIR=`dirname $0`
 TO_CLEAN=yes
 COMPONENT="rocprofiler"
-ROCM_PATH="${ROCM_PATH:=/opt/rocm}"
-LD_RUNPATH_FLAG=" -Wl,--enable-new-dtags -Wl,--rpath,$ROCM_PATH/lib:$ROCM_PATH/lib64"
+ROCM_PATH="${ROCM_PATH:=/usr}"
+LD_RUNPATH_FLAG=" -Wl,--enable-new-dtags -Wl,--rpath,$ROCM_PATH/@LIBDIR@"
 
 if [ -z "$ROCPROFILER_ROOT" ]; then ROCPROFILER_ROOT=$SRC_DIR; fi
 if [ -z "$BUILD_DIR" ] ; then BUILD_DIR=$SRC_DIR/build; fi
unchanged:
--- rocprofiler-rocm-5.4.3.orig/CMakeLists.txt	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/CMakeLists.txt	2023-08-26 14:14:48.096108891 -0700
@@ -23,7 +23,7 @@
 cmake_minimum_required ( VERSION 2.8.12 )
 
 ## Verbose output.
-set ( CMAKE_VERBOSE_MAKEFILE TRUE CACHE BOOL "Verbose Output" FORCE )
+#_cmake_modify_IGNORE set ( CMAKE_VERBOSE_MAKEFILE TRUE CACHE BOOL "Verbose Output" FORCE )
 
 ## Set module name and project name.
 set ( ROCPROFILER_NAME "rocprofiler" )
@@ -31,8 +31,8 @@ set ( ROCPROFILER_TARGET "${ROCPROFILER_
 set ( ROCPROFILER_LIBRARY "lib${ROCPROFILER_TARGET}" )
 project ( ${ROCPROFILER_NAME} )
 
-# Set default libdir to be "lib" for ROCm
-set(CMAKE_INSTALL_LIBDIR "lib" CACHE STRING "Library install directory")
+# Set default libdir to be "@LIBDIR@" for ROCm
+set(CMAKE_INSTALL_LIBDIR "@LIBDIR@" CACHE STRING "Library install directory")
 include(GNUInstallDirs)
 ## Adding default path cmake modules
 list ( APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake_modules" )
@@ -82,7 +82,7 @@ if(USE_PROF_API EQUAL 1)
         HINTS
           ${PROF_API_HEADER_PATH}
         PATHS
-            /opt/rocm/include
+            /usr/include
         PATH_SUFFIXES
             roctracer/ext
     )
@@ -116,7 +116,7 @@ if ( DEFINED CMAKE_INSTALL_PREFIX )
   get_filename_component ( prefix_name ${CMAKE_INSTALL_PREFIX} NAME )
   get_filename_component ( prefix_dir ${CMAKE_INSTALL_PREFIX} DIRECTORY )
   if ( prefix_name STREQUAL ${DEST_NAME} )
-    set ( CMAKE_INSTALL_PREFIX ${prefix_dir} )
+#_cmake_modify_IGNORE     set ( CMAKE_INSTALL_PREFIX ${prefix_dir} )
   endif ()
 endif ()
 if ( DEFINED CPACK_PACKAGING_INSTALL_PREFIX )
@@ -159,10 +159,10 @@ install ( FILES
 install ( FILES
           ${CMAKE_CURRENT_SOURCE_DIR}/test/tool/metrics.xml
           ${CMAKE_CURRENT_SOURCE_DIR}/test/tool/gfx_metrics.xml
-          DESTINATION ${CMAKE_INSTALL_LIBDIR}/${DEST_NAME} )
+		  DESTINATION ${CMAKE_INSTALL_DATADIR}/${DEST_NAME} )
 # librocprof-tool.so
-install ( FILES ${PROJECT_BINARY_DIR}/test/librocprof-tool.so DESTINATION ${CMAKE_INSTALL_LIBDIR}/${DEST_NAME} )
-install ( FILES ${PROJECT_BINARY_DIR}/test/rocprof-ctrl DESTINATION ${CMAKE_INSTALL_LIBDIR}/${DEST_NAME}
+install ( FILES ${PROJECT_BINARY_DIR}/test/librocprof-tool.so DESTINATION ${CMAKE_INSTALL_LIBDIR} )
+install ( FILES ${PROJECT_BINARY_DIR}/test/rocprof-ctrl DESTINATION ${CMAKE_INSTALL_BINDIR}
           PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE )
 
 # File reorg Backward compatibility
diff -u rocprofiler-rocm-5.4.3/cmake_modules/env.cmake rocprofiler-rocm-5.4.3/cmake_modules/env.cmake
--- rocprofiler-rocm-5.4.3/cmake_modules/env.cmake	2023-08-26 14:14:48.096108891 -0700
+++ rocprofiler-rocm-5.4.3/cmake_modules/env.cmake	2023-08-28 14:15:16.273627796 -0700
@@ -91,10 +91,10 @@
 endif ()
 
 ## Find hsa-runtime
-find_package(hsa-runtime64 CONFIG REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm PATH_SUFFIXES lib/cmake/hsa-runtime64 )
+find_package(hsa-runtime64 CONFIG REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /usr PATH_SUFFIXES @LIBDIR@/cmake/hsa-runtime64 )
 
 # find KFD thunk
-find_package(hsakmt CONFIG REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm PATH_SUFFIXES lib/cmake/hsakmt )
+find_package(hsakmt CONFIG REQUIRED HINTS ${CMAKE_INSTALL_PREFIX} PATHS /usr PATH_SUFFIXES @LIBDIR@/cmake/hsakmt )
 
 ## Find ROCm
 find_library ( HSA_KMT_LIB "libhsakmt.so" )
@@ -117,7 +117,7 @@
   message ( FATAL_ERROR "ROCM_ROOT_DIR is not found." )
 endif ()
 
-find_library ( FIND_AQL_PROFILE_LIB "libhsa-amd-aqlprofile64.so" HINTS ${CMAKE_INSTALL_PREFIX} PATHS ${ROCM_ROOT_DIR})
+find_library ( FIND_AQL_PROFILE_LIB "libhsa-amd-aqlprofile64.so" PATH_SUFFIXES lib HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm-@ROCM_VERSION@)
 if (  NOT FIND_AQL_PROFILE_LIB )
   message ( FATAL_ERROR "AQL_PROFILE not installed. Please install AQL_PROFILE" )
 endif()
unchanged:
--- rocprofiler-rocm-5.4.3.orig/Readme.txt	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/Readme.txt	2023-08-26 14:14:48.096108891 -0700
@@ -26,7 +26,7 @@ $ export CMAKE_DEBUG_TRACE=1 # 1 to enab
 To build with the current installed ROCM:
 
 $ cd .../rocprofiler
-$ export CMAKE_PREFIX_PATH=/opt/rocm/include/hsa:/opt/rocm
+$ export CMAKE_PREFIX_PATH=/usr/include/hsa:/usr
 $ mkdir build
 $ cd build
 $ cmake ..
unchanged:
--- rocprofiler-rocm-5.4.3.orig/rocprofiler-backward-compat.cmake	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/rocprofiler-backward-compat.cmake	2023-08-26 14:16:09.168110903 -0700
@@ -23,7 +23,7 @@ set(ROCPROF_BUILD_DIR ${CMAKE_CURRENT_BI
 set(ROCPROF_WRAPPER_DIR ${ROCPROF_BUILD_DIR}/wrapper_dir)
 set(ROCPROF_WRAPPER_INC_DIR ${ROCPROF_WRAPPER_DIR}/include)
 set(ROCPROF_WRAPPER_BIN_DIR ${ROCPROF_WRAPPER_DIR}/bin)
-set(ROCPROF_WRAPPER_LIB_DIR ${ROCPROF_WRAPPER_DIR}/lib)
+set(ROCPROF_WRAPPER_LIB_DIR ${ROCPROF_WRAPPER_DIR}/@LIBDIR@)
 set(ROCPROF_WRAPPER_TOOL_DIR ${ROCPROF_WRAPPER_DIR}/tool)
 
 #Function to generate header template file
@@ -48,7 +48,7 @@ function(create_header_template)
     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.
-   */\n\n#ifndef @include_guard@\n#define @include_guard@ \n\n#pragma message(\"This file is deprecated. Use file from include path /opt/rocm-ver/include/ and prefix with rocprofiler\")\n@include_statements@ \n\n#endif")
+   */\n\n#ifndef @include_guard@\n#define @include_guard@ \n\n#pragma message(\"This file is deprecated. Use file from include path /usr/include/ and prefix with rocprofiler\")\n@include_statements@ \n\n#endif")
 endfunction()
 
 #use header template file and generate wrapper header files
@@ -114,7 +114,7 @@ function(create_library_symlink)
   add_custom_target(link_${LIB_TOOL} ALL
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMAND ${CMAKE_COMMAND} -E create_symlink
-                   ../../${CMAKE_INSTALL_LIBDIR}/${ROCPROFILER_NAME}/${LIB_ROCPROFTOOL} ${ROCPROF_WRAPPER_TOOL_DIR}/${LIB_TOOL})
+                   ../../${CMAKE_INSTALL_LIBDIR}/${LIB_ROCPROFTOOL} ${ROCPROF_WRAPPER_TOOL_DIR}/${LIB_TOOL})
   #create symlink to test binary
   #since its saved in lib folder , the code for the same is added here
   # With File reorg ,binary name changed from ctrl to rocprof-ctrl
@@ -123,12 +123,12 @@ function(create_library_symlink)
   add_custom_target(link_${TEST_CTRL} ALL
                     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                     COMMAND ${CMAKE_COMMAND} -E create_symlink
-                    ../../${CMAKE_INSTALL_LIBDIR}/${ROCPROFILER_NAME}/${TEST_ROCPROFCTRL} ${ROCPROF_WRAPPER_TOOL_DIR}/${TEST_CTRL})
+                    ../../${CMAKE_INSTALL_BINDIR}/${TEST_ROCPROFCTRL} ${ROCPROF_WRAPPER_TOOL_DIR}/${TEST_CTRL})
   set(METRICS "metrics.xml")
   add_custom_target(link_metrics ALL
                     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                     COMMAND ${CMAKE_COMMAND} -E create_symlink
-                    ../../${CMAKE_INSTALL_LIBDIR}/${ROCPROFILER_NAME}/${METRICS} ${ROCPROF_WRAPPER_LIB_DIR}/${METRICS})
+                    ../../${CMAKE_INSTALL_DATADIR}/${ROCPROFILER_NAME}/${METRICS} ${ROCPROF_WRAPPER_LIB_DIR}/${METRICS})
 endfunction()
 
 #Creater a template for header file
unchanged:
--- rocprofiler-rocm-5.4.3.orig/test/CMakeLists.txt	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/test/CMakeLists.txt	2023-08-26 14:14:48.096108891 -0700
@@ -21,7 +21,7 @@
 ################################################################################
 
 cmake_minimum_required ( VERSION 2.8.12 )
-set ( CMAKE_VERBOSE_MAKEFILE TRUE CACHE BOOL "Verbose Output" FORCE )
+#_cmake_modify_IGNORE set ( CMAKE_VERBOSE_MAKEFILE TRUE CACHE BOOL "Verbose Output" FORCE )
 
 set ( EXE_NAME "rocprof-ctrl" )
 
unchanged:
--- rocprofiler-rocm-5.4.3.orig/test/run.sh	2022-11-21 11:06:50.000000000 -0800
+++ rocprofiler-rocm-5.4.3/test/run.sh	2023-08-26 14:14:48.096108891 -0700
@@ -57,7 +57,7 @@ eval_test() {
 }
 
 # paths to ROC profiler and oher libraries
-export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD:$PWD/../../lib:/opt/rocm/lib:/opt/rocm/lib/rocprofiler
+export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD:$PWD/../../@LIBDIR@:/usr/@LIBDIR@:/usr/@LIBDIR@/rocprofiler
 
 # enable tools load failure reporting
 export HSA_TOOLS_REPORT_LOAD_FAILURE=1
