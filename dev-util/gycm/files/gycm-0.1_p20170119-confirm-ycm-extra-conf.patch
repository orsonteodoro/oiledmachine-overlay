Subject:  Add confirm dialog for .ycm_extra_conf.py
Patch author:  Orson Teodoro <orsonteodoro@hotmail.com>
Patch status:  Testing

diff -urpN gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/CMakeLists.txt gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/CMakeLists.txt
--- gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/CMakeLists.txt	2023-07-08 19:36:31.879750758 -0700
+++ gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/CMakeLists.txt	2023-07-08 19:36:45.803751042 -0700
@@ -23,6 +23,7 @@ add_library(gycm SHARED
 	gycm.cpp
 	ycmd.cpp
 	utils.cpp
+	utils2.cpp
 	config.cpp
 )
 message(${GEANY_LIBRARIES})
diff -urpN gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/gycm.cpp gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/gycm.cpp
--- gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/gycm.cpp	2017-01-19 01:53:14.000000000 -0800
+++ gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/gycm.cpp	2023-07-08 19:36:45.803751042 -0700
@@ -26,9 +26,9 @@ extern "C" gboolean handle_sci_event(GOb
 	switch(nt->nmhdr.code){
 		case SCN_CHARADDED:
 			((Ycmd*)user_data)->complete(obj,edit->document);
-			return false;
+			return true;
 	}
-	return false;
+	return  true;
 }
 
 extern "C" void plugin_init(GeanyData*){
@@ -43,10 +43,10 @@ extern "C" void plugin_init(GeanyData*){
 	plugin_signal_connect(geany_plugin, NULL, "document-reload",   TRUE,  (GCallback) &handle_document_load,   y);
 	plugin_signal_connect(geany_plugin, NULL, "document-close",    FALSE, (GCallback) &handle_document_unload, y);
 	plugin_signal_connect(geany_plugin, NULL, "document-activate", FALSE, (GCallback) &handle_document_visit,  y);
-	plugin_signal_connect(geany_plugin, NULL, "editor-notify",     FALSE, (GCallback) &handle_sci_event,       y);
+	plugin_signal_connect(geany_plugin, NULL, "editor-notify",      FALSE, (GCallback) &handle_sci_event,       y);
 }
 
 extern "C" void plugin_cleanup(void) {
 	y->shutdown();
 	delete y;
-}
\ No newline at end of file
+}
diff -urpN gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/utils2.cpp gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/utils2.cpp
--- gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/utils2.cpp	1969-12-31 16:00:00.000000000 -0800
+++ gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/utils2.cpp	2023-07-08 19:36:45.803751042 -0700
@@ -0,0 +1,10 @@
+#include <string>
+#include <regex>
+
+std::string getResponseSanitized(std::string returned_data) {
+	returned_data = std::regex_replace(returned_data, std::regex("^true([{][}])*[{]"), "{");
+	returned_data = std::regex_replace(returned_data, std::regex("[}]([{][}])*$"), "}");
+	returned_data = std::regex_replace(returned_data, std::regex("^true$"), "{}");
+	returned_data = std::regex_replace(returned_data, std::regex("^true([{][}])+$"), "{}");
+	return returned_data;
+}
diff -urpN gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/utils2.hpp gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/utils2.hpp
--- gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/utils2.hpp	1969-12-31 16:00:00.000000000 -0800
+++ gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/utils2.hpp	2023-07-08 19:36:45.803751042 -0700
@@ -0,0 +1,7 @@
+#ifndef UTILS2_HPP
+#define UTILS2_HPP
+
+#include <string>
+std::string getResponseSanitized(std::string returned_data);
+
+#endif
diff -urpN gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/ycmd.cpp gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/ycmd.cpp
--- gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/ycmd.cpp	2023-07-08 19:36:31.887750758 -0700
+++ gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/ycmd.cpp	2023-07-08 19:38:28.075753127 -0700
@@ -210,7 +210,16 @@ int Ycmd::handler(const char * buf, size
 	//}
 	//printf("\n\n");
 	
-	//std::cout << "Handling response: " << returned_data;
+	// prevent crashes by doc.parse
+	returned_data = getResponseSanitized(returned_data);
+	
+	if(returned_data == "{}")
+	{
+		//std::cout << "Skipping empty return_data from Ycmd::handler\n";
+		return 0;
+	}
+	
+	//std::cout << "Handling response: " << "|" << returned_data << "|" << "\n";
 	
 	Json::Value returned;
 	if(!doc.parse(returned_data,returned)){
@@ -225,10 +234,16 @@ int Ycmd::handler(const char * buf, size
 		return 0;
 	
 	if(returned.isMember("exception")){
-		msgwin_status_add("[ycmd] %s: %s", returned["exception"]["TYPE"].asCString(), returned["message"].asCString());
-		#ifndef NDEBUG
-		std::cout << returned.toStyledString();
-		#endif
+		if (std::strstr(returned["exception"]["TYPE"].asCString(), "UnknownExtraConf"))
+		{
+			const gchar *conf_path = returned["exception"]["extra_conf_file"].asCString();
+			document_open_file(conf_path, TRUE, NULL, NULL);
+		} else {
+			msgwin_status_add("[ycmd] %s: %s", returned["exception"]["TYPE"].asCString(), returned["message"].asCString());
+			#ifndef NDEBUG
+			std::cout << returned.toStyledString();
+			#endif
+		}
 		return 0;
 	}
 	
@@ -251,9 +266,11 @@ int Ycmd::handler(const char * buf, size
 				//printf("i: %zu\n",i);
 			}
 			s += (*v)[v->size()-1]["insertion_text"].asString();
-			//printf("s: %s\n",s.c_str());
+			//printf("s: %d %s\n",lenEntered, s.c_str());
+			SSM(currentEditor,SCI_AUTOCSETORDER,SC_ORDER_CUSTOM,0);
 			SSM(currentEditor,SCI_AUTOCSHOW,lenEntered,(sptr_t) s.c_str());
 		} else { // Nothing completable
+			//std::cout << "[ycmd] Canceling autocomplete\n";
 			SSM(currentEditor,SCI_AUTOCCANCEL,0,0); // Cancel any current completions
 		}
 	}
@@ -272,6 +289,7 @@ void Ycmd::send(Json::Value& _json, std:
 	currentMessage = _json;
 	
 	std::string json = Json::FastWriter().write(_json);
+	//std::cout << "Built send request: " << json;
 	
         unsigned char join[HMAC_LENGTH*3];
         HMAC(EVP_sha256(), hmac, HMAC_SECRET_LENGTH,(unsigned char *) method.c_str(),method.length(), join, NULL);
@@ -327,8 +345,7 @@ Json::Value Ycmd::getUnsavedBuffers(Gean
 	return v;
 }
 
-void Ycmd::handleDocumentLoad(GObject*, GeanyDocument* doc){
-	SSM(doc->editor->sci,SCI_AUTOCSETORDER,SC_ORDER_CUSTOM,0);
+void Ycmd::handleDocumentLoadSourceCode(GObject* obj, GeanyDocument* doc){
 	Json::Value json;
 	Json::Value extrad;
 	extrad["event_name"] = "FileReadyToParse";
@@ -336,7 +353,32 @@ void Ycmd::handleDocumentLoad(GObject*,
 	send(json,EVENT_HANDLER);
 }
 
-void Ycmd::handleDocumentUnload(GObject*, GeanyDocument* doc){
+void Ycmd::handleDocumentLoadYcmExtraConf(GObject* obj, GeanyDocument* doc){
+	const gchar *conf_path = doc->real_path;
+	std::string s;
+	s += std::string("SECURITY:  Please review the contents of ") + std::string(conf_path) + std::string(" for integrity.  When you are done, close that tab to accept or reject it before ycmd runs it.");
+	dialogs_show_msgbox(GTK_MESSAGE_WARNING, s.c_str());
+}
+
+void Ycmd::handleDocumentLoad(GObject* obj, GeanyDocument* doc){
+	if(!obj)
+	{
+		//std::cout << "[ycmd] Avoided obj deref segfault from Ycmd::handleDocumentLoad\n";
+		return;
+	}
+	if(!doc)
+	{
+		//std::cout << "[ycmd] Avoided doc deref segfault from Ycmd::handleDocumentLoad\n";
+		return;
+	}
+	if (doc->real_path && std::strstr(doc->real_path, ".ycm_extra_conf.py")) {
+		handleDocumentLoadYcmExtraConf(obj, doc);
+	} else {
+		handleDocumentLoadSourceCode(obj, doc);
+	}
+}
+
+void Ycmd::handleDocumentUnloadSourceCode(GObject* obj, GeanyDocument* doc){
 	Json::Value json;
 	Json::Value extrad;
 	extrad["event_name"] = "BufferUnload";
@@ -346,9 +388,59 @@ void Ycmd::handleDocumentUnload(GObject*
 	send(json,EVENT_HANDLER);
 }
 
+void Ycmd::handleDocumentUnloadYcmExtraConf(GObject* obj, GeanyDocument* doc){
+	if(!obj)
+	{
+		//std::cout << "[ycmd] Avoided obj deref segfault from Ycmd::handleDocumentUnloadYcmExtraConf\n";
+		return;
+	}
+	if(!doc)
+	{
+		//std::cout << "[ycmd] Avoided doc deref segfault from Ycmd::handleDocumentUnloadYcmExtraConf\n";
+		return;
+	}
+	const gchar *conf_path = utils_get_utf8_from_locale(doc->real_path);
+	std::string s;
+	s += std::string("SECURITY:  Accept and execute ") + std::string(conf_path) + std::string(" for ycmd?");
+	gboolean answer = dialogs_show_question(s.c_str());
+
+	Json::Value json;
+	jsonRequestBuild(doc,json);
+
+	if (answer) {
+		msgwin_status_add("[ycmd] Accepted %s", conf_path);
+		send(json, LOAD_EXTRA_CONF_HANDLER);
+	} else {
+		msgwin_status_add("[ycmd] Rejected %s", conf_path);
+		send(json, IGNORE_EXTRA_CONF_HANDLER);
+	}
+	//std::cout << "Built request: " << Json::StyledWriter().write(json);
+}
+
+void Ycmd::handleDocumentUnload(GObject* obj, GeanyDocument* doc){
+	if(!obj)
+	{
+		//std::cout << "[ycmd] Avoided obj deref segfault from Ycmd::handleDocumentUnload\n";
+		return;
+	}
+	if(!doc)
+	{
+		//std::cout << "[ycmd] Avoided doc deref segfault from Ycmd::handleDocumentUnload\n";
+		return;
+	}
+	if (doc->real_path && std::strstr(doc->real_path, ".ycm_extra_conf.py")) {
+		handleDocumentUnloadYcmExtraConf(obj, doc);
+	} else {
+		handleDocumentUnloadSourceCode(obj, doc);
+	}
+}
+
 void Ycmd::handleDocumentVisit(GObject*, GeanyDocument* doc){
 	if(!doc)
+	{
+		//std::cout << "[ycmd] Avoided doc deref segfault from Ycmd::handleDocumentVisit\n";
 		return;
+	}
 	Json::Value json;
 	Json::Value extrad;
 	extrad["event_name"] = "BufferVisit";
diff -urpN gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/ycmd.hpp gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/ycmd.hpp
--- gycm-3abe1419d22ad19acbd96f66864ec00a0a256689.orig/ycmd.hpp	2017-01-19 01:53:14.000000000 -0800
+++ gycm-3abe1419d22ad19acbd96f66864ec00a0a256689/ycmd.hpp	2023-07-08 19:36:45.803751042 -0700
@@ -5,6 +5,7 @@
 #include <json/json.h>
 #include <string>
 #include "utils.hpp"
+#include "utils2.hpp"
 #include <neon/ne_session.h>
 
 #define HMAC_SECRET_LENGTH 16
@@ -13,7 +14,8 @@
 #define CODE_COMPLETIONS_HANDLER "/completions"
 #define COMPLETER_COMMANDS_HANDLER "/run_completer_command"
 #define EVENT_HANDLER "/event_notification"
-#define EXTRA_CONF_HANDLER "/load_extra_conf_file"
+#define LOAD_EXTRA_CONF_HANDLER "/load_extra_conf_file"
+#define IGNORE_EXTRA_CONF_HANDLER "/ignore_extra_conf_file"
 
 class Ycmd {
 public:
@@ -28,11 +30,15 @@ public:
 	int handler(const char *, size_t);
 	
 	// Geany signal handlers
-	void handleDocumentLoad(GObject*, GeanyDocument*);
-	void handleDocumentUnload(GObject*, GeanyDocument*);
+	void handleDocumentLoad(GObject* obj, GeanyDocument*);
+	void handleDocumentUnload(GObject* obj, GeanyDocument*);
 	void handleDocumentVisit(GObject*, GeanyDocument*);
 	void complete(GObject*,GeanyDocument*);
 private:
+	void handleDocumentUnloadSourceCode(GObject* obj, GeanyDocument* doc);
+	void handleDocumentUnloadYcmExtraConf(GObject* obj, GeanyDocument* doc);
+	void handleDocumentLoadSourceCode(GObject* obj, GeanyDocument* doc);
+	void handleDocumentLoadYcmExtraConf(GObject* obj, GeanyDocument* doc);
 	gchar * b64HexHMAC(std::string& data);
 	void jsonRequestBuild(GeanyDocument*, Json::Value&, Json::Value&);
 	void jsonRequestBuild(GeanyDocument*, Json::Value&);
