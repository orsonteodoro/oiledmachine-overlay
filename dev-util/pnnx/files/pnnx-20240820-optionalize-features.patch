diff '--color=auto' -urp pnnx.orig/CMakeLists.txt pnnx/CMakeLists.txt
--- pnnx.orig/CMakeLists.txt	2024-12-18 17:56:37.611653078 -0800
+++ pnnx/CMakeLists.txt	2024-12-18 18:05:28.388157595 -0800
@@ -11,6 +11,10 @@ if(POLICY CMP0074)
     cmake_policy(SET CMP0074 NEW)
 endif()
 
+option(USE_PROTOBUF "Use protobuf" ON)
+option(USE_ONNXRUNTIME "Use ONNX Runtime" ON)
+option(USE_TORCHVISION "Use torchvision" ON)
+
 if(MSVC AND NOT CMAKE_VERSION VERSION_LESS "3.15")
     option(PNNX_BUILD_WITH_STATIC_CRT "Enables use of statically linked CRT for statically linked pnnx" OFF)
     if(PNNX_BUILD_WITH_STATIC_CRT)
@@ -42,24 +46,30 @@ find_package(Python3 COMPONENTS Interpre
 PNNXProbeForPyTorchInstall()
 find_package(Torch REQUIRED)
 
-find_package(TorchVision QUIET)
+if(USE_TORCHVISION)
+    find_package(TorchVision QUIET)
 
-message(STATUS "Torch_VERSION = ${Torch_VERSION}")
-message(STATUS "Torch_VERSION_MAJOR = ${Torch_VERSION_MAJOR}")
-message(STATUS "Torch_VERSION_MINOR = ${Torch_VERSION_MINOR}")
-message(STATUS "Torch_VERSION_PATCH = ${Torch_VERSION_PATCH}")
+    message(STATUS "Torch_VERSION = ${Torch_VERSION}")
+    message(STATUS "Torch_VERSION_MAJOR = ${Torch_VERSION_MAJOR}")
+    message(STATUS "Torch_VERSION_MINOR = ${Torch_VERSION_MINOR}")
+    message(STATUS "Torch_VERSION_PATCH = ${Torch_VERSION_PATCH}")
 
-if(Torch_VERSION VERSION_LESS "1.8")
-    message(FATAL_ERROR "pnnx only supports PyTorch >= 1.8")
-endif()
+    if(Torch_VERSION VERSION_LESS "1.8")
+        message(FATAL_ERROR "pnnx only supports PyTorch >= 1.8")
+    endif()
 
-if(Torch_VERSION VERSION_GREATER_EQUAL "2.1")
-    # c++17 is required for using torch 2.1+ headers
-    set(CMAKE_CXX_STANDARD 17)
-endif()
+    if(Torch_VERSION VERSION_GREATER_EQUAL "2.1")
+        # c++17 is required for using torch 2.1+ headers
+        set(CMAKE_CXX_STANDARD 17)
+    endif()
 
-# find torchvision library
-find_library(TORCHVISION_LIBRARY torchvision PATHS "${TorchVision_INSTALL_DIR}/lib" "${TorchVision_INSTALL_DIR}/lib64")
+    # find torchvision library
+    if(USE_TORCHVISION)
+        find_library(TORCHVISION_LIBRARY torchvision PATHS "${TorchVision_INSTALL_DIR}/lib" "${TorchVision_INSTALL_DIR}/lib64")
+    endif()
+else()
+    set(TORCHVISION_LIBRARY FALSE)
+endif()
 if(TORCHVISION_LIBRARY)
     message(STATUS "Found TorchVision: ${TORCHVISION_LIBRARY}")
     if(APPLE)
@@ -88,7 +98,9 @@ if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "
     check_cxx_source_compiles("#include <cxxabi.h>\n#if _GLIBCXX_USE_CXX11_ABI\nint main() { return 0; }\n#endif" PNNX_COMPILER_USE_CXX11_ABI)
 endif()
 
-if((PNNX_TORCH_USE_CXX11_ABI AND PNNX_COMPILER_USE_CXX11_ABI) OR (NOT PNNX_TORCH_USE_CXX11_ABI AND NOT PNNX_COMPILER_USE_CXX11_ABI))
+if(NOT USE_PROTOBUF)
+    set(protobuf_FOUND FLASE)
+elseif((PNNX_TORCH_USE_CXX11_ABI AND PNNX_COMPILER_USE_CXX11_ABI) OR (NOT PNNX_TORCH_USE_CXX11_ABI AND NOT PNNX_COMPILER_USE_CXX11_ABI))
     #find_package(protobuf CONFIG)
 
     if(FALSE AND protobuf_FOUND)
@@ -107,7 +119,12 @@ endif()
 
 # https://github.com/supertone-inc/onnxruntime-build
 set(onnxruntime_INSTALL_DIR "/home/nihui/osd/pnnx/install" CACHE STRING "")
-find_library(onnxruntime_LIB NAMES onnxruntime PATHS ${onnxruntime_INSTALL_DIR}/lib64 ${onnxruntime_INSTALL_DIR}/lib)
+if (USE_ONNXRUNTIME)
+    find_library(onnxruntime_LIB NAMES onnxruntime PATHS ${onnxruntime_INSTALL_DIR}/lib64 ${onnxruntime_INSTALL_DIR}/lib)
+else()
+    set(onnxruntime_FOUND FALSE)
+    set(onnxruntime_LIB FALSE)
+endif()
 if(onnxruntime_LIB)
     set(onnxruntime_FOUND TRUE)
     add_library(onnxruntime::onnxruntime STATIC IMPORTED)
