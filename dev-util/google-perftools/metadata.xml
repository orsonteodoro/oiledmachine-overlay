<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "https://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild originator -->
    <email>voyageur@gentoo.org</email>
    <name>Bernard Cafarelli</name>
  </maintainer>
  <upstream>
    <remote-id type="github">gperftools/gperftools</remote-id>
  </upstream>
  <![CDATA[
  <!--

  oiledmachine-overlay notes:

  This is has the legacy version of TCMalloc.  For the modern Abseil TCMalloc,
  use as a vendored internal dependency to avoid abseil-cpp ODR violation to
  have consistent header signatures.

  The ebuild changes allows to configure the page size per ABI for increased security.
  Larger page sizes are less secure but reduce performance.


  Contents of /etc/portage/env/tcmalloc-default-page-size.conf:

  # Acceptable page sizes in KiB:  4, 8, 16, 32, 64, 128, 256
  # General case defaults in KiB:  8 for non PPC64, 64 for PPC64
  # For apps using GiB heaps, consider 32 or 256 to reduce page fault penalty.
  # 3x fragmentation means 3x memory cost.

  # Worst case relative performance penalty multiples:

  #                L1 cache hit:  1
  #          Page fragmentation:  2
  #                L2 cache hit:  3
  #                L3 cache hit:  10
  #  L1 -> L2 walk for TLB miss:  10
  #       RAM walk for TLB miss:  100
  #                  RAM access:  100
  #                 RAM reclaim:  1K
  #             RAM fault fetch:  10K
  #        NVMe SSD fault fetch:  100K
  #            SATA fault fetch:  500K
  #             HDD fault fetch:  10M

  TC_MALLOC_PAGE_SIZES="amd64:8 x86:4" # For ARCH=amd64
  # TC_MALLOC_PAGE_SIZES="n64:8 n32:4 o32:4" # For ARCH=mips64el
  # TC_MALLOC_PAGE_SIZES="lp64d:8 lp64:8 ilp32d:4 ilp32:4" # For ARCH=riscv
  # TC_MALLOC_PAGE_SIZES="ppc64:64" # For ARCH=ppc64


  Contents of /etc/portage/package.env:

  dev-util/google-perftools tcmalloc-default-page-size.conf

  -->
  ]]>
  <use>
    <flag name="debug">
      Build a set of libraries with debug support (so-called
      debugalloc). These are available by default but are not needed
      unless you're actually developing using tcmalloc.
    </flag>
    <flag name="minimal">
      Only build the tcmalloc_minimal library, ignoring the heap
      checker and the profilers.
    </flag>
    <flag name="optimisememory">
      To build libtcmalloc with smaller internal caches.
    </flag>
  </use>
</pkgmetadata>
