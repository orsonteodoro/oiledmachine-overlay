diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/CMakeLists.txt work/clr-rocm-6.2.0/CMakeLists.txt
--- work.orig/clr-rocm-6.2.0/CMakeLists.txt	2024-07-31 08:24:00.000000000 -0700
+++ work/clr-rocm-6.2.0/CMakeLists.txt	2024-08-21 12:58:54.262419586 -0700
@@ -43,7 +43,7 @@ endif()
 if(CLR_BUILD_HIP)
     # Set default HIPCC_BIN_DIR to /opt/rocm/bin
     if(NOT DEFINED HIPCC_BIN_DIR AND UNIX)
-        set(HIPCC_BIN_DIR "/opt/rocm/bin" CACHE STRING "Default hipcc directory on linux.")
+        set(HIPCC_BIN_DIR "/opt/rocm-@ROCM_VERSION@/bin" CACHE STRING "Default hipcc directory on linux.")
     endif()
     message(STATUS "HIPCC Binary Directory: ${HIPCC_BIN_DIR}")
 
diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/hipamd/CMakeLists.txt work/clr-rocm-6.2.0/hipamd/CMakeLists.txt
--- work.orig/clr-rocm-6.2.0/hipamd/CMakeLists.txt	2024-08-18 15:12:44.136758225 -0700
+++ work/clr-rocm-6.2.0/hipamd/CMakeLists.txt	2024-08-21 12:58:54.318418638 -0700
@@ -237,7 +237,7 @@ add_to_config(_buildInfo HIP_RUNTIME)
 add_to_config(_buildInfo HIP_COMPILER)
 
 if (NOT DEFINED ROCM_PATH )
-     set ( ROCM_PATH "/opt/rocm"  CACHE STRING "Default ROCM installation directory." )
+     set ( ROCM_PATH "/opt/rocm-@ROCM_VERSION@"  CACHE STRING "Default ROCM installation directory." )
 endif ()
 message (STATUS "ROCM Installation path(ROCM_PATH): ${ROCM_PATH}")
 
diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/hipamd/src/CMakeLists.txt work/clr-rocm-6.2.0/hipamd/src/CMakeLists.txt
--- work.orig/clr-rocm-6.2.0/hipamd/src/CMakeLists.txt	2024-08-18 15:12:47.372705945 -0700
+++ work/clr-rocm-6.2.0/hipamd/src/CMakeLists.txt	2024-08-21 12:58:54.370417758 -0700
@@ -167,6 +167,7 @@ target_include_directories(amdhip64
     ${CLR_PATH}/rocclr
     ${ROCCLR_PATH}/elf
     ${ROCCLR_PATH}/include
+    ${ROCCLR_PATH}/device
     ${ROCM_PATH}/include
     ${HIP_COMMON_INCLUDE_DIR}
     ${PROJECT_SOURCE_DIR}/include
@@ -323,7 +324,7 @@ endif()
 if(HIP_ENABLE_ROCPROFILER_REGISTER)
     find_package(rocprofiler-register REQUIRED
         HINTS $ENV{rocprofiler_register_ROOT} $ENV{ROCPROFILER_REGISTER_ROOT} ${CMAKE_INSTALL_PREFIX}
-        PATHS /opt/rocm)
+        PATHS /opt/rocm-@ROCM_VERSION@)
 
     # don't use HIP_VERSION_PATCH because it is too large (> 100) for rocprofiler register
     target_compile_definitions(amdhip64 PRIVATE HIP_ROCPROFILER_REGISTER=1
Only in work/clr-rocm-6.2.0/hipamd/src: CMakeLists.txt.orig
diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/hipamd/src/hiprtc/CMakeLists.txt work/clr-rocm-6.2.0/hipamd/src/hiprtc/CMakeLists.txt
--- work.orig/clr-rocm-6.2.0/hipamd/src/hiprtc/CMakeLists.txt	2024-08-18 15:12:44.016760164 -0700
+++ work/clr-rocm-6.2.0/hipamd/src/hiprtc/CMakeLists.txt	2024-08-21 12:42:25.159184050 -0700
@@ -108,6 +108,7 @@ if(WIN32)
   target_link_libraries(hiprtc PRIVATE Dbghelp.lib)
 endif()
 
+target_link_directories(hiprtc PRIVATE ${CLR_PATH}/rocclr_build)
 target_link_libraries(hiprtc PUBLIC ${CLR_PATH}/rocclr_build)
 # Add link to comgr, hsa-runtime and other required libraries in target files
 # This is required for static libraries
diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/opencl/CMakeLists.txt work/clr-rocm-6.2.0/opencl/CMakeLists.txt
--- work.orig/clr-rocm-6.2.0/opencl/CMakeLists.txt	2024-07-31 08:24:00.000000000 -0700
+++ work/clr-rocm-6.2.0/opencl/CMakeLists.txt	2024-08-21 12:58:54.386417487 -0700
@@ -53,7 +53,7 @@ install(DIRECTORY "${CMAKE_CURRENT_SOURC
 # Packaging steps
 #############################
 if(NOT WIN32)
-find_package(ROCM QUIET CONFIG PATHS /opt/rocm)
+find_package(ROCM QUIET CONFIG PATHS /opt/rocm-@ROCM_VERSION@)
 if(ROCM_FOUND)
   include(ROCMSetupVersion)
   rocm_setup_version( VERSION "2.0.0" )
@@ -92,7 +92,7 @@ if(DEFINED ENV{ROCM_LIBPATCH_VERSION})
   message("Using CPACK_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION}")
 endif()
 
-set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/rocm" CACHE PATH "Package Installation path for OpenCL")
+set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/rocm-@ROCM_VERSION@" CACHE PATH "Package Installation path for OpenCL")
 #ROCM_PATH is needed to create symlink of libraries
 if(NOT DEFINED ROCM_PATH)
   string(REPLACE "/opencl" "" ROCM_PATH ${CPACK_PACKAGING_INSTALL_PREFIX})
diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/opencl/cmake/FindAMD_ICD.cmake work/clr-rocm-6.2.0/opencl/cmake/FindAMD_ICD.cmake
--- work.orig/clr-rocm-6.2.0/opencl/cmake/FindAMD_ICD.cmake	2024-07-31 08:24:00.000000000 -0700
+++ work/clr-rocm-6.2.0/opencl/cmake/FindAMD_ICD.cmake	2024-08-21 12:58:54.386417487 -0700
@@ -54,7 +54,7 @@ else()
       ${CMAKE_CURRENT_BINARY_DIR}/../../../../../OpenCL-ICD-Loader    #for ocltst
       ${CMAKE_CURRENT_BINARY_DIR}/../../../../../../OpenCL-ICD-Loader #for ocltst modules
       # pure cmake method
-      /opt/rocm/lib
+      /opt/rocm-@ROCM_VERSION@/lib
     NO_DEFAULT_PATH)
 endif()
 
diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/rocclr/cmake/ROCclrHSA.cmake work/clr-rocm-6.2.0/rocclr/cmake/ROCclrHSA.cmake
--- work.orig/clr-rocm-6.2.0/rocclr/cmake/ROCclrHSA.cmake	2024-07-31 08:24:00.000000000 -0700
+++ work/clr-rocm-6.2.0/rocclr/cmake/ROCclrHSA.cmake	2024-08-21 12:58:54.422416877 -0700
@@ -20,7 +20,7 @@
 
 find_package(hsa-runtime64 1.11 REQUIRED CONFIG
   PATHS
-    /opt/rocm/
+    /opt/rocm-@ROCM_VERSION@/
     ${ROCM_INSTALL_PATH}
   PATH_SUFFIXES
     cmake/hsa-runtime64
diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/rocclr/cmake/ROCclrLC.cmake work/clr-rocm-6.2.0/rocclr/cmake/ROCclrLC.cmake
--- work.orig/clr-rocm-6.2.0/rocclr/cmake/ROCclrLC.cmake	2024-07-31 08:24:00.000000000 -0700
+++ work/clr-rocm-6.2.0/rocclr/cmake/ROCclrLC.cmake	2024-08-21 12:58:54.422416877 -0700
@@ -20,7 +20,7 @@
 
 find_package(amd_comgr 2.8 REQUIRED CONFIG
   PATHS
-    /opt/rocm/
+    /opt/rocm-@ROCM_VERSION@/
     ${ROCM_INSTALL_PATH}
   PATH_SUFFIXES
     cmake/amd_comgr
diff '--color=auto' -urp work.orig/clr-rocm-6.2.0/rocclr/elf/test/CMakeLists.txt work/clr-rocm-6.2.0/rocclr/elf/test/CMakeLists.txt
--- work.orig/clr-rocm-6.2.0/rocclr/elf/test/CMakeLists.txt	2024-07-31 08:24:00.000000000 -0700
+++ work/clr-rocm-6.2.0/rocclr/elf/test/CMakeLists.txt	2024-08-21 12:58:54.422416877 -0700
@@ -26,14 +26,14 @@ cmake_minimum_required(VERSION 3.5.1)
 
 find_package(amd_comgr REQUIRED CONFIG
   PATHS
-    /opt/rocm/
+    /opt/rocm-@ROCM_VERSION@/
   PATH_SUFFIXES
     cmake/amd_comgr
     lib/cmake/amd_comgr)
 
 find_package(hsa-runtime64 REQUIRED CONFIG
   PATHS
-    /opt/rocm/
+    /opt/rocm-@ROCM_VERSION@/
   PATH_SUFFIXES
     cmake/hsa-runtime64)
 
@@ -42,8 +42,8 @@ find_package(Threads REQUIRED)
 # Look for ROCclr which contains elfio
 find_package(ROCclr REQUIRED CONFIG
   PATHS
-    /opt/rocm
-    /opt/rocm/rocclr)
+    /opt/rocm-@ROCM_VERSION@
+    /opt/rocm-@ROCM_VERSION@/rocclr)
 
 add_executable(elf_test main.cpp)
 set_target_properties(
@@ -60,4 +60,4 @@ add_definitions(-DUSE_COMGR_LIBRARY -DCO
 
 target_link_libraries(elf_test PRIVATE amdrocclr_static)
 
-#-------------------------------------elf_test--------------------------------------#
\ No newline at end of file
+#-------------------------------------elf_test--------------------------------------#
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/amd/hipcc/bin/hipcc.pl work/llvm-project-rocm-6.2.0/amd/hipcc/bin/hipcc.pl
--- work.orig/llvm-project-rocm-6.2.0/amd/hipcc/bin/hipcc.pl	2024-08-18 15:12:44.188757386 -0700
+++ work/llvm-project-rocm-6.2.0/amd/hipcc/bin/hipcc.pl	2024-08-21 13:02:14.403032311 -0700
@@ -200,7 +200,7 @@ if ($HIP_PLATFORM eq "amd") {
         $HIPCXXFLAGS .= " -Xclang -fallow-half-arguments-and-returns -D__HIP_HCC_COMPAT_MODE__=1";
     }
 } elsif ($HIP_PLATFORM eq "nvidia") {
-    $CUDA_PATH=$ENV{'CUDA_PATH'} // '/usr/local/cuda';
+    $CUDA_PATH=$ENV{'CUDA_PATH'} // '/opt/cuda';
     $HIP_INCLUDE_PATH = "$HIP_PATH/include";
     if ($verbose & 0x2) {
         print ("CUDA_PATH=$CUDA_PATH\n");
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/amd/hipcc/src/hipBin_nvidia.h work/llvm-project-rocm-6.2.0/amd/hipcc/src/hipBin_nvidia.h
--- work.orig/llvm-project-rocm-6.2.0/amd/hipcc/src/hipBin_nvidia.h	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/amd/hipcc/src/hipBin_nvidia.h	2024-08-21 13:02:36.226663047 -0700
@@ -236,7 +236,7 @@ void HipBinNvidia::constructCompilerPath
   const EnvVariables& envVariables = getEnvVariables();
   if (envVariables.cudaPathEnv_.empty()) {
     fs::path cudaPathfs;
-    cudaPathfs = "/usr/local/cuda";
+    cudaPathfs = "/opt/cuda";
     compilerPath = cudaPathfs.string();
   } else {
     compilerPath = envVariables.cudaPathEnv_;
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/clang/tools/amdgpu-arch/CMakeLists.txt work/llvm-project-rocm-6.2.0/clang/tools/amdgpu-arch/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/clang/tools/amdgpu-arch/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/clang/tools/amdgpu-arch/CMakeLists.txt	2024-08-21 12:58:54.470416065 -0700
@@ -8,7 +8,7 @@
 
 set(LLVM_LINK_COMPONENTS Support)
 
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm-@ROCM_VERSION@)
 
 add_clang_tool(amdgpu-arch AMDGPUArch.cpp AMDGPUArchByHSA.cpp AMDGPUArchByHIP.cpp)
 
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/compiler-rt/CMakeLists.txt work/llvm-project-rocm-6.2.0/compiler-rt/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/compiler-rt/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/compiler-rt/CMakeLists.txt	2024-08-21 12:58:54.470416065 -0700
@@ -472,12 +472,12 @@ endif()
 
 if(SANITIZER_AMDGPU)
   list(APPEND SANITIZER_COMMON_CFLAGS -DSANITIZER_AMDGPU=1)
-  find_path(HSA_INCLUDE hsa.h HINTS ${SANITIZER_HSA_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/include/hsa ${CMAKE_INSTALL_PREFIX}/../include/hsa /opt/rocm/include/hsa PATH_SUFFIXES hsa)
+  find_path(HSA_INCLUDE hsa.h HINTS ${SANITIZER_HSA_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/include/hsa ${CMAKE_INSTALL_PREFIX}/../include/hsa /opt/rocm-@ROCM_VERSION@/include/hsa PATH_SUFFIXES hsa)
   include_directories(${HSA_INCLUDE})
   find_path(COMgr_INCLUDE amd_comgr.h.in HINTS ${SANITIZER_COMGR_INCLUDE_PATH} ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include)
   if (NOT COMgr_INCLUDE)
     add_compile_definitions(AMD_COMGR)
-    find_path(COMgr_INCLUDE amd_comgr.h HINTS ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include /opt/rocm/include)
+    find_path(COMgr_INCLUDE amd_comgr.h HINTS ${CMAKE_INSTALL_PREFIX}/../include ${CMAKE_INSTALL_PREFIX}/include /opt/rocm-@ROCM_VERSION@/include)
   endif()
   include_directories(${COMgr_INCLUDE})
 endif()
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/libc/cmake/modules/prepare_libc_gpu_build.cmake work/llvm-project-rocm-6.2.0/libc/cmake/modules/prepare_libc_gpu_build.cmake
--- work.orig/llvm-project-rocm-6.2.0/libc/cmake/modules/prepare_libc_gpu_build.cmake	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/libc/cmake/modules/prepare_libc_gpu_build.cmake	2024-08-21 12:58:54.474415997 -0700
@@ -32,7 +32,7 @@ endif()
 # Identify any locally installed AMD GPUs on the system using 'amdgpu-arch'.
 find_program(LIBC_AMDGPU_ARCH
              NAMES amdgpu-arch NO_DEFAULT_PATH
-             PATHS ${LLVM_BINARY_DIR}/bin /opt/rocm/llvm/bin/)
+             PATHS ${LLVM_BINARY_DIR}/bin /opt/rocm-@ROCM_VERSION@/llvm/bin/)
 
 # Identify any locally installed NVIDIA GPUs on the system using 'nvptx-arch'.
 find_program(LIBC_NVPTX_ARCH
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/libc/src/math/gpu/vendor/CMakeLists.txt work/llvm-project-rocm-6.2.0/libc/src/math/gpu/vendor/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/libc/src/math/gpu/vendor/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/libc/src/math/gpu/vendor/CMakeLists.txt	2024-08-21 12:58:54.474415997 -0700
@@ -1,4 +1,4 @@
-find_package(AMDDeviceLibs QUIET HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(AMDDeviceLibs QUIET HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm-@ROCM_VERSION@)
 if(AMDDeviceLibs_FOUND)
   message(STATUS "Found the ROCm device library. Implementations falling back "
                  "to the vendor libraries will be resolved statically.")
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/libc/utils/gpu/loader/CMakeLists.txt work/llvm-project-rocm-6.2.0/libc/utils/gpu/loader/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/libc/utils/gpu/loader/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/libc/utils/gpu/loader/CMakeLists.txt	2024-08-21 12:58:54.478415929 -0700
@@ -5,7 +5,7 @@ target_include_directories(gpu_loader PU
   ${LIBC_SOURCE_DIR}
 )
 
-find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm-@ROCM_VERSION@)
 if(hsa-runtime64_FOUND)
   add_subdirectory(amdgpu)
 else()
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/mlir/lib/Dialect/GPU/CMakeLists.txt work/llvm-project-rocm-6.2.0/mlir/lib/Dialect/GPU/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/mlir/lib/Dialect/GPU/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/mlir/lib/Dialect/GPU/CMakeLists.txt	2024-08-21 12:58:54.490415726 -0700
@@ -158,7 +158,7 @@ if(MLIR_ENABLE_ROCM_CONVERSIONS)
       "Building mlir with ROCm support requires the AMDGPU backend")
   endif()
 
-  set(DEFAULT_ROCM_PATH "/opt/rocm" CACHE PATH "Fallback path to search for ROCm installs")
+  set(DEFAULT_ROCM_PATH "/opt/rocm-@ROCM_VERSION@" CACHE PATH "Fallback path to search for ROCm installs")
   target_compile_definitions(obj.MLIRGPUTransforms
     PRIVATE
     __DEFAULT_ROCM_PATH__="${DEFAULT_ROCM_PATH}"
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/mlir/lib/ExecutionEngine/CMakeLists.txt work/llvm-project-rocm-6.2.0/mlir/lib/ExecutionEngine/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/mlir/lib/ExecutionEngine/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/mlir/lib/ExecutionEngine/CMakeLists.txt	2024-08-21 12:58:54.506415455 -0700
@@ -257,7 +257,7 @@ if(LLVM_ENABLE_PIC)
     # Configure ROCm support.
     if (NOT DEFINED ROCM_PATH)
       if (NOT DEFINED ENV{ROCM_PATH})
-        set(ROCM_PATH "/opt/rocm" CACHE PATH "Path to which ROCm has been installed")
+        set(ROCM_PATH "/opt/rocm-@ROCM_VERSION@" CACHE PATH "Path to which ROCm has been installed")
       else()
         set(ROCM_PATH $ENV{ROCM_PATH} CACHE PATH "Path to which ROCm has been installed")
       endif()
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/mlir/lib/Target/LLVM/CMakeLists.txt work/llvm-project-rocm-6.2.0/mlir/lib/Target/LLVM/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/mlir/lib/Target/LLVM/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/mlir/lib/Target/LLVM/CMakeLists.txt	2024-08-21 12:58:54.510415388 -0700
@@ -134,7 +134,7 @@ if(MLIR_ENABLE_ROCM_CONVERSIONS)
   elseif(DEFINED ENV{ROCM_PATH})
     set(DEFAULT_ROCM_PATH "$ENV{ROCM_PATH}" CACHE PATH "Fallback path to search for ROCm installs")
   else()
-    set(DEFAULT_ROCM_PATH "/opt/rocm" CACHE PATH "Fallback path to search for ROCm installs")
+    set(DEFAULT_ROCM_PATH "/opt/rocm-@ROCM_VERSION@" CACHE PATH "Fallback path to search for ROCm installs")
   endif()
   message(VERBOSE "MLIR Default ROCM toolkit path: ${DEFAULT_ROCM_PATH}")
 
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/openmp/libomptarget/DeviceRTL/CMakeLists.txt work/llvm-project-rocm-6.2.0/openmp/libomptarget/DeviceRTL/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/openmp/libomptarget/DeviceRTL/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/openmp/libomptarget/DeviceRTL/CMakeLists.txt	2024-08-21 12:58:54.510415388 -0700
@@ -169,7 +169,7 @@ function(addAMDSpecificBcLibs touch_targ
       ${CMAKE_BINARY_DIR}/../../tools/rocm-device-libs
       ${CMAKE_INSTALL_PREFIX}
       PATHS
-      /opt/rocm)
+      /opt/rocm-@ROCM_VERSION@)
     if(AMDDeviceLibs_DIR)
       set(amd_device_libs_found ON)
       libomptarget_say("DeviceRTLs ${gfxname}: Getting ROCm device libs from ${AMDDeviceLibs_DIR}")
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/openmp/libomptarget/hostexec/CMakeLists.txt work/llvm-project-rocm-6.2.0/openmp/libomptarget/hostexec/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/openmp/libomptarget/hostexec/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/openmp/libomptarget/hostexec/CMakeLists.txt	2024-08-21 12:58:54.510415388 -0700
@@ -19,10 +19,10 @@ endif()
 # If we are bootstrapping hsa via external project we need to use find_library
 # as it will not be installed.
 if(DEFINED LIBOMPTARGET_EXTERNAL_PROJECT_HSA_PATH)
-  find_library(HSA_RUNTIME hsa-runtime64 HINTS ${CMAKE_BINARY_DIR}/../../runtimes/rocr-runtime-prefix/src/rocr-runtime-build ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+  find_library(HSA_RUNTIME hsa-runtime64 HINTS ${CMAKE_BINARY_DIR}/../../runtimes/rocr-runtime-prefix/src/rocr-runtime-build ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm-@ROCM_VERSION@)
 else()
  # As of rocm-3.7, hsa is installed with cmake packages and kmt is found via hsa
-  find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+  find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm-@ROCM_VERSION@)
 endif()
 
 if(DEFINED HSA_RUNTIME)
diff '--color=auto' -urp work.orig/llvm-project-rocm-6.2.0/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt work/llvm-project-rocm-6.2.0/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt
--- work.orig/llvm-project-rocm-6.2.0/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt	2024-07-23 09:19:13.000000000 -0700
+++ work/llvm-project-rocm-6.2.0/openmp/libomptarget/plugins-nextgen/amdgpu/CMakeLists.txt	2024-08-21 12:58:54.510415388 -0700
@@ -25,13 +25,13 @@ if(DEFINED LIBOMPTARGET_EXTERNAL_PROJECT
   find_library(HSA_RUNTIME hsa-runtime64 HINTS ${CMAKE_BINARY_DIR}/../../runtimes/rocr-runtime-prefix/src/rocr-runtime-build ${CMAKE_INSTALL_PREFIX})
 else()
   # As of rocm-3.7, hsa is installed with cmake packages and kmt is found via hsa
-  find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+  find_package(hsa-runtime64 QUIET 1.2.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm-@ROCM_VERSION@)
 endif()
 
 # Check for COMGr package , ASan requires COMGr with minimum version 2.4
 if(SANITIZER_AMDGPU)
   add_definitions(-DSANITIZER_AMDGPU=1)
-  find_package(amd_comgr QUIET 2.4.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm)
+  find_package(amd_comgr QUIET 2.4.0 HINTS ${CMAKE_INSTALL_PREFIX} PATHS /opt/rocm-@ROCM_VERSION@)
 endif()
 
 if(NOT (CMAKE_SYSTEM_PROCESSOR MATCHES "(x86_64)|(ppc64le)|(aarch64)$" AND CMAKE_SYSTEM_NAME MATCHES "Linux"))
Only in work.orig: work
