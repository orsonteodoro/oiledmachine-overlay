diff -urp HIPIFY-rocm-5.6.0.orig/CMakeLists.txt HIPIFY-rocm-5.6.0/CMakeLists.txt
--- HIPIFY-rocm-5.6.0.orig/CMakeLists.txt	2023-08-23 14:38:59.165713940 -0700
+++ HIPIFY-rocm-5.6.0/CMakeLists.txt	2023-08-23 14:39:21.325714490 -0700
@@ -124,12 +124,12 @@ if(UNIX)
     #get rid of any RPATH definations already
     set_target_properties(hipify-clang PROPERTIES INSTALL_RPATH "")
     #set RPATH for the binary
-    set_target_properties(hipify-clang PROPERTIES LINK_FLAGS "-Wl,--disable-new-dtags -Wl,--rpath,$ORIGIN/../lib" )
+    set_target_properties(hipify-clang PROPERTIES LINK_FLAGS "-Wl,--disable-new-dtags -Wl,--rpath,$ORIGIN/../@LIBDIR@" )
 
     if(FILE_REORG_BACKWARD_COMPATIBILITY)
         include(hipify-backward-compat.cmake)
     endif()
-    set(CPACK_PACKAGING_INSTALL_PREFIX "/opt/rocm" CACHE PATH "HIP Package Installation Path")
+    set(CPACK_PACKAGING_INSTALL_PREFIX "/usr" CACHE PATH "HIP Package Installation Path")
     set(BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/packages/hipify-clang)
     configure_file(packaging/hipify-clang.txt ${BUILD_DIR}/CMakeLists.txt @ONLY)
     configure_file(${CMAKE_SOURCE_DIR}/LICENSE.txt ${BUILD_DIR}/LICENSE.txt @ONLY)
diff -urp HIPIFY-rocm-5.6.0.orig/docs/hipify-clang.md HIPIFY-rocm-5.6.0/docs/hipify-clang.md
--- HIPIFY-rocm-5.6.0.orig/docs/hipify-clang.md	2023-05-12 18:19:43.000000000 -0700
+++ HIPIFY-rocm-5.6.0/docs/hipify-clang.md	2023-08-23 14:40:26.717716113 -0700
@@ -196,14 +196,14 @@ To process a file, `hipify-clang` needs
 For example:
 
 ```shell
-./hipify-clang square.cu --cuda-path=/usr/local/cuda-12.1 -I /usr/local/cuda-12.1/samples/common/inc
+./hipify-clang square.cu --cuda-path=/opt/cuda -I /opt/cuda/samples/common/inc
 ```
 
 `hipify-clang` arguments are given first, followed by a separator `'--'`, and then the arguments you'd pass to `clang` if you
 were compiling the input file. For example:
 
 ```bash
-./hipify-clang cpp17.cu --cuda-path=/usr/local/cuda-12.1 -- -std=c++17
+./hipify-clang cpp17.cu --cuda-path=/opt/cuda -- -std=c++17
 ```
 
 The [Clang manual for compiling CUDA](https://llvm.org/docs/CompileCudaWithLLVM.html#compiling-cuda-code) may be useful.
@@ -248,63 +248,21 @@ The binary can then be found at `./dist/
 
 `LLVM+CLANG` should be built from sources, pre-built binaries are not exhaustive for testing. Before building ensure that the [software required for building](https://releases.llvm.org/11.0.0/docs/GettingStarted.html#software) is of an appropriate version.
 
-**LLVM <= 9.0.1:**
-
-1. download [`LLVM`](https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/llvm-9.0.1.src.tar.xz)+[`CLANG`](https://github.com/llvm/llvm-project/releases/download/llvmorg-9.0.1/clang-9.0.1.src.tar.xz) sources; 
-2. build [`LLVM+CLANG`](http://releases.llvm.org/9.0.0/docs/CMake.html):
-
-```bash
-     cd .. \
-     mkdir build dist \
-     cd build
-```
-
- **Linux**:
-   ```bash
-        cmake \
-         -DCMAKE_INSTALL_PREFIX=../dist \
-         -DLLVM_SOURCE_DIR=../llvm \
-         -DLLVM_TARGETS_TO_BUILD="X86;NVPTX" \
-         -DCMAKE_BUILD_TYPE=Release \
-         ../llvm
-        make -j install
-   ```
- **Windows**:
-   ```shell
-        cmake \
-         -G "Visual Studio 16 2019" \
-         -A x64 \
-         -Thost=x64 \
-         -DCMAKE_INSTALL_PREFIX=../dist \
-         -DLLVM_SOURCE_DIR=../llvm \
-         -DLLVM_TARGETS_TO_BUILD="NVPTX" \
-         -DCMAKE_BUILD_TYPE=Release \
-         ../llvm
-   ```
-Run `Visual Studio 16 2019`, open the generated `LLVM.sln`, build all, and build the `INSTALL` project.
-
-**LLVM >= 10.0.0:**
+**LLVM == @LLVM_SLOT@:**
 
 1. download [`LLVM project`](https://github.com/llvm/llvm-project/releases/tag/llvmorg-16.0.3) sources;
 2. build [`LLVM project`](http://llvm.org/docs/CMake.html):
 
-```bash
-      cd .. \
-      mkdir build dist \
-      cd build
-```
-
  **Linux**:
    ```bash
-        cmake \
-         -DCMAKE_INSTALL_PREFIX=../dist \
-         -DLLVM_TARGETS_TO_BUILD="X86;NVPTX" \
-         -DLLVM_ENABLE_PROJECTS="clang" \
-         -DCMAKE_BUILD_TYPE=Release \
-         ../llvm-project/llvm
-        make -j install
+        emerge =llvm-16*[llvm_targets_X86,llvm_targets_NPTX]
    ```
  **Windows**:
+   ```bash
+        cd .. \
+        mkdir build dist \
+        cd build
+   ```
    ```shell
         cmake \
          -G "Visual Studio 17 2022" \
@@ -350,19 +308,19 @@ Run `Visual Studio 17 2022`, open the ge
 
     * Install `lit` into `python`:
 
-        - ***Linux***: `python /usr/llvm/16.0.3/llvm-project/llvm/utils/lit/setup.py install`
+        - ***Linux***: `emerge lit`
 
         - ***Windows***: `python d:/LLVM/16.0.3/llvm-project/llvm/utils/lit/setup.py install`
 
-    * Starting with LLVM 6.0.1 path to `llvm-lit` python script should be specified by the `LLVM_EXTERNAL_LIT` option:
+    * Starting with LLVM 6.0.1 path to `lit` python script should be specified by the `LLVM_EXTERNAL_LIT` option:
 
-        - ***Linux***: `-DLLVM_EXTERNAL_LIT=/usr/llvm/16.0.3/build/bin/llvm-lit`
+        - ***Linux***: `-DLLVM_EXTERNAL_LIT=/usr/bin/lit`
 
         - ***Windows***: `-DLLVM_EXTERNAL_LIT=d:/LLVM/16.0.3/build/Release/bin/llvm-lit.py`
 
     * `FileCheck`:
 
-        - ***Linux***: copy from `/usr/llvm/16.0.3/build/bin/` to `CMAKE_INSTALL_PREFIX/dist/bin`
+        - ***Linux***: copy from `/usr/lib/llvm/16/bin/` to `CMAKE_INSTALL_PREFIX/dist/bin`
 
         - ***Windows***: copy from `d:/LLVM/16.0.3/build/Release/bin` to `CMAKE_INSTALL_PREFIX/dist/bin`
 
@@ -370,7 +328,7 @@ Run `Visual Studio 17 2022`, open the ge
 
 8. To run OpenGL tests successfully on:
 
-        - ***Linux***: install at least essential GL headers (on Ubuntu by `sudo apt-get install mesa-common-dev`)
+        - ***Linux***: install at least essential GL headers (by `emerge mesa`)
 
         - ***Windows***: nothing to do: all the required headers are shipped with Windows SDK
 
@@ -396,18 +354,18 @@ Recommended build system requirements:
 
 Python 3.9.7, cmake 3.22.0, GNU C/C++ 11.2.
 
-Here is an example of building `hipify-clang` with testing support on `Ubuntu 21.10.0`:
+Here is an example of building `hipify-clang` with testing support:
 
 ```bash
 cmake
  -DHIPIFY_CLANG_TESTS=1 \
  -DCMAKE_BUILD_TYPE=Release \
  -DCMAKE_INSTALL_PREFIX=../dist \
- -DCMAKE_PREFIX_PATH=/usr/llvm/16.0.3/dist \
- -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda \
- -DCUDA_DNN_ROOT_DIR=/usr/local/cuda \
+ -DCMAKE_PREFIX_PATH=/usr/lib/llvm/16 \
+ -DCUDA_TOOLKIT_ROOT_DIR=/opt/cuda \
+ -DCUDA_DNN_ROOT_DIR=/opt/cuda \
  -DCUDA_CUB_ROOT_DIR=/usr/CUB \
- -DLLVM_EXTERNAL_LIT=/usr/llvm/16.0.3/build/bin/llvm-lit \
+ -DLLVM_EXTERNAL_LIT=/usr/bin/lit \
  ../hipify
 ```
 
@@ -426,21 +384,21 @@ cmake
 -- Check for working CXX compiler: /usr/bin/c++ - skipped
 -- Detecting CXX compile features
 -- Detecting CXX compile features - done
--- Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version "1.2.11")
+-- Found ZLIB: /@LIBDIR@/libz.so (found version "1.2.11")
 -- Found LLVM 16.0.3:
---    - CMake module path: /usr/llvm/16.0.3/dist/lib/cmake/llvm
---    - Include path     : /usr/llvm/16.0.3/dist/include
---    - Binary path      : /usr/llvm/16.0.3/dist/bin
+--    - CMake module path: /usr/lib/llvm/16/@LIBDIR@/cmake/llvm
+--    - Include path     : /usr/lib/llvm/16/include
+--    - Binary path      : /usr/lib/llvm/16/bin
 -- Linker detection: GNU ld
 -- Found PythonInterp: /usr/bin/python (found suitable version "3.9.7", minimum required is "2.7")
--- Found lit: /usr/local/bin/lit
--- Found FileCheck: /usr/llvm/16.0.3/dist/bin/FileCheck
+-- Found lit: /usr/bin/lit
+-- Found FileCheck: /usr/lib/llvm/16/bin/FileCheck
 -- Looking for pthread.h
 -- Looking for pthread.h - found
 -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
 -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
 -- Found Threads: TRUE
--- Found CUDA: /usr/local/cuda (found version "12.1")
+-- Found CUDA: /opt/cuda (found version "12.1")
 -- Configuring done
 -- Generating done
 -- Build files have been written to: /usr/hipify/build
diff -urp HIPIFY-rocm-5.6.0.orig/hipify-backward-compat.cmake HIPIFY-rocm-5.6.0/hipify-backward-compat.cmake
--- HIPIFY-rocm-5.6.0.orig/hipify-backward-compat.cmake	2023-05-12 18:19:43.000000000 -0700
+++ HIPIFY-rocm-5.6.0/hipify-backward-compat.cmake	2023-08-23 14:39:21.325714490 -0700
@@ -23,7 +23,7 @@ set(HIPIFY_BUILD_DIR ${CMAKE_CURRENT_BIN
 set(HIPIFY_WRAPPER_DIR ${HIPIFY_BUILD_DIR}/wrapper_dir)
 set(HIPIFY_WRAPPER_BIN_DIR ${HIPIFY_WRAPPER_DIR}/bin)
 
-#With File Reorganization , hipify(and hip)  will be installed in /opt/rocm-ver
+#With File Reorganization , hipify(and hip)  will be installed in /usr
 #instead of  /opt/rocm-ver/hip/. For maintaining backward  compatibility
 # the previous location(/opt/rocm-ver/hip/) will have soft link.
 #This file is for creating  soft link to binary files and install it in the  previous location
