--- a/player/src/tizgraphmgr.cpp.orig	2019-03-13 16:05:10.000000000 -0700
+++ b/player/src/tizgraphmgr.cpp	2019-08-03 12:22:27.442699499 -0700
@@ -43,8 +43,10 @@
 #include "tizgraph.hpp"
 #include "tizomxutil.hpp"
 #include "tizgraphutil.hpp"
+#ifdef HAVE_DBUS
 #include "mpris/tizmprisprops.hpp"
 #include "mpris/tizmpriscbacks.hpp"
+#endif
 #include "tizgraphmgrcaps.hpp"
 #include "tizgraphmgr.hpp"
 
@@ -97,8 +99,10 @@ graphmgr::mgr::mgr ()
                                     << graphmgr::fsm::restarting (&p_ops_)
                                     << graphmgr::fsm::stopping (&p_ops_),
           &p_ops_),
+#ifdef HAVE_DBUS
     mpris_ptr_ (),
     playback_events_ (),
+#endif
     thread_ (),
     mutex_ (),
     sem_ (),
@@ -132,9 +136,11 @@ graphmgr::mgr::init (const tizplaylist_p
   // Let's wait until this manager's thread is ready to receive requests
   tiz_check_omx_ret_oom (tiz_sem_wait (&sem_));
 
+#ifdef HAVE_DBUS
   // Init the MPRIS interface and pass this manager's capabilities to it
   // (a.k.a. MPRIS properties).
   tiz_check_omx_ret_oom (start_mpris (graphmgr_caps));
+#endif
 
   // Init OpenMAX IL
   tiz::omxutil::init ();
@@ -147,11 +153,13 @@ graphmgr::mgr::init (const tizplaylist_p
 
 void graphmgr::mgr::deinit ()
 {
+#ifdef HAVE_DBUS
   // Stop the MPRIS interface
   //
   // TODO: This is done too late here. Need do this right before the stop event
   // is processed by the thread.
   (void)stop_mpris ();
+#endif
 
   TIZ_LOG (TIZ_PRIORITY_NOTICE, "Waiting until stopped...");
   static_cast< void >(tiz_sem_wait (&sem_));
@@ -305,6 +313,7 @@ graphmgr::mgr::graph_error (const OMX_ER
       new graphmgr::cmd (graphmgr::err_evt (error, msg, is_internal_error)));
 }
 
+#ifdef HAVE_DBUS
 OMX_ERRORTYPE
 graphmgr::mgr::start_mpris (const graphmgr_capabilities_t &graphmgr_caps)
 {
@@ -363,26 +372,33 @@ graphmgr::mgr::stop_mpris ()
   }
   return rc;
 }
+#endif
 
 OMX_ERRORTYPE
 graphmgr::mgr::do_update_control_ifcs (const control::playback_status_t status,
                                        const std::string &current_song)
 {
+#ifdef HAVE_DBUS
   playback_events_.playback_ (status);
+#endif
   return OMX_ErrorNone;
 }
 
 OMX_ERRORTYPE
 graphmgr::mgr::do_update_metadata (const track_metadata_map_t &metadata)
 {
+#ifdef HAVE_DBUS
   playback_events_.metadata_ (metadata);
+#endif
   return OMX_ErrorNone;
 }
 
 OMX_ERRORTYPE
 graphmgr::mgr::do_update_volume (const int volume)
 {
+#ifdef HAVE_DBUS
   playback_events_.volume_ (volume > 0 ? (double)volume / 100 : 0);
+#endif
   return OMX_ErrorNone;
 }
 
