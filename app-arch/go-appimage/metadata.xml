<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <!--

    oiledmachine-overlay notes:

    go-appimage is appimaged and appimagetool implemented in the Go language.
    It is planned as the replacement package for those older packages.

    An AppImage is an archive containing the prebuilt project, lib/exe
    dependencies, and other glue libraries and executables.  You place the
    AppImage file in a watched folder listed below, appimaged will add a link to
    the desktop or menu to the appimage.  When you click the link, it will mount
    the image in its own chroot, with or without a Firejail sandbox protection,
    with or without AppArmor security protections.

    appimaged is a daemon that automatically installs .AppImages for
    a user.

    The appimagetool is a publishing tool that produces AppImages that are
    signed for distribution.  Only Type 2 SquashFS based AppImages are
    supported by this tool.  gzip and zstd are the supported for compression.

    appimaged will watch these folders for new .AppImage(s):

      ~/Downloads (specifically $XDG_DOWNLOAD_DIR)
      ~/Desktop (specifically $XDG_DESKTOP_DIR)
      ~/.local/bin
      ~/bin
      ~/Applications
      ~/opt
      ~/usr/local/bin
      /run/user/0 # A Live CD mount point (This could be a bug.  It should
        be ${ROOT} [aka /]?)
      /opt/AppImage # A modded ebuild addition for systemwide install (tentative / testing)

    In order to support a different location, you may need to modify

      https://github.com/probonopd/go-appimage/blob/master/src/appimaged/appimaged.go#L79


    Porting:

      If you plan to port your AppImage to glibc/musl platforms, you should port
      in a chroot or a Gentoo docker image with just -O2 CFLAGS and
      -march=generic or -march=x86-64 for every package in that container.  If
      you do not want to port but just want to load AppImages, then you do not
      need to worry about CFLAGS and the chroot thing.  It is recommended to use
      the CI to produce it instead.


    SECURITY NOTICE:

      Do not download/run AppImages from untrusted sites.
      Do not download/run AppImages that have End of Life (EOL) libraries.
      Do not download/run AppImages with critical vulnerabilities.


      A project page on GitHub will sometimes list a AppImage, these are most
      likely safe to use.

      AppImageHub, a portal site for AppImage downloads mentioned in
      appimagetool that can be found at https://appimage.github.io/

      Old appimages may have vulnerabilities.  Make sure you use an up-to-date
      version or a well maintained alternative.


    Build time environment variables:

      GO_APPIMAGE_ALLOW_WATCHING_DESKTOP - Allow/disallow watching the
        ~/Desktop folder for new .AppImages.  Disallowing may speed up loading.
        Valid values:  1 - allow (default), 0 - disallow.
      GO_APPIMAGE_ALLOW_WATCHING_DOWNLOADS - Allow/disallow watching
        ~/Downloads for new .AppImages.  Disallowing may speed up loading.
        Valid values:  1 - allow (default), 0 - disallow.
      GO_APPIMAGE_ADDITIONAL_WATCH_PATHS - a space separated paths for monitoring.

    Examples:

      GO_APPIMAGE_ADD_WATCH_PATHS="~/games /opt/appimage-games /opt/ /mnt/usb"


    Example contents of /etc/portage/go-appimage.conf:

      GO_APPIMAGE_ADD_WATCH_PATHS="~/appimages"
      GO_APPIMAGE_ALLOW_WATCHING_DESKTOP=0
      GO_APPIMAGE_ALLOW_WATCHING_DOWNLOADS=0

    Example contents of /etc/portage/package.env for per-package environment flags:

      app-arch/go-appimage go-appimage.conf

  -->
  <use>
    <flag name="firejail">
      Checks for Firejail support for sandbox support.
    </flag>
    <flag name="gnome">
      Checks support for udisk support in Gnome.
    </flag>
    <flag name="kde">
      Checks support for udisk support in KDE.
    </flag>
    <flag name="musl">
      Forces the use of the prebuilt zig compiler using internal musl.  It
      assumes that you are cross-compiling go-appimage from glibc to musl libc.

      Enabling the musl USE flag is the upstream default, but it is disabled by
      the ebuild maintainer.  The distro does not typically run musl binaries on
      a glibc built system.  The distro prefers to build *everything* from
      source code and without prebuilt anything and with the same libc library.

      See also:

        https://github.com/probonopd/go-appimage/pull/207

      It is recommended to disable it until a security audit on the prebuilts
      are completed.

    </flag>
    <flag name="openrc">
      Adds OpenRC support.  (EXPERIMENTAL)
    </flag>
    <flag name="overlayfs">
      Checks for OverlayFS support.
    </flag>
    <flag name="system-static-tools">
      Use the system's static-tools instead of the prebuilt upstream binaries
      statically linked against Alpine Linux's musl (aka hardened musl).

      It is *strongly* recommended to enable this flag for security and
      full transparency reasons.
    </flag>
  </use>
</pkgmetadata>
