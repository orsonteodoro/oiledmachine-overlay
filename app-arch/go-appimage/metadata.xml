<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <!--

    oiledmachine-overlay notes:

    go-appimage is appimaged and appimagetool implemented in the Go language.
    It is planned as the replacement package for those older packages.

    appimaged is a daemon that automatically installs .AppImages for
    a user.

    The appimagetool is a publishing tool that produces AppImages that are
    signed for distribution.  Only Type 2 SquashFS based AppImages are
    supported by this tool.  gzip and zstd are the supported for compression.

    appimaged will watch these folders for new .AppImage(s):
    ~/Downloads
    ~/Desktop
    ~/.local/bin
    ~/bin
    ~/Applications
    ~/opt
    ~/usr/local/bin
    /run/user/0 # for the Live CD mount point (This could be a bug.  It should
         be ${ROOT} [aka /]?)
    /opt/AppImage # A system-wide Gentoo addition (tentative / testing)

    You may need to mod

      https://github.com/probonopd/go-appimage/blob/master/src/appimaged/appimaged.go#L79

    in order to support a different location.

    Security:  Do not download AppImages from untrusted sites.

    AppImageHub, a portal site for AppImage downloads mentioned in
    appimagetool, can be found at https://appimage.github.io/

    Old appimages may have vulnerabilities.  Make sure you use
    an up-to-date version or a well maintained alternative.



    Build time environment variables:

    GO_APPIMAGE_DISABLE_WATCHDOG_DESKTOP_FOLDER - Disable watching the ~/Desktop
      folder for new .AppImages.  This may speed up loading.
    GO_APPIMAGE_DISABLE_WATCHDOG_DOWNLOADS_FOLDER - Disable watching ~/Downloads
      for new .AppImages.  This may speed up loading.

  -->
  <use>
    <flag name="firejail">
      Checks for Firejail support for sandbox support.
    </flag>
    <flag name="musl">
      Forces the use of the zig compiler using internal musl along with
      static-tools (internal prebuilt static builds of dependencies built with
      musl libc).  It assumes that you are building from glibc to a sandboxed
      musl libc.

      It is the upstream default, but disabled by the ebuild author.  The distro
      does not typically run musl binaries on a glibc built system.  The distro
      prefers to build *everything* from source code and without prebuilt
      anything.

      See also:

        https://github.com/probonopd/go-appimage/pull/207

      If force musl it will do the following instead:

      Use the system packages and binaries instead of the older static binaries
      from the Alpine operating system statically linked with musl.  If enabled,
      it will allow for determinstic build or downloads since upstream does not
      archive old builds of these static packages.  Disable to increase
      portability with possibility of download failures in fetch stage.

    </flag>
    <flag name="gnome">
      Checks support for udisk support in Gnome.
    </flag>
    <flag name="kde">
      Checks support for udisk support in KDE.
    </flag>
    <flag name="mkappimage">
      Adds the core AppImage creation tool.
    </flag>
    <flag name="openrc">
      Adds OpenRC support.  (EXPERIMENTAL)
    </flag>
    <flag name="overlayfs">
      Checks for OverlayFS support.
    </flag>
    <flag name="systemd">
      Checks for systemd support.  It's the default upstream.
      (RECOMMENDED)
    </flag>
  </use>
</pkgmetadata>
