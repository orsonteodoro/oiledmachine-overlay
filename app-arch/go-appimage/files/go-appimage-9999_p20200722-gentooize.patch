--- a/scripts/build.sh.orig	2020-07-29 15:58:43.480118432 -0700
+++ b/scripts/build.sh	2020-07-29 16:00:51.684952506 -0700
@@ -19,8 +19,7 @@ set -x
 ##############################################################
 
 # Disregard any other Go environment that may be on the system (e.g., on Travis CI)
-unset GOARCH GOBIN GOEXE GOHOSTARCH GOHOSTOS GOOS GORACE GOROOT GOPATH GOTOOLDIR CC GOGCCFLAGS CGO_ENABLED GO111MODULE
-export GOPATH=/tmp/go
+export GOPATH="${WORKDIR}/go_build"
 mkdir -p $GOPATH/src
 
 # Export version and build number
@@ -35,14 +34,6 @@ fi
 # Get pinned version of Go directly from upstream
 if [ "aarch64" == "$TRAVIS_ARCH" ] ; then export ARCH=arm64 ; fi
 if [ "amd64" == "$TRAVIS_ARCH" ] ; then export ARCH=amd64 ; fi
-wget -c -nv https://dl.google.com/go/go1.13.4.linux-$ARCH.tar.gz
-sudo tar -C /usr/local -xzf go*.tar.gz
-export PATH=/usr/local/go/bin:$PATH
-
-# Get dependencies needed for CGo # FIXME: Get rid of the need for CGo and, in return, those dependencies
-sudo apt-get -q update
-if [ $(go env GOHOSTARCH) == "amd64" ] ; then sudo apt-get -y install gcc-multilib autoconf ; fi
-if [ $(go env GOHOSTARCH) == "arm64" ] ; then sudo apt-get -y install gcc-arm-linux-gnueabi autoconf ; fi
 
 ##############################################################
 # Build appimagetool
@@ -87,8 +78,6 @@ fi
 # TODO: Do this for ARM as well
 ##############################################################
 
-unset ARCH # It contains "amd64" which we cannot use since we need "x86_64"
-
 if [ $(go env GOHOSTARCH) != "amd64" ] ; then
   exit 0
 fi
