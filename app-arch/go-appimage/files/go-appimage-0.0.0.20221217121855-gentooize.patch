diff -urp go-appimage.orig/scripts/build.sh go-appimage/scripts/build.sh
--- go-appimage.orig/scripts/build.sh	2023-12-21 17:53:08.342906566 -0800
+++ go-appimage/scripts/build.sh	2023-12-21 17:59:52.054917323 -0800
@@ -9,9 +9,9 @@ set -x
 # Architectures are using GOARCH values, specifically
 # amd64, arm64, arm, and 386
 #
-# ex: ./build.sh amd64 arm appimagetool
+# ex: ./build.sh appimagetool
 #
-# TODO: make this better with an arch paramater: ./build -a amd64,arm appimagetool
+# TODO: make this better with an arch paramater: ./build appimagetool
 
 # Build and upload the contents of this repository.
 #
@@ -23,16 +23,11 @@ set -x
 # locally, it might work but you have to solve your own problems.
 
 help_message() {
-  echo "Usage: build.sh -a [arch] -o [output directory] -dc [programs to build]"
+  echo "Usage: build.sh -o [output directory] -dc [programs to build]"
   echo ""
   echo "If you don't specify which programs to build, all programs will be built. Supports building appimaged, appimagetool, and mkappimage."
   echo "If appimagetool is omitted, it is still built to package the other programs."
   echo ""
-  echo "-a"
-  echo "  Optional comma seperated list of architectures to build for (as defined by GOARCH)."
-  echo "  If not given, only the host architecture is built."
-  echo "  ex: build.sh -a amd64,386"
-  echo ""
   echo "-o"
   echo "  Specify a build/output directory. By default creates a folder named build in the project files"
   echo ""
@@ -84,7 +79,15 @@ build () {
     arm64) export ZIGTARGET=aarch64-linux-musl;;
     arm) export ZIGTARGET=arm-linux-musleabihf;;
   esac
-  export CC="zig cc -Wl,--strip-all -target $ZIGTARGET"
+  case $1 in
+    amd64) export ZIGARCH=x86_64;;
+    386) export ZIGARCH=i386;;
+    arm64) export ZIGARCH=aarch64;;
+    arm) export ZIGARCH=armv7a;;
+  esac
+  if [[ "${FORCE_MUSL}" == "1" ]] ; then
+    export CC="zig cc -Wl,--strip-all -target $ZIGTARGET"
+  fi
   local PROG=$2
   CLEANUP+=($BUILDDIR/$PROG-$ARCH.AppDir)
   echo ARCH: $ARCH
@@ -93,8 +96,10 @@ build () {
   echo BUILDARCH: $BUILDARCH
   echo GOGCCFLAGS: $GOGCCFLAGS
   echo CC: $CC
-  which zig
-  zig env
+  if [[ "${FORCE_MUSL}" == "1" ]] ; then
+    which zig
+    zig env
+  fi
   CGO_ENABLED=1 go build -o $BUILDDIR -v -trimpath -ldflags="-linkmode=external -extldflags \"-static\" -s -w -X main.commit=$COMMIT" $PROJECT/src/$PROG
   ls -lh $PROG
   file $PROG
@@ -105,8 +110,16 @@ build () {
   ( cd $BUILDDIR/$PROG-$ARCH.AppDir/ ; ln -s usr/bin/$PROG AppRun)
   cp $PROJECT/data/appimage.png $BUILDDIR/$PROG-$ARCH.AppDir/
   if [ $PROG == appimaged ]; then
+    if [[ "${OFFLINE}" == "1" && "${USE_SYSTEM_BINARIES}" == "1" || "${STATIC_TOOLS_LIBC}" == "native" || "${STATIC_TOOLS_LIBC}" == "glibc" ]] ; then
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which bsdtar) > bsdtar )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which unsquashfs) > unsquashfs )
+    elif [[ "${OFFLINE}" == "1" ]] ; then
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-bsdtar-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > bsdtar )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-unsquashfs-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > unsquashfs )
+    else
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/bsdtar-$AIARCH -O bsdtar )
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/unsquashfs-$AIARCH -O unsquashfs )
+    fi
     cat > $BUILDDIR/$PROG-$ARCH.AppDir/appimaged.desktop <<\EOF
 [Desktop Entry]
 Type=Application
@@ -119,6 +132,21 @@ Terminal=true
 NoDisplay=true
 EOF
   elif [ $PROG == appimagetool ]; then
+    if [[ "${OFFLINE}" == "1" && "${USE_SYSTEM_BINARIES}" == "1" || "${STATIC_TOOLS_LIBC}" == "native" || "${STATIC_TOOLS_LIBC}" == "glibc" ]] ; then
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which appstreamcli) > appstreamcli )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which desktop-file-validate) > desktop-file-validate )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which mksquashfs) > mksquashfs )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which patchelf) > patchelf )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${ESYSROOT}"/usr/$(get_libdir)/AppImageKit/runtime-$AIARCH > runtime-$AIARCH )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/uploadtool-upload.sh-${EGIT_COMMIT_UPLOADTOOL:0:7} > uploadtool )
+    elif [[ "${OFFLINE}" == "1" ]] ; then
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-appstreamcli-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > appstreamcli )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-desktop-file-validate-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > desktop-file-validate )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-mksquashfs-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > mksquashfs )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-patchelf-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > patchelf )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-runtime-fuse2-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > runtime-$AIARCH )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/uploadtool-upload.sh-${EGIT_COMMIT_UPLOADTOOL:0:7} > uploadtool )
+    else
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/appstreamcli-$AIARCH -O appstreamcli )
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/desktop-file-validate-$AIARCH -O desktop-file-validate )
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/mksquashfs-$AIARCH -O mksquashfs )
@@ -128,6 +156,7 @@ EOF
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/runtime-fuse2-i686 -O runtime-i686 )
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/runtime-fuse2-x86_64 -O runtime-x86_64 )     
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh -O uploadtool )
+    fi
     cat > $BUILDDIR/$PROG-$ARCH.AppDir/appimagetool.desktop <<\EOF
 [Desktop Entry]
 Type=Application
@@ -140,6 +169,23 @@ Terminal=true
 NoDisplay=true
 EOF
   elif [ $PROG == mkappimage ]; then
+    if [[ "${OFFLINE}" == "1" && "${USE_SYSTEM_BINARIES}" == "1" || "${STATIC_TOOLS_LIBC}" == "native" || "${STATIC_TOOLS_LIBC}" == "glibc" ]] ; then
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which desktop-file-validate) > desktop-file-validate )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which mksquashfs) > mksquashfs )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which patchelf) > patchelf )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${ESYSROOT}"/usr/$(get_libdir)/AppImageKit/runtime-$AIARCH > runtime-$AIARCH )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/uploadtool-upload.sh-${EGIT_COMMIT_UPLOADTOOL:0:7} > uploadtool )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which bsdtar) > bsdtar )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat $(which unsquashfs) > unsquashfs )
+    elif [[ "${OFFLINE}" == "1" ]] ; then
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-desktop-file-validate-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > desktop-file-validate )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-mksquashfs-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > mksquashfs )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-patchelf-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > patchelf )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-runtime-fuse2-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > runtime-$AIARCH )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/uploadtool-upload.sh-${EGIT_COMMIT_UPLOADTOOL:0:7} > uploadtool )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-bsdtar-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > bsdtar )
+    ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; cat "${DISTDIR}"/static-tools-unsquashfs-$AIARCH-${EGIT_COMMIT_STATIC_TOOLS:0:7} > unsquashfs )
+    else
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/desktop-file-validate-$AIARCH -O desktop-file-validate )
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/mksquashfs-$AIARCH -O mksquashfs )
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/patchelf-$AIARCH -O patchelf )
@@ -150,6 +196,7 @@ EOF
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh -O uploadtool )
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/bsdtar-$AIARCH -O bsdtar )
     ( cd $BUILDDIR/$PROG-$ARCH.AppDir/usr/bin/ ; wget -c https://github.com/probonopd/static-tools/releases/download/continuous/unsquashfs-$AIARCH -O unsquashfs )
+    fi
     cat > $BUILDDIR/$PROG-$ARCH.AppDir/mkappimage.desktop <<\EOF
 [Desktop Entry]
 Type=Application
@@ -176,9 +223,6 @@ EOF
 
 while [ $# -gt 0 ]; do
   case $1 in
-    -a)
-      BUILDARCH=(${2//,/ })
-      shift;;
     -o)
       BUILDDIR=$2
       shift;;
@@ -208,7 +252,11 @@ done
 #############################################################
 
 # Export version and build number
-if [ ! -z "$GITHUB_RUN_NUMBER" ] ; then
+if [ -n "$EGIT_COMMIT" -a -n "$EGIT_COMMIT_TIMESTAMP" ] ; then
+  echo "Using fixed commit and timestamp"
+  export COMMIT="${EGIT_COMMIT}"
+  export VERSION=$(date -u --date="${EGIT_COMMIT_TIMESTAMP}" '+%Y-%m-%d_%H%M%S') # UTC
+elif [ ! -z "$GITHUB_RUN_NUMBER" ] ; then
   export COMMIT="${GITHUB_RUN_NUMBER}"
   export VERSION=$((GITHUB_RUN_NUMBER+646))
 else
@@ -226,9 +274,7 @@ if [ -z $BUILDTOOL ]; then
   BUILDTOOL=(appimaged appimagetool mkappimage)
 fi
 
-if [ -z $BUILDARCH ]; then
-  BUILDARCH=$(go env GOHOSTARCH)
-fi
+BUILDARCH=$(go env GOHOSTARCH)
 
 # Get the directories ready
 if [ $GITHUB_ACTIONS ]; then
@@ -245,33 +291,38 @@ fi
 mkdir -p $BUILDDIR || true
 cd $BUILDDIR
 
-# Install zig, it comes with musl libc
-if [ ! -e $BUILDDIR/zig ]; then
-  wget -c -q "https://ziglang.org/download/0.10.0/zig-linux-x86_64-0.10.0.tar.xz"
+if [[ "${FORCE_MUSL}" == "1" ]] ; then
+  # Install zig, it comes with musl libc
+  case $BUILDARCH in
+    amd64) export ZIGARCH=x86_64;;
+    386) export ZIGARCH=i386;;
+    arm64) export ZIGARCH=aarch64;;
+    arm) export ZIGARCH=armv7a;;
+  esac
+  rm -rf $BUILDDIR/zig
+  if [[ "${OFFLINE}" == "1" ]] ; then
+    cat "${DISTDIR}"/zig-linux-$ZIGARCH-0.10.0.tar.xz > zig-linux-$ZIGARCH-0.10.0.tar.xz
+  else
+    wget -c -q "https://ziglang.org/download/0.10.0/zig-linux-$ZIGARCH-0.10.0.tar.xz"
+  fi
   tar xf zig-linux-*.tar.xz
   rm zig-linux-*.tar.xz
   mv zig-linux-* zig
   CLEANUP+=($BUILDDIR/zig)
-fi
 
-PATH=$BUILDDIR/zig:$PATH
+  PATH=$BUILDDIR/zig:$PATH
+fi
 
-# We always want the amd64 appimagetool built first so that other AppImages can be built.
+# We always assume arch agnostic builds
 # If this isn't wanted, we clean it up afterwards
-build amd64 appimagetool
+build $BUILDARCH appimagetool
 
-for arch in ${BUILDARCH[@]}; do
-  for tool in ${BUILDTOOL[@]}; do
-    if [ $arch == amd64 ] && [ $tool == appimagetool ]; then
-      BUILDINGAPPIMAGETOOL=true
-    else
-      build $arch $tool
-    fi
-  done
+for tool in ${BUILDTOOL[@]}; do
+  build $BUILDARCH $tool
 done
 
 if [ -z $BUILDINGAPPIMAGETOOL ]; then
-  CLEANUP+=($BUILDDIR/appimagetool-$VERSION-x86_64.AppImage)
+  CLEANUP+=($BUILDDIR/appimagetool-$VERSION-$BUILDARCH.AppImage)
 fi
 
 if [ -z $DONTCLEAN ]; then
Only in go-appimage/scripts: build.sh.orig
