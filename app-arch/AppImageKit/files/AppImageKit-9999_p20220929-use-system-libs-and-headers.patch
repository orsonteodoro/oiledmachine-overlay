diff -urp AppImageKit-9999.orig/CMakeLists.txt AppImageKit-9999/CMakeLists.txt
--- AppImageKit-9999.orig/CMakeLists.txt	2023-01-14 17:48:17.971062808 -0800
+++ AppImageKit-9999/CMakeLists.txt	2023-01-14 17:48:54.160497192 -0800
@@ -69,7 +69,7 @@ set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PAT
 # configure dependencies
 add_subdirectory(lib)
 
-include(lib/libappimage/cmake/tools.cmake)
+include(/usr/lib64/cmake/libappimage/scripts.cmake)
 include(cmake/dependencies.cmake)
 
 
diff -urp AppImageKit-9999.orig/cmake/dependencies.cmake AppImageKit-9999/cmake/dependencies.cmake
--- AppImageKit-9999.orig/cmake/dependencies.cmake	2023-01-14 17:48:14.718933908 -0800
+++ AppImageKit-9999/cmake/dependencies.cmake	2023-01-14 17:48:54.164497350 -0800
@@ -2,7 +2,7 @@
 cmake_minimum_required(VERSION 3.2)
 
 
-include(${PROJECT_SOURCE_DIR}/lib/libappimage/cmake/scripts.cmake)
+include(/usr/lib64/cmake/libappimage/scripts.cmake)
 
 
 # the names of the targets need to differ from the library filenames
@@ -27,6 +27,10 @@ else()
     set(CXX "${CMAKE_CXX_COMPILER}")
 endif()
 
+if(USE_SYSTEM_SQUASHFUSE)
+    set(DEPENDENCIES_CFLAGS ${DEPENDENCIES_CFLAGS} -DEXTERNAL_SQUASHFUSE)
+endif()
+
 set(CFLAGS ${DEPENDENCIES_CFLAGS})
 set(CPPFLAGS ${DEPENDENCIES_CPPFLAGS})
 set(LDFLAGS ${DEPENDENCIES_LDFLAGS})
@@ -36,19 +40,19 @@ set(USE_SYSTEM_MKSQUASHFS OFF CACHE BOOL
 if(NOT USE_SYSTEM_MKSQUASHFS)
     set(mksquashfs_cflags "-DXZ_SUPPORT ${CFLAGS}")
 
-    if(NOT xz_LIBRARIES OR xz_LIBRARIES STREQUAL "")
-        message(FATAL_ERROR "xz_LIBRARIES not set")
-    elseif(xz_LIBRARIES MATCHES "\\.a$")
-        set(mksquashfs_ldflags "${xz_LIBRARIES}")
+    if(NOT LIBLZMA_FOUND)
+        message(FATAL_ERROR "LIBLZMA_LIBRARIES not set")
+    elseif(LIBLZMA_LIBRARIES MATCHES "\\.a$")
+        set(mksquashfs_ldflags "${LIBLZMA_LDFLAGS_STATIC}")
     else()
-        set(mksquashfs_ldflags "-l${xz_LIBRARIES}")
+        set(mksquashfs_ldflags "${LIBLZMA_LDFLAGS}")
     endif()
 
-    if(xz_INCLUDE_DIRS)
-        set(mksquashfs_cflags "${mksquashfs_cflags} -I${xz_INCLUDE_DIRS}")
+    if(LIBLZMA_INCLUDE_DIRS)
+        set(mksquashfs_cflags "${mksquashfs_cflags} -I${LIBLZMA_INCLUDE_DIRS}")
     endif()
-    if(xz_LIBRARY_DIRS)
-        set(mksquashfs_ldflags "${mksquashfs_ldflags} -L${xz_LIBRARY_DIRS}")
+    if(LIBLZMA_LIBRARY_DIRS)
+        set(mksquashfs_ldflags "${mksquashfs_ldflags} -L${LIBLZMA_LIBRARY_DIRS}")
     endif()
 
     ExternalProject_Add(mksquashfs
@@ -81,10 +85,3 @@ else()
 endif()
 
 #### build dependency configuration ####
-
-# only have to build custom xz when not using system libxz
-if(TARGET xz-EXTERNAL)
-    if(TARGET mksquashfs)
-        ExternalProject_Add_StepDependencies(mksquashfs configure xz-EXTERNAL)
-    endif()
-endif()
diff -urp AppImageKit-9999.orig/lib/CMakeLists.txt AppImageKit-9999/lib/CMakeLists.txt
--- AppImageKit-9999.orig/lib/CMakeLists.txt	2023-01-14 17:48:14.722934066 -0800
+++ AppImageKit-9999/lib/CMakeLists.txt	2023-01-14 17:48:54.164497350 -0800
@@ -1 +1,3 @@
-add_subdirectory(libappimage)
+if(NOT USE_SYSTEM_LIBAPPIMAGE)
+    add_subdirectory(libappimage)
+endif()
diff -urp AppImageKit-9999.orig/lib/libappimage/cmake/dependencies.cmake AppImageKit-9999/lib/libappimage/cmake/dependencies.cmake
--- AppImageKit-9999.orig/lib/libappimage/cmake/dependencies.cmake	2023-01-14 17:48:15.322957848 -0800
+++ AppImageKit-9999/lib/libappimage/cmake/dependencies.cmake	2023-01-14 17:48:54.164497350 -0800
@@ -18,11 +18,14 @@ else()
     set(CXX "${CMAKE_CXX_COMPILER}")
 endif()
 
+if(USE_SYSTEM_SQUASHFUSE)
+    set(DEPENDENCIES_CFLAGS ${DEPENDENCIES_CFLAGS} -DEXTERNAL_SQUASHFUSE)
+endif()
+
 set(CFLAGS ${DEPENDENCIES_CFLAGS})
 set(CPPFLAGS ${DEPENDENCIES_CPPFLAGS})
 set(LDFLAGS ${DEPENDENCIES_LDFLAGS})
 
-
 set(USE_SYSTEM_XZ OFF CACHE BOOL "Use system xz/liblzma instead of building our own")
 
 if(NOT USE_SYSTEM_XZ)
diff -urp AppImageKit-9999.orig/lib/libappimage/src/libappimage/libappimage.c AppImageKit-9999/lib/libappimage/src/libappimage/libappimage.c
--- AppImageKit-9999.orig/lib/libappimage/src/libappimage/libappimage.c	2023-01-14 17:48:15.330958166 -0800
+++ AppImageKit-9999/lib/libappimage/src/libappimage/libappimage.c	2023-01-14 17:48:54.164497350 -0800
@@ -41,7 +41,11 @@
 #include <glib/gstdio.h>
 #include <gio/gio.h>
 
-#include "squashfuse.h"
+#ifdef EXTERNAL_SQUASHFUSE
+#  include <squashfuse.h>
+#else
+#  include "squashfuse.h"
+#endif
 #include <squashfs_fs.h>
 #include "elf.h"
 
diff -urp AppImageKit-9999.orig/lib/libappimage/tests/CMakeLists.txt AppImageKit-9999/lib/libappimage/tests/CMakeLists.txt
--- AppImageKit-9999.orig/lib/libappimage/tests/CMakeLists.txt	2023-01-14 17:48:15.338958483 -0800
+++ AppImageKit-9999/lib/libappimage/tests/CMakeLists.txt	2023-01-14 17:58:41.575776646 -0800
@@ -16,12 +16,23 @@ if(BUILD_TESTING)
     target_sources(fixtures INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/fixtures.h)
     set_property(TARGET fixtures PROPERTY INTERFACE_LINK_LIBRARIES xdg-basedir gtest)
 
+    find_package(PkgConfig)
+    pkg_check_modules(LIBAPPIMAGE libappimage IMPORTED_TARGET)
+    pkg_check_modules(LIBAPPIMAGE_STATIC libappimage_static IMPORTED_TARGET)
+    pkg_check_modules(LIBAPPIMAGE_SHARED libappimage_shared IMPORTED_TARGET)
+    if(USE_SYSTEM_SQUASHFUSE)
+        pkg_check_modules(SQUASHFUSE squashfuse_appimage IMPORTED_TARGET)
+        set(LIB_SQUASHFUSE PkgConfig::SQUASHFUSE)
+    else()
+        set(LIB_SQUASHFUSE libsquashfuse)
+    endif()
+
     add_executable(test_libappimage test_libappimage.cpp)
-    target_link_libraries(test_libappimage fixtures libappimage libsquashfuse)
+    target_link_libraries(test_libappimage fixtures PkgConfig::LIBAPPIMAGE ${LIB_SQUASHFUSE})
     add_test(test_libappimage test_libappimage)
 
     add_executable(test_shared test_shared.cpp)
-    target_link_libraries(test_shared fixtures libappimage_shared)
+    target_link_libraries(test_shared fixtures PkgConfig::LIBAPPIMAGE_SHARED)
     add_test(test_shared test_shared)
     # needed for some const->non-const conversions
     target_compile_options(test_shared PRIVATE -fpermissive)
@@ -32,6 +50,6 @@ if(BUILD_TESTING)
 
     add_executable(test_desktop_integration test_desktop_integration.cpp file_management_utils.hpp)
     target_include_directories(test_desktop_integration PRIVATE "${PROJECT_SOURCE_DIR}/src/libappimage")
-    target_link_libraries(test_desktop_integration libappimage libappimage_shared libsquashfuse gtest gtest_main)
+    target_link_libraries(test_desktop_integration PkgConfig::LIBAPPIMAGE PkgConfig::LIBAPPIMAGE_SHARED ${LIB_SQUASHFUSE} gtest gtest_main)
     add_test(test_desktop_integration test_desktop_integration)
 endif()
diff -urp AppImageKit-9999.orig/src/CMakeLists.txt AppImageKit-9999/src/CMakeLists.txt
--- AppImageKit-9999.orig/src/CMakeLists.txt	2023-01-14 17:48:14.726934225 -0800
+++ AppImageKit-9999/src/CMakeLists.txt	2023-01-14 17:58:38.439652375 -0800
@@ -1,3 +1,4 @@
+set(CMAKE_MODULE_PATH "/usr/lib64/cmake/sanitizers-cmake" ${CMAKE_MODULE_PATH})
 find_package(Sanitizers)
 
 if(NOT COMMAND add_sanitizers)
@@ -12,6 +13,27 @@ endif()
 set(AUXILIARY_FILES_DESTINATION "lib/appimagekit" CACHE STRING "Target install directory for mksquashfs")
 
 
+find_package(PkgConfig)
+pkg_check_modules(GLIB glib-2.0 IMPORTED_TARGET)
+pkg_check_modules(LIBAPPIMAGE libappimage IMPORTED_TARGET)
+pkg_check_modules(LIBAPPIMAGE_STATIC libappimage_static IMPORTED_TARGET)
+pkg_check_modules(LIBAPPIMAGE_SHARED libappimage_shared IMPORTED_TARGET)
+pkg_check_modules(LIBCRYPTO libcrypto IMPORTED_TARGET)
+if(USE_SYSTEM_XZ)
+    pkg_check_modules(LIBLZMA liblzma IMPORTED_TARGET)
+    set(LIB_LIBLZMA PkgConfig::LIBLZMA)
+else()
+    set(LIB_LIBLZMA xz)
+endif()
+pkg_check_modules(LIBSSL libssl IMPORTED_TARGET)
+if(USE_SYSTEM_SQUASHFUSE)
+    pkg_check_modules(SQUASHFUSE squashfuse_appimage IMPORTED_TARGET)
+    set(LIB_SQUASHFUSE PkgConfig::SQUASHFUSE)
+else()
+    set(LIB_SQUASHFUSE libsquashfuse)
+endif()
+pkg_check_modules(ZLIB zlib IMPORTED_TARGET)
+
 # the runtime build configuration is quite long, therefore it's managed in a separate CMake script
 include(build-runtime.cmake)
 
@@ -33,20 +62,24 @@ target_include_directories(appimagetool
 find_package(PkgConfig)
 pkg_check_modules(libgpgme REQUIRED gpgme IMPORTED_TARGET)
 pkg_check_modules(libgcrypt REQUIRED libgcrypt IMPORTED_TARGET)
+pkg_check_modules(libgio REQUIRED gio-2.0 IMPORTED_TARGET)
+
+link_directories(${LIBAPPIMAGE_LIBDIR})
 
 # trick: list libraries on which imported static ones depend on in the PUBLIC section
 # CMake then adds them after the PRIVATE ones in the linker command
 target_link_libraries(appimagetool
     ${CMAKE_DL_LIBS}
-    libsquashfuse
     xdg-basedir
-    libappimage_shared
-    libglib
-    libgio
-    libzlib
+    PkgConfig::LIBAPPIMAGE
+    PkgConfig::LIBAPPIMAGE_SHARED
+    PkgConfig::GLIB
+    PkgConfig::libgio
+    PkgConfig::ZLIB
     PkgConfig::libgcrypt
     PkgConfig::libgpgme
-    xz
+    ${LIB_LIBLZMA}
+    ${LIB_SQUASHFUSE}
 )
 
 target_compile_definitions(appimagetool
@@ -61,6 +95,13 @@ target_include_directories(appimagetool
     PUBLIC $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include/>
     INTERFACE $<INSTALL_INTERFACE:include/>
 )
+if(USE_SYSTEM_SQUASHFUSE)
+    target_include_directories(appimagetool PUBLIC ${SQUASHFUSE_INCLUDE_DIRS})
+endif()
+if(USE_SYSTEM_XZ)
+    target_include_directories(appimagetool PUBLIC ${LIBLZMA_INCLUDE_DIRS})
+endif()
+
 
 if(AUXILIARY_FILES_DESTINATION)
     message(STATUS "Installing auxiliary files in path: ${AUXILIARY_FILES_DESTINATION}")
@@ -83,15 +124,16 @@ target_compile_definitions(AppRun
 add_sanitizers(AppRun)
 
 
-if (NOT TARGET libssl)
+if (NOT LIBSSL_FOUND)
     message(WARNING "Could not find suitable libssl, skipping build of validate and digest")
 else()
     add_executable(validate validate.c)
 
     target_link_libraries(validate
-        libappimage_shared
-        libglib
-        libssl
+        PkgConfig::LIBAPPIMAGE_SHARED
+        PkgConfig::GLIB
+        PkgConfig::LIBCRYPTO
+        PkgConfig::LIBSSL
     )
 
     target_include_directories(validate
@@ -103,8 +145,9 @@ else()
     add_executable(digest digest.c)
 
     target_link_libraries(digest
-        libappimage_shared
-        libssl
+        PkgConfig::LIBAPPIMAGE_SHARED
+        PkgConfig::LIBCRYPTO
+        PkgConfig::LIBSSL
     )
 
     add_sanitizers(digest)
@@ -121,8 +164,8 @@ target_include_directories(digest_md5
 )
 
 target_link_libraries(digest_md5
-    PRIVATE libglib
-    PRIVATE libappimage_shared
+    PUBLIC PkgConfig::GLIB
+    PRIVATE PkgConfig::LIBAPPIMAGE_SHARED
 )
 
 
@@ -130,17 +173,32 @@ target_link_libraries(digest_md5
 if(NOT USE_SYSTEM_MKSQUASHFS)
     if(AUXILIARY_FILES_DESTINATION)
         install(
-            PROGRAMS ${mksquashfs_INSTALL_DIR}/mksquashfs ${CMAKE_CURRENT_BINARY_DIR}/runtime
+            PROGRAMS ${mksquashfs_INSTALL_DIR}/mksquashfs
             DESTINATION ${AUXILIARY_FILES_DESTINATION}
             COMPONENT applications
         )
     else()
         install(
-            PROGRAMS ${mksquashfs_INSTALL_DIR}/mksquashfs ${CMAKE_CURRENT_BINARY_DIR}/runtime
+            PROGRAMS ${mksquashfs_INSTALL_DIR}/mksquashfs
             DESTINATION bin
             COMPONENT applications
         )
     endif()
+else()
+endif()
+
+if(AUXILIARY_FILES_DESTINATION)
+    install(
+        PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/runtime
+        DESTINATION ${AUXILIARY_FILES_DESTINATION}
+        COMPONENT applications
+    )
+else()
+    install(
+        PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/runtime
+        DESTINATION bin
+        COMPONENT applications
+    )
 endif()
 
 set(optional_targets "")
diff -urp AppImageKit-9999.orig/src/appimagetool.c AppImageKit-9999/src/appimagetool.c
--- AppImageKit-9999.orig/src/appimagetool.c	2023-01-14 17:48:14.730934383 -0800
+++ AppImageKit-9999/src/appimagetool.c	2023-01-14 17:48:54.164497350 -0800
@@ -39,7 +39,11 @@
 #include <argp.h>
 
 #include <fcntl.h>
-#include "squashfuse.h"
+#ifdef EXTERNAL_SQUASHFUSE
+#  include <squashfuse.h>
+#else
+#  include "squashfuse.h"
+#endif
 
 #include <sys/types.h>
 #include <sys/stat.h>
diff -urp AppImageKit-9999.orig/src/appimagetoolnoglib.c AppImageKit-9999/src/appimagetoolnoglib.c
--- AppImageKit-9999.orig/src/appimagetoolnoglib.c	2023-01-14 17:48:14.730934383 -0800
+++ AppImageKit-9999/src/appimagetoolnoglib.c	2023-01-14 17:48:54.168497509 -0800
@@ -3,7 +3,11 @@
 
 #include <stdlib.h>
 #include <fcntl.h>
-#include "squashfuse.h"
+#ifdef EXTERNAL_SQUASHFUSE
+#  include <squashfuse.h>
+#else
+#  include "squashfuse.h"
+#endif
 
 #include <sys/types.h>
 #include <sys/stat.h>
diff -urp AppImageKit-9999.orig/src/build-runtime.cmake AppImageKit-9999/src/build-runtime.cmake
--- AppImageKit-9999.orig/src/build-runtime.cmake	2023-01-14 17:48:14.730934383 -0800
+++ AppImageKit-9999/src/build-runtime.cmake	2023-01-14 17:58:40.055716413 -0800
@@ -15,22 +15,47 @@ else()
     set(BUILD_DEBUG FALSE)
 endif()
 
-if (NOT TARGET libsquashfuse)
+if (NOT SQUASHFUSE_FOUND)
     message(FATAL_ERROR "TARGET NOT found libsquashfuse")
+endif()
+
+find_package(PkgConfig)
+pkg_check_modules(FUSE fuse IMPORTED_TARGET)
+pkg_check_modules(LIBAPPIMAGE libappimage IMPORTED_TARGET)
+pkg_check_modules(LIBAPPIMAGE_HASHLIB libappimage_hashlib IMPORTED_TARGET)
+pkg_check_modules(LIBAPPIMAGE_SHARED libappimage_shared IMPORTED_TARGET)
+if(USE_SYSTEM_XZ)
+    pkg_check_modules(LIBLZMA liblzma IMPORTED_TARGET)
+    set(LIB_LIBLZMA PkgConfig::LIBLZMA)
+else()
+    set(LIB_LIBLZMA xz)
+endif()
+if(USE_SYSTEM_SQUASHFUSE)
+    pkg_check_modules(SQUASHFUSE squashfuse_appimage IMPORTED_TARGET)
+    set(LIB_SQUASHFUSE PkgConfig::SQUASHFUSE)
+    set(DEPENDENCIES_CFLAGS ${DEPENDENCIES_CFLAGS} -DEXTERNAL_SQUASHFUSE)
 else()
-    get_target_property(squashfuse_INCLUDE_DIRS libsquashfuse INTERFACE_INCLUDE_DIRECTORIES)
+    set(LIB_SQUASHFUSE libsquashfuse)
 endif()
+pkg_check_modules(ZLIB zlib IMPORTED_TARGET)
 
 # must not include -flto in the following flags, otherwise the data sections will be stripped out
 set(runtime_cflags
     -std=c99 -ffunction-sections -fdata-sections
     -DGIT_COMMIT=\\"${GIT_COMMIT}\\"
-    -I${squashfuse_INCLUDE_DIRS}
     -I${PROJECT_SOURCE_DIR}/include
-    -I${PROJECT_SOURCE_DIR}/lib/libappimage/include
-    -I${PROJECT_SOURCE_DIR}/lib/libappimage/src/libappimage_hashlib/include
-    ${DEPENDENCIES_CFLAGS}
 )
+
+
+set(runtime_cflags ${runtime_cflags} ${LIBAPPIMAGE_CFLAGS} ${LIBAPPIMAGE_SHARED_CFLAGS} ${LIBAPPIMAGE_HASHLIB_CFLAGS})
+if(USE_SYSTEM_SQUASHFUSE)
+    set(runtime_cflags ${runtime_cflags} ${SQUASHFUSE_CFLAGS})
+endif()
+if(USE_SYSTEM_XZ)
+    set(runtime_cflags ${runtime_cflags} ${LIBLZMA_CFLAGS})
+endif()
+set(runtime_cflags ${runtime_cflags} ${DEPENDENCIES_CFLAGS})
+
 # must not include -Wl,--gc-sections in the following flags, otherwise the data sections will be stripped out
 set(runtime_ldflags -s -ffunction-sections -fdata-sections -flto ${DEPENDENCIES_LDFLAGS})
 
@@ -42,76 +74,48 @@ else()
     set(runtime_cflags -Os ${runtime_cflags})
 endif()
 
-if(NOT xz_INCLUDE_DIRS STREQUAL "")
-    list(APPEND runtime_cflags -I${xz_INCLUDE_DIRS})
-endif()
-
 if(APPIMAGEKIT_RUNTIME_ENABLE_SETPROCTITLE)
     set(runtime_cflags ${runtime_cflags} -DENABLE_SETPROCTITLE)
 endif()
 
 # objcopy requires actual files for creating new sections to populate the new section
 # therefore, we generate 3 suitable files containing blank bytes in the right sizes
-add_custom_command(
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/16_blank_bytes
-    COMMAND dd if=/dev/zero bs=1 count=16 of=${CMAKE_CURRENT_BINARY_DIR}/16_blank_bytes
-)
-add_custom_command(
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/1024_blank_bytes
-    COMMAND dd if=/dev/zero bs=1 count=1024 of=${CMAKE_CURRENT_BINARY_DIR}/1024_blank_bytes
-)
-add_custom_command(
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/8192_blank_bytes
-    COMMAND dd if=/dev/zero bs=1 count=8192 of=${CMAKE_CURRENT_BINARY_DIR}/8192_blank_bytes
-)
 
 # compile first raw object (not linked yet) into which the sections will be embedded
 # TODO: find out how this .o object can be generated using a normal add_executable call
 # that'd allow us to get rid of the -I parameters in runtime_cflags
-add_custom_command(
-    MAIN_DEPENDENCY runtime.c
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/runtime.0.o
-    COMMAND ${CMAKE_C_COMPILER} ${runtime_cflags} -c ${CMAKE_CURRENT_SOURCE_DIR}/runtime.c -o runtime.0.o
-    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-)
 
 # embed the sections, one by one
 # TODO: find out whether all the sections can be embedded in a single objcopy call
+set(OBJCOPY objcopy)
 add_custom_command(
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/runtime.1.o
+    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/runtime.4.o
+    COMMAND dd if=/dev/zero bs=1 count=16 of=${CMAKE_CURRENT_BINARY_DIR}/16_blank_bytes
+    COMMAND dd if=/dev/zero bs=1 count=1024 of=${CMAKE_CURRENT_BINARY_DIR}/1024_blank_bytes
+    COMMAND dd if=/dev/zero bs=1 count=8192 of=${CMAKE_CURRENT_BINARY_DIR}/8192_blank_bytes
+    COMMAND ${CMAKE_C_COMPILER} ${runtime_cflags} -c ${CMAKE_CURRENT_SOURCE_DIR}/notify.c -o notify.o
+    COMMAND ${CMAKE_C_COMPILER} ${runtime_cflags} -c ${CMAKE_CURRENT_SOURCE_DIR}/runtime.c -o runtime.0.o
     COMMAND ${OBJCOPY} --add-section .digest_md5=16_blank_bytes --set-section-flags .digest_md5=noload,readonly runtime.0.o runtime.1.o
-    MAIN_DEPENDENCY ${CMAKE_CURRENT_BINARY_DIR}/runtime.0.o
-    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/16_blank_bytes
-    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-)
-add_custom_command(
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/runtime.2.o
     COMMAND ${OBJCOPY} --add-section .upd_info=1024_blank_bytes --set-section-flags .upd_info=noload,readonly runtime.1.o runtime.2.o
-    MAIN_DEPENDENCY ${CMAKE_CURRENT_BINARY_DIR}/runtime.1.o
-    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/1024_blank_bytes
-    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-)
-add_custom_command(
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/runtime.3.o
     COMMAND ${OBJCOPY} --add-section .sha256_sig=1024_blank_bytes --set-section-flags .sha256_sig=noload,readonly runtime.2.o runtime.3.o
-    MAIN_DEPENDENCY ${CMAKE_CURRENT_BINARY_DIR}/runtime.2.o
-    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/1024_blank_bytes
-    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
-)
-add_custom_command(
-    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/runtime.4.o
     COMMAND ${OBJCOPY} --add-section .sig_key=8192_blank_bytes --set-section-flags .sig_key=noload,readonly runtime.3.o runtime.4.o
-    MAIN_DEPENDENCY ${CMAKE_CURRENT_BINARY_DIR}/runtime.3.o
-    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/8192_blank_bytes
+    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/notify.c ${CMAKE_CURRENT_SOURCE_DIR}/runtime.c
     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
 )
+add_custom_target(runtime_obj DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/runtime.4.o)
+add_library(runtime_lib STATIC IMPORTED GLOBAL)
+add_dependencies(runtime_lib runtime_obj)
+set_target_properties(runtime_lib
+    PROPERTIES
+    IMPORTED_LOCATION ${CMAKE_CURRENT_BINARY_DIR}/runtime.4.o)
 
 # add the runtime as a normal executable
 # CLion will recognize it as a normal executable, one can simply step into the code
-add_executable(runtime ${CMAKE_CURRENT_BINARY_DIR}/runtime.4.o notify.c)
+add_executable(runtime notify.c)
+
 # CMake gets confused by the .o object, therefore we need to tell it that it shall link everything using the C compiler
 set_property(TARGET runtime PROPERTY LINKER_LANGUAGE C)
-target_link_libraries(runtime PRIVATE libsquashfuse dl xz libzlib pthread libappimage_shared libappimage_hashlib)
+
 if(COMMAND target_link_options)
     target_link_options(runtime PRIVATE ${runtime_ldflags})
 else()
@@ -120,6 +124,10 @@ else()
 endif()
 target_include_directories(runtime PRIVATE ${PROJECT_SOURCE_DIR}/include)
 
+target_link_libraries(runtime PRIVATE runtime_lib ${LIB_LIBLZMA} ${LIB_SQUASHFUSE} PkgConfig::FUSE PkgConfig::ZLIB dl PkgConfig::LIBAPPIMAGE PkgConfig::LIBAPPIMAGE_SHARED PkgConfig::LIBAPPIMAGE_HASHLIB)
+
+set(STRIP strip)
+
 if(BUILD_DEBUG)
     message(WARNING "Debug build, not stripping runtime to allow debugging using gdb etc.")
 else()
@@ -139,6 +147,8 @@ if(APPIMAGEKIT_EMBED_MAGIC_BYTES)
     )
 endif()
 
+set(XXD xxd)
+
 # required for embedding in appimagetool
 add_custom_command(
     OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/runtime_embed.o
diff -urp AppImageKit-9999.orig/src/runtime.c AppImageKit-9999/src/runtime.c
--- AppImageKit-9999.orig/src/runtime.c	2023-01-14 17:48:14.734934542 -0800
+++ AppImageKit-9999/src/runtime.c	2023-01-14 17:48:54.168497509 -0800
@@ -29,7 +29,11 @@
 
 #define _GNU_SOURCE
 
-#include "squashfuse.h"
+#ifdef EXTERNAL_SQUASHFUSE
+#  include <squashfuse.h>
+#else
+#  include "squashfuse.h"
+#endif
 #include <squashfs_fs.h>
 #include <nonstd.h>
 
