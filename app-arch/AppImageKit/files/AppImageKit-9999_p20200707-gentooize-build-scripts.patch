diff -urp AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/build-appdir.sh AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/build-appdir.sh
--- AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/build-appdir.sh	2020-07-07 13:45:07.000000000 -0700
+++ AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/build-appdir.sh	2020-08-31 04:11:06.668258449 -0700
@@ -19,30 +19,29 @@ mkdir -p "$APPIMAGETOOL_APPDIR"/usr/lib/
 
 # Copy AppDir specific files
 cp ../resources/AppRun "$APPIMAGETOOL_APPDIR"
-cp install_prefix/usr/lib/appimagekit/mksquashfs "$APPIMAGETOOL_APPDIR"/usr/lib/appimagekit/
 # prefer binaries from /deps, if available
-export PATH=/deps/bin:"$PATH"
+export PATH="${WORKDIR}/deps/bin:$PATH"
+if ! install_prefix/usr/lib/appimagekit/mksquashfs 2>/dev/null 1>/dev/null ; then
+  mkdir -p install_prefix/usr/lib/appimagekit
+  cp $(which mksquashfs) install_prefix/usr/lib/appimagekit
+fi
+cp install_prefix/usr/lib/appimagekit/mksquashfs "$APPIMAGETOOL_APPDIR"/usr/lib/appimagekit/
 cp $(which desktop-file-validate) "$APPIMAGETOOL_APPDIR"/usr/bin/
-cp $(which zsyncmake) "$APPIMAGETOOL_APPDIR"/usr/bin/
+cp $(which zsyncmake2) "$APPIMAGETOOL_APPDIR"/usr/bin/zsyncmake
+if which appstreamcli 2>/dev/null 1>/dev/null ; then
+  cp -a $(which appstreamcli) "$APPIMAGETOOL_APPDIR"/usr/bin/ || die
+fi
 
 cp ../resources/appimagetool.desktop "$APPIMAGETOOL_APPDIR"
 cp ../resources/appimagetool.png "$APPIMAGETOOL_APPDIR"/appimagetool.png
 cp "$APPIMAGETOOL_APPDIR"/appimagetool.png "$APPIMAGETOOL_APPDIR"/.DirIcon
 
-if [ -d /deps/ ]; then
+if [ -d "${WORKDIR}/deps/" ]; then
     # deploy glib
     mkdir -p "$APPIMAGETOOL_APPDIR"/usr/lib/
-    cp /deps/lib/lib*.so* "$APPIMAGETOOL_APPDIR"/usr/lib/
+    cp "${WORKDIR}/deps/lib/"lib*.so* "$APPIMAGETOOL_APPDIR"/usr/lib/
     # libffi is a runtime dynamic dependency
     # see this thread for more information on the topic:
     # https://mail.gnome.org/archives/gtk-devel-list/2012-July/msg00062.html
-    if [ "$ARCH" == "x86_64" ]; then
-        cp /usr/lib64/libffi.so.5 "$APPIMAGETOOL_APPDIR"/usr/lib/
-    elif [ "$ARCH" == "i686" ]; then
-        cp /usr/lib/libffi.so.5 "$APPIMAGETOOL_APPDIR"/usr/lib/
-    elif [ "$ARCH" == "armhf" ] || [ "$ARCH" == "aarch64" ]; then
-        cp /deps/lib/libffi.so.6 "$APPIMAGETOOL_APPDIR"/usr/lib/
-    else
-        echo "WARNING: unknown architecture, not bundling libffi"
-    fi
+    cp "${WORKDIR}/deps/lib/libffi.so.${LIBFFI_SUFFIX}" "$APPIMAGETOOL_APPDIR"/usr/lib/
 fi
diff -urp AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/build.sh AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/build.sh
--- AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/build.sh	2020-07-07 13:45:07.000000000 -0700
+++ AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/build.sh	2020-08-31 04:11:06.668258449 -0700
@@ -59,9 +59,6 @@ set -x
 HERE="$(dirname "$(readlink -f "${0}")")"
 cd "$HERE"
 
-# Fetch git submodules
-git submodule update --init --recursive
-
 # Clean up from previous run
 [ -d build/ ] && rm -rf build/
 
@@ -70,23 +67,23 @@ mkdir build
 cd build
 
 # make sure that deps in separate install tree are found
-export PKG_CONFIG_PATH=/deps/lib/pkgconfig/
+export PKG_CONFIG_PATH="${WORKDIR}/deps/lib/pkgconfig/"
 
 # make CMake use the right tools for ARM cross-compiling using toolchain file
 if [ "$ARCH" == "armhf" ]; then
-    export PATH=/deps/bin:"$PATH"
+    export PATH="${WORKDIR}/deps/bin:$PATH"
     export EXTRA_CMAKE_FLAGS="-DCMAKE_TOOLCHAIN_FILE=$HERE/cmake/toolchains/arm-linux-gnueabihf.cmake"
 elif [ "$ARCH" == "aarch64" ]; then
-    export PATH=/deps/bin:"$PATH"
+    export PATH="${WORKDIR}/deps/bin:$PATH"
     export EXTRA_CMAKE_FLAGS="-DCMAKE_TOOLCHAIN_FILE=$HERE/cmake/toolchains/aarch64-linux-gnu.cmake"
 fi
 
-cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING=ON -DAPPIMAGEKIT_PACKAGE_DEBS=ON "${EXTRA_CMAKE_FLAGS[@]}"
+cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=RelWithDebInfo -DBUILD_TESTING=ON -DAPPIMAGEKIT_PACKAGE_DEBS=ON -DUSE_SYSTEM_MKSQUASHFS=ON "${EXTRA_CMAKE_FLAGS[@]}"
 make -j$JOBS
 make install DESTDIR=install_prefix/
 
-if [ -d /deps/lib ]; then
-    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH":/deps/lib/
+if [ -d "${WORKDIR}/deps/lib" ]; then
+    export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:${WORKDIR}/deps/lib/"
 fi
 
 xxd src/runtime | head -n 1
@@ -105,4 +102,7 @@ bash -ex "$HERE/build-appdir.sh"
 ls -lh
 
 mkdir -p out
-cp -r install_prefix/usr/{bin,lib/appimagekit}/* appdirs/*.AppDir out/
+cp -r install_prefix/usr/bin/* appdirs/*.AppDir out/
+if ls install_prefix/usr/lib/appimagekit 2>/dev/null 1>/dev/null ; then
+  cp -r install_prefix/usr/lib/appimagekit/* out/
+fi
diff -urp AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/test-appimagetool.sh AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/test-appimagetool.sh
--- AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/test-appimagetool.sh	2020-07-07 13:45:07.000000000 -0700
+++ AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/test-appimagetool.sh	2020-08-31 04:11:06.668258449 -0700
@@ -6,7 +6,7 @@ set -o functrace
 
 # this script attempts to package appimagetool as an AppImage with... surprise, appimagetool
 
-tempdir=$(mktemp -d /tmp/appimage-test.XXXXXXXX)
+tempdir=$(mktemp -d "${T}/appimage-test.XXXXXXXX")
 thisdir=$(dirname $(readlink -f "$0"))
 
 appimagetool=$(readlink -f "$1")
diff -urp AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/travis/build-appimage.sh AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/travis/build-appimage.sh
--- AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/travis/build-appimage.sh	2020-07-07 13:45:07.000000000 -0700
+++ AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/travis/build-appimage.sh	2020-08-31 04:11:06.668258449 -0700
@@ -2,9 +2,9 @@
 
 set -e
 
-cd /AppImageKit/build
+cd ../build/out
 
-cd out/
+export PATH="$(pwd):${PATH}"
 
 if [ "$TRAVIS_PULL_REQUEST" == "false" ] || [ "$TRAVIS_PULL_REQUEST" == "" ]; then
     # Sign only when NOT on a pull request
diff -urp AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/travis/build-binaries.sh AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/travis/build-binaries.sh
--- AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/travis/build-binaries.sh	2020-07-07 13:45:07.000000000 -0700
+++ AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/travis/build-binaries.sh	2020-08-31 04:11:06.668258449 -0700
@@ -3,11 +3,13 @@
 set -e
 set -x
 
-cd /AppImageKit
+pushd ../
 
 ./build.sh "$@"
 
 # make sure the prebuilt libraries in the container will be found
-export LD_LIBRARY_PATH=/deps/lib:"$LD_LIBRARY_PATH"
+export LD_LIBRARY_PATH="${WORKDIR}/deps/lib:$LD_LIBRARY_PATH"
 
 ./test-appimagetool.sh build/install_prefix/usr/bin/appimagetool
+
+popd
diff -urp AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/travis/travis-build.sh AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/travis/travis-build.sh
--- AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1.orig/travis/travis-build.sh	2020-07-07 13:45:07.000000000 -0700
+++ AppImageKit-08800854de05f4f6f7c1f3901dc165b8518822e1/travis/travis-build.sh	2020-08-31 04:11:56.050213699 -0700
@@ -3,81 +3,39 @@
 set -e
 set -x
 
-if [ "$CI" == "" ]; then
-    echo "Not running on CI system, aborting to prevent damage from system"
-    exit 2
-fi
-
-case "$ARCH" in
-    "x86_64")
-        export ARCH="x86_64"
-        ;;
-    "i386"|"i686")
-        export ARCH="i686"
-        # sleep so as not to overwrite during uploading (FIXME)
-        sleep 60
-        ;;
-esac
-
-# clean up and download data from GitHub
-rm -rf data.tar.g* .gnu* || true
-wget https://github.com/AppImage/AppImageKit/files/584665/data.zip -O data.tar.gz.gpg
-( set +x ; echo $KEY | gpg2 --batch --passphrase-fd 0 --no-tty --skip-verify --output data.tar.gz --decrypt data.tar.gz.gpg ) || true
-( tar xf data.tar.gz ; sudo chown -R $USER .gnu* ; rm -rf $HOME/.gnu* ; mv .gnu* $HOME/ ) || true
+
 
 # prepare output directory
-mkdir -p ./out/
+mkdir -p ../build/out/
 
 # build AppImageKit
-docker run --rm \
-    --device /dev/fuse:mrw \
-    -e ARCH -e TRAVIS -e TRAVIS_BUILD_NUMBER \
-    -i \
-    -v "${PWD}":/AppImageKit \
-    -v "${PWD}"/travis/:/travis \
-    "$DOCKER_IMAGE" \
-    /bin/bash -x "/travis/build-binaries.sh" --run-tests
+./build-binaries.sh --run-tests
 
 # inspect AppDirs
-find build/out/appimagetool.AppDir/
+find ../build/out/appimagetool.AppDir/
 
 # build AppImage
-docker run --rm \
-    --cap-add SYS_ADMIN \
-    --device /dev/fuse:mrw \
-    -e ARCH -e TRAVIS -e TRAVIS_BUILD_NUMBER \
-    -i \
-    -v "${PWD}":/AppImageKit \
-    -v "${PWD}"/travis/:/travis \
-    -v $HOME/.gnupg:/root/.gnupg \
-    "$DOCKER_IMAGE" \
-    /bin/bash -x "/travis/build-appimage.sh"
+./build-appimage.sh
 
-cd build/
+cd ../build/
 
 # test AppImages
-[ "$ARCH" == "i686" ] && sudo apt-get update && sudo apt-get install -y gcc-multilib lib32z1 libfuse2 libfuse2:i386 libglib2.0-0:i386 libcairo2:i386
-[ "$ARCH" != "armhf" ] && [ "$ARCH" != "aarch64" ] && bash -x ../travis/test-appimage.sh
-
-# install more tools
-# (vim-common contains xxd)
-sudo apt-get install vim-common
-
-# fix permissions
-sudo chown -R travis.travis .
+[ "$ARCH" != "armhf" ] && [ "$ARCH" != "aarch64" ] && ../travis/test-appimage.sh
 
 # remove binaries from output directory
 ls -al out/
 rm -r out/{appimagetool,mksquashfs,*.AppDir}
 rm -r out/{validate,digest} || true
 
+cp src/runtime out
+
 # inspect runtime
 xxd out/runtime | head -n 1 | grep "4149 0200"
 # fix filename for upload
 mv out/runtime out/runtime-"$ARCH"
 
 # remove unused files
-sudo rm -rf out/*.AppDir out/*.AppImage.digest
+rm -rf out/*.AppDir out/*.AppImage.digest
 
 # fix filename for upload
-sudo mv out/AppRun out/AppRun-"$ARCH"
+mv out/AppRun out/AppRun-"$ARCH"
