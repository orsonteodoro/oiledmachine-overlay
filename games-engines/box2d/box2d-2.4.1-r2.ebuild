# Copyright 1999-2023 Gentoo Authors
# Distributed under the terms of the GNU General Public License v2

EAPI=8

CMAKE_BUILD_TYPE="Release"
MY_PN="Box2D"
TRAIN_SIGNAL=6
TRAIN_TEST_DURATION=15
#TRAIN_USE_X=1
TRAIN_USE_X_GPU=1
UOPTS_SUPPORT_EBOLT=1
UOPTS_SUPPORT_EPGO=1
UOPTS_SUPPORT_TBOLT=1
UOPTS_SUPPORT_TPGO=1

inherit cmake multilib-build toolchain-funcs uopts

KEYWORDS="~amd64 ~x86"
S="${WORKDIR}/${P}"
SRC_URI="
https://github.com/erincatto/Box2D/archive/v${PV}.tar.gz
	-> ${P}.tar.gz
https://github.com/erincatto/box2d/commit/e76cf2d82792fbf915e42ae253f8a2ae252adbdf.patch
	-> box2d-commit-e76cf2d.patch
https://github.com/erincatto/box2d/commit/cd2c28dba83e4f359d08aeb7b70afd9e35e39eda.patch
	-> box2d-commit-cd2c28d.patch
"
# e76cf2d - update doctest for #677
#   Fixes doctest.h:4021:47: error: size of array 'altStackMem' is not an integral constant-expression
# cd2c28d - Update doctest version (#682)
#   Dependency for e76cf2d

DESCRIPTION="Box2D is a 2D physics engine for games"
HOMEPAGE="http://box2d.org/"
LICENSE="MIT"
RESTRICT="mirror"
SLOT_MAJ="$(ver_cut 1-2 ${PV})" # API change between 2.4.1 breaks 2.4.0
SLOT="${SLOT_MAJ}/${PV}"
IUSE+=" doc examples static-libs test ebuild_revision_1"
REQUIRED_USE+="
	bolt? (
		examples
	)
	pgo? (
		examples
	)
	ebolt? (
		examples
	)
	epgo? (
		examples
	)
"
# todo remove internal dependencies
DEPEND+="
	virtual/libc
	examples? (
		media-libs/glew[${MULTILIB_USEDEP}]
		media-libs/glfw[${MULTILIB_USEDEP}]
	)
"
RDEPEND+="
	${DEPEND}
"
BDEPEND+="
	>=dev-build/cmake-3.8
	doc? ( app-text/doxygen )
"
PATCHES=(
	"${FILESDIR}/${PN}-2.4.1-cmake-fixes.patch"
	"${DISTDIR}/${PN}-commit-cd2c28d.patch"
	"${DISTDIR}/${PN}-commit-e76cf2d.patch"
	"${FILESDIR}/${PN}-2.4.1-testbed-close-handlers.patch"
	"${FILESDIR}/${PN}-2.4.1-testbed-autoshoot.patch"
)

# Order matters when PGOing
get_lib_types() {
	echo "shared"
	if use static-libs ; then
		echo "static"
	fi
}

pkg_setup() {
	uopts_setup

	# The GLFW does not allow for software rendering.
	# This is why hardware rendering is required.
	if ( use pgo || use bolt ) \
		&& ( has pid-sandbox ${FEATURES} ) ; then
eerror
eerror "You must disable the pid-sandbox for PGO/BOLT training."
eerror
eerror "pid-sandbox is required for checking if X11 is being used."
eerror
eerror "Add a per-package environment rule with the following additions or"
eerror "changes..."
eerror
eerror "${EROOT}/etc/portage/env/no-pid-sandbox.conf:"
eerror "FEATURE=\"\${FEATURES} -pid-sandbox\""
eerror
eerror "${EROOT}/etc/portage/package.env:"
eerror "${CATEGORY}/${PN} no-pid-sandbox.conf"
eerror
		die
	fi

	local pid="$$"
einfo "PID=${pid}"
	local display=$(grep -z "^DISPLAY=" "/proc/${pid}/environ" \
		| cut -f 2 -d "=")
einfo "DISPLAY=${display}"
	if ( use pgo || use bolt ) \
		&& [[ -z "${display}" ]] ; then
eerror
eerror "You must run X to do GPU based PGO/BOLT training."
eerror
		die
	fi

	if ( use pgo || use bolt ) \
		&& ! ( DISPLAY="${TRAIN_DISPLAY:-${display}}" xhost \
			| grep -q -e "LOCAL:" ) ; then
eerror
eerror "You must do:  \`xhost +local:root:\` to do GPU based PGO/BOLT training."
eerror
		die
	fi
}

src_prepare() {
	export CMAKE_USE_DIR="${S}"
	cd "${CMAKE_USE_DIR}" || die
	cmake_src_prepare
	prepare_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
			cp -a "${S}" "${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}" || die
			cd "${CMAKE_USE_DIR}" || die
			if [[ "${lib_type}" == "static" ]] ; then
				sed -i -e "s|STATIC|SHARED|" src/CMakeLists.txt || die

				# Generated by https://glad.dav1d.de/ and
				# detailed in https://github.com/Dav1dde/glad
#				sed -i -e "s|STATIC|SHARED|" extern/glad/CMakeLists.txt || die

				sed -i -e "s|STATIC|SHARED|" extern/glfw/CMakeLists.txt || die

#				sed -i -e "s|STATIC|SHARED|" extern/imgui/CMakeLists.txt || die # packaged but no lib files

				# No package
#				sed -i -e "s|STATIC|SHARED|" extern/sajson/CMakeLists.txt || die
			fi
			uopts_src_prepare
		done
	}
	multilib_foreach_abi prepare_abi
}

src_configure() { :; }

_src_configure_compiler() {
	export CC=$(tc-getCC)
	export CXX=$(tc-getCXX)
	export CPP=$(tc-getCPP)
}

_src_configure() {
	debug-print-function ${FUNCNAME} "${@}"
	export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
	export BUILD_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}_build"
	einfo "CMAKE_USE_DIR:  ${CMAKE_USE_DIR}"
	einfo "BUILD_DIR:  ${BUILD_DIR}"
	cd "${CMAKE_USE_DIR}" || die
	uopts_src_configure

	# Performance drops observed with testbed's tumbler test.
	replace-flags -Os -O2
	replace-flags -O0 -O1
	replace-flags -Oz -O2

	local mycmakeargs=(
		-DBOX2D_BUILD_DOCS=$(usex doc)
		-DBOX2D_BUILD_TESTBED=$(usex examples)
		-DBOX2D_BUILD_UNIT_TESTS=$(usex test)
	)

#	if use examples ; then
#		mycmakeargs+=(
#	-DEXAMPLES_INSTALL_RPATH:PATH="/usr/share/${PN}-${PVR}/testbed"
#		)
#	fi
	if [[ "${lib_type}" == "shared" ]] ; then
		mycmakeargs+=( -DBUILD_SHARED_LIBS=ON )
	else
		mycmakeargs+=( -DBUILD_SHARED_LIBS=OFF )
	fi
	cmake_src_configure
}

_src_compile() {
	export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
	export BUILD_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}_build"
	cd "${BUILD_DIR}" || die
	cmake_src_compile
}

src_compile() {
	compile_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			if [[ "${lib_type}" == "static" ]] ; then
				uopts_n_training
			else
				uopts_y_training
			fi

			uopts_src_compile
		done
	}
	multilib_foreach_abi compile_abi
}

src_test() {
	test_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
			export BUILD_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}_build"
			cd "${BUILD_DIR}" || die
			if [[ -x bin/unit_test ]] ; then
				bin/unit_test || die
			else
				die "No unit test exist for ABI=${ABI} lib_type=${lib_type}"
			fi
		done
	}
	multilib_foreach_abi test_abi
}

TRAINER_MAX="57"
train_pre_trainer() {
	local trainer="${1}"
cat > settings.ini <<EOF
{
  "testIndex": ${trainer},
  "windowWidth": ${BOX2D_TRAIN_WIDTH:-1920},
  "windowHeight": ${BOX2D_TRAIN_HEIGHT:-1080},
  "hertz": 60,
  "velocityIterations": 8,
  "positionIterations": 3,
  "drawShapes": true,
  "drawJoints": true,
  "drawAABBs": false,
  "drawContactPoints": false,
  "drawContactNormals": false,
  "drawContactImpulse": false,
  "drawFrictionImpulse": false,
  "drawCOMs": false,
  "drawStats": false,
  "drawProfile": false,
  "enableWarmStarting": true,
  "enableContinuous": true,
  "enableSubStepping": false,
  "enableSleep": true
}
EOF
	einfo "pwd:  $(pwd)"
	einfo "trainer:  ${trainer}/${TRAINER_MAX}"
	cat settings.ini
}

train_post_trainer() {
	rm settings.ini
}

train_get_trainer_exe() {
	echo "bin/testbed"
}

train_trainer_list() {
	seq 0 ${TRAINER_MAX} | tr " " "\n"
}

_src_post_train() {
	killall -9 testbed
}

src_install() {
	install_abi() {
		local lib_type
		for lib_type in $(get_lib_types) ; do
			export CMAKE_USE_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}"
			export BUILD_DIR="${S}-${MULTILIB_ABI_FLAG}.${ABI}_${lib_type}_build"
			cd "${BUILD_DIR}" || die
			cmake_src_install
			insinto "/usr/share/${PN}-${PVR}/testbed"
			exeinto "/usr/share/${PN}-${PVR}/testbed"
			if use examples ; then
				doexe bin/testbed
			fi
			uopts_src_install
		done
		multilib_check_headers
	}
	multilib_foreach_abi install_abi
	multilib_src_install_all
}

multilib_src_install_all() {
	cd "${S}" || die
	cd docs || die
	if use doc; then
		doxygen Doxyfile
		dodoc -r API images manual.docx
	fi

	if use examples ; then
		cd "${S}"
		insinto /usr/share/${PN}/HelloWorld
		doins -r unit-test/hello_world.cpp
	fi
}

pkg_postinst() {
	uopts_pkg_postinst
	if ( use pgo || use bolt ) ; then
ewarn
ewarn "You must run \`xhost -local:root:\` after PGO training to restore the"
ewarn "security default."
ewarn
	fi
}

# OILEDMACHINE-OVERLAY-META-MOD-TYPE:  ebuild
# OILEDMACHINE-OVERLAY-META-EBUILD-CHANGES:  multilib-support, static-libs
