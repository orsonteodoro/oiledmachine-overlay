--- firefox-82.0.ebuild.orig	2020-10-21 10:39:18.000000000 -0700
+++ firefox-82.0.ebuild	2020-10-24 18:02:54.606468807 -0700
@@ -1,6 +1,8 @@
 # Copyright 1999-2020 Gentoo Authors
 # Distributed under the terms of the GNU General Public License v2
 
+# Based on the firefox-82.0.ebuild from the gentoo-overlay
+
 EAPI="7"
 
 FIREFOX_PATCHSET="firefox-82-patches-01.tar.xz"
@@ -40,6 +42,7 @@ MOZ_P_DISTFILES="${MOZ_PN}-${MOZ_PV_DIST
 inherit autotools check-reqs desktop flag-o-matic gnome2-utils llvm \
 	multiprocessing pax-utils python-any-r1 toolchain-funcs \
 	virtualx xdg
+inherit multilib-minimal rust-toolchain
 
 MOZ_SRC_BASE_URI="https://archive.mozilla.org/pub/${MOZ_PN}/releases/${MOZ_PV}"
 
@@ -65,6 +68,9 @@ IUSE="clang cpu_flags_arm_neon dbus debu
 	hardened hwaccel jack lto +openh264 pgo pulseaudio screencast selinux
 	+system-av1 +system-harfbuzz +system-icu +system-jpeg +system-libevent
 	+system-libvpx +system-webp wayland wifi"
+_ABIS="abi_x86_32 abi_x86_64 abi_x86_x32 abi_mips_n32 abi_mips_n64 abi_mips_o32 abi_ppc_32 abi_ppc_64 abi_s390_32 abi_s390_64"
+IUSE+=" ${_ABIS}"
+IUSE+=" -jemalloc"
 
 REQUIRED_USE="screencast? ( wayland )"
 
@@ -73,30 +79,31 @@ BDEPEND="${PYTHON_DEPS}
 	app-arch/zip
 	>=dev-util/cbindgen-0.14.3
 	>=net-libs/nodejs-10.19.0
-	virtual/pkgconfig
-	>=virtual/rust-1.43.0
+	virtual/pkgconfig[${MULTILIB_USEDEP}]
+	>=dev-lang/rust-1.43.0[${MULTILIB_USEDEP}]
+	!dev-lang/rust-bin
 	|| (
 		(
-			sys-devel/clang:11
-			sys-devel/llvm:11
+			sys-devel/clang:11[${MULTILIB_USEDEP}]
+			sys-devel/llvm:11[${MULTILIB_USEDEP}]
 			clang? (
-				=sys-devel/lld-11*
+				=sys-devel/lld-11*[${MULTILIB_USEDEP}]
 				pgo? ( =sys-libs/compiler-rt-sanitizers-11*[profile] )
 			)
 		)
 		(
-			sys-devel/clang:10
-			sys-devel/llvm:10
+			sys-devel/clang:10[${MULTILIB_USEDEP}]
+			sys-devel/llvm:10[${MULTILIB_USEDEP}]
 			clang? (
-				=sys-devel/lld-10*
+				=sys-devel/lld-10*[${MULTILIB_USEDEP}]
 				pgo? ( =sys-libs/compiler-rt-sanitizers-10*[profile] )
 			)
 		)
 		(
-			sys-devel/clang:9
-			sys-devel/llvm:9
+			sys-devel/clang:9[${MULTILIB_USEDEP}]
+			sys-devel/llvm:9[${MULTILIB_USEDEP}]
 			clang? (
-				=sys-devel/lld-9*
+				=sys-devel/lld-9*[${MULTILIB_USEDEP}]
 				pgo? ( =sys-libs/compiler-rt-sanitizers-9*[profile] )
 			)
 		)
@@ -104,76 +111,78 @@ BDEPEND="${PYTHON_DEPS}
 	lto? (
 		!clang? ( sys-devel/binutils[gold] )
 	)
-	amd64? ( >=dev-lang/yasm-1.1 )
-	x86? ( >=dev-lang/yasm-1.1 )
+	abi_x86_64? ( >=dev-lang/yasm-1.1 )
+	abi_x86_32? ( >=dev-lang/yasm-1.1 )
+	abi_x86_x32? ( >=dev-lang/yasm-1.1 )
 	!system-av1? (
-		amd64? ( >=dev-lang/nasm-2.13 )
-		x86? ( >=dev-lang/nasm-2.13 )
+		abi_x86_64? ( >=dev-lang/nasm-2.13 )
+		abi_x86_32? ( >=dev-lang/nasm-2.13 )
+		abi_x86_x32? ( >=dev-lang/nasm-2.13 )
 	)"
 
 CDEPEND="
-	>=dev-libs/nss-3.57
-	>=dev-libs/nspr-4.29
-	dev-libs/atk
-	dev-libs/expat
-	>=x11-libs/cairo-1.10[X]
-	>=x11-libs/gtk+-2.18:2
-	>=x11-libs/gtk+-3.4.0:3[X]
-	x11-libs/gdk-pixbuf
-	>=x11-libs/pango-1.22.0
-	>=media-libs/libpng-1.6.35:0=[apng]
-	>=media-libs/mesa-10.2:*
-	media-libs/fontconfig
-	>=media-libs/freetype-2.4.10
-	kernel_linux? ( !pulseaudio? ( media-libs/alsa-lib ) )
+	>=dev-libs/nss-3.57[${MULTILIB_USEDEP}]
+	>=dev-libs/nspr-4.29[${MULTILIB_USEDEP}]
+	dev-libs/atk[${MULTILIB_USEDEP}]
+	dev-libs/expat[${MULTILIB_USEDEP}]
+	>=x11-libs/cairo-1.10[X,${MULTILIB_USEDEP}]
+	>=x11-libs/gtk+-2.18:2[${MULTILIB_USEDEP}]
+	>=x11-libs/gtk+-3.4.0:3[X,${MULTILIB_USEDEP}]
+	x11-libs/gdk-pixbuf[${MULTILIB_USEDEP}]
+	>=x11-libs/pango-1.22.0[${MULTILIB_USEDEP}]
+	>=media-libs/libpng-1.6.35:0=[apng,${MULTILIB_USEDEP}]
+	>=media-libs/mesa-10.2:*[${MULTILIB_USEDEP}]
+	media-libs/fontconfig[${MULTILIB_USEDEP}]
+	>=media-libs/freetype-2.4.10[${MULTILIB_USEDEP}]
+	kernel_linux? ( !pulseaudio? ( media-libs/alsa-lib[${MULTILIB_USEDEP}] ) )
 	virtual/freedesktop-icon-theme
-	>=x11-libs/pixman-0.19.2
-	>=dev-libs/glib-2.26:2
-	>=sys-libs/zlib-1.2.3
-	>=dev-libs/libffi-3.0.10:=
-	media-video/ffmpeg
-	x11-libs/libX11
-	x11-libs/libXcomposite
-	x11-libs/libXdamage
-	x11-libs/libXext
-	x11-libs/libXfixes
-	x11-libs/libXrender
-	x11-libs/libXt
+	>=x11-libs/pixman-0.19.2[${MULTILIB_USEDEP}]
+	>=dev-libs/glib-2.26:2[${MULTILIB_USEDEP}]
+	>=sys-libs/zlib-1.2.3[${MULTILIB_USEDEP}]
+	>=dev-libs/libffi-3.0.10:=[${MULTILIB_USEDEP}]
+	media-video/ffmpeg[${MULTILIB_USEDEP}]
+	x11-libs/libX11[${MULTILIB_USEDEP}]
+	x11-libs/libXcomposite[${MULTILIB_USEDEP}]
+	x11-libs/libXdamage[${MULTILIB_USEDEP}]
+	x11-libs/libXext[${MULTILIB_USEDEP}]
+	x11-libs/libXfixes[${MULTILIB_USEDEP}]
+	x11-libs/libXrender[${MULTILIB_USEDEP}]
+	x11-libs/libXt[${MULTILIB_USEDEP}]
 	dbus? (
-		sys-apps/dbus
-		dev-libs/dbus-glib
+		sys-apps/dbus[${MULTILIB_USEDEP}]
+		dev-libs/dbus-glib[${MULTILIB_USEDEP}]
 	)
 	screencast? ( media-video/pipewire:0/0.3 )
 	system-av1? (
-		>=media-libs/dav1d-0.3.0:=
-		>=media-libs/libaom-1.0.0:=
+		>=media-libs/dav1d-0.3.0:=[${MULTILIB_USEDEP}]
+		>=media-libs/libaom-1.0.0:=[${MULTILIB_USEDEP}]
 	)
 	system-harfbuzz? (
-		>=media-libs/harfbuzz-2.6.8:0=
-		>=media-gfx/graphite2-1.3.13
+		>=media-libs/harfbuzz-2.6.8:0=[${MULTILIB_USEDEP}]
+		>=media-gfx/graphite2-1.3.13[${MULTILIB_USEDEP}]
 	)
-	system-icu? ( >=dev-libs/icu-67.1:= )
-	system-jpeg? ( >=media-libs/libjpeg-turbo-1.2.1 )
-	system-libevent? ( >=dev-libs/libevent-2.0:0=[threads] )
-	system-libvpx? ( >=media-libs/libvpx-1.8.2:0=[postproc] )
-	system-webp? ( >=media-libs/libwebp-1.1.0:0= )
+	system-icu? ( >=dev-libs/icu-67.1:=[${MULTILIB_USEDEP}] )
+	system-jpeg? ( >=media-libs/libjpeg-turbo-1.2.1[${MULTILIB_USEDEP}] )
+	system-libevent? ( >=dev-libs/libevent-2.0:0=[threads,${MULTILIB_USEDEP}] )
+	system-libvpx? ( >=media-libs/libvpx-1.8.2:0=[postproc,${MULTILIB_USEDEP}] )
+	system-webp? ( >=media-libs/libwebp-1.1.0:0=[${MULTILIB_USEDEP}] )
 	wifi? (
 		kernel_linux? (
-			sys-apps/dbus
-			dev-libs/dbus-glib
-			net-misc/networkmanager
+			sys-apps/dbus[${MULTILIB_USEDEP}]
+			dev-libs/dbus-glib[${MULTILIB_USEDEP}]
+			net-misc/networkmanager[${MULTILIB_USEDEP}]
 		)
 	)
-	jack? ( virtual/jack )
+	jack? ( virtual/jack[${MULTILIB_USEDEP}] )
 	selinux? ( sec-policy/selinux-mozilla )"
 
 RDEPEND="${CDEPEND}
-	jack? ( virtual/jack )
-	openh264? ( media-libs/openh264:*[plugin] )
+	jack? ( virtual/jack[${MULTILIB_USEDEP}] )
+	openh264? ( media-libs/openh264:*[plugin,${MULTILIB_USEDEP}] )
 	pulseaudio? (
 		|| (
-			media-sound/pulseaudio
-			>=media-sound/apulse-0.1.12-r4
+			media-sound/pulseaudio[${MULTILIB_USEDEP}]
+			>=media-sound/apulse-0.1.12-r4[${MULTILIB_USEDEP}]
 		)
 	)
 	selinux? ( sec-policy/selinux-mozilla )"
@@ -181,15 +190,22 @@ RDEPEND="${CDEPEND}
 DEPEND="${CDEPEND}
 	pulseaudio? (
 		|| (
-			media-sound/pulseaudio
-			>=media-sound/apulse-0.1.12-r4[sdk]
+			media-sound/pulseaudio[${MULTILIB_USEDEP}]
+			>=media-sound/apulse-0.1.12-r4[sdk,${MULTILIB_USEDEP}]
 		)
 	)
-	wayland? ( >=x11-libs/gtk+-3.11:3[wayland] )
-	amd64? ( virtual/opengl )
-	x86? ( virtual/opengl )"
+	wayland? ( >=x11-libs/gtk+-3.11:3[wayland,${MULTILIB_USEDEP}] )
+	abi_x86_64? ( virtual/opengl[${MULTILIB_USEDEP}] )
+	abi_x86_32? ( virtual/opengl[${MULTILIB_USEDEP}] )
+	abi_x86_x32? ( virtual/opengl[${MULTILIB_USEDEP}] )"
+# Gentoo's rust-bin package doesn't install the i686 libs.  Use only the
+# compiled version.
 
 S="${WORKDIR}/${PN}-${PV%_*}"
+S_BAK="${WORKDIR}/${PN}-${PV%_*}"
+
+MOZILLA_FIVE_HOME=""
+BUILD_OBJ_DIR=""
 
 # Allow MOZ_GMP_PLUGIN_LIST to be set in an eclass or
 # overridden in the enviromnent (advanced hackers only)
@@ -452,6 +468,22 @@ pkg_setup() {
 		# Ensure we use C locale when building, bug #746215
 		export LC_ALL=C
 	fi
+
+	einfo
+	einfo "To set up cross-compile for other ABIs see \`epkginfo -d firefox\`"
+
+	local jobs=$(echo "${MAKEOPTS}" | grep -P -o -e "(-j|--jobs=)\s*[0-9]+" \
+			| sed -r -e "s#(-j|--jobs=)\s*##g")
+	local cores=$(nproc)
+	if (( ${jobs} > $((${cores}/2)) )) ; then
+		ewarn \
+"Firefox may lock up or freeze the computer if the N value in MAKEOPTS=\"-jN\" \
+is greater than \$(nproc)/2"
+	fi
+
+	if ! use pulseaudio ; then
+		ewarn "Microphone support may be disabled when pulseaudio is disabled."
+	fi
 }
 
 src_unpack() {
@@ -474,6 +506,19 @@ src_unpack() {
 src_prepare() {
 	use lto && rm -v "${WORKDIR}"/firefox-patches/*-LTO-Only-enable-LTO-*.patch
 	eapply "${WORKDIR}/firefox-patches"
+	eapply "${FILESDIR}/multiabi/${PN}-82.0-dont-check-rustc-host.patch"
+	eapply "${FILESDIR}/multiabi/${PN}-68.4.2-force-cross-compile.patch"
+	eapply "${FILESDIR}/multiabi/${PN}-82.0-elfhack-makefile-no-prefix-for-readelf.patch"
+	eapply "${FILESDIR}/multiabi/${PN}-79.0-check_binary-no-prefix-for-readelf.patch"
+	eapply "${FILESDIR}/multiabi/${PN}-79.0-dependentlibs_py-no-toolchain-prefix-for-readelf.patch"
+
+	# Disabled because they don't support multilib Python.  Only native ABI supported.
+	# This means cbindgen cannot load the 32 bit clang.  It will build the cargo
+	# parts.  When it links it, it fails because of cbindings is 64-bit and the
+	# dependencies use the build information for 64-bit linking.
+	#
+	# eapply "${FILESDIR}/multiabi/${PN}-79.0-compile-cargo-packages-same-abi-1.patch"
+	# eapply "${FILESDIR}/multiabi/${PN}-79.0-compile-cargo-packages-same-abi-2.patch"
 
 	# Allow user to apply any additional patches without modifing ebuild
 	eapply_user
@@ -490,11 +535,7 @@ src_prepare() {
 		"${S}"/intl/icu_sources_data.py \
 		|| die "sed failed to set num_cores"
 
-	# sed-in toolchain prefix
-	sed -i \
-		-e "s/objdump/${CHOST}-objdump/" \
-		"${S}"/python/mozbuild/mozbuild/configure/check_debug_ranges.py \
-		|| die "sed failed to set toolchain prefix"
+	# sed-in toolchain prefix patch section was moved to the bottom of this function
 
 	sed -i \
 		-e 's/ccache_stats = None/return None/' \
@@ -507,30 +548,66 @@ src_prepare() {
 	# Clearing checksums where we have applied patches
 	moz_clear_vendor_checksums target-lexicon-0.9.0
 
-	# Create build dir
-	BUILD_DIR="${WORKDIR}/${PN}_build"
-	mkdir -p "${BUILD_DIR}" || die
-
 	# Write API keys to disk
 	echo -n "${MOZ_API_KEY_GOOGLE//gGaPi/}" > "${S}"/api-google.key || die
 
 	xdg_src_prepare
+
+	if [[ "${CFLAGS}" =~ "fast-math" || "${CXXFLAGS}" =~ "fast-math" ]] ; then
+		pushd "${S}" || die
+		eapply "${FILESDIR}/multiabi/firefox-78.0.2-opus-fast-math.patch"
+		popd || die
+	fi
+
+	multilib_copy_sources
+
+	_src_prepare() {
+		local chost=$(get_abi_CHOST ${ABI})
+		# sed-in toolchain prefix
+		sed -i \
+			-e "s/objdump/${chost}-objdump/" \
+			"${S}"/python/mozbuild/mozbuild/configure/check_debug_ranges.py \
+			|| die "sed failed to set toolchain prefix"
+	}
+
+	multilib_foreach_abi _src_prepare
 }
 
-src_configure() {
+# corrections based on the ABI being compiled
+_fix_paths() {
+	# For proper rust cargo cross-compile for libloading and glslopt \
+	export PKG_CONFIG=${chost}-pkg-config
+	export CROSSCOMPILE=$(rust_abi ${chost})
+	export CARGO_CFG_TARGET_ARCH=$(echo ${chost} | cut -f 1 -d "-")
+	export MOZILLA_FIVE_HOME="/usr/$(get_libdir)/${PN}"
+	export BUILD_OBJ_DIR="${BUILD_DIR}/ff"
+	# for rust crates libloading and glslopt
+	if use clang && ! tc-is-clang ; then
+		CC=${chost}-clang
+		CXX=${chost}-clang++
+	elif ! use clang && ! tc-is-gcc ; then
+		CC=${chost}-gcc
+		CXX=${chost}-g++
+	fi
+	tc-export CC CXX
+}
+
+multilib_src_configure() {
+	local chost=$(get_abi_CHOST ${ABI})
 	# Show flags set at the beginning
 	einfo "Current CFLAGS:    ${CFLAGS}"
 	einfo "Current LDFLAGS:   ${LDFLAGS}"
 	einfo "Current RUSTFLAGS: ${RUSTFLAGS}"
 
+	einfo "Cross-compile: chost=${chost}"
 	local have_switched_compiler=
 	if use clang && ! tc-is-clang ; then
 		# Force clang
 		einfo "Enforcing the use of clang due to USE=clang ..."
 		have_switched_compiler=yes
 		AR=llvm-ar
-		CC=${CHOST}-clang
-		CXX=${CHOST}-clang++
+		CC=${chost}-clang
+		CXX=${chost}-clang++
 		NM=llvm-nm
 		RANLIB=llvm-ranlib
 	elif ! use clang && ! tc-is-gcc ; then
@@ -538,8 +615,8 @@ src_configure() {
 		have_switched_compiler=yes
 		einfo "Enforcing the use of gcc due to USE=-clang ..."
 		AR=gcc-ar
-		CC=${CHOST}-gcc
-		CXX=${CHOST}-g++
+		CC=${chost}-gcc
+		CXX=${chost}-g++
 		NM=gcc-nm
 		RANLIB=gcc-ranlib
 	fi
@@ -555,14 +632,15 @@ src_configure() {
 	export HOST_CXX="$(tc-getBUILD_CXX)"
 	tc-export CC CXX LD AR NM OBJDUMP RANLIB PKG_CONFIG
 
-	# Set MOZILLA_FIVE_HOME
-	export MOZILLA_FIVE_HOME="/usr/$(get_libdir)/${PN}"
+	_fix_paths
+
+	export TARGET="${chost}"
 
 	# python/mach/mach/mixin/process.py fails to detect SHELL
 	export SHELL="${EPREFIX}/bin/bash"
 
 	# Set MOZCONFIG
-	export MOZCONFIG="${S}/.mozconfig"
+	export MOZCONFIG="${BUILD_DIR}/.mozconfig"
 
 	# Initialize MOZCONFIG
 	mozconfig_add_options_ac '' --enable-application=browser
@@ -581,40 +659,45 @@ src_configure() {
 		--enable-release \
 		--enable-system-ffi \
 		--enable-system-pixman \
-		--host="${CBUILD:-${CHOST}}" \
+		--host="${CBUILD:-${chost}}" \
 		--libdir="${EPREFIX}/usr/$(get_libdir)" \
 		--prefix="${EPREFIX}/usr" \
-		--target="${CHOST}" \
+		--target="${chost}" \
 		--without-ccache \
 		--with-intl-api \
-		--with-libclang-path="$(llvm-config --libdir)" \
 		--with-system-nspr \
 		--with-system-nss \
 		--with-system-png \
 		--with-system-zlib \
-		--with-toolchain-prefix="${CHOST}-" \
+		--with-toolchain-prefix="${chost}-" \
 		--with-unsigned-addon-scopes=app,system \
 		--x-includes="${SYSROOT}${EPREFIX}/usr/include" \
 		--x-libraries="${SYSROOT}${EPREFIX}/usr/$(get_libdir)"
 
+	# mozconfig_add_options_ac '' --with-libclang-path="$(${chost}-llvm-config --libdir)"
+	#   disabled because Gentoo doesn't support multilib python, so full cross-compile is not supported.
+
+	#   the commented above is mutually exclusive with this line below.
+	mozconfig_add_options_ac '' --with-libclang-path="$(llvm-config --libdir)"
+
 	# Set update channel
 	local update_channel=release
 	[[ -n ${MOZ_ESR} ]] && update_channel=esr
 	mozconfig_add_options_ac '' --update-channel=${update_channel}
 
-	if ! use x86 && [[ ${CHOST} != armv*h* ]] ; then
+	if ! use x86 && [[ ${chost} != armv*h* ]] ; then
 		mozconfig_add_options_ac '' --enable-rust-simd
 	fi
 
-	if [[ -s "${S}/api-google.key" ]] ; then
+	if [[ -s "${BUILD_DIR}/api-google.key" ]] ; then
 		local key_origin="Gentoo default"
-		if [[ $(cat "${S}/api-google.key" | md5sum | awk '{ print $1 }') != 709560c02f94b41f9ad2c49207be6c54 ]] ; then
+		if [[ $(cat "${BUILD_DIR}/api-google.key" | md5sum | awk '{ print $1 }') != 709560c02f94b41f9ad2c49207be6c54 ]] ; then
 			key_origin="User value"
 		fi
 
 		mozconfig_add_options_ac "${key_origin}" \
-			--with-google-location-service-api-keyfile="${S}/api-google.key" \
-			--with-google-safebrowsing-api-keyfile="${S}/api-google.key"
+			--with-google-location-service-api-keyfile="${BUILD_DIR}/api-google.key" \
+			--with-google-safebrowsing-api-keyfile="${BUILD_DIR}/api-google.key"
 	else
 		einfo "Building without Google API key ..."
 	fi
@@ -741,13 +824,13 @@ src_configure() {
 		fi
 	fi
 
-	if [[ ${CHOST} == armv*h* ]] ; then
+	if [[ ${chost} == armv*h* ]] ; then
 		mozconfig_add_options_ac 'CHOST=armv*h*' --with-float-abi=hard
 
 		if ! use system-libvpx ; then
 			sed -i \
 				-e "s|softfp|hard|" \
-				"${S}"/media/libvpx/moz.build \
+				"${BUILD_DIR}"/media/libvpx/moz.build \
 				|| die
 		fi
 	fi
@@ -809,7 +892,20 @@ src_configure() {
 	mozconfig_add_options_mk 'Gentoo default' "XARGS=${EPREFIX}/usr/bin/xargs"
 
 	# Set build dir
-	mozconfig_add_options_mk 'Gentoo default' "MOZ_OBJDIR=${BUILD_DIR}"
+	mozconfig_add_options_mk 'Gentoo default' "MOZ_OBJDIR=${BUILD_OBJ_DIR}"
+
+	if ! use jemalloc ; then
+		mozconfig_add_options_ac '-jemalloc' --disable-jemalloc
+	else
+		mozconfig_add_options_ac '+jemalloc' --enable-jemalloc
+	fi
+
+	einfo "Cross-compile: ${ABI} CFLAGS=${CFLAGS}"
+	einfo "Cross-compile: CC=${CC} CXX=${CXX}"
+	echo "export PKG_CONFIG=${chost}-pkg-config" >>${MOZCONFIG}
+	echo "export PKG_CONFIG_PATH=/usr/$(get_libdir)/pkgconfig:/usr/share/pkgconfig" >>${MOZCONFIG}
+	echo "export CROSSCOMPILE=${CROSSCOMPILE}" >>${MOZCONFIG}
+	mozconfig_add_options_ac '' --target=${chost%-*}
 
 	# Show flags we will use
 	einfo "Build CFLAGS:    ${CFLAGS}"
@@ -841,7 +937,7 @@ src_configure() {
 	./mach configure || die
 }
 
-src_compile() {
+multilib_src_compile() {
 	local virtx_cmd=
 
 	if use pgo ; then
@@ -854,22 +950,32 @@ src_compile() {
 	fi
 
 	local -x GDK_BACKEND=x11
+	local -x TARGET="${chost}"
 
 	${virtx_cmd} ./mach build --verbose \
 		|| die
 }
 
-src_install() {
+multilib_src_install() {
+	local chost=$(get_abi_CHOST ${ABI})
+	_fix_paths
+	cd "${BUILD_OBJ_DIR}" || die
 	# xpcshell is getting called during install
 	pax-mark m \
-		"${BUILD_DIR}"/dist/bin/xpcshell \
-		"${BUILD_DIR}"/dist/bin/firefox \
-		"${BUILD_DIR}"/dist/bin/plugin-container
+		"${BUILD_OBJ_DIR}"/dist/bin/xpcshell \
+		"${BUILD_OBJ_DIR}"/dist/bin/firefox \
+		"${BUILD_OBJ_DIR}"/dist/bin/plugin-container
+
+	local -x TARGET="${chost}"
+
+	cd "${BUILD_DIR}" || die
 
 	DESTDIR="${D}" ./mach install || die
 
 	# Upstream cannot ship symlink but we can (bmo#658850)
-	rm "${ED}${MOZILLA_FIVE_HOME}/${PN}-bin" || die
+	if [[ -e "${ED}${MOZILLA_FIVE_HOME}/${PN}-bin" ]] ; then
+		rm "${ED}${MOZILLA_FIVE_HOME}/${PN}-bin" || die
+	fi
 	dosym ${PN} ${MOZILLA_FIVE_HOME}/${PN}-bin
 
 	# Don't install llvm-symbolizer from sys-devel/llvm package
@@ -926,15 +1032,15 @@ src_install() {
 	# Install geckodriver
 	if use geckodriver ; then
 		einfo "Installing geckodriver into ${ED}${MOZILLA_FIVE_HOME} ..."
-		pax-mark m "${BUILD_DIR}"/dist/bin/geckodriver
+		pax-mark m "${BUILD_OBJ_DIR}"/dist/bin/geckodriver
 		exeinto "${MOZILLA_FIVE_HOME}"
-		doexe "${BUILD_DIR}"/dist/bin/geckodriver
+		doexe "${BUILD_OBJ_DIR}"/dist/bin/geckodriver
 
 		dosym ${MOZILLA_FIVE_HOME}/geckodriver /usr/bin/geckodriver
 	fi
 
 	# Install icons
-	local icon_srcdir="${S}/browser/branding/official"
+	local icon_srcdir="${BUILD_DIR}/browser/branding/official"
 	local icon_symbolic_file="${FILESDIR}/icon/firefox-symbolic.svg"
 
 	insinto /usr/share/icons/hicolor/symbolic/apps
@@ -953,12 +1059,12 @@ src_install() {
 	done
 
 	# Install menus
-	local wrapper_wayland="${PN}-wayland.sh"
-	local wrapper_x11="${PN}-x11.sh"
+	local wrapper_wayland="${PN}-${ABI}-wayland.sh"
+	local wrapper_x11="${PN}-${ABI}-x11.sh"
 	local desktop_file="${FILESDIR}/icon/${PN}-r2.desktop"
 	local display_protocols="auto X11"
 	local icon="${PN}"
-	local name="Mozilla ${MOZ_PN^}"
+	local name="Mozilla ${MOZ_PN^} (${ABI})"
 	local use_wayland="false"
 
 	if use wayland ; then
@@ -969,12 +1075,12 @@ src_install() {
 	local app_name desktop_filename display_protocol exec_command
 	for display_protocol in ${display_protocols} ; do
 		app_name="${name} on ${display_protocol}"
-		desktop_filename="${PN}-${display_protocol,,}.desktop"
+		desktop_filename="${PN}-${ABI}-${display_protocol,,}.desktop"
 
 		case ${display_protocol} in
 			Wayland)
-				exec_command="${PN}-wayland --name ${PN}-wayland"
-				newbin "${FILESDIR}/${wrapper_wayland}" ${PN}-wayland
+				exec_command="${PN}-${ABI}-wayland --name ${PN}-${ABI}-wayland"
+				newbin "${FILESDIR}/multiabi/${wrapper_wayland}" ${PN}-${ABI}-wayland
 				;;
 			X11)
 				if ! use wayland ; then
@@ -983,13 +1089,15 @@ src_install() {
 					continue
 				fi
 
-				exec_command="${PN}-x11 --name ${PN}-x11"
-				newbin "${FILESDIR}/${wrapper_x11}" ${PN}-x11
+				exec_command="${PN}-${ABI}-x11 --name ${PN}-${ABI}-x11"
+				newbin "${FILESDIR}/multiabi/${wrapper_x11}" ${PN}-${ABI}-x11
+				[ -e "/usr/bin/${PN}-x11" ] && rm /usr/bin/${PN}-x11
+				dosym /usr/bin/${PN}-${ABI}-x11 /usr/bin/${PN}-x11
 				;;
 			*)
 				app_name="${name}"
-				desktop_filename="${PN}.desktop"
-				exec_command="${PN}"
+				desktop_filename="${PN}-${ABI}.desktop"
+				exec_command="${PN}-${ABI}"
 				;;
 		esac
 
@@ -1009,19 +1117,21 @@ src_install() {
 
 	# Install generic wrapper script
 	[[ -f "${ED}/usr/bin/${PN}" ]] && rm "${ED}/usr/bin/${PN}"
-	newbin "${FILESDIR}/${PN}.sh" ${PN}
+	newbin "${FILESDIR}/multiabi/${PN}.sh" ${PN}-${ABI}
+	dosym /usr/bin/${PN}-${ABI} /usr/bin/${PN}
 
 	# Update wrapper
 	local wrapper
 	for wrapper in \
-		"${ED}/usr/bin/${PN}" \
-		"${ED}/usr/bin/${PN}-x11" \
-		"${ED}/usr/bin/${PN}-wayland" \
+		"${ED}/usr/bin/${PN}-${ABI}" \
+		"${ED}/usr/bin/${PN}-${ABI}-x11" \
+		"${ED}/usr/bin/${PN}-${ABI}-wayland" \
 	; do
 		[[ ! -f "${wrapper}" ]] && continue
 
 		sed -i \
 			-e "s:@PREFIX@:${EPREFIX}/usr:" \
+			-e "s:@LIBDIR@:$(get_libdir):" \
 			-e "s:@MOZ_FIVE_HOME@:${MOZILLA_FIVE_HOME}:" \
 			-e "s:@APULSELIB_DIR@:${apulselib}:" \
 			-e "s:@DEFAULT_WAYLAND@:${use_wayland}:" \
@@ -1117,4 +1227,17 @@ pkg_postinst() {
 		elog
 		elog "in about:config."
 	fi
+
+	elog
+	elog "By default, the /usr/bin/firefox symlink is set to the last ABI installed."
+	elog "You must change it manually if you want to run on a different default ABI."
+	elog
+	elog "Examples"
+	elog "ln -sf /usr/lib64/${PN} /usr/bin/firefox"
+	elog "ln -sf /usr/lib/${PN} /usr/bin/firefox"
+	elog "ln -sf /usr/lib32/${PN} /usr/bin/firefox"
+	elog
+	# Reported in bugid 1010527, 1646007, 1449901
+	elog "WebGL performance is suboptimal and runs at ~40 FPS.  There is currently no fix for this."
+	elog
 }
