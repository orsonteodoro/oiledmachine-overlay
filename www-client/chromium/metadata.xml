<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- only for this ebuild fork on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- originator -->
    <email>chromium@gentoo.org</email>
    <name>Chromium in Gentoo Project</name>
  </maintainer>
  <longdescription>
    Chromium is a open-source web browser

    For this ebuild fork, you can build 32 bit Chromium on 64 bit.
    Multiple ABI installation is in testing.  This will allow to use
    binary only plugins that support a major ABI and allow to
    continue to use the experimental ABI as the default.

    You need to add the following in /etc/portage/profile/package.use.force
    in order to select a non-native ABI.  Tweak below to add your masked ABI.
    ----- CUT BELOW HERE -----
www-client/chromium -abi_x86_64 -abi_x86_32 -abi_x86_x32 -abi_mips_n64 -abi_ppc_64 -abi_s390_64
    ----- CUT ABOVE HERE -----

    Per build environment variables:

    ECHROMIUM_PGO_URIS - A space delimited URIs to use per tab for the PGO tab
      creation simulation.  If you do not supply, it will use open source
      websites used websites some open source or open content.  Setting this
      will override the defaults.  Sites selected should be widely used
      and not contain untrusted content.

    References:
      CFI - https://www.chromium.org/developers/testing/control-flow-integrity
      CFI ldflags - https://clang.llvm.org/docs/ControlFlowIntegrity.html
      PartitionAlloc - https://chromium.googlesource.com/chromium/src/+/refs/heads/main/base/allocator/partition_allocator/PartitionAlloc.md
      PGO - https://blog.chromium.org/2020/08/chrome-just-got-faster-with-profile.html
      TCMalloc (circa 2007) - https://gperftools.github.io/gperftools/tcmalloc.html
      https://github.com/chromium/chromium/blob/master/build/config/sanitizers/BUILD.gn#L204
  </longdescription>
  <upstream>
    <bugs-to>https://www.chromium.org/for-testers/bug-reporting-guidelines</bugs-to>
  </upstream>
  <use>
    <flag name="clang">Uses clang and allows access to clang/llvm related
      USE flags.  Turning on clang implies ThinLTO on.</flag>
    <flag name="cfi">Compile the build with Control Flow Integrity (CFI)
      security protections to mitigate against arbitrary code execution caused
      by from memory corruption attempts from forward edge attacks from virtual
      functions.  The estimated impact is around 1% CPU overhead, around 15% or
      less code size increase.  When a violation is encountered, the program
      aborts.</flag>
    <flag name="cfi-full">
      Compile the build with mitigation against possible bad casting
      vulnerabilities in addition to forward edge attack mitigation.
      When a violation is encountered, the program aborts.
      </flag>
    <flag name="cfi-icall">
      Compile the build with bad function cast checks and non static function
      pointers checks.  When a violation is encountered, the program aborts.
      </flag>
    <flag name="component-build">Split build into more shared libraries to speed
      up linking. Mostly intended for debugging and development, NOT RECOMMENDED
      for general use.</flag>
    <flag name="hangouts">Enable support for Hangouts and features such as
      screen sharing</flag>
    <flag name="headless">Build Ozone only with headless backend, NOT
      RECOMMENDED for general use.</flag>
    <flag name="libcmalloc">Use the allocator provided by the libc
      implementation.  With glibc malloc (ptmalloc2 based) memory reuse is
      wastefully duplicated between threaded arenas especially for large data.
      However, the glibc allocator is widely used and tested.</flag>
    <flag name="js-type-check">Enable JavaScript type-checking for Chrome's web
      technology-based UI. Requires Java.</flag>
    <flag name="official">Enable the official build instead of developer
      build.</flag>
    <flag name="partitionalloc">Use PartitionAlloc as the default allocator and
      replacement to TCMalloc.  It's designed for security and lower latency,
      and benefits the most from memory use effiency.  It is actively being
      improved which may present newer bugs.  It's the default in 92 and later.
      </flag>
    <flag name="pic">Disable optimized assembly code that is not PIC
      friendly</flag>
    <flag name="pgo">Builds with Profile Guided Optimizations to improve
      -- page loads, input reponsiveness, web reponsiveness -- by ~10% or
       less.  Builds only once with a pregenerated PGO profile.</flag>
    <flag name="pgo-native">Builds with 2-step Profile Guided
      Optimizations.  Builds PGO for the native customized environment.</flag>
    <flag name="pgo-web">Allows PGO simulation step visit websites and image
      infrastructure for purposes of attempting to increase function
      signature hits related to tab usage so they do not get demoted to
      cold sections.</flag>
    <flag name="proprietary-codecs">Enable codecs for patent-encumbered audio
       and video formats.</flag>
    <flag name="screencast">Enable support for remote desktop and screen cast
      using <pkg>media-video/pipewire</pkg></flag>
    <flag name="suid">Build the SUID sandbox, which is only needed on
      CONFIG_USER_NS=n kernels</flag>
    <flag name="system-ffmpeg">Use system ffmpeg instead of the bundled
      one</flag>
    <flag name="system-icu">Use system icu instead of the bundled one</flag>
    <flag name="tcmalloc">Use TCMalloc designed for optimizing memory use and
      reuse.  Default in 91.</flag>
    <flag name="widevine">Unsupported closed-source DRM capability (required for
      premium web content)</flag>
  </use>
</pkgmetadata>
