<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- only for this ebuild fork on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>chromium@gentoo.org</email>
    <name>Chromium in Gentoo Project</name>
  </maintainer>
  <longdescription>
    Chromium is a open-source web browser

    For this ebuild fork, you can build 32 bit Chromium on 64 bit.  Multiple ABI
    installation is in testing.  This will allow to use binary only plugins that
    support a major ABI and allow to continue to use the experimental ABI as the
    default.

    You need to add the following in /etc/portage/profile/package.use.force
    in order to select a non-native ABI.  Tweak below to add your masked ABI.
    ----- CUT BELOW HERE -----
www-client/chromium -abi_x86_64 -abi_x86_32 -abi_x86_x32 -abi_mips_n64 -abi_ppc_64 -abi_s390_64
    ----- CUT ABOVE HERE -----


    Per-package environment variables:

    FORCE_LLVM_SLOT - Manually choose the LLVM slot to build with

    See https://wiki.gentoo.org/wiki//etc/portage/package.env to set this up


    USE flag quality status:

      cfi - production ready
      thinlto-opt - works if enough total memory
      official - production ready previously but undergoing retesting
      pgo - production ready
      pgo-full - incomplete (undergoing rework for manual training)
      shadowcallstack - needs testing... not tested due to lack of hardware
        (report back if it works)

    Event based Full PGO (EPGO)

    Event based Full PGO (i.e. 1 step PGO) is not complete in this ebuild fork
    and is in development in the ebuild level.  PGO on *average* is 10%
    performance benefit relative to -O3.  (At the best case [or outlier cases],
    PGO can be +40% benefit but usually in atypical scenarios some of which are
    related to throughput.)
    

    If you choose to do the distro's Full PGO, it will double compilation time.
    What this means is if you built Chromium in 36 hrs expect it optimized in
    72 hours plus training time.  This implementation just does it passively,
    but the time to optimize is just 36 hours with some weeks we can skip
    instrumentation step.  When active training, the training step may take
    +20 minutes depending on how it was implemented.

    Steps required

      Just emerge as normal

    Most packagers would use test suites or just basic tasks.  When you do
    manual training, you can actually use it in the gaming context or your own
    personal situations.  An instrumented build doesn't typically feel noticably
    slower actually.

    It is strongly recommended to skip PGO because the sub seconds gains are not
    noticable for most people or use the prebuilt profile to cut PGOing time in
    1.x/2 time every single installation.  The blog entry below also mentions
    the 10% benefit consistent with ~10% on average observed by others.

    The blog entry below links to 1.3 seconds (FCP)!  So 10% of 1300 ms is
    130ms (or .13s) in reduction in delay.  Human reaction time is 250 ms.

    This ebuild fork version of PGO will allow reuse of generated profiles for
    the same BUILD in major.minor.build.patch.  The prebuilt profile is often
    reused between patch versions.

    Most ebuild developers use 3 step PGO in one emerge.  Every time a package
    is emerged, the standard PGO ebuild always runs 3 steps - instrument, train,
    rebuild on every emerge.   In this implementation, we run always 1 step but
    we schedule based on events.  When a version change happens we instrument.
    When the right combo is present (profile, same compiler, same build number),
    we use optimized rebuild.  The idea is to maximize enjoyment of the product
    but that can only happen when we actually use the product.  Adding more
    build time decreases enjoyment.  The training step is done passively, so
    can enjoy and train at the same time uninterrupted.

    Diagram

                week 1        week 2     week 3           week 4
                  i             i           i              i
Distro PGO        t             t           t              t
                  o             o           o              o
 vs

EPGO              i      t      o           i              o

 vs

Prebuilt    it    o             o           o              o

             X.Y.5005.61  X.Y.5005.115  X.Y.5060.53   X.Y.5060.134 

    Key: i = instrument, t = train, o = optimised rebuild

    Usually, they're 2-3 releases per same build number.


Draft training with epgo

# Run trainer in non-root
#!/bin/bash
trainer() {
	# Run trainer as non-root

	timeout 120 chromium url_to_search_engine
	chromium url_to_social_media
	chromium url_to_video_site
	chromium url_to_streaming_with_running_video
	chromium url_to_live_stream_video
	chromium url_to_radio_station
	chromium url_to_games

	...
	timeout 30 chromium urlN

	# Do multi tabs also
}
trainer
## DONE

# Run this script as non root
#!/bin/bash
sudo emerge -vuDN "chromium[epgo,-ebolt]" # PGI
trainer 
sudo emerge -1vO "chromium[epgo,ebolt]" # PGO, bolt_pgi
trainer
sudo emerge --config "chromium[epgo,ebolt]" # PGO + bolt_pgo
## DONE


    References:
      --lto-O2 is too large - https://github.com/chromium/chromium/commit/da072d13b2a1cc8459c29aa4e52584a4491a4ad6
      CFI - https://www.chromium.org/developers/testing/control-flow-integrity
      CFI ldflags - https://clang.llvm.org/docs/ControlFlowIntegrity.html
      PartitionAlloc - https://chromium.googlesource.com/chromium/src/+/refs/heads/main/base/allocator/partition_allocator/PartitionAlloc.md
      PGO - https://blog.chromium.org/2020/08/chrome-just-got-faster-with-profile.html
      https://github.com/chromium/chromium/blob/master/build/config/sanitizers/BUILD.gn#L204
      [1] https://github.com/chromium/chromium/tree/master/tools/perf/benchmarks
      [2] https://chromium.googlesource.com/catapult/+/HEAD/telemetry/README.md
  </longdescription>
  <upstream>
    <bugs-to>https://www.chromium.org/for-testers/bug-reporting-guidelines</bugs-to>
  </upstream>
  <use>
    <flag name="branch-protection">
      Enables branch protection features (available on armv8.5 [arm64] and above
      only) which are enabled by default.  If you disable the official USE flag,
      you may customize it via CFLAGS with your preference prioritized more than
      the official settings.
    </flag>
    <flag name="bundled-libcxx">
      Build against the internal libc++ for proper cfi-icall and cfi-icast
      protection.  This also builds libcxx with CFI, Full RELRO, noexecstack,
      SSP security features.  This is the upstream default.
    </flag>
    <flag name="cfi">
      cfi-cast:
      Compile the build with mitigation against possible bad casting
      vulnerabilities.  When a violation is encountered, the program aborts.

      cfi-icall:
      Compile the build with bad function cast checks and non static function
      pointers checks.  When a violation is encountered, the program aborts.

      cfi-vcall:
      Compile the build with Clang Control Flow Integrity (CFI) security
      protections to mitigate against arbitrary code execution caused by from
      memory corruption attempts from forward edge attacks from virtual
      functions.  For backward edge protection see shadowcallstack USE flag.
      The estimated impact is around 1% CPU overhead, around 15% or less code
      size increase.  When a violation is encountered, the program aborts.

      The abort is a way to halt more dangerous code execution.

      shadow-call-stack:
      Allows for backward edge protections against return address overwrites
      that could lead to arbitrary code execution.  (Experimental, arm64 only)
      Use -fsanitize=shadow-call-stack to activate this protection.

      Arm64 users, see also the branch-protection USE flag.

      Additional ebuild per-package environment variables if USE=-official:

        USE_CFI_ICALL - 1 to enable, 0 to disable cfi-icall
        USE_CFI_CAST - 1 to enable, 0 to disable cfi-cast

      For the official build settings, it is fixed based on the ABI.

      For x86-64 it is cfi-vcall=true, cfi-icall=true, cfi-cast=false
      All other microarches are all false, but you may customize via the
      -fsanitize= compiler flag with the cfi USE flag.
    </flag>
    <flag name="component-build">
      Split build into more shared libraries to speed up linking. Mostly
      intended for debugging and development, NOT RECOMMENDED for general use.
    </flag>
    <flag name="cr_pgo_trainer_custom">
      Allow for customized PGO training.   You must supply your local
      implementation using the Telemetry testing framework as a per-package
      patch and the test must be named custom.sh placed in ${S}.
    </flag>
    <flag name="ebolt">
      Use the event based BOLT to optimize the package. (EXPERIMENTAL)
      This will optimize the layout of the program to make better utilization
      of cache use and branch prediction.  BOLT benefits the most for
      programs with 100+ MB in size.
    </flag>
    <flag name="epgo">
      Build using the Event Based PGO (Profile Guided Optimization) strategy
    </flag>
    <flag name="hangouts">
      Enable support for Hangouts and features such as screen sharing
    </flag>
    <flag name="headless">
      Build Ozone only with headless backend, NOT RECOMMENDED for general use.
    </flag>
    <flag name="js-type-check">
      Enable JavaScript type-checking for Chrome's web technology-based UI.
      Requires Java.
    </flag>
    <flag name="libcmalloc">
      Use the allocator provided by the libc implementation.  With glibc malloc
      (ptmalloc2 based) memory reuse is wastefully duplicated between threaded
      arenas especially for large data. However, the glibc allocator is widely
      used and tested.
    </flag>
    <flag name="official">
      Enable the use of official build settings [similar to the official bin but
      without branding] instead of the developer build settings.  Enables
      security hardending (for both the browser and internal bundled third party
      dependencies built with the stronger CFI Basic mode with cfi-vcall and
      cfi-icall [both enabled on x86_64], Full RELRO, noexecstack, PIE, SSP),
      PGO, debug symbols level 2.  Disables use of third party ebuilds (without
      CFI and PGO) and uses the internal bundled hardened and PGOed version of
      those libraries with static linkage.  Implies default features and
      proprietary-codecs.
    </flag>
    <flag name="partitionalloc">
      Use PartitionAlloc as the default allocator.  It's designed for security
      and lower latency, and benefits the most from memory use effiency.  It is
      actively being improved which may present newer bugs.  It's the default
      in 92 and later.
    </flag>
    <flag name="pic">
      Disable optimized assembly code that is not PIC friendly
    </flag>
    <flag name="pgo">
      Builds in one step with Profile Guided Optimizations to improve -- page
      loads, input reponsiveness, web reponsiveness -- by ~10% or less, using a
      pregenerated PGO profile.
    </flag>
    <flag name="pgo-full">
      Builds with the 3-step Profile Guided Optimization, natively using
      upstream's trainer(s).  This will double the build times.
    </flag>
    <flag name="pre-check-llvm">
      Disables LLVM commit checks.  It is not recommended to disable the commit
      tests that notify commit bumps related to security or bugs.
    </flag>
    <flag name="pre-check-vaapi">
      Disables non-portable native VAAPI checks.  It is not recommended to
      disable these checks because they can expose bugs.
    </flag>
    <flag name="proprietary-codecs">
      Enables use of non-free patent-encumbered audio and video formats, and
      network protocols.  Upstream build files associate AAC, H264, and others
      as proprietary.
    </flag>
    <flag name="proprietary-codecs-disable">
      (USE FLAG IN DEVELOPMENT)

      If enabled, it will disable codecs or network protocols with a patent
      status that is not free in this ebuild fork.

      With this flag enabled, this may break dependencies that assume previous
      unpatched behavior.

      In general a codec is allowed to be built into disabled proprietary-codecs
      build if the patent status is one of the following:

        (1) Expired patent, typically 20 years.  (e.g. MP3)
        (2) Similar perpetual royalty-free freedoms like the
            Grant of Patent License in the Apache 2.0. (e.g. libvpx, libaom)

      AND

        The code is free with a widely used compatible open source license.

      AND CONDITIONALLY

        The codec may allowed in this ebuild fork if it doesn't require a
        non-free developer license in a case-by-case basis.

    </flag>
    <flag name="proprietary-codecs-disable-nc-developer">
      (USE FLAG IN DEVELOPMENT)

      If enabled, it will disable codecs or network protocols with a patent
      status that is not free in this ebuild fork for codec developers for
      non-commericial use.

      With this flag enabled, this may break dependencies that assume previous
      unpatched behavior.

      In general a codec is allowed to be built into disabled proprietary-codecs
      build if the patent status is one of the following:

        (1) Expired patent, typically 20 years.  (e.g. MP3)
        (2) Similar perpetual royalty-free freedoms like the
            Grant of Patent License in the Apache 2.0. (e.g. libvpx, libaom)

      AND

        The code is free with a widely used compatible open source license.

      AND CONDITIONALLY

        The codec may allowed in this ebuild fork if it doesn't require a
        non-free developer license in a case-by-case basis.

    </flag>
    <flag name="proprietary-codecs-disable-nc-user">
      (USE FLAG IN DEVELOPMENT)

      If enabled, it will disable codecs or network protocols with a patent
      status that is not free in this ebuild fork for non codec developers
      for non-commercial use.

      With this flag enabled, this may break dependencies that assume previous
      unpatched behavior.

      In general a codec is allowed to be built into disabled proprietary-codecs
      build if the patent status is one of the following:

        (1) Expired patent, typically 20 years.  (e.g. MP3)
        (2) Similar perpetual royalty-free freedoms like the
            Grant of Patent License in the Apache 2.0. (e.g. libvpx, libaom)

      AND

        The code is free with a widely used compatible open source license.

      AND CONDITIONALLY

        The codec may allowed in this ebuild fork if it doesn't require a
        non-free developer license in a case-by-case basis.

    </flag>
    <flag name="screencast">
      Enable support for remote desktop and screen cast using
      <pkg>media-video/pipewire</pkg>
    </flag>
    <flag name="suid">
      Build the SUID sandbox, which is only needed on CONFIG_USER_NS=n kernels
    </flag>
    <flag name="system-libstdcxx">
      Build against the system's libstdc++ for compatibility reasons which
      is protected with CET (if supported by CPU, similar to CFI).  This could
      increase the attack surface and possibly an open door for arbitary code
      execution for untrusted assets.  It is not recommended for security
      reasons but it is the original ebuild maintainers and this distro's
      preference.  This setting is only allowed for systemwide GCC LTO due
      to IR (Intermediate Representation) compatibility or disabled LTO
      systemwide.
    </flag>
    <flag name="system-ffmpeg">
      Use system ffmpeg instead of the bundled one
    </flag>
    <flag name="system-icu">
      Use system icu instead of the bundled one
    </flag>
    <flag name="thinlto-opt">
      Enables selective ThinLTO -O2 optimizations for the browser binary and
      other targets while others use the default --lto-O0.  This optimization
      is not enabled by default upstream due to increased binary size concerns.
      Building may required 12 GiB total memory minimal for dedicated compile
      only machines, but 16 GiB total memory recommended for multitasking
      builder machines.
    </flag>
    <flag name="vaapi">
      Add support for hardware accelerated JPEG image decoding, hardware
      accelerated video decoding playback, and hardware accelerated video
      encoding for WebRTC
    </flag>
    <flag name="weston">
      Prefer weston to generate wayland PGO profile.  This option is mutually
      exclusive to X windowing system PGO profile generation
    </flag>
    <flag name="widevine">
      Unsupported closed-source DRM capability (required for premium web
      content).
    </flag>
    <flag name="rN">
      (FOR INTERNAL USE ONLY) Bumps the revision through the USE flag instead of
      file name to reuse previous ccache runs.
    </flag>

    <!-- Codecs and network protocols -->
    <flag name="dav1d">
      Add CPU based AV1 video decode support
    </flag>
    <flag name="libaom">
      Add CPU based libaom encode support
    </flag>
    <flag name="opus">
      Add CPU based Opus audio codec support
    </flag>
    <flag name="vpx">
      Add CPU based libvpx video codec support
    </flag>
    <flag name="vaapi-hvec">
      Add GPU accelerated h265 video decode support
    </flag>
  </use>
</pkgmetadata>
