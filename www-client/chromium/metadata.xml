<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- only for this ebuild fork on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>chromium@gentoo.org</email>
    <name>Chromium in Gentoo Project</name>
  </maintainer>
  <longdescription>
    Chromium is a open-source web browser

    For this ebuild fork, you can build 32 bit Chromium on 64 bit.  Multiple ABI
    installation is in testing.  This will allow to use binary only plugins that
    support a major ABI and allow to continue to use the experimental ABI as the
    default.

    You need to add the following in /etc/portage/profile/package.use.force
    in order to select a non-native ABI.  Tweak below to add your masked ABI.
    ----- CUT BELOW HERE -----
www-client/chromium -abi_x86_64 -abi_x86_32 -abi_x86_x32 -abi_mips_n64 -abi_ppc_64 -abi_s390_64
    ----- CUT ABOVE HERE -----

    USE flag quality status:

      cfi - production ready
      cfi-iuse - production ready
      lto-opt - works if enough total memory
      official - production ready previously but undergoing retesting
      pgo - production ready
      pgo-full - incomplete
      shadowcallstack - needs testing... (report back if it works)


    Full PGO

    Full PGO (i.e. 3 step PGO) is not complete and is in development in the
    ebuild level.  The trainer portion is blocking completion.

    Users can set the CR_PGO_TRAINERS USE flags to generate PGO profiles for
    either mobile or desktop.  For more details see the component and
    documentation fields in the files contained in [1].  Certain benchmarks will
    focus on parts of the web browser.  Adding more tests will increase testing
    time.  Some tests may take 1-20 minute(s) or more to complete.  Customizers
    may supply a local custom patch using Telemetry [2] named custom.sh placed
    in ${S} with the cr_pgo_trainers_custom USE flag to extend the PGO training
    step.

    The abspath to CR_PGO_VIDEO0 to a 60 fps, 4k, 2 min video should be filled
    out as a per-package envvar if you are using the
    cr_pgo_trainers_media_desktop or cr_pgo_trainers_media_mobile USE flag(s).

    The mobile benchmarks (which could be candidate as PGO trainers) are
    used mostly for benchmarking smartphones.

    References:
      --lto-O2 is too large - https://github.com/chromium/chromium/commit/da072d13b2a1cc8459c29aa4e52584a4491a4ad6
      CFI - https://www.chromium.org/developers/testing/control-flow-integrity
      CFI ldflags - https://clang.llvm.org/docs/ControlFlowIntegrity.html
      PartitionAlloc - https://chromium.googlesource.com/chromium/src/+/refs/heads/main/base/allocator/partition_allocator/PartitionAlloc.md
      PGO - https://blog.chromium.org/2020/08/chrome-just-got-faster-with-profile.html
      TCMalloc (circa 2007) - https://gperftools.github.io/gperftools/tcmalloc.html
      https://github.com/chromium/chromium/blob/master/build/config/sanitizers/BUILD.gn#L204
      [1] https://github.com/chromium/chromium/tree/master/tools/perf/benchmarks
      [2] https://chromium.googlesource.com/catapult/+/HEAD/telemetry/README.md
  </longdescription>
  <upstream>
    <bugs-to>https://www.chromium.org/for-testers/bug-reporting-guidelines</bugs-to>
  </upstream>
  <use>
    <flag name="bundled-libcxx">
      Build against the internal libc++ for proper cfi-icall and cfi-icast
      protection.  This also builds libcxx with CFI, Full RELRO, noexecstack,
      SSP security features.  This is the upstream default.
    <flag name="clang">Uses clang and allows access to clang or LLVM related
      USE flags.  Turning on clang implies ThinLTO on.  (See the lto-opt
      USE flag description for memory requirements if out-of-memory (OOM)
      problems.)  Support for a newer LLVM version is possible only if
      the official USE flag is disabled.</flag>
    <flag name="cfi-cast">
      Compile the build with mitigation against possible bad casting
      vulnerabilities in addition to forward edge attack mitigation.
      When a violation is encountered, the program aborts.  Static linkage
      required for cfi third party packages.
      </flag>
    <flag name="cfi-icall">
      Compile the build with bad function cast checks and non static function
      pointers checks.  When a violation is encountered, the program aborts.
      Static linkage required for cfi third party packages.
      </flag>
    <flag name="cfi-vcall">Compile the build with Control Flow Integrity (CFI)
      security protections to mitigate against arbitrary code execution caused
      by from memory corruption attempts from forward edge attacks from virtual
      functions.  The estimated impact is around 1% CPU overhead, around 15% or
      less code size increase.  When a violation is encountered, the program
      aborts.  Static linkage required for cfi third party packages.</flag>
    <flag name="component-build">Split build into more shared libraries to speed
      up linking. Mostly intended for debugging and development, NOT RECOMMENDED
      for general use.</flag>
    <flag name="cr_pgo_trainer_custom">Allow for customized PGO training.
      You must supply your local implementation using the Telemetry testing
      framework as a per-package patch and the test must be named custom.sh
      placed in ${S}.</flag>
    <flag name="hangouts">Enable support for Hangouts and features such as
      screen sharing</flag>
    <flag name="headless">Build Ozone only with headless backend, NOT
      RECOMMENDED for general use.</flag>
    <flag name="js-type-check">Enable JavaScript type-checking for Chrome's web
      technology-based UI. Requires Java.</flag>
    <flag name="libcmalloc">Use the allocator provided by the libc
      implementation.  With glibc malloc (ptmalloc2 based) memory reuse is
      wastefully duplicated between threaded arenas especially for large data.
      However, the glibc allocator is widely used and tested.</flag>
    <flag name="lto-opt">Enables selective ThinLTO -O2 optimizations for the
      browser binary and other targets while others use the default --lto-O0.
      This optimization is not enabled by default upstream due to increased
      binary size concerns.  Building may required 12 GiB total memory
      minimal for dedicated builds, 16 GiB total memory recommended for
      multitasking, meaning add more swap space.</flag>
    <flag name="branch-protection-standard">Enables branch protection features
      (available on armv8.3 and above only)</flag>
    <flag name="official">Enable the official build settings instead of the
      developer build.  Enables security hardending (for both the browser and
      internal bundled third party dependencies built with cfi and cfi-icall
      [both enabled on x86_64], Full RELRO, noexecstac, PIE, SSP), PGO, debug
      symbols level 2.  Disables use of third party ebuilds (without CFI and
      PGO) and uses the internal bundled hardened and PGOed version with static
      linkage.</flag>
    <flag name="partitionalloc">Use PartitionAlloc as the default allocator and
      replacement to TCMalloc.  It's designed for security and lower latency,
      and benefits the most from memory use effiency.  It is actively being
      improved which may present newer bugs.  It's the default in 92 and later.
      </flag>
    <flag name="pic">Disable optimized assembly code that is not PIC
      friendly</flag>
    <flag name="pgo">Builds with Profile Guided Optimizations to improve
      -- page loads, input reponsiveness, web reponsiveness -- by ~10% or less.
      Builds only once with a pregenerated PGO profile.</flag>
    <flag name="pgo-full">Builds with the 3-step Profile Guided Optimization,
      natively.  This will double the build times.  Uses the performance test
      suite to generate the PGO profile.</flag>
    <flag name="proprietary-codecs">Enables use of patent-encumbered audio and
      video formats.  Build flags associate AAC, H264, and others as
      proprietary</flag>
    <flag name="shadowcallstack">Allow for backward edge protections against
      return address overwrites that could lead to arbitrary code
      execution.  (Experimental, arm64 only)</flag>
    <flag name="screencast">Enable support for remote desktop and screen cast
      using <pkg>media-video/pipewire</pkg></flag>
    <flag name="suid">Build the SUID sandbox, which is only needed on
      CONFIG_USER_NS=n kernels</flag>
    <flag name="system-libstdcxx">
      Build against the system's libstdc++ for compatibility reasons which
      is only protected with CET (if supported by CPU, similar to CFI), and
      partial RELRO.  This could increase the attack surface and possibly
      an open door for arbitary code execution for untrusted assets.  It is not
      recommended for security reasons but it is the original ebuild maintainers
      and this distro's preference.</flag>
    <flag name="system-libcxx">
      Build against the system's libc++ instead of the system default libstdc++.
      This option is not recommended because there is no protections if you
      use the ebuild from the distro's overlay.  Use the one in the
      oiledmachine-overlay instead which allows to apply cfi-vcall, Full RELRO,
      noexecstack, SSP.</flag>
    <flag name="system-ffmpeg">Use system ffmpeg instead of the bundled
      one</flag>
    <flag name="system-icu">Use system icu instead of the bundled one</flag>
    <flag name="tcmalloc">Use TCMalloc designed for optimizing memory use and
      reuse.  Default in 91.</flag>
    <flag name="vaapi">Add support for hardware accelerated JPEG image decoding,
      and video decoding playback, and hardware accelerated video encoding for
      WebRTC</flag>
    <flag name="weston">Prefer weston to generate wayland PGO profile.  This
      option is mutually exclusive to X windowing system PGO profile
      generation</flag>
    <flag name="widevine">Unsupported closed-source DRM capability (required for
      premium web content)</flag>
  </use>
</pkgmetadata>
