<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- only for this ebuild fork on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- ebuild originator -->
    <email>chromium@gentoo.org</email>
    <name>Chromium in Gentoo Project</name>
  </maintainer>
  <longdescription>
    Chromium is a open-source web browser

    For this ebuild fork, you can build 32 bit Chromium on 64 bit.  Multiple ABI
    installation is in testing.  This will allow to use binary only plugins that
    support a major ABI and allow to continue to use the experimental ABI as the
    default.

    You need to add the following in /etc/portage/profile/package.use.force
    in order to select a non-native ABI.  Tweak below to add your masked ABI.
    ----- CUT BELOW HERE -----
www-client/chromium -abi_x86_64 -abi_x86_32 -abi_x86_x32 -abi_mips_n64 -abi_ppc_64 -abi_s390_64
    ----- CUT ABOVE HERE -----


    Per-package environment variables:

    FORCE_LLVM_SLOT - Manually choose the LLVM slot to build with

    See https://wiki.gentoo.org/wiki//etc/portage/package.env to set this up


    USE flag quality status:

      cfi - production ready
      cfi-iuse - production ready
      lto-opt - works if enough total memory
      official - production ready previously but undergoing retesting
      pgo - production ready
      pgo-full - incomplete (undergoing rework for manual training)
      shadowcallstack - needs testing... not tested due to lack of hardware
        (report back if it works)


    Full PGO

    Full PGO (i.e. 3 step PGO) is not complete in this ebuild fork and is in
    development in the ebuild level.  PGO on *average* is 10% performance
    benefit relative to -O3.  (At the best case [or outlier cases], PGO can be
    +40% benefit but usually in atypical scenarios.)

    If you choose to do Full PGO, it will double compilation time.  What this
    means is if you built Chromium in 36 hrs expect it optimized in 72 hours
    plus training time.

    Steps required

      1 build browser as an self recording measuring instrument (USE=-pgo-start)
      2 manually train*
      3 rebuild as optimized (USE=-pgo-finish)

    * When you manually train, just use the web browser as you normally would
    use it.  You may use benchmark suite but may produce a performance
    regression.  For this ebuild fork, it was decided to go with manual
    training so that proper profiling can be done considering possibly
    bottlenecks near or in the disabled coded paths as a consequence of running
    with software rendering (xvfb) such as side affects or code skipping as
    disabled rendering or drawing due to hints and changes in this different
    configuration.

    For training, it is recommended instead to use it usually the way you would
    use it for or use a replay script via selenium to maybe go to a video
    streaming service and then play a video.  But the script should reflect
    typical use or it may introduce a performance regression.  Most packagers
    would use a test suites or just basic runs.  When you do manual training,
    you can actually use it in the gaming context.  An instrumented build
    doesn't typically feel noticably slower actually.

    It is strongly recommended to skip PGO because the sub seconds gains are not
    noticable for most people or use the prebuilt profile to cut PGOing time in
    1.x/2 time every single installation.  The blog entry below also mentions
    the 10% benefit consistent with ~10% on average observed by others.

    The blog entry below links to 1.3 seconds (FCP)!  So 10% of 1300 ms is
    130ms (or .13s) in reduction in delay.  Human reaction time is 250 ms.

    This ebuild fork version of PGO will allow reuse of generated profiles for
    the same BUILD in major.minor.build.patch, but may allow to select to reuse
    PGO profiles based on either same major.minor, BUILD, reuse profile by
    point release, or always start from scratch.   The prebuilt profile is
    often reused between patch versions.


    References:
      --lto-O2 is too large - https://github.com/chromium/chromium/commit/da072d13b2a1cc8459c29aa4e52584a4491a4ad6
      CFI - https://www.chromium.org/developers/testing/control-flow-integrity
      CFI ldflags - https://clang.llvm.org/docs/ControlFlowIntegrity.html
      PartitionAlloc - https://chromium.googlesource.com/chromium/src/+/refs/heads/main/base/allocator/partition_allocator/PartitionAlloc.md
      PGO - https://blog.chromium.org/2020/08/chrome-just-got-faster-with-profile.html
      https://github.com/chromium/chromium/blob/master/build/config/sanitizers/BUILD.gn#L204
      [1] https://github.com/chromium/chromium/tree/master/tools/perf/benchmarks
      [2] https://chromium.googlesource.com/catapult/+/HEAD/telemetry/README.md
  </longdescription>
  <upstream>
    <bugs-to>https://www.chromium.org/for-testers/bug-reporting-guidelines</bugs-to>
  </upstream>
  <use>
    <flag name="branch-protection-standard">
      Enables branch protection features (available on armv8.3 and above only)
    </flag>
    <flag name="bundled-libcxx">
      Build against the internal libc++ for proper cfi-icall and cfi-icast
      protection.  This also builds libcxx with CFI, Full RELRO, noexecstack,
      SSP security features.  This is the upstream default.
    </flag>
    <flag name="clang">
      Uses Clang and allows access to Clang or LLVM related USE flags.  Turning
      on clang implies ThinLTO on.  (See the lto-opt USE flag description for
      memory requirements if out-of-memory (OOM) problems.)
    </flag>
    <flag name="cfi-cast">
      Compile the build with mitigation against possible bad casting
      vulnerabilities.  When a violation is encountered, the program aborts.
    </flag>
    <flag name="cfi-icall">
      Compile the build with bad function cast checks and non static function
      pointers checks.  When a violation is encountered, the program aborts.
    </flag>
    <flag name="cfi-vcall">
      Compile the build with Clang Control Flow Integrity (CFI) security
      protections to mitigate against arbitrary code execution caused by from
      memory corruption attempts from forward edge attacks from virtual
      functions.  For backward edge protection see shadowcallstack USE flag.
      The estimated impact is around 1% CPU overhead, around 15% or less code
      size increase.  When a violation is encountered, the program aborts.
    </flag>
    <flag name="component-build">
      Split build into more shared libraries to speed up linking. Mostly
      intended for debugging and development, NOT RECOMMENDED for general use.
    </flag>
    <flag name="cr_pgo_trainer_custom">
      Allow for customized PGO training.   You must supply your local
      implementation using the Telemetry testing framework as a per-package
      patch and the test must be named custom.sh placed in ${S}.
    </flag>
    <flag name="hangouts">
      Enable support for Hangouts and features such as screen sharing
    </flag>
    <flag name="headless">
      Build Ozone only with headless backend, NOT RECOMMENDED for general use.
    </flag>
    <flag name="js-type-check">
      Enable JavaScript type-checking for Chrome's web technology-based UI.
      Requires Java.
    </flag>
    <flag name="libcmalloc">
      Use the allocator provided by the libc implementation.  With glibc malloc
      (ptmalloc2 based) memory reuse is wastefully duplicated between threaded
      arenas especially for large data. However, the glibc allocator is widely
      used and tested.
    </flag>
    <flag name="lto-opt">
      Enables selective ThinLTO -O2 optimizations for the browser binary and
      other targets while others use the default --lto-O0.  This optimization
      is not enabled by default upstream due to increased binary size concerns.
      Building may required 12 GiB total memory minimal for dedicated compile
      only machines, but 16 GiB total memory recommended for multitasking
      builder machines.
    </flag>
    <flag name="official">
      Enable the use of official build settings instead of the developer build
      settings.  Enables security hardending (for both the browser and internal
      bundled third party dependencies built with the stronger CFI Basic mode
      with cfi-vcall and cfi-icall [both enabled on x86_64], Full RELRO,
      noexecstack, PIE, SSP), PGO, debug symbols level 2.  Disables use of
      third party ebuilds (without CFI and PGO) and uses the internal bundled
      hardened and PGOed version of those libraries with static linkage.
    </flag>
    <flag name="partitionalloc">
      Use PartitionAlloc as the default allocator.  It's designed for security
      and lower latency, and benefits the most from memory use effiency.  It is
      actively being improved which may present newer bugs.  It's the default
      in 92 and later.
    </flag>
    <flag name="pic">
      Disable optimized assembly code that is not PIC friendly
    </flag>
    <flag name="pgo">
      Builds in one step with Profile Guided Optimizations to improve -- page
      loads, input reponsiveness, web reponsiveness -- by ~10% or less, using a
      pregenerated PGO profile.
    </flag>
    <flag name="pgo-full">
      Builds with the 3-step Profile Guided Optimization, natively using
      upstream's trainer(s).  This will double the build times.
    </flag>
    <flag name="pre-check-llvm">
      Disables LLVM commit checks.  It is not recommended to disable the commit
      tests that notify commit bumps related to security or bugs.
    </flag>
    <flag name="pre-check-vaapi">
      Disables non-portable native VAAPI checks.  It is not recommended to
      disable these checks because they can expose bugs.
    </flag>
    <flag name="proprietary-codecs">
      Enables use of patent-encumbered audio and video formats.  Build flags
      associate AAC, H264, and others as proprietary
    </flag>
    <flag name="shadowcallstack">
      Allow for backward edge protections against return address overwrites that
      could lead to arbitrary code execution.  (Experimental, arm64 only)
    </flag>
    <flag name="screencast">
      Enable support for remote desktop and screen cast using
      <pkg>media-video/pipewire</pkg>
    </flag>
    <flag name="suid">
      Build the SUID sandbox, which is only needed on CONFIG_USER_NS=n kernels
    </flag>
    <flag name="system-libstdcxx">
      Build against the system's libstdc++ for compatibility reasons which
      is protected with CET (if supported by CPU, similar to CFI).  This could
      increase the attack surface and possibly an open door for arbitary code
      execution for untrusted assets.  It is not recommended for security
      reasons but it is the original ebuild maintainers and this distro's
      preference.  This setting is only allowed for systemwide GCC LTO due
      to IR (Intermediate Representation) compatibility or disabled LTO
      systemwide.
    </flag>
    <flag name="system-ffmpeg">
      Use system ffmpeg instead of the bundled one
    </flag>
    <flag name="system-icu">
      Use system icu instead of the bundled one
    </flag>
    <flag name="vaapi">
      Add support for hardware accelerated JPEG image decoding, and video
      decoding playback, and hardware accelerated video encoding for WebRTC
    </flag>
    <flag name="weston">
      Prefer weston to generate wayland PGO profile.  This option is mutually
      exclusive to X windowing system PGO profile generation
    </flag>
    <flag name="widevine">
      Unsupported closed-source DRM capability (required for premium web
      content).
    </flag>
    <flag name="rN">
      (FOR INTERNAL USE ONLY) Bumps the revision through the USE flag instead of
      file name to reuse previous ccache runs.
    </flag>
  </use>
</pkgmetadata>
