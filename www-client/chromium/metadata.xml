<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE pkgmetadata SYSTEM "http://www.gentoo.org/dtd/metadata.dtd">
<pkgmetadata>
  <maintainer type="person">
    <!-- Ebuild on the oiledmachine-overlay -->
    <email>orsonteodoro@hotmail.com</email>
    <name>Orson Teodoro</name>
  </maintainer>
  <maintainer type="project">
    <!-- Ebuild originator -->
    <email>chromium@gentoo.org</email>
    <name>Chromium in Gentoo Project</name>
  </maintainer>
  <maintainer type="person">
    <!-- Distro ebuild contributor -->
    <email>kangie@gentoo.org</email>
    <name>Matt Jolly</name>
  </maintainer>
  <!--

    oiledmachine-overlay notes:

    Chromium is a open-source web browser.

    For this ebuild fork, you can build 32 bit Chromium on 64 bit.  Multiple ABI
    installation is in testing.  This will allow to use binary only plugins that
    support a major ABI and allow to continue to use the experimental ABI as the
    default.

    You need to add the following in /etc/portage/profile/package.use.force
    in order to select a non-native ABI.  Tweak below to add your masked ABI.
    - CUT BELOW HERE -
www-client/chromium -abi_x86_64 -abi_x86_32 -abi_x86_x32 -abi_mips_n64 -abi_ppc_64 -abi_s390_64
    - CUT ABOVE HERE -

    To override the distro hard mask for ffmpeg5 do the following:

      mkdir -p /etc/portage/profile
      Add "www-client/chromium -system-ffmpeg" to /etc/portage/profile/package.use.mask


    USE flag quality status:

      cfi - production ready
      mold - production ready
      official - production ready previously but undergoing retesting
      pgo - production ready
      qt6 - production ready
      shadowcallstack - needs testing... not tested due to lack of hardware
        (report back if it works)
      thinlto-opt - works if enough total memory


    The -Oshit optimization flag:

    This flag address the unacceptable build times with -Oshit compiler
    metaflag and OSHIT_* environment variables.

    -Oshit will build mostly everything with -O1 for _FORTIFY_SOURCE and faster
    build speed but will have extra environment variables to customize the
    optimization level of those that have a perceived performance drop or
    are possibly performance sensitive.  A noticable perceived performance drop
    is where one notices jitter, studder, skipping, double processing time,
    latency larger than the 3 second rule, etc.

    Subprojects or third_party modules may override -O1 will be prefixed with
    OSHIT_OPT_LEVEL_ environment variables listed below.  These environment
    variables should be placed in a per-package env file.

    Example:

    Contents of /etc/portage/env/chromium.conf:

      CFLAGS="${CFLAGS} -Oshit"
      CXXFLAGS="${CXXFLAGS} -Oshit"
      FEATURES="${FEATURES} ccache"
      OSHIT_OPT_LEVEL_DAV1D="2"

    Contents of /etc/portage/package.env:

      www-client/chromium chromium.conf
    


    Build time environment variables:

    See https://wiki.gentoo.org/wiki//etc/portage/package.env to set up
    per-package environment variables.



    APPLY_OILEDMACHINE_OVERLAY_PATCHSET - Apply the following patches:
    - Allow for Qt6 build without Qt5.
    - Allow to disable SIMD for zlib for compatibility with older CPUs.
    - Allow to change the v8 optimization level to -O2 or -O3
    - Add mold linker support

    Valid values:

      1 - apply (default)
      0 - do not apply

    CROMITE_PATCH_BLACKLIST - A space separated list of patches not to apply.


    C_VS_UC_PREFERENCE - Conflict resolve patch preferences between Cromite
    and ungoogled-chromium patches with a space delimited list.

    You must choose a patch on the left or a patch on the right.  If list is
    unset, it will automatically assume that the Cromite patch is preferred.

    You may also set it to either "cromite" or "ungoogled-chromium" to
    prefer one group over the other or individual patches.

    Cromite                                                   | ungoogled-chromium
    autofill-miscellaneous.patch                              | 0003-disable-autofill-download-manager.patch
    ungoogled-chromium-no-special-hosts-domains.patch         | disable-google-host-detection.patch
    ungoogled-chromium-Disable-untraceable-URLs.patch         | all-add-trk-prefixes-to-possibly-evil-connections.patch
    ungoogled-chromium-Disable-untraceable-URLs.patch         | disable-untraceable-urls.patch
    Disable-crash-reporting.patch                             | disable-crash-reporter.patch
    translate-disable-fetching-of-languages-from-server.patch | toggle-translation-via-switch.patch
    Remove-binary-blob-integrations.patch                     | disable-gcm.patch
    ungoogled-chromium-no-special-hosts-domains.patch         | disable-domain-reliability.patch
    Block-qjz9zk-or-trk-requests.patch                        | block-trk-and-subdomains.patch
    Disable-references-to-fonts.googleapis.com.patch          | disable-fonts-googleapis-references.patch
    Chrome-web-store-protection.patch                         | disable-webstore-urls.patch
    ungoogled-chromium-Disable-webRTC-log-uploader.patch      | disable-webrtc-log-uploader.patch
    Fix-chromium-build-bugs.patch                             | fix-building-with-prunned-binaries.patch
    Fix-chromium-build-bugs.patch                             | disable-mei-preload.patch
    ungoogled-chromium-Disable-Network-Time-Tracker.patch     | disable-network-time-tracker.patch
    ungoogled-chromium-Disable-intranet-detector.patch        | disable-intranet-redirect-detector.patch
    Enable-native-Android-autofill.patch                      | fix-building-without-safebrowsing.patch
    Modify-default-preferences.patch                          | remove-unused-preferences-fields.patch
    Disable-privacy-sandbox.patch                             | disable-privacy-sandbox.patch
    Replace-DoH-probe-domain-with-RIPE-domain.patch           | doh-changes.patch
    Disable-fetching-of-all-field-trials.patch                | disable-fetching-field-trials.patch
    


    FORCE_LLVM_SLOT - Manually choose the LLVM slot to build with


    JIT_LEVEL_OVERRIDE - Set the JIT runtime performance similar to -Oflags.
    It controls the JIT teir enablement and consequently build time, the runtime
    performance possibilities of JITed hot functions similar to the -Oflag
    level.
    Valid values:  0, 1, 2, ..., 7, unset (default)

    7 - -Ofast [do not use]
    6 - -O3
    5 - -O2
    4 - -Os
    3 - -Oz
    2 - -O1
    1 - -O0 [with JIT, best case performance for -O0]
    0 - -O0 [without JIT, worst case performance for -O0]
    unset - if USE=-official, it is automatic based on -Oflag level.
            if USE=official, it is equivalent to 6.


    MITIGATION_USE_CASE - Sets the safety period for ebuild (re-)installs.  If
    the duration exceeds, the ebuild will not (re-)install until a newer point
    release is provided by upstream.

    Valid values:
      donations - 1 week
      email     - 1 week
      legal     - 1 week
      money     - 1 week
      shopping  - 1 week
      socials   - 2 weeks (ebuild default)
      default   - 30 days

    Examples:
      MITIGATION_USE_CASE="shopping"           # The ebuild is (re-)installable for 1 week from release date.
      MITIGATION_USE_CASE="donations socials"  # The ebuild is (re-)installable for 1 week from release date.
      MITIGATION_USE_CASE="socials"            # The ebuild is (re-)installable for 2 weeks from release date.
      MITIGATION_USE_CASE="default"            # The ebuild is (re-)installable for 30 days from release date but may likely contain vulnerabilities.


    PRINT_PREVIEW - Allow print preview

    Valid values:

      1 - show print preview before printing (default)
      0 - disable print preview, print immediately


    OSHIT_OPT_LEVEL_DAV1D="2" - Optimize dav1d at -O2
    Valid values:  2, 3, fast
    Note:  May be set to 1 if dav1d is supported using vaapi and are using
    vaapi USE flag.


    OSHIT_OPT_LEVEL_LIBAOM="3" - Optimize libaom at -O3
    Note:  May be set to 1 if h264 is supported using vaapi and are using
    vaapi USE flag.


    OSHIT_OPT_LEVEL_LIBVPX="fast" - Optimize libvpx at -Ofast
    Valid values:  2, 3, fast
    Note:  May be set to 1 if vpx is supported using vaapi and are using vaapi
    USE flag.


    OSHIT_OPT_LEVEL_OPENH264="2" - Optimize openh264 at -O2
    Valid values:  1, 2, 3, fast
    Note:  May be set to 1 if h264 is supported using vaapi and are using
    vaapi USE flag.


    OSHIT_OPT_LEVEL_RNNOISE="1" - Optimize rnnoise at -O2
    Valid values:  1, 2, 3, fast


    OSHIT_OPT_LEVEL_RUY="1" - Optimize ruy at -O1
    Valid values:  1, 2, 3
    Note:  May be set to 1 if disinterested in AI/ML.


    OSHIT_OPT_LEVEL_TFLITE="1" - Optimize TFLite build speed at -O1
    Valid values:  1, 2, 3
    Note:  May be set to 1 if disinterested in AI/ML.


    OSHIT_OPT_LEVEL_V8="2" - Optimize v8 at O2
    Valid values:  2, 3


    OSHIT_OPT_LEVEL_XNNPACK="1" - Optimize xnnpack build speed at at -O1
    Valid values:  1, 2, 3
    Note:  May be set to 1 if disinterested in AI/ML.


    ULIMIT - Sets the max number of open file descriptors.

    Defaults:

      Mold - 16384
      BFD/LLD - 2048


    UNGOOGLED_CHROMIUM_PATCH_BLACKLIST - A space separated list of patches not
    to apply.

    THINLTO_OPT - Add aggressive ThinLTO optimizations
    Valid values:
    1 - explicitly optimize
    0 - linker defaults
    unset - explicitly optimize if USE=official


  References:

    lto-O2 is too large - https://github.com/chromium/chromium/commit/da072d13b2a1cc8459c29aa4e52584a4491a4ad6
    CFI - https://www.chromium.org/developers/testing/control-flow-integrity
    CFI ldflags - https://clang.llvm.org/docs/ControlFlowIntegrity.html
    PartitionAlloc - https://chromium.googlesource.com/chromium/src/+/refs/heads/main/base/allocator/partition_allocator/PartitionAlloc.md
    PGO - https://blog.chromium.org/2020/08/chrome-just-got-faster-with-profile.html
    https://github.com/chromium/chromium/blob/master/build/config/sanitizers/BUILD.gn#L204
    [1] https://github.com/chromium/chromium/tree/master/tools/perf/benchmarks
    [2] https://chromium.googlesource.com/catapult/+/HEAD/telemetry/README.md


  Proposals for next ebuild change(s):

  Investigate -pgo USE flag should be a greater than 4 cpu core requirement.
  The next build will measure the build time of pgo disabled.

  Intestigate shuffle-sections ROP mitigation.

  -->
  <upstream>
    <bugs-to>https://www.chromium.org/for-testers/bug-reporting-guidelines</bugs-to>
    <remote-id type="github">chromium/chromium</remote-id>
    <remote-id type="gitlab">Matt.Jolly/chromium-patches</remote-id>
  </upstream>
  <use>
    <flag name="bluetooth">
      Adds support for websites to communicate with Bluetooth wireless devices
      and support for GATT (Generic Attribute Profile) for the Web Bluetooth
      API.
    </flag>
    <flag name="bundled-libcxx">
      Build against the internal libc++ for proper cfi-icall and cfi-icast
      protection.  This also builds libcxx with CFI, Full RELRO, noexecstack,
      SSP security features.  This is the upstream default.
    </flag>
    <flag name="cet">
      Provide some CET protection to the V8 JavaScript engine.  (EXPERIMENTAL)
    </flag>
    <flag name="cfi">
      cfi-cast:
      Compile the build with mitigation against possible bad casting
      vulnerabilities.  When a violation is encountered, the program aborts.

      cfi-icall:
      Compile the build with bad function cast checks and non static function
      pointers checks.  When a violation is encountered, the program aborts.

      cfi-vcall:
      Compile the build with Clang Control Flow Integrity (CFI) security
      protections to mitigate against arbitrary code execution caused by from
      memory corruption attempts from forward edge attacks from virtual
      functions.  For backward edge protection see shadowcallstack USE flag.
      The estimated impact is around 1% CPU overhead, around 15% or less code
      size increase.  When a violation is encountered, the program aborts.

      The abort is a way to halt more dangerous code execution.

      shadow-call-stack:
      Allows for backward edge protections against return address overwrites
      that could lead to arbitrary code execution.  (Experimental, arm64 only)
      Use -fsanitize=shadow-call-stack to activate this protection.

      Arm64 users, see also the branch-protection USE flag.

      Additional ebuild per-package environment variables if USE=-official:

        USE_CFI_ICALL - 1 to enable, 0 to disable cfi-icall
        USE_CFI_CAST - 1 to enable, 0 to disable cfi-cast

      For the official build settings, it is fixed based on the ABI.

      For x86-64 it is cfi-vcall=true, cfi-icall=true, cfi-cast=false
      All other microarches are all false, but you may customize via the
      -fsanitize= compiler flag with the cfi USE flag.
    </flag>
    <flag name="component-build">
      Split build into more shared libraries to speed up linking. Mostly
      intended for debugging and development, NOT RECOMMENDED for general use.
    </flag>
    <flag name="cromite">
      Add ad blocker and enhance privacy with a community maintained patchset.

      [Using community patchsets may introduce vulnerabilities or the user
      experience may degrade.]

      [The USE flag is only available when the patchset version matches the
      browser version for security reasons.]
    </flag>
    <flag name="cpu_flags_arm_pac">
      Mitigate against ROP attacks
    </flag>
    <flag name="cpu_flags_arm_bti">
      Mitigate against JOP attacks
    </flag>
    <flag name="css-hyphen">
      Add support for auto hyphenization of words (e.g. "hyphens: auto") for CSS
      styled elements.
    </flag>
    <flag name="drumbrake">
      Use DrumBrake WebAssembly interpreter to mitigate against JIT based
      attacks.  In addition, use DrumBrake to protect memory against
      WASM based attacks.
    </flag>
    <flag name="extensions">
      Enable support for browser extensions.
    </flag>
    <flag name="firejail">
      Use Firejail for sandboxing.
    </flag>
    <flag name="hangouts">
      Enable support for Hangouts and features such as screen sharing
    </flag>
    <flag name="headless">
      Build Ozone only with headless backend, NOT RECOMMENDED for general use.
    </flag>
    <flag name="hidpi">
      Add support for HiDPI or 200% scale factor.
    </flag>
    <flag name="jit">
      Enable support for compiled JavaScript for faster runtime performance.
      Disable to mitigate against JIT based vulnerabilities.

      Disabling may result in only ~20% performance of top teir JIT.
    </flag>
    <flag name="js-type-check">
      Enable JavaScript type-checking for Chrome's web technology-based UI.
      Requires Java.
    </flag>
    <flag name="mdns">
      Enable Multicast DNS support.
    </flag>
    <flag name="ml">
      Build and enable Artificial Intelligence (AI) or Machine Learning (ML)
      with ScreenAI or TFLite and components that use them.
    </flag>
    <flag name="mold">
      Use the mold linker to decrease linking times.
    </flag>
    <flag name="mpris">
      Enable support for MPRIS to control playback and view information about
      the currently playing song/video.
    </flag>
    <flag name="official">
      Enable the use of official build settings [similar to the official bin but
      without branding] instead of the developer build settings.  Enables
      security hardending (for both the browser and internal bundled third party
      dependencies built with the stronger CFI Basic mode with cfi-vcall and
      cfi-icall [both enabled on x86_64], Full RELRO, noexecstack, PIE, SSP),
      PGO, debug symbols level 2.  Disables use of third party ebuilds (without
      CFI and PGO) and uses the internal bundled hardened and PGOed version of
      those libraries with static linkage.  Implies default features and
      proprietary-codecs.
    </flag>
    <flag name="pax-kernel">
      Allow building on a PaX-enabled kernel
    </flag>
    <flag name="partitionalloc">
      Use the built in allocator mitigating against underflows, overflows,
      type confusion (and consequently against arbitrary code execution).
      Benefits include better storage efficiency and lowered latency.

      Disabling may allow access to alternative hardened allocators.
    </flag>
    <flag name="pdf">
      Build and enable the pdf viewer for legal docs, ebooks, tech whitepapers,
      etc.
    </flag>
    <flag name="pic">
      Disable optimized assembly code that is not PIC friendly
    </flag>
    <flag name="pgo">
      Builds in one step with Profile Guided Optimizations to improve -- page
      loads, input reponsiveness, web reponsiveness -- by ~10% or less, using a
      pregenerated PGO profile.
    </flag>
    <flag name="plugins">
      Builds support for plugins.
    </flag>
    <!--
    See https://www.energystar.gov/products/data_center_equipment/16-more-ways-cut-energy-waste-data-center/implement-efficient-data
    -->
    <flag name="pointer-compression">
      Enable to reclaim more memory with pointer compression in JavaScript
      contexts.

      Disabling may increase battery life and decrease security since the
      V8 Sandbox [for the JavaScript engine] (2024) requires pointer
      compression.
    </flag>
    <flag name="pre-check-llvm">
      Disables LLVM commit checks.  It is not recommended to disable the commit
      tests that notify commit bumps related to security or bugs.
    </flag>
    <flag name="pre-check-vaapi">
      Disables non-portable native VAAPI checks.  It is not recommended to
      disable these checks because they can expose bugs.
    </flag>
    <flag name="proprietary-codecs">
      Enables use of non-free patent-encumbered audio, formats, video formats,
      and network protocols.  Upstream build files associate AAC, H264, and
      others as proprietary.
    </flag>
    <flag name="proprietary-codecs-disable">
      (USE FLAG IN DEVELOPMENT)

      If enabled, it will disable codecs or network protocols with a patent
      status that is not free in this ebuild fork.

      With this flag enabled, this may break dependencies that assume previous
      unpatched behavior.

      In general a codec is allowed to be built into disabled proprietary-codecs
      build if the patent status is one of the following:

        (1) Expired patent, typically 20 years.  (e.g. MP3)
        (2) Similar perpetual royalty-free freedoms like the
            Grant of Patent License in the Apache 2.0. (e.g. libvpx, libaom)

      AND

        The code is free with a widely used compatible open source license.

      AND CONDITIONALLY

        The codec may allowed in this ebuild fork if it doesn't require a
        non-free developer license in a case-by-case basis.

    </flag>
    <flag name="proprietary-codecs-disable-nc-developer">
      (USE FLAG IN DEVELOPMENT)

      If enabled, it will disable codecs or network protocols with a patent
      status that is not free in this ebuild fork for codec developers for
      non-commericial use.

      With this flag enabled, this may break dependencies that assume previous
      unpatched behavior.

      In general a codec is allowed to be built into disabled proprietary-codecs
      build if the patent status is one of the following:

        (1) Expired patent, typically 20 years.  (e.g. MP3)
        (2) Similar perpetual royalty-free freedoms like the
            Grant of Patent License in the Apache 2.0. (e.g. libvpx, libaom)

      AND

        The code is free with a widely used compatible open source license.

      AND CONDITIONALLY

        The codec may allowed in this ebuild fork if it doesn't require a
        non-free developer license in a case-by-case basis.

    </flag>
    <flag name="proprietary-codecs-disable-nc-user">
      (USE FLAG IN DEVELOPMENT)

      If enabled, it will disable codecs or network protocols with a patent
      status that is not free in this ebuild fork for non codec developers
      for non-commercial use.

      With this flag enabled, this may break dependencies that assume previous
      unpatched behavior.

      In general a codec is allowed to be built into disabled proprietary-codecs
      build if the patent status is one of the following:

        (1) Expired patent, typically 20 years.  (e.g. MP3)
        (2) Similar perpetual royalty-free freedoms like the
            Grant of Patent License in the Apache 2.0. (e.g. libvpx, libaom)

      AND

        The code is free with a widely used compatible open source license.

      AND CONDITIONALLY

        The codec may allowed in this ebuild fork if it doesn't require a
        non-free developer license in a case-by-case basis.

    </flag>
    <flag name="qt5">
      Enable qt5 support
    </flag>
    <flag name="qt6">
      Enable qt6 support
    </flag>
    <flag name="reporting-api">
      Enable support for the Reporting API to self-snitch about errors, crashes,
      violations.  If running an ad-blocker, it may self-snitch.
    </flag>
    <flag name="screencast">
      Enable support for remote desktop and screencast using
      <pkg>media-video/pipewire</pkg>
    </flag>
    <flag name="suid">
      Build the SUID sandbox, which is only needed on CONFIG_USER_NS=n kernels
    </flag>
    <flag name="system-dav1d">
      Use system dav1d instead of the bundled one

      No modifications or no patch files in vendored package.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-ffmpeg">
      Use system ffmpeg instead of the bundled one

      The internal vendered version has additional codecs that are not
      removeable, but the system one may be able to remove them.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-flac">
      Use system flac instead of the bundled one

      No modifications or no patch files in vendored package.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-fontconfig">
      Use system fontconfig instead of the bundled one

      No modifications or no patch files in vendored package.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-harfbuzz">
      Use system harfbuzz instead of the bundled one

      No modifications or no patch files in vendored package.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-icu">
      Use system icu instead of the bundled one

      The internal vendored version has bug fixes, size reduced, adds spell check
      support few languages, locale style changes related to
      time/currency/regions/number-represenation.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-libaom">
      Use system libaom instead of the bundled one

      No modifications or no patch files in vendored package.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-libdrm">
      Use system libdrm instead of the bundled one

      No modifications or no patch files in vendored package.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-libjpeg-turbo">
      Use system libjpeg-turbo instead of the bundled one

      Vendored applies data de-duplication change and removes non-performant
      ARM neon assembly.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-libpng">
      Use system libpng instead of the bundled one

      Vendored applies a patch to potentially prevent slow down or abuse.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-libstdcxx">
      Build against the system's libstdc++ for compatibility reasons which
      is protected with CET (if supported by CPU, similar to CFI).  This could
      increase the attack surface and possibly an open door for arbitary code
      execution for untrusted assets.  It is not recommended for security
      reasons but it is the original ebuild maintainers and this distro's
      preference.  This setting is only allowed for systemwide GCC LTO due
      to IR (Intermediate Representation) compatibility or disabled LTO
      systemwide.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-libwebp">
      Use system libwebp instead of the bundled one

      No modifications or no patch files in vendored package.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-libxml">
      Use system libxml instead of the bundled one

      Applies a vulnerabilty fix.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-libxslt">
      Use system libxslt instead of the bundled one

      Applies fixes for testing or built time failures.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-openh264">
      Use system openh264 instead of the bundled one

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-opus">
      Use system opus instead of the bundled one

      Applies disablement to assertions or int overflow checks.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-re2">
      Use system re2 instead of the bundled one

      No modifications announced.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="system-toolchain">
      Use the system-clang and system-rust instead of the bundled one.

      If disabled, it will build with a pre-stable build of Clang and a post
      snapshot of Rust.
    </flag>
    <flag name="system-zlib">
      Use system zlib instead of the bundled one

      The internal vendored version is SIMD optimized but the vanilla zlib provided
      by the system is not.

      Enabling may decrease performance (w/o PGO) and increase vulnerabilities
      (w/o Clang CFI).
    </flag>
    <flag name="thinlto-opt">
      Enables selective ThinLTO -O2 optimizations for the browser binary and
      other targets while others use the default --lto-O0.  This optimization
      is not enabled by default upstream due to increased binary size concerns.
      Building may required 12 GiB total memory minimal for dedicated compile
      only machines, but 16 GiB total memory recommended for multitasking
      builder machines.
    </flag>
    <flag name="ungoogled-chromium">
      Unbundle and opt-out out of upstream web services with a community
      maintained patchset.

      [It may lower security by removing DoH (DNS over HTTPS) exposing DNS
      lookups to a government firewall.  At the same time, it may avoid tracking
      by a government contractor.]

      [Using community patchsets may introduce vulnerabilities or the user
      experience may degrade.]

      [The USE flag is only available when the patchset version matches the
      browser version for security reasons.]
    </flag>
    <flag name="vaapi">
      Add support for hardware accelerated JPEG image decoding, hardware
      accelerated video decoding playback, and hardware accelerated video
      encoding for WebRTC
    </flag>
    <flag name="webassembly">
      Enable WebAssembly to play ported web version of games or apps.
      Disable to decrease the attack surface.
    </flag>
    <flag name="websockets">
      Enable support for contemporary websites utilizing event based
      messaging, notifications, gaming, news, numerical changes,
      etc.
    </flag>
    <flag name="weston">
      Prefer weston to generate wayland PGO profile.  This option is mutually
      exclusive to X windowing system PGO profile generation
    </flag>
    <flag name="widevine">
      Unsupported closed-source DRM capability (required for premium web
      content).
    </flag>
    <flag name="rN">
      (FOR INTERNAL USE ONLY) Bumps the revision through the USE flag instead of
      file name to reuse previous ccache runs.
    </flag>

    <!-- Codecs and network protocols -->
    <flag name="dav1d">
      Add CPU based AV1 video decode support
    </flag>
    <flag name="libaom">
      Add CPU based libaom encode support
    </flag>
    <flag name="opus">
      Add CPU based Opus audio codec support
    </flag>
    <flag name="vpx">
      Add CPU based libvpx video codec support
    </flag>
    <flag name="vaapi-hvec">
      Add GPU accelerated h265 video decode support
    </flag>
  </use>
</pkgmetadata>
