--- a/third_party/highway/BUILD.gn.orig	2025-05-06 00:38:00.361901686 -0700
+++ b/third_party/highway/BUILD.gn	2025-05-06 00:49:02.197064600 -0700
@@ -2,12 +2,159 @@
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
+import("//build/config/simd.gni")
 import("//testing/test.gni")
 
 # This config is applied to targets that depend on libhwy
 config("libhwy_external_config") {
   include_dirs = [ "src" ]
   defines = []
+  cflags = []
+  hwy_disabled_targets=""
+  if (target_cpu == "x64" || target_cpu == "x86") {
+    if (!use_f16c) {
+      cflags += [ "-mno-f16c" ]
+      defines += [ "HWY_DISABLE_F16C=1" ]
+    }
+    if (!use_aes) {
+      cflags += [ "-mno-aes" ]
+    }
+    if (!use_pclmul) {
+      cflags += [ "-mno-pclmul" ]
+    }
+    if (!use_aes || !use_pclmul) {
+      defines += [ "HWY_DISABLE_PCLMUL_AES=1" ]
+    }
+    if (!use_bmi) {
+      cflags += [ "-mno-bmi" ]
+    }
+    if (!use_bmi2) {
+      cflags += [ "-mno-bmi2" ]
+    }
+    if (!use_fma) {
+      cflags += [ "-mno-fma" ]
+    }
+    if (!use_sse2) {
+      cflags += [ "-mno-sse2" ]
+      hwy_disabled_targets += "|HWY_SSE2"
+    }
+    if (!use_ssse3) {
+      cflags += [ "-mno-ssse3" ]
+      hwy_disabled_targets += "|HWY_SSSE3"
+    }
+    if (!use_sse4) {
+      cflags += [ "-mno-sse4.1" ]
+      cflags += [ "-mno-sse4.2" ]
+      hwy_disabled_targets += "|HWY_SSE4"
+    }
+    if (!use_avx2) {
+      cflags += [ "-mno-avx2" ]
+      hwy_disabled_targets += "|HWY_AVX2"
+    }
+    if (!use_avx3) {
+      cflags += [ "-mno-avx512bw" ]
+      cflags += [ "-mno-avx512cd" ]
+      cflags += [ "-mno-avx512dq" ]
+      cflags += [ "-mno-avx512f" ]
+      cflags += [ "-mno-avx512vl" ]
+      cflags += [ "-mno-evex512" ]
+      hwy_disabled_targets += "|HWY_AVX3"
+    }
+    if (!use_avx3_dl) {
+      cflags += [ "-mno-avx512bitalg" ]
+      cflags += [ "-mno-avx512vpopcntdq" ]
+      cflags += [ "-mno-avx512vbmi" ]
+      cflags += [ "-mno-avx512vbmi2" ]
+      cflags += [ "-mno-avx512vnni" ]
+      cflags += [ "-mno-gfni" ]
+      cflags += [ "-mno-vaes" ]
+      cflags += [ "-mno-vpclmulqdq" ]
+      hwy_disabled_targets += "|AVX3_DL"
+    }
+    if (!use_avx3_spr) {
+      cflags += [ "-mno-avx512fp16" ]
+      hwy_disabled_targets += "|AVX3_SPR"
+    }
+    if (!use_avx3_zen4) {
+      cflags += [ "-mno-avx512bf16" ]
+      hwy_disabled_targets += "|AVX3_ZEN4"
+      defines += [ "HWY_AVX3_DISABLE_AVX512BF16=1" ]
+    }
+  }
+  if (target_cpu == "arm" || target_cpu == "arm64") {
+    if (!use_sve) {
+      hwy_disabled_targets += "|SVE"
+    }
+    if (!use_sve_256) {
+      hwy_disabled_targets += "|SVE_256"
+    }
+    if (!use_sve2) {
+      hwy_disabled_targets += "|SVE2"
+    }
+    if (!use_sve2_128) {
+      hwy_disabled_targets += "|SVE2_128"
+    }
+    if (!use_neon) {
+      hwy_disabled_targets += "|NEON"
+    }
+    if (!use_neon_aes) {
+      hwy_disabled_targets += "|NEON_WITHOUT_AES"
+    }
+    if (!use_neon_bf16) {
+      hwy_disabled_targets += "|NEON_BF16"
+    }
+  }
+  if (target_cpu == "riscv") {
+    if (!use_rvv) {
+      hwy_disabled_targets += "|RVV"
+    }
+  }
+  if (target_cpu == "ppc" || target_cpu == "ppc64") {
+    if (!use_altivec) {
+      cflags += [ "-mno-altivec" ]
+    }
+    if (!use_crypto) {
+      cflags += [ "-mno-crypto" ]
+      defines += [ "HWY_DISABLE_PPC8_CRYPTO=1" ]
+    }
+    if (!use_ppc8) {
+      cflags += [ "-mno-power8-vector" ]
+      hwy_disabled_targets += "|PPC8"
+    }
+    if (!use_ppc9) {
+      cflags += [ "-mno-power9-vector" ]
+      hwy_disabled_targets += "|PPC9"
+    }
+    if (!use_ppc10) {
+      if (is_clang) {
+        cflags += [ "-mno-power10-vector" ]
+      }
+      hwy_disabled_targets += "|PPC10"
+    }
+    if (!use_vsx) {
+      cflags += [ "-mno-vsx" ]
+    }
+  }
+  if (target_cpu == "s390" || target_cpu == "s390x") {
+    if (!use_z15) {
+      hwy_disabled_targets += "|Z15"
+    }
+    if (!use_z16) {
+      hwy_disabled_targets += "|Z16"
+    }
+  }
+  if (target_cpu == "wasm") {
+    if (!use_wasm_emu256) {
+      hwy_disabled_targets += "|WASM_EMU256"
+    }
+    if (!use_wasm) {
+      hwy_disabled_targets += "|WASM"
+    }
+  }
+  if (hwy_disabled_targets != "") {
+    hwy_disabled_targets = hwy_disabled_targets[1..]
+    defines += [ "HWY_DISABLED_TARGETS=(" + hwy_disabled_targets + ")" ]
+  }
   if (target_cpu == "x86") {
     # Highway automatically disables AVX2 and AVX3 targets when compiling in
     # 32-bit mode due to bugs in the generated code. However, when doing so it
