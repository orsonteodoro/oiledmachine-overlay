--- a/build_overrides/build.gni.orig	2024-09-02 14:02:01.095592300 -0700
+++ b/build_overrides/build.gni	2024-09-08 11:41:32.802134094 -0700
@@ -29,6 +29,10 @@ build_with_v8_embedder = build_with_chro
 # `use_custom_libcxx = true`.
 enable_safe_libcxx = true
 
+declare_args() {
+  custom_optimization_level = ""
+}
+
 # Features used by //base/trace_event and //services/tracing.
 declare_args() {
   # Tracing support requires //third_party/perfetto, which is not available in
--- a/v8/BUILD.gn.orig	2024-09-02 14:05:15.081257300 -0700
+++ b/v8/BUILD.gn	2024-09-07 21:37:32.238519079 -0700
@@ -436,6 +436,8 @@ declare_args() {
   v8_enable_experimental_tsa_builtins = false
 
   v8_dcheck_always_on = dcheck_always_on
+
+  v8_custom_optimization_level = ""
 }
 
 # Derived defaults.
@@ -740,6 +742,36 @@ v8_toolset_for_shell = "host"
 # Configurations
 #
 
+config("custom_optimization_config") {
+  cflags = []
+  if (v8_custom_optimization_level != "") {
+    if (is_win) {
+      if (v8_custom_optimization_level == "fast" || v8_custom_optimization_level == "3") {
+        cflags += [ "/O2" ]
+      } else if (v8_custom_optimization_level == "2") {
+        cflags += [ "/Ox" ]
+      } else if (v8_custom_optimization_level == "s") {
+        cflags += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (v8_custom_optimization_level == "1") {
+        cflags += [ "/Ot", "/Oy" ]
+      } else if (v8_custom_optimization_level == "z") {
+        cflags += [ "/O1" ]
+      } else if (v8_custom_optimization_level == "0") {
+        cflags += [ "/Od" ]
+      }
+      if (is_clang) {
+        cflags += [ "/clang:-O$v8_custom_optimization_level" ]
+      }
+    } else {
+      if (v8_custom_optimization_level == "fast" && !is_clang) {
+        cflags += [ "-O$v8_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        cflags += [ "-O$v8_custom_optimization_level" ]
+      }
+    }
+  }
+}
+
 config("internal_config_base") {
   # Only targets in this file and its subdirs can depend on this.
   visibility = [ "./*" ]
@@ -1763,9 +1785,15 @@ config("always_turbofanimize") {
   # TODO(crbug.com/621335) Rework this so that we don't have the confusion
   # between "optimize_speed" and "optimize_max".
   if (((is_posix && !is_android) || is_fuchsia || is_win) && !using_sanitizer) {
-    configs += [ "//build/config/compiler:optimize_speed" ]
+    configs += [
+      "//build/config/compiler:optimize_speed",
+      ":custom_optimization_config"
+    ]
   } else {
-    configs += [ "//build/config/compiler:optimize_max" ]
+    configs += [
+      "//build/config/compiler:optimize_max",
+      ":custom_optimization_config"
+    ]
   }
 }
 
@@ -6701,7 +6729,10 @@ if (v8_use_libm_trig_functions) {
     configs -= [ "//build/config/compiler:chromium_code" ]
     if (!is_debug) {
       # Build code using -O3, see: crbug.com/1084371.
-      configs += [ "//build/config/compiler:optimize_speed" ]
+      configs += [
+        "//build/config/compiler:optimize_speed",
+        ":custom_optimization_config"
+      ]
     }
   }
 }
--- a/build/config/compiler/BUILD.gn.orig	2024-09-07 19:42:17.996694206 -0700
+++ b/build/config/compiler/BUILD.gn	2024-09-07 20:25:46.204713977 -0700
@@ -202,6 +202,7 @@ declare_args() {
   simple_template_names = is_clang && !is_nacl && !is_win && !is_apple
 
   #use_mold = false
+  #custom_optimization_level = ""
 }
 
 declare_args() {
@@ -2589,9 +2590,21 @@ config("optimize_max") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O2" ] + common_optimize_on_cflags
+      if (custom_optimization_level != "" && custom_optimization_level == "fast" && !is_clang) {
+        cflags = [ "-O$custom_optimization_level", "-fno-allow-store-data-races" ] + common_optimize_on_cflags
+      } else if (custom_optimization_level != "") {
+        cflags = [ "-O$custom_optimization_level" ] + common_optimize_on_cflags
+      } else {
+        cflags = [ "-O2" ] + common_optimize_on_cflags
+      }
+    }
+    if (custom_optimization_level != "" && custom_optimization_level == "fast") {
+      rustflags = [ "-Copt-level=3" ]
+    } else if (custom_optimization_level != "" && custom_optimization_level == "fast") {
+      rustflags = [ "-Copt-level=$custom_optimization_level" ]
+    } else {
+      rustflags = [ "-Copt-level=3" ]
     }
-    rustflags = [ "-Copt-level=3" ]
   }
 }
 
@@ -2625,9 +2636,21 @@ config("optimize_speed") {
     } else if (optimize_for_fuzzing) {
       cflags = [ "-O1" ] + common_optimize_on_cflags
     } else {
-      cflags = [ "-O3" ] + common_optimize_on_cflags
+      if (custom_optimization_level != "" && custom_optimization_level == "fast" && !is_clang) {
+        cflags = [ "-O$custom_optimization_level", "-fno-allow-store-data-races" ] + common_optimize_on_cflags
+      } else if (custom_optimization_level != "") {
+        cflags = [ "-O$custom_optimization_level" ] + common_optimize_on_cflags
+      } else {
+        cflags = [ "-O3" ] + common_optimize_on_cflags
+      }
+    }
+    if (custom_optimization_level != "" && custom_optimization_level == "fast") {
+      rustflags = [ "-Copt-level=3" ]
+    } else if (custom_optimization_level != "") {
+      rustflags = [ "-Copt-level=$custom_optimization_level" ]
+    } else {
+      rustflags = [ "-Copt-level=3" ]
     }
-    rustflags = [ "-Copt-level=3" ]
   }
 }
 
--- a/third_party/libvpx/BUILD.gn.orig	2024-09-02 14:02:41.906890200 -0700
+++ b/third_party/libvpx/BUILD.gn	2024-09-07 21:31:33.376399297 -0700
@@ -10,6 +10,10 @@ import("//third_party/libvpx/libvpx_srcs
 import("//third_party/libvpx/libvpx_test_srcs.gni")
 import("//third_party/nasm/nasm_assemble.gni")
 
+declare_args() {
+  libvpx_custom_optimization_level = ""
+}
+
 # Sets the architecture name for building libvpx.
 if (current_cpu == "x86") {
   cpu_arch_full = "ia32"
@@ -85,8 +89,35 @@ config("libvpx_config") {
   # gn orders flags on a target before flags from configs. The default config
   # adds -Wall, and these flags have to be after -Wall -- so they need to come
   # from a config and can't be on the target directly.
+  cflags = []
+  if (libvpx_custom_optimization_level != "") {
+    if (is_win) {
+      if (libvpx_custom_optimization_level == "fast" || libvpx_custom_optimization_level == "3") {
+        cflags += [ "/O2" ]
+      } else if (libvpx_custom_optimization_level == "2") {
+        cflags += [ "/Ox" ]
+      } else if (libvpx_custom_optimization_level == "s") {
+        cflags += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (libvpx_custom_optimization_level == "1") {
+        cflags += [ "/Ot", "/Oy" ]
+      } else if (libvpx_custom_optimization_level == "z") {
+        cflags += [ "/O1" ]
+      } else if (libvpx_custom_optimization_level == "0") {
+        cflags += [ "/Od" ]
+      }
+      if (is_clang) {
+        cflags += [ "/clang:-O$libvpx_custom_optimization_level" ]
+      }
+    } else {
+      if (libvpx_custom_optimization_level == "fast" && !is_clang) {
+        cflags += [ "-O$libvpx_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        cflags += [ "-O$libvpx_custom_optimization_level" ]
+      }
+    }
+  }
   if (is_clang) {
-    cflags = [
+    cflags += [
       # libvpx heavily relies on implicit enum casting.
       "-Wno-conversion",
 
@@ -97,7 +118,7 @@ config("libvpx_config") {
       "-Wno-unused-function",
     ]
   } else if (!is_win) {
-    cflags = [
+    cflags += [
       "-Wno-unused-function",
       "-Wno-sign-compare",
     ]
--- a/third_party/openh264/BUILD.gn.orig	2024-09-02 14:02:42.386928800 -0700
+++ b/third_party/openh264/BUILD.gn	2024-09-07 21:26:30.145373002 -0700
@@ -7,11 +7,42 @@ import("//build/config/sanitizers/saniti
 import("//third_party/nasm/nasm_assemble.gni")
 import("//third_party/openh264/openh264_sources.gni")
 
+declare_args() {
+  openh264_custom_optimization_level = ""
+}
+
 # Config shared by all openh264 targets.
 config("config") {
   cflags = []
   defines = []
 
+  if (openh264_custom_optimization_level != "") {
+    if (is_win) {
+      if (openh264_custom_optimization_level == "fast" || openh264_custom_optimization_level == "3") {
+        cflags += [ "/O2" ]
+      } else if (openh264_custom_optimization_level == "2") {
+        cflags += [ "/Ox" ]
+      } else if (openh264_custom_optimization_level == "s") {
+        cflags += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (openh264_custom_optimization_level == "1") {
+        cflags += [ "/Ot", "/Oy" ]
+      } else if (openh264_custom_optimization_level == "z") {
+        cflags += [ "/O1" ]
+      } else if (openh264_custom_optimization_level == "0") {
+        cflags += [ "/Od" ]
+      }
+      if (is_clang) {
+        cflags += [ "/clang:-O$openh264_custom_optimization_level" ]
+      }
+    } else {
+      if (openh264_custom_optimization_level == "fast" && !is_clang) {
+        cflags += [ "-O$openh264_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        cflags += [ "-O$openh264_custom_optimization_level" ]
+      }
+    }
+  }
+
   if (is_chromeos && current_cpu == "arm") {
     # HAVE_NEON and __chromeos__ are needed for enabling NEON on ChromeOS
     # devices.
--- a/third_party/rnnoise/BUILD.gn.orig	2024-09-02 14:02:43.041982000 -0700
+++ b/third_party/rnnoise/BUILD.gn	2024-09-07 21:26:31.349353245 -0700
@@ -4,11 +4,46 @@
 
 import("//testing/test.gni")
 
+declare_args() {
+  rnnoise_custom_optimization_level = ""
+}
+
+config("rnnoise_config") {
+  cflags = []
+  if (rnnoise_custom_optimization_level != "") {
+    if (is_win) {
+      if (rnnoise_custom_optimization_level == "fast" || rnnoise_custom_optimization_level == "3") {
+        cflags += [ "/O2" ]
+      } else if (rnnoise_custom_optimization_level == "2") {
+        cflags += [ "/Ox" ]
+      } else if (rnnoise_custom_optimization_level == "s") {
+        cflags += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (rnnoise_custom_optimization_level == "1") {
+        cflags += [ "/Ot", "/Oy" ]
+      } else if (rnnoise_custom_optimization_level == "z") {
+        cflags += [ "/O1" ]
+      } else if (rnnoise_custom_optimization_level == "0") {
+        cflags += [ "/Od" ]
+      }
+      if (is_clang) {
+        cflags += [ "/clang:-O$rnnoise_custom_optimization_level" ]
+      }
+    } else {
+      if (rnnoise_custom_optimization_level == "fast" && !is_clang) {
+        cflags += [ "-O$rnnoise_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        cflags += [ "-O$rnnoise_custom_optimization_level" ]
+      }
+    }
+  }
+}
+
 group("rnnoise") {
   deps = [ ":rnn_vad" ]
 }
 
 source_set("rnn_vad") {
+  configs += [ ":rnnoise_config" ]
   sources = [
     "src/rnn_activations.h",
     "src/rnn_vad_weights.cc",
--- a/third_party/tflite/BUILD.gn.orig	2024-09-02 14:02:44.181074000 -0700
+++ b/third_party/tflite/BUILD.gn	2024-09-07 21:26:34.069308610 -0700
@@ -13,6 +13,10 @@ import("//third_party/protobuf/proto_lib
 import("//third_party/tflite/features.gni")
 import("//third_party/tflite/tflite_target.gni")
 
+declare_args() {
+  tflite_custom_optimization_level = ""
+}
+
 proto_library("tflite_proto") {
   proto_in_dir = "src"
   sources = [
@@ -47,7 +51,34 @@ config("tflite_config") {
 }
 
 config("tflite_flags") {
-  cflags = [
+  cflags = []
+  if (tflite_custom_optimization_level != "") {
+    if (is_win) {
+      if (tflite_custom_optimization_level == "fast" || tflite_custom_optimization_level == "3") {
+        cflags += [ "/O2" ]
+      } else if (tflite_custom_optimization_level == "2") {
+        cflags += [ "/Ox" ]
+      } else if (tflite_custom_optimization_level == "s") {
+        cflags += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (tflite_custom_optimization_level == "1") {
+        cflags += [ "/Ot", "/Oy" ]
+      } else if (tflite_custom_optimization_level == "z") {
+        cflags += [ "/O1" ]
+      } else if (tflite_custom_optimization_level == "0") {
+        cflags += [ "/Od" ]
+      }
+      if (is_clang) {
+        cflags += [ "/clang:-O$tflite_custom_optimization_level" ]
+      }
+    } else {
+      if (tflite_custom_optimization_level == "fast" && !is_clang) {
+        cflags += [ "-O$tflite_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        cflags += [ "-O$tflite_custom_optimization_level" ]
+      }
+    }
+  }
+  cflags += [
     "-Wno-c99-extensions",
     "-Wno-comment",
     "-Wno-extern-c-compat",
--- a/third_party/dav1d/BUILD.gn.orig	2024-09-02 14:02:41.062821900 -0700
+++ b/third_party/dav1d/BUILD.gn	2024-09-07 21:31:31.488430249 -0700
@@ -8,6 +8,10 @@ import("//build/config/compiler/compiler
 import("//build/config/sanitizers/sanitizers.gni")
 import("//third_party/nasm/nasm_assemble.gni")
 
+declare_args() {
+  dav1d_custom_optimization_level = ""
+}
+
 # MemorySanitizer can't handle assembly, https://crbug.com/928357.
 enable_nasm = (current_cpu == "x86" || current_cpu == "x64") && !is_msan
 
@@ -83,7 +87,37 @@ config("dav1d_config") {
   }
 }
 
-dav1d_copts = [
+dav1d_copts = []
+if (dav1d_custom_optimization_level != "") {
+  if (dav1d_custom_optimization_level != "") {
+    if (is_win) {
+      if (dav1d_custom_optimization_level == "fast" || dav1d_custom_optimization_level == "3") {
+        dav1d_copts += [ "/O2" ]
+      } else if (dav1d_custom_optimization_level == "2") {
+        dav1d_copts += [ "/Ox" ]
+      } else if (dav1d_custom_optimization_level == "s") {
+        dav1d_copts += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (dav1d_custom_optimization_level == "1") {
+        dav1d_copts += [ "/Ot", "/Oy" ]
+      } else if (dav1d_custom_optimization_level == "z") {
+        dav1d_copts += [ "/O1" ]
+      } else if (dav1d_custom_optimization_level == "0") {
+        dav1d_copts += [ "/Od" ]
+      }
+      if (is_clang) {
+        dav1d_copts += [ "/clang:-O$dav1d_custom_optimization_level" ]
+      }
+    } else {
+      if (dav1d_custom_optimization_level == "fast" && !is_clang) {
+        dav1d_copts += [ "-O$dav1d_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        dav1d_copts += [ "-O$dav1d_custom_optimization_level" ]
+      }
+    }
+  }
+}
+
+dav1d_copts += [
   "-D_FILE_OFFSET_BITS=64",
   "-D_POSIX_C_SOURCE=200112L",
 ]
--- a/third_party/libaom/BUILD.gn.orig	2024-09-02 14:02:41.793881000 -0700
+++ b/third_party/libaom/BUILD.gn	2024-09-07 21:29:39.938259389 -0700
@@ -12,6 +12,10 @@ import("//third_party/libaom/libaom_test
 import("//third_party/libaom/options.gni")
 import("//third_party/nasm/nasm_assemble.gni")
 
+declare_args() {
+  libaom_custom_optimization_level = ""
+}
+
 buildflag_header("libaom_buildflags") {
   header = "libaom_buildflags.h"
 
@@ -68,6 +72,33 @@ libaom_include_dirs = [
 # Private configuration used in building libaom.
 config("libaom_config") {
   include_dirs = libaom_include_dirs
+  cflags = []
+  if (libaom_custom_optimization_level != "") {
+    if (is_win) {
+      if (libaom_custom_optimization_level == "fast" || libaom_custom_optimization_level == "3") {
+        cflags += [ "/O2" ]
+      } else if (libaom_custom_optimization_level == "2") {
+        cflags += [ "/Ox" ]
+      } else if (libaom_custom_optimization_level == "s") {
+        cflags += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (libaom_custom_optimization_level == "1") {
+        cflags += [ "/Ot", "/Oy" ]
+      } else if (libaom_custom_optimization_level == "z") {
+        cflags += [ "/O1" ]
+      } else if (libaom_custom_optimization_level == "0") {
+        cflags += [ "/Od" ]
+      }
+      if (is_clang) {
+        cflags += [ "/clang:-O$libaom_custom_optimization_level" ]
+      }
+    } else {
+      if (libaom_custom_optimization_level == "fast" && !is_clang) {
+        cflags += [ "-O$libaom_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        cflags += [ "-O$libaom_custom_optimization_level" ]
+      }
+    }
+  }
 }
 
 # This config is applied to targets that depend on libaom.
--- a/third_party/ruy/BUILD.gn.orig	2024-09-02 14:02:43.878049400 -0700
+++ b/third_party/ruy/BUILD.gn	2024-09-07 21:32:24.035568828 -0700
@@ -5,6 +5,10 @@
 import("//build/config/arm.gni")
 import("//third_party/cpuinfo/cpuinfo.gni")
 
+declare_args() {
+  ruy_custom_optimization_level=""
+}
+
 config("ruy_include") {
   include_dirs = [ "src" ]
 }
@@ -12,9 +16,36 @@ config("ruy_include") {
 config("ruy_shared_config") {
   include_dirs = [ "src" ]
 
+  cflags = []
+  if (ruy_custom_optimization_level != "") {
+    if (is_win) {
+      if (ruy_custom_optimization_level == "fast" || ruy_custom_optimization_level == "3") {
+        cflags += [ "/O2" ]
+      } else if (ruy_custom_optimization_level == "2") {
+        cflags += [ "/Ox" ]
+      } else if (ruy_custom_optimization_level == "s") {
+        cflags += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (ruy_custom_optimization_level == "1") {
+        cflags += [ "/Ot", "/Oy" ]
+      } else if (ruy_custom_optimization_level == "z") {
+        cflags += [ "/O1" ]
+      } else if (ruy_custom_optimization_level == "0") {
+        cflags += [ "/Od" ]
+      }
+      if (is_clang) {
+        cflags += [ "/clang:-O$ruy_custom_optimization_level" ]
+      }
+    } else {
+      if (ruy_custom_optimization_level == "fast" && !is_clang) {
+        cflags += [ "-O$ruy_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        cflags += [ "-O$ruy_custom_optimization_level" ]
+      }
+    }
+  }
   if (current_cpu == "arm" || current_cpu == "arm64") {
     # Disables a warning about the assembly instructions that are used.
-    cflags = [ "-Wno-inline-asm" ]
+    cflags += [ "-Wno-inline-asm" ]
   }
 }
 
--- a/third_party/xnnpack/BUILD.gn.orig	2024-09-02 14:02:45.288163200 -0700
+++ b/third_party/xnnpack/BUILD.gn	2024-09-07 21:33:28.294515598 -0700
@@ -16,6 +16,10 @@
 
 import("//build/config/android/config.gni")
 
+declare_args() {
+  xnnpack_custom_optimization_level = ""
+}
+
 config("xnnpack_config") {
   include_dirs = [
     "//third_party/pthreadpool/src/include",
@@ -24,7 +28,34 @@ config("xnnpack_config") {
     "src/src",
   ]
 
-  cflags = [
+  cflags = []
+  if (xnnpack_custom_optimization_level != "") {
+    if (is_win) {
+      if (xnnpack_custom_optimization_level == "fast" || xnnpack_custom_optimization_level == "3") {
+        cflags += [ "/O2" ]
+      } else if (xnnpack_custom_optimization_level == "2") {
+        cflags += [ "/Ox" ]
+      } else if (xnnpack_custom_optimization_level == "s") {
+        cflags += [ "/Os", "/Oy", "/Og", "/GF" ]
+      } else if (xnnpack_custom_optimization_level == "1") {
+        cflags += [ "/Ot", "/Oy" ]
+      } else if (xnnpack_custom_optimization_level == "z" ) {
+        cflags += [ "/O1" ]
+      } else if (xnnpack_custom_optimization_level == "0") {
+        cflags += [ "/Od" ]
+      }
+      if (is_clang) {
+        cflags += [ "/clang:-O$xnnpack_custom_optimization_level" ]
+      }
+    } else {
+      if (xnnpack_custom_optimization_level == "fast" && !is_clang) {
+        cflags += [ "-O$xnnpack_custom_optimization_level", "-fno-allow-store-data-races" ]
+      } else {
+        cflags += [ "-O$xnnpack_custom_optimization_level" ]
+      }
+    }
+  }
+  cflags += [
     "-Wno-unused-function",
     "-Wno-deprecated-comma-subscript",
   ]
