From 2ef14cc8ea6469f476b57e5e32b3fa166a56ba38 Mon Sep 17 00:00:00 2001
From: Adrian Taylor <adetaylor@chromium.org>
Date: Wed, 17 Jan 2024 17:24:54 +0000
Subject: [PATCH] use_partition_alloc = false support

This allows Chrome to build and run when use_partition_alloc = false.

Bug: 1469120
Change-Id: Ibf9e480c543ea80302b3f4679c590508d282350f
---
oteodoro:  updated for 128.0.6613.137
patch from https://chromium-review.googlesource.com/c/chromium/src/+/5206810
cr issue https://issues.chromium.org/issues/40277359

diff --git a/base/allocator/partition_alloc_features.h b/base/allocator/partition_alloc_features.h
index 332c597..604afbb 100644
--- a/base/allocator/partition_alloc_features.h
+++ b/base/allocator/partition_alloc_features.h
@@ -196,7 +196,9 @@
     kEnableConfigurableThreadCacheMinCachedMemoryForPurging);
 BASE_EXPORT int GetThreadCacheMinCachedMemoryForPurgingBytes();
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
 BASE_EXPORT BASE_DECLARE_FEATURE(kPartitionAllocDisableBRPInBufferPartition);
+#endif
 
 // This feature is additionally gated behind a buildflag because
 // pool offset freelists cannot be represented when PartitionAlloc uses
diff --git a/base/allocator/partition_alloc_support.h b/base/allocator/partition_alloc_support.h
index c8dc4ad..0f31c642 100644
--- a/base/allocator/partition_alloc_support.h
+++ b/base/allocator/partition_alloc_support.h
@@ -17,6 +17,8 @@
 #include "base/task/sequenced_task_runner.h"
 #include "base/thread_annotations.h"
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
+
 namespace base::allocator {
 
 #if BUILDFLAG(USE_STARSCAN)
@@ -119,4 +121,6 @@
 
 }  // namespace base::allocator
 
+#endif  // BUILDFLAG(USE_PARTITION_ALLOC)
+
 #endif  // BASE_ALLOCATOR_PARTITION_ALLOC_SUPPORT_H_
diff --git a/chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc b/chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
index 92c609a..98b3b5f 100644
--- a/chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
+++ b/chrome/browser/metrics/chrome_browser_main_extra_parts_metrics.cc
@@ -977,6 +977,7 @@
 
 #endif  // BUILDFLAG(IS_WIN)
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   // Register synthetic Finch trials proposed by PartitionAlloc.
   auto pa_trials = base::allocator::ProposeSyntheticFinchTrials();
   for (auto& trial : pa_trials) {
@@ -984,6 +985,7 @@
     ChromeMetricsServiceAccessor::RegisterSyntheticFieldTrial(trial_name,
                                                               group_name);
   }
+#endif
 
 #if BUILDFLAG(IS_ANDROID)
   // Set up experiment for 64-bit Clank (incl. GWS visible IDs, so that the
diff --git a/content/app/content_main_runner_impl.cc b/content/app/content_main_runner_impl.cc
index bf6ea29..f8eb214 100644
--- a/content/app/content_main_runner_impl.cc
+++ b/content/app/content_main_runner_impl.cc
@@ -625,8 +625,10 @@
   std::string process_type =
       command_line->GetSwitchValueASCII(switches::kProcessType);
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::PartitionAllocSupport::Get()->ReconfigureAfterZygoteFork(
       process_type);
+#endif
 
   CreateChildThreadPool(process_type);
 
@@ -642,8 +644,10 @@
   }
   delegate->PostEarlyInitialization(invoked_in_child);
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::PartitionAllocSupport::Get()
       ->ReconfigureAfterFeatureListInit(process_type);
+#endif
 
   // Ensure media library is initialized after feature list initialization.
   media::InitializeMediaLibrary();
@@ -880,8 +884,10 @@
   std::string process_type =
       command_line.GetSwitchValueASCII(switches::kProcessType);
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::PartitionAllocSupport::Get()->ReconfigureEarlyish(
       process_type);
+#endif
 
 #if BUILDFLAG(IS_WIN)
   if (command_line.HasSwitch(switches::kDeviceScaleFactor)) {
@@ -1096,8 +1102,10 @@
       delegate_->PostEarlyInitialization(
           ContentMainDelegate::InvokedInChildProcess());
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
       base::allocator::PartitionAllocSupport::Get()
           ->ReconfigureAfterFeatureListInit(process_type);
+#endif
     }
 
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
@@ -1281,10 +1289,12 @@
   }
 
   // No specified process type means this is the Browser process.
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::PartitionAllocSupport::Get()
       ->ReconfigureAfterFeatureListInit("");
   base::allocator::PartitionAllocSupport::Get()->ReconfigureAfterTaskRunnerInit(
       "");
+#endif
 
   if (start_minimal_browser) {
     DVLOG(0) << "Chrome is running in minimal browser mode.";
diff --git a/content/gpu/gpu_main.cc b/content/gpu/gpu_main.cc
index 3f18e42..d8c1618 100644
--- a/content/gpu/gpu_main.cc
+++ b/content/gpu/gpu_main.cc
@@ -423,8 +423,10 @@
   base::android::MeminfoDumpProvider::Initialize();
 #endif
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::PartitionAllocSupport::Get()->ReconfigureAfterTaskRunnerInit(
       switches::kGpuProcess);
+#endif
 
   base::HighResolutionTimerManager hi_res_timer_manager;
 
diff --git a/content/renderer/renderer_main.cc b/content/renderer/renderer_main.cc
index 47d0eed..cee66af 100644
--- a/content/renderer/renderer_main.cc
+++ b/content/renderer/renderer_main.cc
@@ -348,8 +348,10 @@
     mojo::BeginRandomMojoDelays();
 #endif
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
     base::allocator::PartitionAllocSupport::Get()
         ->ReconfigureAfterTaskRunnerInit(switches::kRendererProcess);
+#endif
 
     base::HighResolutionTimerManager hi_res_timer_manager;
 
diff --git a/content/utility/utility_main.cc b/content/utility/utility_main.cc
index ecb688e..70fadd4 100644
--- a/content/utility/utility_main.cc
+++ b/content/utility/utility_main.cc
@@ -428,8 +428,10 @@
   }
 #endif
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::PartitionAllocSupport::Get()->ReconfigureAfterTaskRunnerInit(
       switches::kUtilityProcess);
+#endif
 
   run_loop.Run();
 
diff --git a/gin/v8_platform.cc b/gin/v8_platform.cc
index a31b05d..1bef0d05 100644
--- a/gin/v8_platform.cc
+++ b/gin/v8_platform.cc
@@ -355,6 +355,10 @@
   } allocator;
   return &allocator;
 }
+#else   // BUILDFLAG(USE_PARTITION_ALLOC)
+v8::PageAllocator* V8Platform::GetPageAllocator() {
+  return nullptr;
+}
 #endif  // BUILDFLAG(USE_PARTITION_ALLOC)
 
 std::shared_ptr<v8::TaskRunner> V8Platform::GetForegroundTaskRunner(
diff --git a/third_party/blink/renderer/platform/instrumentation/partition_alloc_memory_dump_provider.cc b/third_party/blink/renderer/platform/instrumentation/partition_alloc_memory_dump_provider.cc
index 644aefb..a2f53015 100644
--- a/third_party/blink/renderer/platform/instrumentation/partition_alloc_memory_dump_provider.cc
+++ b/third_party/blink/renderer/platform/instrumentation/partition_alloc_memory_dump_provider.cc
@@ -5,6 +5,7 @@
 #include "third_party/blink/renderer/platform/instrumentation/partition_alloc_memory_dump_provider.h"
 
 #include "base/allocator/partition_allocator/src/partition_alloc/partition_alloc.h"
+#include "base/allocator/partition_allocator/src/partition_alloc/partition_alloc_buildflags.h"
 #include "base/format_macros.h"
 #include "base/strings/stringprintf.h"
 #include "base/trace_event/malloc_dump_provider.h"
@@ -14,7 +15,9 @@
 
 namespace blink {
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
 const char kPartitionAllocDumpName[] = "partition_alloc";
+#endif
 
 PartitionAllocMemoryDumpProvider* PartitionAllocMemoryDumpProvider::Instance() {
   DEFINE_STATIC_LOCAL(PartitionAllocMemoryDumpProvider, instance, ());
@@ -24,6 +27,7 @@
 bool PartitionAllocMemoryDumpProvider::OnMemoryDump(
     const base::trace_event::MemoryDumpArgs& args,
     base::trace_event::ProcessMemoryDump* memory_dump) {
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   using base::trace_event::MemoryDumpLevelOfDetail;
 
   MemoryDumpLevelOfDetail level_of_detail = args.level_of_detail;
@@ -49,6 +53,7 @@
       "size", "bytes", partition_stats_dumper.total_active_bytes());
   memory_dump->AddOwnershipEdge(allocated_objects_dump->guid(),
                                 partitions_dump->guid());
+#endif
 
   return true;
 }
--- a/base/allocator/partition_allocator/partition_alloc.gni.orig	2024-09-15 19:11:30.176700299 -0700
+++ b/base/allocator/partition_allocator/partition_alloc.gni	2024-09-15 19:12:19.671894246 -0700
@@ -361,7 +361,7 @@ assert(!use_asan_backup_ref_ptr || use_r
 # dependencies that use partition_allocator are compiled in AOSP against a
 # version of glibc that does not include pkeys syscall numbers.
 is_pkeys_available =
-    (is_linux || is_chromeos) && current_cpu == "x64" && !is_cronet_build
+    use_partition_alloc && (is_linux || is_chromeos) && current_cpu == "x64" && !is_cronet_build
 declare_args() {
   enable_pkeys = is_pkeys_available
 }
--- a/content/renderer/render_thread_impl.cc.orig	2024-09-15 19:11:30.200699908 -0700
+++ b/content/renderer/render_thread_impl.cc	2024-09-15 19:13:30.022748527 -0700
@@ -1729,7 +1729,9 @@ void RenderThreadImpl::OnRendererBackgro
   UpdateForegroundCrashKey(/*foreground=*/false);
   main_thread_scheduler_->SetRendererBackgrounded(true);
   discardable_memory_allocator_->OnBackgrounded();
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::PartitionAllocSupport::Get()->OnBackgrounded();
+#endif
   blink::OnProcessBackgrounded();
 }
 
@@ -1737,8 +1739,10 @@ void RenderThreadImpl::OnRendererForegro
   UpdateForegroundCrashKey(/*foreground=*/true);
   main_thread_scheduler_->SetRendererBackgrounded(false);
   discardable_memory_allocator_->OnForegrounded();
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::PartitionAllocSupport::Get()->OnForegrounded(
       MainFrameCounter::has_main_frame());
+#endif
   blink::OnProcessForegrounded();
   process_foregrounded_count_++;
 }
--- a/gin/public/v8_platform.h.orig	2024-09-15 19:11:30.200699908 -0700
+++ b/gin/public/v8_platform.h	2024-09-15 19:14:37.253624054 -0700
@@ -26,12 +26,12 @@ class GIN_EXPORT V8Platform : public v8:
 
 // v8::Platform implementation.
 // Some configurations do not use page_allocator.
-#if PA_BUILDFLAG(USE_PARTITION_ALLOC)
   // GetPageAllocator returns gin::PageAllocator instead of v8::PageAllocator,
   // so we can be sure that the allocator used employs security features such as
   // enabling Arm's Branch Target Instructions for executable pages. This is
   // verified in the tests for gin::PageAllocator.
-  PageAllocator* GetPageAllocator() override;
+  v8::PageAllocator* GetPageAllocator() override;
+#if PA_BUILDFLAG(USE_PARTITION_ALLOC)
 #if PA_BUILDFLAG(ENABLE_THREAD_ISOLATION)
   ThreadIsolatedAllocator* GetThreadIsolatedAllocator() override;
 #endif
--- a/third_party/blink/renderer/platform/wtf/allocator/partitions.cc.orig	2024-09-10 11:42:23.525555100 -0700
+++ b/third_party/blink/renderer/platform/wtf/allocator/partitions.cc	2024-09-15 19:15:25.012815463 -0700
@@ -96,8 +96,12 @@ partition_alloc::PartitionOptions Partit
   const auto brp_setting =
       enable_brp ? PartitionOptions::kEnabled : PartitionOptions::kDisabled;
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   const bool enable_memory_tagging = base::allocator::PartitionAllocSupport::
       ShouldEnableMemoryTaggingInRendererProcess();
+#else
+  const bool enable_memory_tagging = false;
+#endif
   const auto memory_tagging =
       enable_memory_tagging ? partition_alloc::PartitionOptions::kEnabled
                             : partition_alloc::PartitionOptions::kDisabled;
@@ -142,11 +146,13 @@ bool Partitions::InitializeOnce() {
 
   auto options = PartitionOptionsFromFeatures();
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   const auto actual_brp_setting = options.backup_ref_ptr;
   if (base::FeatureList::IsEnabled(
           base::features::kPartitionAllocDisableBRPInBufferPartition)) {
     options.backup_ref_ptr = PartitionOptions::kDisabled;
   }
+#endif
 
   static base::NoDestructor<partition_alloc::PartitionAllocator>
       buffer_allocator(options);
@@ -156,10 +162,12 @@ bool Partitions::InitializeOnce() {
     buffer_root_->EnableLargeEmptySlotSpanRing();
   }
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   if (base::FeatureList::IsEnabled(
           base::features::kPartitionAllocDisableBRPInBufferPartition)) {
     options.backup_ref_ptr = actual_brp_setting;
   }
+#endif
 
   // FastMalloc doesn't provide isolation, only a (hopefully fast) malloc().
   // When PartitionAlloc is already the malloc() implementation, there is
@@ -214,7 +222,9 @@ void Partitions::StartMemoryReclaimer(
   CHECK(IsMainThread());
   DCHECK(initialized_);
 
+#if BUILDFLAG(USE_PARTITION_ALLOC)
   base::allocator::StartMemoryReclaimer(task_runner);
+#endif
 }
 
 // static

